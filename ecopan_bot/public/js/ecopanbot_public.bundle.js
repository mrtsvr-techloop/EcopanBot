(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all5) => {
    for (var name in all5)
      __defProp(target, name, { get: all5[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // ../ecopan_bot/node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../ecopan_bot/node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element4 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element4._store = {};
              Object.defineProperty(element4._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element4, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element4, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element4.props);
                Object.freeze(element4);
              }
            }
            return element4;
          };
          function createElement14(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement7(element4, config2, children) {
            if (element4 === null || element4 === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element4 + ".");
            }
            var propName;
            var props = assign({}, element4.props);
            var key = element4.key;
            var ref = element4.ref;
            var self2 = element4._self;
            var source = element4._source;
            var owner = element4._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element4.type && element4.type.defaultProps) {
                defaultProps2 = element4.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element4.type, key, ref, self2, source, owner, props);
          }
          function isValidElement5(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape3(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text6) {
            return text6.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element4, index2) {
            if (typeof element4 === "object" && element4 !== null && element4.key != null) {
              {
                checkKeyStringCoercion(element4.key);
              }
              return escape3("" + element4.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement5(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement5(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext11(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error3) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef4(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext11(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState11(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef14(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect18(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create2, deps);
          }
          function useInsertionEffect3(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create2, deps);
          }
          function useLayoutEffect3(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create2, deps);
          }
          function useCallback8(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo16(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create2, deps);
          }
          function useImperativeHandle(ref, create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create2, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId5() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
                  c--;
                }
                for (; s2 >= 1 && c >= 0; s2--, c--) {
                  if (sampleLines[s2] !== controlLines[c]) {
                    if (s2 !== 1 || c !== 1) {
                      do {
                        s2--;
                        c--;
                        if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element4) {
            {
              if (element4) {
                var owner = element4._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element4.type, element4._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element4) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element4);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element4);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element4) {
            {
              if (element4) {
                var owner = element4._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element4.type, element4._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element4, parentType) {
            if (!element4._store || element4._store.validated || element4.key != null) {
              return;
            }
            element4._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element4 && element4._owner && element4._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element4._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element4);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element4) {
            {
              var type = element4.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element4.props, "prop", name, element4);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys3 = Object.keys(fragment2.props);
              for (var i = 0; i < keys3.length; i++) {
                var key = keys3[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element4 = createElement14.apply(this, arguments);
            if (element4 == null) {
              return element4;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element4);
            } else {
              validatePropTypes(element4);
            }
            return element4;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element4, props, children) {
            var newElement = cloneElement7.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error3) {
                popActScope(prevActScopeDepth);
                throw error3;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error3) {
                      popActScope(prevActScopeDepth);
                      reject(error3);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error3) {
                  reject(error3);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error3) {
                  queue = queue.slice(i + 1);
                  throw error3;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children3 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children3;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext11;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef4;
          exports.isValidElement = isValidElement5;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback8;
          exports.useContext = useContext11;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect18;
          exports.useId = useId5;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo16;
          exports.useReducer = useReducer2;
          exports.useRef = useRef14;
          exports.useState = useState11;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../ecopan_bot/node_modules/react/index.js
  var require_react = __commonJS({
    "../ecopan_bot/node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../ecopan_bot/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../ecopan_bot/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node2) {
            var index2 = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index2);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index2 = i;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index2 = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node2;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node2;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node2) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node2;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay2 = options.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime2 = currentTime + delay2;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../ecopan_bot/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../ecopan_bot/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../ecopan_bot/node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../ecopan_bot/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React17 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React17.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment4 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              name,
              null,
              false,
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              name,
              null,
              false,
              false
            );
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              name,
              null,
              false,
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              name,
              null,
              false,
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              name.toLowerCase(),
              null,
              false,
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              null,
              false,
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              false,
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              attributeName.toLowerCase(),
              null,
              true,
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
                  c--;
                }
                for (; s2 >= 1 && c >= 0; s2--, c--) {
                  if (sampleLines[s2] !== controlLines[c]) {
                    if (s2 !== 1 || c !== 1) {
                      do {
                        s2--;
                        c--;
                        if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment4:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get4 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get4.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track2(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element4, props) {
            var node2 = element4;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element4, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element4;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element4, props) {
            var node2 = element4;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element4, props) {
            var node2 = element4;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element4, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || node2.value != value) {
                  node2.value = toString2(value);
                }
              } else if (node2.value !== toString2(value)) {
                node2.value = toString2(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element4, props, isHydrating2) {
            var node2 = element4;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element4, props) {
            var node2 = element4;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
              if (value == null) {
                node2.defaultValue = toString2(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString2(value)) {
                node2.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element4, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React17.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element4, props) {
            if (props.value != null) {
              element4.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element4, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element4, props) {
            var node2 = element4;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element4, props) {
            var node2 = element4;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element4, props) {
            var node2 = element4;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element4, props) {
            var node2 = element4;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element4, props) {
            var node2 = element4;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element4, props) {
            var node2 = element4;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element4, props) {
            var node2 = element4;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString2(defaultValue);
            }
          }
          function postMountWrapper$3(element4, props) {
            var node2 = element4;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element4, props) {
            updateWrapper$1(element4, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html4) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html4.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html4;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text6) {
            if (text6) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text6;
                return;
              }
            }
            node2.textContent = text6;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string3) {
              return string3.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name,
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles2) {
            var style3 = node2.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style3.setProperty(styleName, styleValue);
              } else {
                style3[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get3(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get3(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root4, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root4, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root4, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root4.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root4, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root4, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root4) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root4);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error2("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map2 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map2.set(lane, label);
                lane *= 2;
              }
              return map2;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root4, wipLanes) {
            var pendingLanes = root4.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root4.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root4.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root4, lanes) {
            var eventTimes = root4.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root4, currentTime) {
            var pendingLanes = root4.pendingLanes;
            var suspendedLanes = root4.suspendedLanes;
            var pingedLanes = root4.pingedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root4.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root4) {
            return getHighestPriorityLanes(root4.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root4) {
            var everythingButOffscreen = root4.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root4, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root4, lanes) {
            return (lanes & root4.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root4, updateLane, eventTime) {
            root4.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root4.suspendedLanes = NoLanes;
              root4.pingedLanes = NoLanes;
            }
            var eventTimes = root4.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root4, suspendedLanes) {
            root4.suspendedLanes |= suspendedLanes;
            root4.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root4.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root4, pingedLanes, eventTime) {
            root4.pingedLanes |= root4.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root4, remainingLanes) {
            var noLongerPendingLanes = root4.pendingLanes & ~remainingLanes;
            root4.pendingLanes = remainingLanes;
            root4.suspendedLanes = NoLanes;
            root4.pingedLanes = NoLanes;
            root4.expiredLanes &= remainingLanes;
            root4.mutableReadLanes &= remainingLanes;
            root4.entangledLanes &= remainingLanes;
            var entanglements = root4.entanglements;
            var eventTimes = root4.eventTimes;
            var expirationTimes = root4.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root4, entangledLanes) {
            var rootEntangledLanes = root4.entangledLanes |= entangledLanes;
            var entanglements = root4.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (lane & entangledLanes | entanglements[index3] & entangledLanes) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root4, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root4.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root4, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root4, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root4.pendingUpdatersLaneMap;
            var memoizedUpdaters = root4.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root4, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root4) {
            var currentState = root4.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map2.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root4 = nearestMounted.stateNode;
                  if (isRootDehydrated(root4)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root3 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root3 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root3 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root3) {
              return root3.value;
            }
            return root3.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize5 = Interface[_propName];
                if (normalize5) {
                  this[_propName] = normalize5(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode2 = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode2 = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode2;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode2 && documentMode2 > 8 && documentMode2 <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element4 = document.createElement("div");
              element4.setAttribute(eventName, "return;");
              isSupported = typeof element4[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state2 = node2._wrapperState;
            if (!state2 || !state2.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is2(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root4, offset) {
            var node2 = getLeafNode(root4);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length += node2.nodeValue.length;
                  }
                  if ((next = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node2.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range2 = doc.createRange();
              range2.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range2);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range2.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range2);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element4 = getActiveElement();
            while (element4 instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element4)) {
                win = element4.contentWindow;
              } else {
                return element4;
              }
              element4 = getActiveElement(win.document);
            }
            return element4;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style2 = {};
          if (canUseDOM) {
            style2 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error2("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html4) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html4;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement14(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text6, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text6);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes2 = domElement.attributes;
              for (var _i = 0; _i < attributes2.length; _i++) {
                var name = attributes2[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes2[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text6, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text6;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text6) {
            {
              if (text6 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text6, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root4 = rootContainerInstance.documentElement;
                namespace = root4 ? root4.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string3 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string3, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement14(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string3 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string3, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text6, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text6, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text6, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error3) {
            setTimeout(function() {
              throw error3;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style3 = instance.style;
            if (typeof style3.setProperty === "function") {
              style3.setProperty("display", "none", "important");
            } else {
              style3.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text6) {
            textInstance.nodeValue = text6;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              if (container2.documentElement) {
                container2.removeChild(container2.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text6) {
            if (text6 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text6, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text6);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text6, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text6, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text6, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text6, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text6) {
            {
              warnForInsertedHydratedText(parentContainer, text6);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text6) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text6);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text6, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text6);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element4) {
            {
              if (element4) {
                var owner = element4._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element4.type, element4._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element4) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element4);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element4);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index2 < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push2(cursor, value, fiber) {
            index2++;
            valueStack[index2] = cursor.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node2.type;
                    if (isContextProvider(Component2)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error3;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id4 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id4.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id4 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id4;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number3) {
            return 32 - clz32(number3);
          }
          function getLeadingBit(id4) {
            return 1 << getBitLength(id4) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text6 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text6);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text6 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text6);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error3) {
            if (hydrationErrors === null) {
              hydrationErrors = [error3];
            } else {
              hydrationErrors.push(error3);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps2 = Component2.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list4 = fiber.dependencies;
              if (list4 !== null) {
                nextFiber = fiber.child;
                var dependency = list4.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list4.lanes = mergeLanes(list4.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root4 = node2.stateNode;
              return root4;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root4, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect2 = effects[i];
                var callback = effect2.callback;
                if (callback !== null) {
                  effect2.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React17.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get3(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root4 = enqueueUpdate(fiber, update, lane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitions(root4, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state2 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state2 === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element4) {
            var mixedRef = element4.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element4._owner && element4._self && element4._owner.stateNode !== element4._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element4._owner) {
                var owner = element4._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element4._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element4, lanes) {
              var elementType = element4.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element4.props.children, lanes, element4.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element4) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element4.props);
                  existing.ref = coerceRef(returnFiber, current2, element4);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element4._source;
                    existing._debugOwner = element4._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element4, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element4);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment2, lanes, key) {
              if (current2 === null || current2.tag !== Fragment4) {
                var created = createFiberFromFragment(fragment2, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element4, lanes) {
              var key = element4.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element4.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment4) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element4.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element4._source;
                        existing._debugOwner = element4._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element4) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element4.props);
                      _existing.ref = coerceRef(returnFiber, child, element4);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element4._source;
                        _existing._debugOwner = element4._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element4.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element4.props.children, returnFiber.mode, lanes, element4.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element4, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element4);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state2 = node2.memoizedState;
                if (state2 !== null) {
                  var dehydrated = state2.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root4, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root4.mutableSourceEagerHydrationData == null) {
              root4.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root4.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table2 += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error2("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state2, action) {
            return typeof action === "function" ? action(state2) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error2("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error2("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root4 = getWorkInProgressRoot();
              if (root4 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root4, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error3) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect2 = {
              tag,
              create: create2,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect2.next = effect2;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect2.next = effect2;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect2;
                effect2.next = firstEffect;
                componentUpdateQueue.lastEffect = effect2;
              }
            }
            return effect2;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
            }
          }
          function updateEffect(create2, deps) {
            return updateEffectImpl(Passive, Passive$1, create2, deps);
          }
          function mountInsertionEffect(create2, deps) {
            return mountEffectImpl(Update, Insertion, create2, deps);
          }
          function updateInsertionEffect(create2, deps) {
            return updateEffectImpl(Update, Insertion, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root4 = getWorkInProgressRoot();
            var identifierPrefix = root4.identifierPrefix;
            var id4;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id4 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id4 += "H" + localId.toString(32);
              }
              id4 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id4 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id4;
            return id4;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id4 = hook.memoizedState;
            return id4;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root4 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root4 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
                entangleTransitionUpdate(root4, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root4, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root4.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root4, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    root4.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root4 = parentFiber.stateNode;
                    if (root4 !== null) {
                      root4.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root4, wakeable, lanes) {
            var pingCache = root4.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root4.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root4, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root4, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root4, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root4, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root4, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root4, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root4, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root4, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state2 = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state2, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root4 = workInProgress2.stateNode;
            if (root4.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root4.pendingContext, root4.pendingContext !== root4.context);
            } else if (root4.context) {
              pushTopLevelContextObject(workInProgress2, root4.context, false);
            }
            pushHostContainer(workInProgress2, root4.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root4 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component2 = init(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode2);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode2, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode2, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode2 = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode2 & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error3;
                if (message) {
                  error3 = new Error(message);
                } else {
                  error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error3, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root4 = getWorkInProgressRoot();
                if (root4 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root4, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root4, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state2 = node2.memoizedState;
                if (state2 !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    _tail,
                    null,
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    null,
                    null,
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root4 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state2 = workInProgress2.memoizedState;
                if (state2 !== null) {
                  if (state2.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment4:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment4:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root4 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root4 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error3) {
            {
              invokeGuardedCallback(null, function() {
                throw error3;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error3) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error3);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root4, firstChild) {
            focusedInstanceHandle = prepareForCommit(root4.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root4 = finishedWork.stateNode;
                    clearContainer(root4.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                if ((effect2.tag & flags) === flags) {
                  var destroy = effect2.destroy;
                  effect2.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect2 = effect2.next;
              } while (effect2 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect2 = firstEffect;
              do {
                if ((effect2.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create2 = effect2.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect2.destroy = create2();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect2.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect2.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect2.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect2 = effect2.next;
              } while (effect2 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id4 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id4, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root4 = parentFiber.stateNode;
                            root4.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root4 = parentFiber.stateNode;
                              root4.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root4, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root4, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect2 = firstEffect;
                      do {
                        var _effect = effect2, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect2 = effect2.next;
                      } while (effect2 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root4, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root4);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root4, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root4, parentFiber, childToDelete);
                } catch (error3) {
                  captureCommitPhaseError(childToDelete, parentFiber, error3);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root4);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root4, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root4.containerInfo);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root4, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root4, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root4, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root4;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root4, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root4, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      root4,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root4, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root4, current2, fiber, committedLanes);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root4, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root4, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root4, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root4, fiber, committedLanes, committedTransitions);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error2("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition3 = ReactCurrentBatchConfig$3.transition;
                if (!transition3._updatedFibers) {
                  transition3._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition3._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode2 = fiber.mode;
            if ((mode2 & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root4, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error2("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root4, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root4 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root4, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root4 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root4, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root4, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root4, lane, eventTime) {
            var current2 = root4.current;
            current2.lanes = lane;
            markRootUpdated(root4, lane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root4, currentTime) {
            var existingCallbackNode = root4.callbackNode;
            markStarvedLanesAsExpired(root4, currentTime);
            var nextLanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root4.callbackNode = null;
              root4.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root4.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root4.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root4));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root4));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root4));
            }
            root4.callbackPriority = newCallbackPriority;
            root4.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root4, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root4.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root4.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root4, root4 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root4, lanes) && !includesExpiredLane(root4, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root4, lanes) : renderRootSync(root4, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root4, NoLanes);
                markRootSuspended$1(root4, lanes);
                ensureRootIsScheduled(root4, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root4, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root4, lanes);
                var finishedWork = root4.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root4, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root4, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root4, NoLanes);
                    markRootSuspended$1(root4, lanes);
                    ensureRootIsScheduled(root4, now());
                    throw _fatalError;
                  }
                }
                root4.finishedWork = finishedWork;
                root4.finishedLanes = lanes;
                finishConcurrentRender(root4, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root4, now());
            if (root4.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root4);
            }
            return null;
          }
          function recoverFromConcurrentError(root4, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root4)) {
              var rootWorkInProgress = prepareFreshStack(root4, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root4.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root4, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root4, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root4, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root4.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root4, suspendedLanes);
                      break;
                    }
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root4, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root4, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root4.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root4, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks2 = updateQueue.stores;
                  if (checks2 !== null) {
                    for (var i = 0; i < checks2.length; i++) {
                      var check = checks2[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error3) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root4, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root4, suspendedLanes);
          }
          function performSyncWorkOnRoot(root4) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root4, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root4, now());
              return null;
            }
            var exitStatus = renderRootSync(root4, lanes);
            if (root4.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root4);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root4, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root4, NoLanes);
              markRootSuspended$1(root4, lanes);
              ensureRootIsScheduled(root4, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root4.current.alternate;
            root4.finishedWork = finishedWork;
            root4.finishedLanes = lanes;
            commitRoot(root4, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root4, now());
            return null;
          }
          function flushRoot(root4, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root4, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root4, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root4, lanes) {
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            var timeoutHandle = root4.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root4.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root4;
            var rootWorkInProgress = createWorkInProgress(root4.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root4, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root4, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error3) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error3];
            } else {
              workInProgressRootConcurrentErrors.push(error3);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root4, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root4 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root4.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root4, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root4, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root4, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root4, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root4, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root4, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root4, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root4.finishedWork;
            var lanes = root4.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root4.finishedWork = null;
            root4.finishedLanes = NoLanes;
            if (finishedWork === root4.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root4.callbackNode = null;
            root4.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root4, remainingLanes);
            if (root4 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root4, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root4, finishedWork, lanes);
              resetAfterCommit(root4.containerInfo);
              root4.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root4, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root4.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root4;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root4.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root4.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root4.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root4, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root4.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root4.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root4.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root4 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root4;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root4 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root4.current);
            commitPassiveMountEffects(root4, root4.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root4, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root4.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root4 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root4;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root4);
            {
              var stateNode = root4.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root4 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root4 !== null) {
              markRootUpdated(root4, SyncLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root4 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root4 !== null) {
                    markRootUpdated(root4, SyncLane, eventTime);
                    ensureRootIsScheduled(root4, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root4, wakeable, pingedLanes) {
            var pingCache = root4.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root4, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root4);
            if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root4, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root4, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root4 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root4 !== null) {
              markRootUpdated(root4, retryLane, eventTime);
              ensureRootIsScheduled(root4, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root4, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root4.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root4, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root4) {
            {
              if (root4.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element4) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element4.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root4, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root4, element4) {
            {
              if (root4.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element4, root4, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root4, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root4.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode2) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode2;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode2) {
            return new FiberNode(tag, pendingProps, key, mode2);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode2;
            if (tag === ConcurrentRoot) {
              mode2 = ConcurrentMode;
              if (isStrictMode === true) {
                mode2 |= StrictLegacyMode;
                {
                  mode2 |= StrictEffectsMode;
                }
              }
            } else {
              mode2 = NoMode;
            }
            if (isDevToolsPresent) {
              mode2 |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode2);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode2 |= StrictLegacyMode;
                    if ((mode2 & ConcurrentMode) !== NoMode) {
                      mode2 |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode2);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element4, mode2, lanes) {
            var owner = null;
            {
              owner = element4._owner;
            }
            var type = element4.type;
            var key = element4.key;
            var pendingProps = element4.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
            {
              fiber._debugSource = element4._source;
              fiber._debugOwner = element4._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode2, lanes, key) {
            var fiber = createFiber(Fragment4, elements, key, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content3, mode2, lanes) {
            var fiber = createFiber(HostText, content3, null, mode2);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode2, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode2);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root4 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root4.current = uninitializedFiber;
            uninitializedFiber.stateNode = root4;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root4;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get3(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get3(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys3 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys3);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root4 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root4.context = getContextForSubtree(null);
            var current2 = root4.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root4, lane, eventTime);
            return root4;
          }
          function updateContainer(element4, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element4);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context;
            } else {
              container2.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element: element4
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root4 = enqueueUpdate(current$1, update, lane);
            if (root4 !== null) {
              scheduleUpdateOnFiber(root4, current$1, lane, eventTime);
              entangleTransitions(root4, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root4 = fiber.stateNode;
                if (isRootDehydrated(root4)) {
                  var lanes = getHighestPriorityPendingLanes(root4);
                  flushRoot(root4, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root5 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root5 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root5, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root4 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root4 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root4, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path3, index3) {
              var key = path3[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === path3.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path3, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path3) {
              return copyWithDeleteImpl(obj, path3, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path3, index3, value) {
              if (index3 >= path3.length) {
                return value;
              }
              var key = path3[index3];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path3, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path3, value) {
              return copyWithSetImpl(obj, path3, 0, value);
            };
            var findHook = function(fiber, id4) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id4 > 0) {
                currentHook2 = currentHook2.next;
                id4--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id4, path3, value) {
              var hook = findHook(fiber, id4);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path3, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id4, path3) {
              var hook = findHook(fiber, id4);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path3);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id4, oldPath, newPath) {
              var hook = findHook(fiber, id4);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root4 !== null) {
                  scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path3, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path3, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path3) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path3);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root4 !== null) {
                scheduleUpdateOnFiber(root4, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error3) {
            console["error"](error3);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root4 = this._internalRoot;
            if (root4 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error2("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root4.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root4.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root4, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root4 = this._internalRoot;
            if (root4 !== null) {
              this._internalRoot = null;
              var container2 = root4.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root4, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot2(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root4 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root4);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root4 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root4.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root4, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root4);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              var root4 = createHydrationContainer(
                initialChildren,
                callback,
                container2,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container2._reactRootContainer = root4;
              markContainerAsRoot(root4.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root4;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container2,
                LegacyRoot,
                null,
                false,
                false,
                "",
                noopOnRecoverableError
              );
              container2._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root4;
            if (!maybeRoot) {
              root4 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
            } else {
              root4 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root4);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root4, parentComponent, callback);
            }
            return getPublicRootInstance(root4);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element4, container2, callback) {
            {
              error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element4, container2, true, callback);
          }
          function render(element4, container2, callback) {
            {
              error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element4, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element4, containerNode, callback) {
            {
              error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element4, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element4, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element4, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../ecopan_bot/node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../ecopan_bot/node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../ecopan_bot/node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../ecopan_bot/node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h2, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h2, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js
  var require_emotion_sheet_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function sheetForTag(tag) {
        if (tag.sheet) {
          return tag.sheet;
        }
        for (var i = 0; i < document.styleSheets.length; i++) {
          if (document.styleSheets[i].ownerNode === tag) {
            return document.styleSheets[i];
          }
        }
      }
      function createStyleElement(options) {
        var tag = document.createElement("style");
        tag.setAttribute("data-emotion", options.key);
        if (options.nonce !== void 0) {
          tag.setAttribute("nonce", options.nonce);
        }
        tag.appendChild(document.createTextNode(""));
        tag.setAttribute("data-s", "");
        return tag;
      }
      var StyleSheet = /* @__PURE__ */ function() {
        function StyleSheet2(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet2.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet2;
      }();
      exports.StyleSheet = StyleSheet;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js
  var require_emotion_sheet_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_sheet_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/stylis/dist/umd/stylis.js
  var require_stylis = __commonJS({
    "../ecopan_bot/node_modules/stylis/dist/umd/stylis.js"(exports, module) {
      (function(e, r2) {
        typeof exports === "object" && typeof module !== "undefined" ? r2(exports) : typeof define === "function" && define.amd ? define(["exports"], r2) : (e = e || self, r2(e.stylis = {}));
      })(exports, function(e) {
        "use strict";
        var r2 = "-ms-";
        var a = "-moz-";
        var c = "-webkit-";
        var t2 = "comm";
        var n = "rule";
        var s2 = "decl";
        var i = "@page";
        var u = "@media";
        var o = "@import";
        var f = "@charset";
        var l = "@viewport";
        var p = "@supports";
        var h2 = "@document";
        var v = "@namespace";
        var d = "@keyframes";
        var b = "@font-face";
        var w = "@counter-style";
        var m = "@font-feature-values";
        var g = Math.abs;
        var k = String.fromCharCode;
        var $ = Object.assign;
        function x(e2, r3) {
          return A(e2, 0) ^ 45 ? (((r3 << 2 ^ A(e2, 0)) << 2 ^ A(e2, 1)) << 2 ^ A(e2, 2)) << 2 ^ A(e2, 3) : 0;
        }
        function E(e2) {
          return e2.trim();
        }
        function y(e2, r3) {
          return (e2 = r3.exec(e2)) ? e2[0] : e2;
        }
        function T(e2, r3, a2) {
          return e2.replace(r3, a2);
        }
        function O(e2, r3) {
          return e2.indexOf(r3);
        }
        function A(e2, r3) {
          return e2.charCodeAt(r3) | 0;
        }
        function M(e2, r3, a2) {
          return e2.slice(r3, a2);
        }
        function C(e2) {
          return e2.length;
        }
        function S(e2) {
          return e2.length;
        }
        function R(e2, r3) {
          return r3.push(e2), e2;
        }
        function z(e2, r3) {
          return e2.map(r3).join("");
        }
        e.line = 1;
        e.column = 1;
        e.length = 0;
        e.position = 0;
        e.character = 0;
        e.characters = "";
        function N(r3, a2, c2, t3, n2, s3, i2) {
          return { value: r3, root: a2, parent: c2, type: t3, props: n2, children: s3, line: e.line, column: e.column, length: i2, return: "" };
        }
        function P(e2, r3) {
          return $(N("", null, null, "", null, null, 0), e2, { length: -e2.length }, r3);
        }
        function j() {
          return e.character;
        }
        function U() {
          e.character = e.position > 0 ? A(e.characters, --e.position) : 0;
          if (e.column--, e.character === 10)
            e.column = 1, e.line--;
          return e.character;
        }
        function _() {
          e.character = e.position < e.length ? A(e.characters, e.position++) : 0;
          if (e.column++, e.character === 10)
            e.column = 1, e.line++;
          return e.character;
        }
        function F() {
          return A(e.characters, e.position);
        }
        function I() {
          return e.position;
        }
        function L(r3, a2) {
          return M(e.characters, r3, a2);
        }
        function D(e2) {
          switch (e2) {
            case 0:
            case 9:
            case 10:
            case 13:
            case 32:
              return 5;
            case 33:
            case 43:
            case 44:
            case 47:
            case 62:
            case 64:
            case 126:
            case 59:
            case 123:
            case 125:
              return 4;
            case 58:
              return 3;
            case 34:
            case 39:
            case 40:
            case 91:
              return 2;
            case 41:
            case 93:
              return 1;
          }
          return 0;
        }
        function K(r3) {
          return e.line = e.column = 1, e.length = C(e.characters = r3), e.position = 0, [];
        }
        function V(r3) {
          return e.characters = "", r3;
        }
        function W(r3) {
          return E(L(e.position - 1, Z(r3 === 91 ? r3 + 2 : r3 === 40 ? r3 + 1 : r3)));
        }
        function Y(e2) {
          return V(G(K(e2)));
        }
        function B(r3) {
          while (e.character = F())
            if (e.character < 33)
              _();
            else
              break;
          return D(r3) > 2 || D(e.character) > 3 ? "" : " ";
        }
        function G(r3) {
          while (_())
            switch (D(e.character)) {
              case 0:
                R(J(e.position - 1), r3);
                break;
              case 2:
                R(W(e.character), r3);
                break;
              default:
                R(k(e.character), r3);
            }
          return r3;
        }
        function H(r3, a2) {
          while (--a2 && _())
            if (e.character < 48 || e.character > 102 || e.character > 57 && e.character < 65 || e.character > 70 && e.character < 97)
              break;
          return L(r3, I() + (a2 < 6 && F() == 32 && _() == 32));
        }
        function Z(r3) {
          while (_())
            switch (e.character) {
              case r3:
                return e.position;
              case 34:
              case 39:
                if (r3 !== 34 && r3 !== 39)
                  Z(e.character);
                break;
              case 40:
                if (r3 === 41)
                  Z(r3);
                break;
              case 92:
                _();
                break;
            }
          return e.position;
        }
        function q(r3, a2) {
          while (_())
            if (r3 + e.character === 47 + 10)
              break;
            else if (r3 + e.character === 42 + 42 && F() === 47)
              break;
          return "/*" + L(a2, e.position - 1) + "*" + k(r3 === 47 ? r3 : _());
        }
        function J(r3) {
          while (!D(F()))
            _();
          return L(r3, e.position);
        }
        function Q(e2) {
          return V(X("", null, null, null, [""], e2 = K(e2), 0, [0], e2));
        }
        function X(e2, r3, a2, c2, t3, n2, s3, i2, u2) {
          var o2 = 0;
          var f2 = 0;
          var l2 = s3;
          var p2 = 0;
          var h3 = 0;
          var v2 = 0;
          var d2 = 1;
          var b2 = 1;
          var w2 = 1;
          var m2 = 0;
          var g2 = "";
          var $2 = t3;
          var x2 = n2;
          var E2 = c2;
          var y2 = g2;
          while (b2)
            switch (v2 = m2, m2 = _()) {
              case 40:
                if (v2 != 108 && A(y2, l2 - 1) == 58) {
                  if (O(y2 += T(W(m2), "&", "&\f"), "&\f") != -1)
                    w2 = -1;
                  break;
                }
              case 34:
              case 39:
              case 91:
                y2 += W(m2);
                break;
              case 9:
              case 10:
              case 13:
              case 32:
                y2 += B(v2);
                break;
              case 92:
                y2 += H(I() - 1, 7);
                continue;
              case 47:
                switch (F()) {
                  case 42:
                  case 47:
                    R(re(q(_(), I()), r3, a2), u2);
                    break;
                  default:
                    y2 += "/";
                }
                break;
              case 123 * d2:
                i2[o2++] = C(y2) * w2;
              case 125 * d2:
              case 59:
              case 0:
                switch (m2) {
                  case 0:
                  case 125:
                    b2 = 0;
                  case 59 + f2:
                    if (h3 > 0 && C(y2) - l2)
                      R(h3 > 32 ? ae(y2 + ";", c2, a2, l2 - 1) : ae(T(y2, " ", "") + ";", c2, a2, l2 - 2), u2);
                    break;
                  case 59:
                    y2 += ";";
                  default:
                    R(E2 = ee(y2, r3, a2, o2, f2, t3, i2, g2, $2 = [], x2 = [], l2), n2);
                    if (m2 === 123)
                      if (f2 === 0)
                        X(y2, r3, E2, E2, $2, n2, l2, i2, x2);
                      else
                        switch (p2 === 99 && A(y2, 3) === 110 ? 100 : p2) {
                          case 100:
                          case 109:
                          case 115:
                            X(e2, E2, E2, c2 && R(ee(e2, E2, E2, 0, 0, t3, i2, g2, t3, $2 = [], l2), x2), t3, x2, l2, i2, c2 ? $2 : x2);
                            break;
                          default:
                            X(y2, E2, E2, E2, [""], x2, 0, i2, x2);
                        }
                }
                o2 = f2 = h3 = 0, d2 = w2 = 1, g2 = y2 = "", l2 = s3;
                break;
              case 58:
                l2 = 1 + C(y2), h3 = v2;
              default:
                if (d2 < 1) {
                  if (m2 == 123)
                    --d2;
                  else if (m2 == 125 && d2++ == 0 && U() == 125)
                    continue;
                }
                switch (y2 += k(m2), m2 * d2) {
                  case 38:
                    w2 = f2 > 0 ? 1 : (y2 += "\f", -1);
                    break;
                  case 44:
                    i2[o2++] = (C(y2) - 1) * w2, w2 = 1;
                    break;
                  case 64:
                    if (F() === 45)
                      y2 += W(_());
                    p2 = F(), f2 = l2 = C(g2 = y2 += J(I())), m2++;
                    break;
                  case 45:
                    if (v2 === 45 && C(y2) == 2)
                      d2 = 0;
                }
            }
          return n2;
        }
        function ee(e2, r3, a2, c2, t3, s3, i2, u2, o2, f2, l2) {
          var p2 = t3 - 1;
          var h3 = t3 === 0 ? s3 : [""];
          var v2 = S(h3);
          for (var d2 = 0, b2 = 0, w2 = 0; d2 < c2; ++d2)
            for (var m2 = 0, k2 = M(e2, p2 + 1, p2 = g(b2 = i2[d2])), $2 = e2; m2 < v2; ++m2)
              if ($2 = E(b2 > 0 ? h3[m2] + " " + k2 : T(k2, /&\f/g, h3[m2])))
                o2[w2++] = $2;
          return N(e2, r3, a2, t3 === 0 ? n : u2, o2, f2, l2);
        }
        function re(e2, r3, a2) {
          return N(e2, r3, a2, t2, k(j()), M(e2, 2, -2), 0);
        }
        function ae(e2, r3, a2, c2) {
          return N(e2, r3, a2, s2, M(e2, 0, c2), M(e2, c2 + 1, -1), c2);
        }
        function ce(e2, t3, n2) {
          switch (x(e2, t3)) {
            case 5103:
              return c + "print-" + e2 + e2;
            case 5737:
            case 4201:
            case 3177:
            case 3433:
            case 1641:
            case 4457:
            case 2921:
            case 5572:
            case 6356:
            case 5844:
            case 3191:
            case 6645:
            case 3005:
            case 6391:
            case 5879:
            case 5623:
            case 6135:
            case 4599:
            case 4855:
            case 4215:
            case 6389:
            case 5109:
            case 5365:
            case 5621:
            case 3829:
              return c + e2 + e2;
            case 4789:
              return a + e2 + e2;
            case 5349:
            case 4246:
            case 4810:
            case 6968:
            case 2756:
              return c + e2 + a + e2 + r2 + e2 + e2;
            case 5936:
              switch (A(e2, t3 + 11)) {
                case 114:
                  return c + e2 + r2 + T(e2, /[svh]\w+-[tblr]{2}/, "tb") + e2;
                case 108:
                  return c + e2 + r2 + T(e2, /[svh]\w+-[tblr]{2}/, "tb-rl") + e2;
                case 45:
                  return c + e2 + r2 + T(e2, /[svh]\w+-[tblr]{2}/, "lr") + e2;
              }
            case 6828:
            case 4268:
            case 2903:
              return c + e2 + r2 + e2 + e2;
            case 6165:
              return c + e2 + r2 + "flex-" + e2 + e2;
            case 5187:
              return c + e2 + T(e2, /(\w+).+(:[^]+)/, c + "box-$1$2" + r2 + "flex-$1$2") + e2;
            case 5443:
              return c + e2 + r2 + "flex-item-" + T(e2, /flex-|-self/g, "") + (!y(e2, /flex-|baseline/) ? r2 + "grid-row-" + T(e2, /flex-|-self/g, "") : "") + e2;
            case 4675:
              return c + e2 + r2 + "flex-line-pack" + T(e2, /align-content|flex-|-self/g, "") + e2;
            case 5548:
              return c + e2 + r2 + T(e2, "shrink", "negative") + e2;
            case 5292:
              return c + e2 + r2 + T(e2, "basis", "preferred-size") + e2;
            case 6060:
              return c + "box-" + T(e2, "-grow", "") + c + e2 + r2 + T(e2, "grow", "positive") + e2;
            case 4554:
              return c + T(e2, /([^-])(transform)/g, "$1" + c + "$2") + e2;
            case 6187:
              return T(T(T(e2, /(zoom-|grab)/, c + "$1"), /(image-set)/, c + "$1"), e2, "") + e2;
            case 5495:
            case 3959:
              return T(e2, /(image-set\([^]*)/, c + "$1$`$1");
            case 4968:
              return T(T(e2, /(.+:)(flex-)?(.*)/, c + "box-pack:$3" + r2 + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + c + e2 + e2;
            case 4200:
              if (!y(e2, /flex-|baseline/))
                return r2 + "grid-column-align" + M(e2, t3) + e2;
              break;
            case 2592:
            case 3360:
              return r2 + T(e2, "template-", "") + e2;
            case 4384:
            case 3616:
              if (n2 && n2.some(function(e3, r3) {
                return t3 = r3, y(e3.props, /grid-\w+-end/);
              })) {
                return ~O(e2 + (n2 = n2[t3].value), "span") ? e2 : r2 + T(e2, "-start", "") + e2 + r2 + "grid-row-span:" + (~O(n2, "span") ? y(n2, /\d+/) : +y(n2, /\d+/) - +y(e2, /\d+/)) + ";";
              }
              return r2 + T(e2, "-start", "") + e2;
            case 4896:
            case 4128:
              return n2 && n2.some(function(e3) {
                return y(e3.props, /grid-\w+-start/);
              }) ? e2 : r2 + T(T(e2, "-end", "-span"), "span ", "") + e2;
            case 4095:
            case 3583:
            case 4068:
            case 2532:
              return T(e2, /(.+)-inline(.+)/, c + "$1$2") + e2;
            case 8116:
            case 7059:
            case 5753:
            case 5535:
            case 5445:
            case 5701:
            case 4933:
            case 4677:
            case 5533:
            case 5789:
            case 5021:
            case 4765:
              if (C(e2) - 1 - t3 > 6)
                switch (A(e2, t3 + 1)) {
                  case 109:
                    if (A(e2, t3 + 4) !== 45)
                      break;
                  case 102:
                    return T(e2, /(.+:)(.+)-([^]+)/, "$1" + c + "$2-$3$1" + a + (A(e2, t3 + 3) == 108 ? "$3" : "$2-$3")) + e2;
                  case 115:
                    return ~O(e2, "stretch") ? ce(T(e2, "stretch", "fill-available"), t3, n2) + e2 : e2;
                }
              break;
            case 5152:
            case 5920:
              return T(e2, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(a2, c2, t4, n3, s3, i2, u2) {
                return r2 + c2 + ":" + t4 + u2 + (n3 ? r2 + c2 + "-span:" + (s3 ? i2 : +i2 - +t4) + u2 : "") + e2;
              });
            case 4949:
              if (A(e2, t3 + 6) === 121)
                return T(e2, ":", ":" + c) + e2;
              break;
            case 6444:
              switch (A(e2, A(e2, 14) === 45 ? 18 : 11)) {
                case 120:
                  return T(e2, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + c + (A(e2, 14) === 45 ? "inline-" : "") + "box$3$1" + c + "$2$3$1" + r2 + "$2box$3") + e2;
                case 100:
                  return T(e2, ":", ":" + r2) + e2;
              }
              break;
            case 5719:
            case 2647:
            case 2135:
            case 3927:
            case 2391:
              return T(e2, "scroll-", "scroll-snap-") + e2;
          }
          return e2;
        }
        function te(e2, r3) {
          var a2 = "";
          var c2 = S(e2);
          for (var t3 = 0; t3 < c2; t3++)
            a2 += r3(e2[t3], t3, e2, r3) || "";
          return a2;
        }
        function ne(e2, r3, a2, c2) {
          switch (e2.type) {
            case o:
            case s2:
              return e2.return = e2.return || e2.value;
            case t2:
              return "";
            case d:
              return e2.return = e2.value + "{" + te(e2.children, c2) + "}";
            case n:
              e2.value = e2.props.join(",");
          }
          return C(a2 = te(e2.children, c2)) ? e2.return = e2.value + "{" + a2 + "}" : "";
        }
        function se(e2) {
          var r3 = S(e2);
          return function(a2, c2, t3, n2) {
            var s3 = "";
            for (var i2 = 0; i2 < r3; i2++)
              s3 += e2[i2](a2, c2, t3, n2) || "";
            return s3;
          };
        }
        function ie(e2) {
          return function(r3) {
            if (!r3.root) {
              if (r3 = r3.return)
                e2(r3);
            }
          };
        }
        function ue(e2, t3, i2, u2) {
          if (e2.length > -1) {
            if (!e2.return)
              switch (e2.type) {
                case s2:
                  e2.return = ce(e2.value, e2.length, i2);
                  return;
                case d:
                  return te([P(e2, { value: T(e2.value, "@", "@" + c) })], u2);
                case n:
                  if (e2.length)
                    return z(e2.props, function(t4) {
                      switch (y(t4, /(::plac\w+|:read-\w+)/)) {
                        case ":read-only":
                        case ":read-write":
                          return te([P(e2, { props: [T(t4, /:(read-\w+)/, ":" + a + "$1")] })], u2);
                        case "::placeholder":
                          return te([P(e2, { props: [T(t4, /:(plac\w+)/, ":" + c + "input-$1")] }), P(e2, { props: [T(t4, /:(plac\w+)/, ":" + a + "$1")] }), P(e2, { props: [T(t4, /:(plac\w+)/, r2 + "input-$1")] })], u2);
                      }
                      return "";
                    });
              }
          }
        }
        function oe(e2) {
          switch (e2.type) {
            case n:
              e2.props = e2.props.map(function(r3) {
                return z(Y(r3), function(r4, a2, c2) {
                  switch (A(r4, 0)) {
                    case 12:
                      return M(r4, 1, C(r4));
                    case 0:
                    case 40:
                    case 43:
                    case 62:
                    case 126:
                      return r4;
                    case 58:
                      if (c2[++a2] === "global")
                        c2[a2] = "", c2[++a2] = "\f" + M(c2[a2], a2 = 1, -1);
                    case 32:
                      return a2 === 1 ? "" : r4;
                    default:
                      switch (a2) {
                        case 0:
                          e2 = r4;
                          return S(c2) > 1 ? "" : r4;
                        case (a2 = S(c2) - 1):
                        case 2:
                          return a2 === 2 ? r4 + e2 + e2 : r4 + e2;
                        default:
                          return r4;
                      }
                  }
                });
              });
          }
        }
        e.CHARSET = f;
        e.COMMENT = t2;
        e.COUNTER_STYLE = w;
        e.DECLARATION = s2;
        e.DOCUMENT = h2;
        e.FONT_FACE = b;
        e.FONT_FEATURE_VALUES = m;
        e.IMPORT = o;
        e.KEYFRAMES = d;
        e.MEDIA = u;
        e.MOZ = a;
        e.MS = r2;
        e.NAMESPACE = v;
        e.PAGE = i;
        e.RULESET = n;
        e.SUPPORTS = p;
        e.VIEWPORT = l;
        e.WEBKIT = c;
        e.abs = g;
        e.alloc = K;
        e.append = R;
        e.assign = $;
        e.caret = I;
        e.char = j;
        e.charat = A;
        e.combine = z;
        e.comment = re;
        e.commenter = q;
        e.compile = Q;
        e.copy = P;
        e.dealloc = V;
        e.declaration = ae;
        e.delimit = W;
        e.delimiter = Z;
        e.escaping = H;
        e.from = k;
        e.hash = x;
        e.identifier = J;
        e.indexof = O;
        e.match = y;
        e.middleware = se;
        e.namespace = oe;
        e.next = _;
        e.node = N;
        e.parse = X;
        e.peek = F;
        e.prefix = ce;
        e.prefixer = ue;
        e.prev = U;
        e.replace = T;
        e.ruleset = ee;
        e.rulesheet = ie;
        e.serialize = te;
        e.sizeof = S;
        e.slice = L;
        e.stringify = ne;
        e.strlen = C;
        e.substr = M;
        e.token = D;
        e.tokenize = Y;
        e.tokenizer = G;
        e.trim = E;
        e.whitespace = B;
        Object.defineProperty(e, "__esModule", { value: true });
      });
    }
  });

  // ../ecopan_bot/node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js
  var require_emotion_weak_memoize_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var weakMemoize = function weakMemoize2(func) {
        var cache = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache.has(arg)) {
            return cache.get(arg);
          }
          var ret = func(arg);
          cache.set(arg, ret);
          return ret;
        };
      };
      exports.default = weakMemoize;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js
  var require_emotion_weak_memoize_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_weak_memoize_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js
  var require_emotion_memoize_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize3(fn) {
        var cache = /* @__PURE__ */ Object.create(null);
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize3;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js
  var require_emotion_memoize_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_memoize_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js
  var require_emotion_cache_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sheet = require_emotion_sheet_cjs();
      var stylis = require_stylis();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
        var previous3 = 0;
        var character = 0;
        while (true) {
          previous3 = character;
          character = stylis.peek();
          if (previous3 === 38 && character === 12) {
            points[index2] = 1;
          }
          if (stylis.token(character)) {
            break;
          }
          stylis.next();
        }
        return stylis.slice(begin, stylis.position);
      };
      var toRules = function toRules2(parsed, points) {
        var index2 = -1;
        var character = 44;
        do {
          switch (stylis.token(character)) {
            case 0:
              if (character === 38 && stylis.peek() === 12) {
                points[index2] = 1;
              }
              parsed[index2] += identifierWithPointTracking(stylis.position - 1, points, index2);
              break;
            case 2:
              parsed[index2] += stylis.delimit(character);
              break;
            case 4:
              if (character === 44) {
                parsed[++index2] = stylis.peek() === 58 ? "&\f" : "";
                points[index2] = parsed[index2].length;
                break;
              }
            default:
              parsed[index2] += stylis.from(character);
          }
        } while (character = stylis.next());
        return parsed;
      };
      var getRules = function getRules2(value, points) {
        return stylis.dealloc(toRules(stylis.alloc(value), points));
      };
      var fixedElements = /* @__PURE__ */ new WeakMap();
      var compat = function compat2(element4) {
        if (element4.type !== "rule" || !element4.parent || element4.length < 1) {
          return;
        }
        var value = element4.value, parent = element4.parent;
        var isImplicitRule = element4.column === parent.column && element4.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element4.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element4, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element4.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      var removeLabel = function removeLabel2(element4) {
        if (element4.type === "decl") {
          var value = element4.value;
          if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
            element4["return"] = "";
            element4.value = "";
          }
        }
      };
      var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      var isIgnoringComment = function isIgnoringComment2(element4) {
        return element4.type === "comm" && element4.children.indexOf(ignoreFlag) > -1;
      };
      var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
        return function(element4, index2, children) {
          if (element4.type !== "rule" || cache.compat)
            return;
          var unsafePseudoClasses = element4.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = !!element4.parent;
            var commentContainer = isNested ? element4.parent.children : children;
            for (var i = commentContainer.length - 1; i >= 0; i--) {
              var node2 = commentContainer[i];
              if (node2.line < element4.line) {
                break;
              }
              if (node2.column < element4.column) {
                if (isIgnoringComment(node2)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      var isImportRule = function isImportRule2(element4) {
        return element4.type.charCodeAt(1) === 105 && element4.type.charCodeAt(0) === 64;
      };
      var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
        for (var i = index2 - 1; i >= 0; i--) {
          if (!isImportRule(children[i])) {
            return true;
          }
        }
        return false;
      };
      var nullifyElement = function nullifyElement2(element4) {
        element4.type = "";
        element4.value = "";
        element4["return"] = "";
        element4.children = "";
        element4.props = "";
      };
      var incorrectImportAlarm = function incorrectImportAlarm2(element4, index2, children) {
        if (!isImportRule(element4)) {
          return;
        }
        if (element4.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element4);
        } else if (isPrependedWithRegularRules(index2, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element4);
        }
      };
      function prefix(value, length) {
        switch (stylis.hash(value, length)) {
          case 5103:
            return stylis.WEBKIT + "print-" + value + value;
          case 5737:
          case 4201:
          case 3177:
          case 3433:
          case 1641:
          case 4457:
          case 2921:
          case 5572:
          case 6356:
          case 5844:
          case 3191:
          case 6645:
          case 3005:
          case 6391:
          case 5879:
          case 5623:
          case 6135:
          case 4599:
          case 4855:
          case 4215:
          case 6389:
          case 5109:
          case 5365:
          case 5621:
          case 3829:
            return stylis.WEBKIT + value + value;
          case 5349:
          case 4246:
          case 4810:
          case 6968:
          case 2756:
            return stylis.WEBKIT + value + stylis.MOZ + value + stylis.MS + value + value;
          case 6828:
          case 4268:
            return stylis.WEBKIT + value + stylis.MS + value + value;
          case 6165:
            return stylis.WEBKIT + value + stylis.MS + "flex-" + value + value;
          case 5187:
            return stylis.WEBKIT + value + stylis.replace(value, /(\w+).+(:[^]+)/, stylis.WEBKIT + "box-$1$2" + stylis.MS + "flex-$1$2") + value;
          case 5443:
            return stylis.WEBKIT + value + stylis.MS + "flex-item-" + stylis.replace(value, /flex-|-self/, "") + value;
          case 4675:
            return stylis.WEBKIT + value + stylis.MS + "flex-line-pack" + stylis.replace(value, /align-content|flex-|-self/, "") + value;
          case 5548:
            return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, "shrink", "negative") + value;
          case 5292:
            return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, "basis", "preferred-size") + value;
          case 6060:
            return stylis.WEBKIT + "box-" + stylis.replace(value, "-grow", "") + stylis.WEBKIT + value + stylis.MS + stylis.replace(value, "grow", "positive") + value;
          case 4554:
            return stylis.WEBKIT + stylis.replace(value, /([^-])(transform)/g, "$1" + stylis.WEBKIT + "$2") + value;
          case 6187:
            return stylis.replace(stylis.replace(stylis.replace(value, /(zoom-|grab)/, stylis.WEBKIT + "$1"), /(image-set)/, stylis.WEBKIT + "$1"), value, "") + value;
          case 5495:
          case 3959:
            return stylis.replace(value, /(image-set\([^]*)/, stylis.WEBKIT + "$1$`$1");
          case 4968:
            return stylis.replace(stylis.replace(value, /(.+:)(flex-)?(.*)/, stylis.WEBKIT + "box-pack:$3" + stylis.MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + stylis.WEBKIT + value + value;
          case 4095:
          case 3583:
          case 4068:
          case 2532:
            return stylis.replace(value, /(.+)-inline(.+)/, stylis.WEBKIT + "$1$2") + value;
          case 8116:
          case 7059:
          case 5753:
          case 5535:
          case 5445:
          case 5701:
          case 4933:
          case 4677:
          case 5533:
          case 5789:
          case 5021:
          case 4765:
            if (stylis.strlen(value) - 1 - length > 6)
              switch (stylis.charat(value, length + 1)) {
                case 109:
                  if (stylis.charat(value, length + 4) !== 45)
                    break;
                case 102:
                  return stylis.replace(value, /(.+:)(.+)-([^]+)/, "$1" + stylis.WEBKIT + "$2-$3$1" + stylis.MOZ + (stylis.charat(value, length + 3) == 108 ? "$3" : "$2-$3")) + value;
                case 115:
                  return ~stylis.indexof(value, "stretch") ? prefix(stylis.replace(value, "stretch", "fill-available"), length) + value : value;
              }
            break;
          case 4949:
            if (stylis.charat(value, length + 1) !== 115)
              break;
          case 6444:
            switch (stylis.charat(value, stylis.strlen(value) - 3 - (~stylis.indexof(value, "!important") && 10))) {
              case 107:
                return stylis.replace(value, ":", ":" + stylis.WEBKIT) + value;
              case 101:
                return stylis.replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + stylis.WEBKIT + (stylis.charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + stylis.WEBKIT + "$2$3$1" + stylis.MS + "$2box$3") + value;
            }
            break;
          case 5936:
            switch (stylis.charat(value, length + 11)) {
              case 114:
                return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
              case 108:
                return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
              case 45:
                return stylis.WEBKIT + value + stylis.MS + stylis.replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
            }
            return stylis.WEBKIT + value + stylis.MS + value + value;
        }
        return value;
      }
      var prefixer = function prefixer2(element4, index2, children, callback) {
        if (element4.length > -1) {
          if (!element4["return"])
            switch (element4.type) {
              case stylis.DECLARATION:
                element4["return"] = prefix(element4.value, element4.length);
                break;
              case stylis.KEYFRAMES:
                return stylis.serialize([stylis.copy(element4, {
                  value: stylis.replace(element4.value, "@", "@" + stylis.WEBKIT)
                })], callback);
              case stylis.RULESET:
                if (element4.length)
                  return stylis.combine(element4.props, function(value) {
                    switch (stylis.match(value, /(::plac\w+|:read-\w+)/)) {
                      case ":read-only":
                      case ":read-write":
                        return stylis.serialize([stylis.copy(element4, {
                          props: [stylis.replace(value, /:(read-\w+)/, ":" + stylis.MOZ + "$1")]
                        })], callback);
                      case "::placeholder":
                        return stylis.serialize([stylis.copy(element4, {
                          props: [stylis.replace(value, /:(plac\w+)/, ":" + stylis.WEBKIT + "input-$1")]
                        }), stylis.copy(element4, {
                          props: [stylis.replace(value, /:(plac\w+)/, ":" + stylis.MOZ + "$1")]
                        }), stylis.copy(element4, {
                          props: [stylis.replace(value, /:(plac\w+)/, stylis.MS + "input-$1")]
                        })], callback);
                    }
                    return "";
                  });
            }
        }
      };
      var isBrowser2 = typeof document !== "undefined";
      var getServerStylisCache = isBrowser2 ? void 0 : weakMemoize__default["default"](function() {
        return memoize__default["default"](function() {
          var cache = {};
          return function(name) {
            return cache[name];
          };
        });
      });
      var defaultStylisPlugins = [prefixer];
      var createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (isBrowser2 && key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container2;
        var nodesToHydrate = [];
        if (isBrowser2) {
          container2 = options.container || document.head;
          Array.prototype.forEach.call(
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache.compat;
            }
          }), incorrectImportAlarm);
        }
        if (isBrowser2) {
          var currentSheet;
          var finalizingPlugins = [stylis.stringify, true ? function(element4) {
            if (!element4.root) {
              if (element4["return"]) {
                currentSheet.insert(element4["return"]);
              } else if (element4.value && element4.type !== stylis.COMMENT) {
                currentSheet.insert(element4.value + "{}");
              }
            }
          } : stylis.rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis$1 = function stylis$12(styles2) {
            return stylis.serialize(stylis.compile(styles2), serializer);
          };
          _insert = function insert(selector2, serialized, sheet2, shouldCache) {
            currentSheet = sheet2;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet2.insert(rule + serialized.map);
                }
              };
            }
            stylis$1(selector2 ? selector2 + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache.inserted[serialized.name] = true;
            }
          };
        } else {
          var _finalizingPlugins = [stylis.stringify];
          var _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
          var _stylis = function _stylis2(styles2) {
            return stylis.serialize(stylis.compile(styles2), _serializer);
          };
          var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
          var getRules2 = function getRules3(selector2, serialized) {
            var name = serialized.name;
            if (serverStylisCache[name] === void 0) {
              serverStylisCache[name] = _stylis(selector2 ? selector2 + "{" + serialized.styles + "}" : serialized.styles);
            }
            return serverStylisCache[name];
          };
          _insert = function _insert2(selector2, serialized, sheet2, shouldCache) {
            var name = serialized.name;
            var rules = getRules2(selector2, serialized);
            if (cache.compat === void 0) {
              if (shouldCache) {
                cache.inserted[name] = true;
              }
              if (serialized.map !== void 0) {
                return rules + serialized.map;
              }
              return rules;
            } else {
              if (shouldCache) {
                cache.inserted[name] = rules;
              } else {
                return rules;
              }
            }
          };
        }
        var cache = {
          key,
          sheet: new sheet.StyleSheet({
            key,
            container: container2,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache.sheet.hydrate(nodesToHydrate);
        return cache;
      };
      exports.default = createCache;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/cache/dist/emotion-cache.cjs.js
  var require_emotion_cache_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/cache/dist/emotion-cache.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_cache_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "../ecopan_bot/node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends2() {
        module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends2.apply(this, arguments);
      }
      module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // ../ecopan_bot/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "../ecopan_bot/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../ecopan_bot/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "../ecopan_bot/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // ../ecopan_bot/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "../ecopan_bot/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys3 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys3 = keys3.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys3.length; ++i) {
            var key = keys3[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js
  var require_emotion_react_isolated_hnrs_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hoistNonReactStatics$1 = require_hoist_non_react_statics_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var hoistNonReactStatics__default = /* @__PURE__ */ _interopDefault(hoistNonReactStatics$1);
      var hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return hoistNonReactStatics__default["default"](targetComponent, sourceComponent);
      };
      exports.default = hoistNonReactStatics;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js
  var require_emotion_utils_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var isBrowser2 = typeof document !== "undefined";
      function getRegisteredStyles(registered, registeredStyles, classNames2) {
        var rawClassName = "";
        classNames2.split(" ").forEach(function(className) {
          if (registered[className] !== void 0) {
            registeredStyles.push(registered[className] + ";");
          } else {
            rawClassName += className + " ";
          }
        });
        return rawClassName;
      }
      var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
        var className = cache.key + "-" + serialized.name;
        if ((isStringTag === false || isBrowser2 === false && cache.compat !== void 0) && cache.registered[className] === void 0) {
          cache.registered[className] = serialized.styles;
        }
      };
      var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
        registerStyles(cache, serialized, isStringTag);
        var className = cache.key + "-" + serialized.name;
        if (cache.inserted[serialized.name] === void 0) {
          var stylesForSSR = "";
          var current = serialized;
          do {
            var maybeStyles = cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
            if (!isBrowser2 && maybeStyles !== void 0) {
              stylesForSSR += maybeStyles;
            }
            current = current.next;
          } while (current !== void 0);
          if (!isBrowser2 && stylesForSSR.length !== 0) {
            return stylesForSSR;
          }
        }
      };
      exports.getRegisteredStyles = getRegisteredStyles;
      exports.insertStyles = insertStyles;
      exports.registerStyles = registerStyles;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/utils/dist/emotion-utils.cjs.js
  var require_emotion_utils_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/utils/dist/emotion-utils.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_utils_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js
  var require_emotion_hash_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/hash/dist/emotion-hash.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function murmur2(str) {
        var h2 = 0;
        var k, i = 0, len = str.length;
        for (; len >= 4; ++i, len -= 4) {
          k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
          k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
          k ^= k >>> 24;
          h2 = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
        }
        switch (len) {
          case 3:
            h2 ^= (str.charCodeAt(i + 2) & 255) << 16;
          case 2:
            h2 ^= (str.charCodeAt(i + 1) & 255) << 8;
          case 1:
            h2 ^= str.charCodeAt(i) & 255;
            h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
        }
        h2 ^= h2 >>> 13;
        h2 = (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
        return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
      }
      exports.default = murmur2;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/hash/dist/emotion-hash.cjs.js
  var require_emotion_hash_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/hash/dist/emotion-hash.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_hash_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js
  var require_emotion_unitless_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var unitlessKeys = {
        animationIterationCount: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
      exports.default = unitlessKeys;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js
  var require_emotion_unitless_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/unitless/dist/emotion-unitless.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_unitless_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js
  var require_emotion_serialize_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var hashString = require_emotion_hash_cjs();
      var unitless = require_emotion_unitless_cjs();
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var hashString__default = /* @__PURE__ */ _interopDefault(hashString);
      var unitless__default = /* @__PURE__ */ _interopDefault(unitless);
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      var hyphenateRegex = /[A-Z]|^ms/g;
      var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      var isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      var isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      var processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitless__default["default"][key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue2(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      var contentValuePattern;
      var contentValues;
      var oldProcessStyleValue;
      var msPattern;
      var hyphenPattern;
      var hyphenatedCache;
      var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      function handleInterpolation(mergedProps, registered, interpolation) {
        if (interpolation == null) {
          return "";
        }
        if (interpolation.__emotion_styles !== void 0) {
          if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
            throw new Error(noComponentSelectorMessage);
          }
          return interpolation;
        }
        switch (typeof interpolation) {
          case "boolean": {
            return "";
          }
          case "object": {
            if (interpolation.anim === 1) {
              cursor = {
                name: interpolation.name,
                styles: interpolation.styles,
                next: cursor
              };
              return interpolation.name;
            }
            if (interpolation.styles !== void 0) {
              var next = interpolation.next;
              if (next !== void 0) {
                while (next !== void 0) {
                  cursor = {
                    name: next.name,
                    styles: next.styles,
                    next: cursor
                  };
                  next = next.next;
                }
              }
              var styles2 = interpolation.styles + ";";
              if (interpolation.map !== void 0) {
                styles2 += interpolation.map;
              }
              return styles2;
            }
            return createStringFromObject(mergedProps, registered, interpolation);
          }
          case "function": {
            if (mergedProps !== void 0) {
              var previousCursor = cursor;
              var result = interpolation(mergedProps);
              cursor = previousCursor;
              return handleInterpolation(mergedProps, registered, result);
            } else if (true) {
              console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
            }
            break;
          }
          case "string":
            if (true) {
              var matched = [];
              var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
                var fakeVarName = "animation" + matched.length;
                matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
                return "${" + fakeVarName + "}";
              });
              if (matched.length) {
                console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
              }
            }
            break;
        }
        if (registered == null) {
          return interpolation;
        }
        var cached = registered[interpolation];
        return cached !== void 0 ? cached : interpolation;
      }
      function createStringFromObject(mergedProps, registered, obj) {
        var string3 = "";
        if (Array.isArray(obj)) {
          for (var i = 0; i < obj.length; i++) {
            string3 += handleInterpolation(mergedProps, registered, obj[i]) + ";";
          }
        } else {
          for (var _key in obj) {
            var value = obj[_key];
            if (typeof value !== "object") {
              if (registered != null && registered[value] !== void 0) {
                string3 += _key + "{" + registered[value] + "}";
              } else if (isProcessableValue(value)) {
                string3 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
              }
            } else {
              if (_key === "NO_COMPONENT_SELECTOR" && true) {
                throw new Error(noComponentSelectorMessage);
              }
              if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
                for (var _i = 0; _i < value.length; _i++) {
                  if (isProcessableValue(value[_i])) {
                    string3 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
                  }
                }
              } else {
                var interpolated = handleInterpolation(mergedProps, registered, value);
                switch (_key) {
                  case "animation":
                  case "animationName": {
                    string3 += processStyleName(_key) + ":" + interpolated + ";";
                    break;
                  }
                  default: {
                    if (_key === "undefined") {
                      console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                    }
                    string3 += _key + "{" + interpolated + "}";
                  }
                }
              }
            }
          }
        }
        return string3;
      }
      var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      var sourceMapPattern;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      var cursor;
      var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles2 = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles2 += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles2 += strings[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles2 += handleInterpolation(mergedProps, registered, args[i]);
          if (stringMode) {
            if (strings[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles2 += strings[i];
          }
        }
        var sourceMap;
        if (true) {
          styles2 = styles2.replace(sourceMapPattern, function(match2) {
            sourceMap = match2;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match;
        while ((match = labelPattern.exec(styles2)) !== null) {
          identifierName += "-" + match[1];
        }
        var name = hashString__default["default"](styles2) + identifierName;
        if (true) {
          return {
            name,
            styles: styles2,
            map: sourceMap,
            next: cursor,
            toString: function toString2() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles: styles2,
          next: cursor
        };
      };
      exports.serializeStyles = serializeStyles;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js
  var require_emotion_serialize_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_serialize_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.dev.js
  var require_emotion_use_insertion_effect_with_fallbacks_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React17 = require_react();
      function _interopNamespace(e) {
        if (e && e.__esModule)
          return e;
        var n = /* @__PURE__ */ Object.create(null);
        if (e) {
          Object.keys(e).forEach(function(k) {
            if (k !== "default") {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : {
                enumerable: true,
                get: function() {
                  return e[k];
                }
              });
            }
          });
        }
        n["default"] = e;
        return Object.freeze(n);
      }
      var React__namespace = /* @__PURE__ */ _interopNamespace(React17);
      var isBrowser2 = typeof document !== "undefined";
      var syncFallback = function syncFallback2(create2) {
        return create2();
      };
      var useInsertionEffect3 = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : false;
      var useInsertionEffectAlwaysWithSyncFallback = !isBrowser2 ? syncFallback : useInsertionEffect3 || syncFallback;
      var useInsertionEffectWithLayoutFallback = useInsertionEffect3 || React17.useLayoutEffect;
      exports.useInsertionEffectAlwaysWithSyncFallback = useInsertionEffectAlwaysWithSyncFallback;
      exports.useInsertionEffectWithLayoutFallback = useInsertionEffectWithLayoutFallback;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.js
  var require_emotion_use_insertion_effect_with_fallbacks_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_use_insertion_effect_with_fallbacks_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/react/dist/emotion-element-b63ca7c6.cjs.dev.js
  var require_emotion_element_b63ca7c6_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/react/dist/emotion-element-b63ca7c6.cjs.dev.js"(exports) {
      "use strict";
      var React17 = require_react();
      var createCache = require_emotion_cache_cjs();
      var _extends2 = require_extends();
      var weakMemoize = require_emotion_weak_memoize_cjs();
      var _isolatedHnrs_dist_emotionReact_isolatedHnrs = require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize2 = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var createCache__default = /* @__PURE__ */ _interopDefault(createCache);
      var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
      var isBrowser2 = typeof document !== "undefined";
      var hasOwnProperty2 = {}.hasOwnProperty;
      var EmotionCacheContext = /* @__PURE__ */ React17.createContext(
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache__default["default"]({
          key: "css"
        }) : null
      );
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      var CacheProvider = EmotionCacheContext.Provider;
      var __unsafe_useEmotionCache = function useEmotionCache() {
        return React17.useContext(EmotionCacheContext);
      };
      exports.withEmotionCache = function withEmotionCache(func) {
        return /* @__PURE__ */ React17.forwardRef(function(props, ref) {
          var cache = React17.useContext(EmotionCacheContext);
          return func(props, cache, ref);
        });
      };
      if (!isBrowser2) {
        exports.withEmotionCache = function withEmotionCache(func) {
          return function(props) {
            var cache = React17.useContext(EmotionCacheContext);
            if (cache === null) {
              cache = createCache__default["default"]({
                key: "css"
              });
              return /* @__PURE__ */ React17.createElement(EmotionCacheContext.Provider, {
                value: cache
              }, func(props, cache));
            } else {
              return func(props, cache);
            }
          };
        };
      }
      var ThemeContext2 = /* @__PURE__ */ React17.createContext({});
      if (true) {
        ThemeContext2.displayName = "EmotionThemeContext";
      }
      var useTheme2 = function useTheme3() {
        return React17.useContext(ThemeContext2);
      };
      var getTheme2 = function getTheme3(outerTheme, theme2) {
        if (typeof theme2 === "function") {
          var mergedTheme = theme2(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme2 == null || typeof theme2 !== "object" || Array.isArray(theme2)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends2({}, outerTheme, theme2);
      };
      var createCacheWithTheme = /* @__PURE__ */ weakMemoize__default["default"](function(outerTheme) {
        return weakMemoize__default["default"](function(theme2) {
          return getTheme2(outerTheme, theme2);
        });
      });
      var ThemeProvider2 = function ThemeProvider3(props) {
        var theme2 = React17.useContext(ThemeContext2);
        if (props.theme !== theme2) {
          theme2 = createCacheWithTheme(theme2)(props.theme);
        }
        return /* @__PURE__ */ React17.createElement(ThemeContext2.Provider, {
          value: theme2
        }, props.children);
      };
      function withTheme(Component2) {
        var componentName = Component2.displayName || Component2.name || "Component";
        var render = function render2(props, ref) {
          var theme2 = React17.useContext(ThemeContext2);
          return /* @__PURE__ */ React17.createElement(Component2, _extends2({
            theme: theme2,
            ref
          }, props));
        };
        var WithTheme = /* @__PURE__ */ React17.forwardRef(render);
        WithTheme.displayName = "WithTheme(" + componentName + ")";
        return _isolatedHnrs_dist_emotionReact_isolatedHnrs["default"](WithTheme, Component2);
      }
      var getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line) {
        var match = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
        if (match)
          return getLastPart(match[1]);
        match = /^([A-Za-z0-9$.]+)@/.exec(line);
        if (match)
          return getLastPart(match[1]);
        return void 0;
      };
      var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      var sanitizeIdentifier = function sanitizeIdentifier2(identifier) {
        return identifier.replace(/\$/g, "-");
      };
      var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i = 0; i < lines.length; i++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      var createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty2.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        utils.registerStyles(cache, serialized, isStringTag);
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          return utils.insertStyles(cache, serialized, isStringTag);
        });
        if (!isBrowser2 && rules !== void 0) {
          var _ref2;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React17.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var Emotion = /* @__PURE__ */ exports.withEmotionCache(function(props, cache, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
          cssProp = cache.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serialize2.serializeStyles(registeredStyles, void 0, React17.useContext(ThemeContext2));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serialize2.serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty2.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React17.createElement(React17.Fragment, null, /* @__PURE__ */ React17.createElement(Insertion, {
          cache,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React17.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      exports.CacheProvider = CacheProvider;
      exports.Emotion = Emotion;
      exports.ThemeContext = ThemeContext2;
      exports.ThemeProvider = ThemeProvider2;
      exports.__unsafe_useEmotionCache = __unsafe_useEmotionCache;
      exports.createEmotionProps = createEmotionProps;
      exports.hasOwnProperty = hasOwnProperty2;
      exports.isBrowser = isBrowser2;
      exports.useTheme = useTheme2;
      exports.withTheme = withTheme;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/react/dist/emotion-react.cjs.dev.js
  var require_emotion_react_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/react/dist/emotion-react.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var React17 = require_react();
      require_emotion_cache_cjs();
      var emotionElement = require_emotion_element_b63ca7c6_cjs_dev();
      require_extends();
      require_emotion_weak_memoize_cjs();
      require_hoist_non_react_statics_cjs();
      require_emotion_react_isolated_hnrs_cjs_dev();
      var utils = require_emotion_utils_cjs();
      var serialize2 = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      var pkg = {
        name: "@emotion/react",
        version: "11.10.6",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": "./macro.js"
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.js",
          "macro.d.ts",
          "macro.js.flow"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.10.6",
          "@emotion/cache": "^11.10.5",
          "@emotion/serialize": "^1.1.1",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.0",
          "@emotion/utils": "^1.2.0",
          "@emotion/weak-memoize": "^0.3.0",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.10.6",
          "@emotion/css-prettifier": "1.1.1",
          "@emotion/server": "11.10.0",
          "@emotion/styled": "11.10.6",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": "./macro.js"
            }
          }
        }
      };
      var jsx51 = function jsx52(type, props) {
        var args = arguments;
        if (props == null || !emotionElement.hasOwnProperty.call(props, "css")) {
          return React17.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = emotionElement.Emotion;
        createElementArgArray[1] = emotionElement.createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React17.createElement.apply(null, createElementArgArray);
      };
      var warnedAboutCssPropForGlobal = false;
      var Global3 = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
        if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles2 = props.styles;
        var serialized = serialize2.serializeStyles([styles2], void 0, React17.useContext(emotionElement.ThemeContext));
        if (!emotionElement.isBrowser) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            serializedStyles += next.styles;
            next = next.next;
          }
          var shouldCache = cache.compat === true;
          var rules = cache.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React17.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache.sheet.nonce, _ref));
        }
        var sheetRef = React17.useRef();
        useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback(function() {
          var key = cache.key + "-global";
          var sheet = new cache.sheet.constructor({
            key,
            nonce: cache.sheet.nonce,
            container: cache.sheet.container,
            speedy: cache.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache.sheet.tags.length) {
            sheet.before = cache.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache]);
        useInsertionEffectWithFallbacks.useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            utils.insertStyles(cache, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element4 = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element4;
            sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }, [cache, serialized.name]);
        return null;
      });
      if (true) {
        Global3.displayName = "EmotionGlobal";
      }
      function css3() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return serialize2.serializeStyles(args);
      }
      var keyframes3 = function keyframes4() {
        var insertable = css3.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString2() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      var classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      function merge3(registered, css4, className) {
        var registeredStyles = [];
        var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className);
        if (registeredStyles.length < 2) {
          return className;
        }
        return rawClassName + css4(registeredStyles);
      }
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serializedArr = _ref.serializedArr;
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          var rules2 = "";
          for (var i = 0; i < serializedArr.length; i++) {
            var res = utils.insertStyles(cache, serializedArr[i], false);
            if (!emotionElement.isBrowser && res !== void 0) {
              rules2 += res;
            }
          }
          if (!emotionElement.isBrowser) {
            return rules2;
          }
        });
        if (!emotionElement.isBrowser && rules.length !== 0) {
          var _ref2;
          return /* @__PURE__ */ React17.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
            return serialized.name;
          }).join(" "), _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var ClassNames = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
        var hasRendered = false;
        var serializedArr = [];
        var css4 = function css5() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serialize2.serializeStyles(args, cache.registered);
          serializedArr.push(serialized);
          utils.registerStyles(cache, serialized, false);
          return cache.key + "-" + serialized.name;
        };
        var cx2 = function cx3() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge3(cache.registered, css4, classnames(args));
        };
        var content3 = {
          css: css4,
          cx: cx2,
          theme: React17.useContext(emotionElement.ThemeContext)
        };
        var ele = props.children(content3);
        hasRendered = true;
        return /* @__PURE__ */ React17.createElement(React17.Fragment, null, /* @__PURE__ */ React17.createElement(Insertion, {
          cache,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser2 = typeof document !== "undefined";
        isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
        if (isBrowser2 && !isTestEnv) {
          globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser2 ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
      var isBrowser2;
      var isTestEnv;
      var globalContext;
      var globalKey;
      exports.CacheProvider = emotionElement.CacheProvider;
      exports.ThemeContext = emotionElement.ThemeContext;
      exports.ThemeProvider = emotionElement.ThemeProvider;
      exports.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache;
      exports.useTheme = emotionElement.useTheme;
      Object.defineProperty(exports, "withEmotionCache", {
        enumerable: true,
        get: function() {
          return emotionElement.withEmotionCache;
        }
      });
      exports.withTheme = emotionElement.withTheme;
      exports.ClassNames = ClassNames;
      exports.Global = Global3;
      exports.createElement = jsx51;
      exports.css = css3;
      exports.jsx = jsx51;
      exports.keyframes = keyframes3;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/react/dist/emotion-react.cjs.js
  var require_emotion_react_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/react/dist/emotion-react.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_react_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../ecopan_bot/node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React17 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React17.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s2 >= 1 && c >= 0 && sampleLines[s2] !== controlLines[c]) {
                  c--;
                }
                for (; s2 >= 1 && c >= 0; s2--, c--) {
                  if (sampleLines[s2] !== controlLines[c]) {
                    if (s2 !== 1 || c !== 1) {
                      do {
                        s2--;
                        c--;
                        if (c < 0 || sampleLines[s2] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element4) {
            {
              if (element4) {
                var owner = element4._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element4.type, element4._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element4) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element4);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element4);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element4 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element4._store = {};
              Object.defineProperty(element4._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element4, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element4, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element4.props);
                Object.freeze(element4);
              }
            }
            return element4;
          };
          function jsxDEV(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element4) {
            {
              if (element4) {
                var owner = element4._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element4.type, element4._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement5(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element4, parentType) {
            {
              if (!element4._store || element4._store.validated || element4.key != null) {
                return;
              }
              element4._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element4 && element4._owner && element4._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element4._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element4);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement5(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement5(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement5(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element4) {
            {
              var type = element4.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element4.props, "prop", name, element4);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys3 = Object.keys(fragment2.props);
              for (var i = 0; i < keys3.length; i++) {
                var key = keys3[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element4 = jsxDEV(type, props, key, source, self2);
              if (element4 == null) {
                return element4;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element4);
              } else {
                validatePropTypes(element4);
              }
              return element4;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx51 = jsxWithValidationDynamic;
          var jsxs11 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx51;
          exports.jsxs = jsxs11;
        })();
      }
    }
  });

  // ../ecopan_bot/node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../ecopan_bot/node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // ../ecopan_bot/node_modules/lodash.mergewith/index.js
  var require_lodash = __commonJS({
    "../ecopan_bot/node_modules/lodash.mergewith/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var asyncTag = "[object AsyncFunction]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var nullTag = "[object Null]";
      var objectTag = "[object Object]";
      var proxyTag = "[object Proxy]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var undefinedTag = "[object Undefined]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root3 = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types2 = freeModule && freeModule.require && freeModule.require("util").types;
          if (types2) {
            return types2;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e) {
        }
      }();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function apply(func, thisArg, args) {
        switch (args.length) {
          case 0:
            return func.call(thisArg);
          case 1:
            return func.call(thisArg, args[0]);
          case 2:
            return func.call(thisArg, args[0], args[1]);
          case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
      }
      function baseTimes(n, iteratee) {
        var index2 = -1, result = Array(n);
        while (++index2 < n) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function getValue(object, key) {
        return object == null ? void 0 : object[key];
      }
      function overArg(func, transform2) {
        return function(arg) {
          return func(transform2(arg));
        };
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root3["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object);
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Buffer2 = moduleExports ? root3.Buffer : void 0;
      var Symbol2 = root3.Symbol;
      var Uint8Array2 = root3.Uint8Array;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      var objectCreate = Object.create;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice2 = arrayProto.splice;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      var defineProperty = function() {
        try {
          var func = getNative(Object, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var nativeMax = Math.max;
      var nativeNow = Date.now;
      var Map2 = getNative(root3, "Map");
      var nativeCreate = getNative(Object, "create");
      var baseCreate = function() {
        function object() {
        }
        return function(proto2) {
          if (!isObject2(proto2)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto2);
          }
          object.prototype = proto2;
          var result = new object();
          object.prototype = void 0;
          return result;
        };
      }();
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice2.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size2 = data.size;
        data.set(key, value);
        this.size += data.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function Stack2(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack2.prototype.clear = stackClear;
      Stack2.prototype["delete"] = stackDelete;
      Stack2.prototype.get = stackGet;
      Stack2.prototype.has = stackHas;
      Stack2.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assignMergeValue(object, key, value) {
        if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      var baseFor = createBaseFor();
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction5(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack2());
          if (isObject2(srcValue)) {
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction5(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      var baseSetToString = !defineProperty ? identity : function(func, string3) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string3),
          "writable": true
        });
      };
      function cloneBuffer(buffer2, isDeep) {
        if (isDeep) {
          return buffer2.slice();
        }
        var length = buffer2.length, result = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
        buffer2.copy(result);
        return result;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
      }
      function copyArray(source, array) {
        var index2 = -1, length = source.length;
        array || (array = Array(length));
        while (++index2 < length) {
          array[index2] = source[index2];
        }
        return array;
      }
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index2 = -1, length = props.length;
        while (++index2 < length) {
          var key = props[index2];
          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard2 = length > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
          if (guard2 && isIterateeCall(sources[0], sources[1], guard2)) {
            customizer = length < 3 ? void 0 : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index2 < length) {
            var source = sources[index2];
            if (source) {
              assigner(object, source, index2, customizer);
            }
          }
          return object;
        });
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
          while (length--) {
            var key = props[fromRight ? length : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function getMapData(map2, key) {
        var data = map2.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : void 0;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index2, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
          return eq(object[index2], value);
        }
        return false;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto2;
      }
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform2) {
        start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array = Array(length);
          while (++index2 < length) {
            array[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform2(array);
          return apply(func, this, otherArgs);
        };
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setToString = shortOut(baseSetToString);
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(void 0, arguments);
        };
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction5(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      var isBuffer2 = nativeIsBuffer || stubFalse;
      function isFunction5(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      function isPlainObject2(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto2 = getPrototype(value);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      var mergeWith6 = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });
      function constant(value) {
        return function() {
          return value;
        };
      }
      function identity(value) {
        return value;
      }
      function stubFalse() {
        return false;
      }
      module.exports = mergeWith6;
    }
  });

  // ../ecopan_bot/node_modules/react-fast-compare/index.js
  var require_react_fast_compare = __commonJS({
    "../ecopan_bot/node_modules/react-fast-compare/index.js"(exports, module) {
      var hasElementType = typeof Element !== "undefined";
      var hasMap = typeof Map === "function";
      var hasSet = typeof Set === "function";
      var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
      function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a == "object" && typeof b == "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i, keys3;
          if (Array.isArray(a)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i = length; i-- !== 0; )
              if (!equal(a[i], b[i]))
                return false;
            return true;
          }
          var it;
          if (hasMap && a instanceof Map && b instanceof Map) {
            if (a.size !== b.size)
              return false;
            it = a.entries();
            while (!(i = it.next()).done)
              if (!b.has(i.value[0]))
                return false;
            it = a.entries();
            while (!(i = it.next()).done)
              if (!equal(i.value[1], b.get(i.value[0])))
                return false;
            return true;
          }
          if (hasSet && a instanceof Set && b instanceof Set) {
            if (a.size !== b.size)
              return false;
            it = a.entries();
            while (!(i = it.next()).done)
              if (!b.has(i.value[0]))
                return false;
            return true;
          }
          if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i = length; i-- !== 0; )
              if (a[i] !== b[i])
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
            return a.toString() === b.toString();
          keys3 = Object.keys(a);
          length = keys3.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i = length; i-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys3[i]))
              return false;
          if (hasElementType && a instanceof Element)
            return false;
          for (i = length; i-- !== 0; ) {
            if ((keys3[i] === "_owner" || keys3[i] === "__v" || keys3[i] === "__o") && a.$$typeof) {
              continue;
            }
            if (!equal(a[keys3[i]], b[keys3[i]]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      }
      module.exports = function isEqual2(a, b) {
        try {
          return equal(a, b);
        } catch (error2) {
          if ((error2.message || "").match(/stack|recursion/i)) {
            console.warn("react-fast-compare cannot handle circular refs");
            return false;
          }
          throw error2;
        }
      };
    }
  });

  // ../ecopan_bot/node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js
  var require_emotion_is_prop_valid_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var memoize3 = require_emotion_memoize_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var memoize__default = /* @__PURE__ */ _interopDefault(memoize3);
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var isPropValid = /* @__PURE__ */ memoize__default["default"](
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
      );
      exports.default = isPropValid;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js
  var require_emotion_is_prop_valid_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_is_prop_valid_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/styled/base/dist/emotion-styled-base.cjs.dev.js
  var require_emotion_styled_base_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/styled/base/dist/emotion-styled-base.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var _extends2 = require_extends();
      var React17 = require_react();
      var isPropValid = require_emotion_is_prop_valid_cjs();
      var react = require_emotion_react_cjs();
      var utils = require_emotion_utils_cjs();
      var serialize2 = require_emotion_serialize_cjs();
      var useInsertionEffectWithFallbacks = require_emotion_use_insertion_effect_with_fallbacks_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { "default": e };
      }
      var isPropValid__default = /* @__PURE__ */ _interopDefault(isPropValid);
      var testOmitPropsOnStringTag = isPropValid__default["default"];
      var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      var isBrowser2 = typeof document !== "undefined";
      var Insertion = function Insertion2(_ref) {
        var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        utils.registerStyles(cache, serialized, isStringTag);
        var rules = useInsertionEffectWithFallbacks.useInsertionEffectAlwaysWithSyncFallback(function() {
          return utils.insertStyles(cache, serialized, isStringTag);
        });
        if (!isBrowser2 && rules !== void 0) {
          var _ref2;
          var serializedNames = serialized.name;
          var next = serialized.next;
          while (next !== void 0) {
            serializedNames += " " + next.name;
            next = next.next;
          }
          return /* @__PURE__ */ React17.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref2.nonce = cache.sheet.nonce, _ref2));
        }
        return null;
      };
      var createStyled2 = function createStyled3(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles2 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles2.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles2.push.apply(styles2, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles2.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              if (args[0][i] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
              }
              styles2.push(args[i], args[0][i]);
            }
          }
          var Styled = react.withEmotionCache(function(props, cache, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React17.useContext(react.ThemeContext);
            }
            if (typeof props.className === "string") {
              className = utils.getRegisteredStyles(cache.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serialize2.serializeStyles(styles2.concat(classInterpolations), cache.registered, mergedProps);
            className += cache.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as")
                continue;
              if (finalShouldForwardProp(_key)) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React17.createElement(React17.Fragment, null, /* @__PURE__ */ React17.createElement(Insertion, {
              cache,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React17.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles2;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled3(nextTag, _extends2({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles2);
          };
          return Styled;
        };
      };
      exports.default = createStyled2;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/styled/dist/emotion-styled.cjs.dev.js
  var require_emotion_styled_cjs_dev = __commonJS({
    "../ecopan_bot/node_modules/@emotion/styled/dist/emotion-styled.cjs.dev.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      require_extends();
      require_react();
      require_emotion_is_prop_valid_cjs();
      var base_dist_emotionStyledBase = require_emotion_styled_base_cjs_dev();
      require_emotion_react_cjs();
      require_emotion_utils_cjs();
      require_emotion_serialize_cjs();
      require_emotion_use_insertion_effect_with_fallbacks_cjs();
      var tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      var newStyled = base_dist_emotionStyledBase["default"].bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
      exports.default = newStyled;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/styled/dist/emotion-styled.cjs.js
  var require_emotion_styled_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/styled/dist/emotion-styled.cjs.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_emotion_styled_cjs_dev();
      }
    }
  });

  // ../ecopan_bot/node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize3(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize3;
    }
  });

  // ../ecopan_bot/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "../ecopan_bot/node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize3 = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index2 = memoize3(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
      );
      exports.default = index2;
    }
  });

  // ../ecopan_bot/node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "../ecopan_bot/node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key in from) {
            if (hasOwnProperty2.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // ../ecopan_bot/node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "../ecopan_bot/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // ../ecopan_bot/node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "../ecopan_bot/node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // ../ecopan_bot/node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "../ecopan_bot/node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text6) {
          var message = "Warning: " + text6;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error2.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // ../ecopan_bot/node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "../ecopan_bot/node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs2 = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text6) {
          var message = "Warning: " + text6;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement5, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error2 = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement5(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs2.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is2(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error2 = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement5(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // ../ecopan_bot/node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "../ecopan_bot/node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs2 = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs2.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs2;
      var throwOnDirectAccess;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/common/unicode.js
  var require_unicode = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/common/unicode.js"(exports) {
      "use strict";
      var UNDEFINED_CODE_POINTS = [
        65534,
        65535,
        131070,
        131071,
        196606,
        196607,
        262142,
        262143,
        327678,
        327679,
        393214,
        393215,
        458750,
        458751,
        524286,
        524287,
        589822,
        589823,
        655358,
        655359,
        720894,
        720895,
        786430,
        786431,
        851966,
        851967,
        917502,
        917503,
        983038,
        983039,
        1048574,
        1048575,
        1114110,
        1114111
      ];
      exports.REPLACEMENT_CHARACTER = "\uFFFD";
      exports.CODE_POINTS = {
        EOF: -1,
        NULL: 0,
        TABULATION: 9,
        CARRIAGE_RETURN: 13,
        LINE_FEED: 10,
        FORM_FEED: 12,
        SPACE: 32,
        EXCLAMATION_MARK: 33,
        QUOTATION_MARK: 34,
        NUMBER_SIGN: 35,
        AMPERSAND: 38,
        APOSTROPHE: 39,
        HYPHEN_MINUS: 45,
        SOLIDUS: 47,
        DIGIT_0: 48,
        DIGIT_9: 57,
        SEMICOLON: 59,
        LESS_THAN_SIGN: 60,
        EQUALS_SIGN: 61,
        GREATER_THAN_SIGN: 62,
        QUESTION_MARK: 63,
        LATIN_CAPITAL_A: 65,
        LATIN_CAPITAL_F: 70,
        LATIN_CAPITAL_X: 88,
        LATIN_CAPITAL_Z: 90,
        RIGHT_SQUARE_BRACKET: 93,
        GRAVE_ACCENT: 96,
        LATIN_SMALL_A: 97,
        LATIN_SMALL_F: 102,
        LATIN_SMALL_X: 120,
        LATIN_SMALL_Z: 122,
        REPLACEMENT_CHARACTER: 65533
      };
      exports.CODE_POINT_SEQUENCES = {
        DASH_DASH_STRING: [45, 45],
        DOCTYPE_STRING: [68, 79, 67, 84, 89, 80, 69],
        CDATA_START_STRING: [91, 67, 68, 65, 84, 65, 91],
        SCRIPT_STRING: [115, 99, 114, 105, 112, 116],
        PUBLIC_STRING: [80, 85, 66, 76, 73, 67],
        SYSTEM_STRING: [83, 89, 83, 84, 69, 77]
      };
      exports.isSurrogate = function(cp) {
        return cp >= 55296 && cp <= 57343;
      };
      exports.isSurrogatePair = function(cp) {
        return cp >= 56320 && cp <= 57343;
      };
      exports.getSurrogatePairCodePoint = function(cp1, cp2) {
        return (cp1 - 55296) * 1024 + 9216 + cp2;
      };
      exports.isControlCodePoint = function(cp) {
        return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
      };
      exports.isUndefinedCodePoint = function(cp) {
        return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/common/error-codes.js
  var require_error_codes = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/common/error-codes.js"(exports, module) {
      "use strict";
      module.exports = {
        controlCharacterInInputStream: "control-character-in-input-stream",
        noncharacterInInputStream: "noncharacter-in-input-stream",
        surrogateInInputStream: "surrogate-in-input-stream",
        nonVoidHtmlElementStartTagWithTrailingSolidus: "non-void-html-element-start-tag-with-trailing-solidus",
        endTagWithAttributes: "end-tag-with-attributes",
        endTagWithTrailingSolidus: "end-tag-with-trailing-solidus",
        unexpectedSolidusInTag: "unexpected-solidus-in-tag",
        unexpectedNullCharacter: "unexpected-null-character",
        unexpectedQuestionMarkInsteadOfTagName: "unexpected-question-mark-instead-of-tag-name",
        invalidFirstCharacterOfTagName: "invalid-first-character-of-tag-name",
        unexpectedEqualsSignBeforeAttributeName: "unexpected-equals-sign-before-attribute-name",
        missingEndTagName: "missing-end-tag-name",
        unexpectedCharacterInAttributeName: "unexpected-character-in-attribute-name",
        unknownNamedCharacterReference: "unknown-named-character-reference",
        missingSemicolonAfterCharacterReference: "missing-semicolon-after-character-reference",
        unexpectedCharacterAfterDoctypeSystemIdentifier: "unexpected-character-after-doctype-system-identifier",
        unexpectedCharacterInUnquotedAttributeValue: "unexpected-character-in-unquoted-attribute-value",
        eofBeforeTagName: "eof-before-tag-name",
        eofInTag: "eof-in-tag",
        missingAttributeValue: "missing-attribute-value",
        missingWhitespaceBetweenAttributes: "missing-whitespace-between-attributes",
        missingWhitespaceAfterDoctypePublicKeyword: "missing-whitespace-after-doctype-public-keyword",
        missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: "missing-whitespace-between-doctype-public-and-system-identifiers",
        missingWhitespaceAfterDoctypeSystemKeyword: "missing-whitespace-after-doctype-system-keyword",
        missingQuoteBeforeDoctypePublicIdentifier: "missing-quote-before-doctype-public-identifier",
        missingQuoteBeforeDoctypeSystemIdentifier: "missing-quote-before-doctype-system-identifier",
        missingDoctypePublicIdentifier: "missing-doctype-public-identifier",
        missingDoctypeSystemIdentifier: "missing-doctype-system-identifier",
        abruptDoctypePublicIdentifier: "abrupt-doctype-public-identifier",
        abruptDoctypeSystemIdentifier: "abrupt-doctype-system-identifier",
        cdataInHtmlContent: "cdata-in-html-content",
        incorrectlyOpenedComment: "incorrectly-opened-comment",
        eofInScriptHtmlCommentLikeText: "eof-in-script-html-comment-like-text",
        eofInDoctype: "eof-in-doctype",
        nestedComment: "nested-comment",
        abruptClosingOfEmptyComment: "abrupt-closing-of-empty-comment",
        eofInComment: "eof-in-comment",
        incorrectlyClosedComment: "incorrectly-closed-comment",
        eofInCdata: "eof-in-cdata",
        absenceOfDigitsInNumericCharacterReference: "absence-of-digits-in-numeric-character-reference",
        nullCharacterReference: "null-character-reference",
        surrogateCharacterReference: "surrogate-character-reference",
        characterReferenceOutsideUnicodeRange: "character-reference-outside-unicode-range",
        controlCharacterReference: "control-character-reference",
        noncharacterCharacterReference: "noncharacter-character-reference",
        missingWhitespaceBeforeDoctypeName: "missing-whitespace-before-doctype-name",
        missingDoctypeName: "missing-doctype-name",
        invalidCharacterSequenceAfterDoctypeName: "invalid-character-sequence-after-doctype-name",
        duplicateAttribute: "duplicate-attribute",
        nonConformingDoctype: "non-conforming-doctype",
        missingDoctype: "missing-doctype",
        misplacedDoctype: "misplaced-doctype",
        endTagWithoutMatchingOpenElement: "end-tag-without-matching-open-element",
        closingOfElementWithOpenChildElements: "closing-of-element-with-open-child-elements",
        disallowedContentInNoscriptInHead: "disallowed-content-in-noscript-in-head",
        openElementsLeftAfterEof: "open-elements-left-after-eof",
        abandonedHeadElementChild: "abandoned-head-element-child",
        misplacedStartTagForHeadElement: "misplaced-start-tag-for-head-element",
        nestedNoscriptInHead: "nested-noscript-in-head",
        eofInElementThatCanContainOnlyText: "eof-in-element-that-can-contain-only-text"
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/tokenizer/preprocessor.js
  var require_preprocessor = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/tokenizer/preprocessor.js"(exports, module) {
      "use strict";
      var unicode = require_unicode();
      var ERR = require_error_codes();
      var $ = unicode.CODE_POINTS;
      var DEFAULT_BUFFER_WATERLINE = 1 << 16;
      var Preprocessor = class {
        constructor() {
          this.html = null;
          this.pos = -1;
          this.lastGapPos = -1;
          this.lastCharPos = -1;
          this.gapStack = [];
          this.skipNextNewLine = false;
          this.lastChunkWritten = false;
          this.endOfChunkHit = false;
          this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
        }
        _err() {
        }
        _addGap() {
          this.gapStack.push(this.lastGapPos);
          this.lastGapPos = this.pos;
        }
        _processSurrogate(cp) {
          if (this.pos !== this.lastCharPos) {
            const nextCp = this.html.charCodeAt(this.pos + 1);
            if (unicode.isSurrogatePair(nextCp)) {
              this.pos++;
              this._addGap();
              return unicode.getSurrogatePairCodePoint(cp, nextCp);
            }
          } else if (!this.lastChunkWritten) {
            this.endOfChunkHit = true;
            return $.EOF;
          }
          this._err(ERR.surrogateInInputStream);
          return cp;
        }
        dropParsedChunk() {
          if (this.pos > this.bufferWaterline) {
            this.lastCharPos -= this.pos;
            this.html = this.html.substring(this.pos);
            this.pos = 0;
            this.lastGapPos = -1;
            this.gapStack = [];
          }
        }
        write(chunk, isLastChunk) {
          if (this.html) {
            this.html += chunk;
          } else {
            this.html = chunk;
          }
          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
          this.lastChunkWritten = isLastChunk;
        }
        insertHtmlAtCurrentPos(chunk) {
          this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
        }
        advance() {
          this.pos++;
          if (this.pos > this.lastCharPos) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return $.EOF;
          }
          let cp = this.html.charCodeAt(this.pos);
          if (this.skipNextNewLine && cp === $.LINE_FEED) {
            this.skipNextNewLine = false;
            this._addGap();
            return this.advance();
          }
          if (cp === $.CARRIAGE_RETURN) {
            this.skipNextNewLine = true;
            return $.LINE_FEED;
          }
          this.skipNextNewLine = false;
          if (unicode.isSurrogate(cp)) {
            cp = this._processSurrogate(cp);
          }
          const isCommonValidRange = cp > 31 && cp < 127 || cp === $.LINE_FEED || cp === $.CARRIAGE_RETURN || cp > 159 && cp < 64976;
          if (!isCommonValidRange) {
            this._checkForProblematicCharacters(cp);
          }
          return cp;
        }
        _checkForProblematicCharacters(cp) {
          if (unicode.isControlCodePoint(cp)) {
            this._err(ERR.controlCharacterInInputStream);
          } else if (unicode.isUndefinedCodePoint(cp)) {
            this._err(ERR.noncharacterInInputStream);
          }
        }
        retreat() {
          if (this.pos === this.lastGapPos) {
            this.lastGapPos = this.gapStack.pop();
            this.pos--;
          }
          this.pos--;
        }
      };
      module.exports = Preprocessor;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/tokenizer/named-entity-data.js
  var require_named_entity_data = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/tokenizer/named-entity-data.js"(exports, module) {
      "use strict";
      module.exports = new Uint16Array([4, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 106, 303, 412, 810, 1432, 1701, 1796, 1987, 2114, 2360, 2420, 2484, 3170, 3251, 4140, 4393, 4575, 4610, 5106, 5512, 5728, 6117, 6274, 6315, 6345, 6427, 6516, 7002, 7910, 8733, 9323, 9870, 10170, 10631, 10893, 11318, 11386, 11467, 12773, 13092, 14474, 14922, 15448, 15542, 16419, 17666, 18166, 18611, 19004, 19095, 19298, 19397, 4, 16, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 140, 150, 158, 169, 176, 194, 199, 210, 216, 222, 226, 242, 256, 266, 283, 294, 108, 105, 103, 5, 198, 1, 59, 148, 1, 198, 80, 5, 38, 1, 59, 156, 1, 38, 99, 117, 116, 101, 5, 193, 1, 59, 167, 1, 193, 114, 101, 118, 101, 59, 1, 258, 4, 2, 105, 121, 182, 191, 114, 99, 5, 194, 1, 59, 189, 1, 194, 59, 1, 1040, 114, 59, 3, 55349, 56580, 114, 97, 118, 101, 5, 192, 1, 59, 208, 1, 192, 112, 104, 97, 59, 1, 913, 97, 99, 114, 59, 1, 256, 100, 59, 1, 10835, 4, 2, 103, 112, 232, 237, 111, 110, 59, 1, 260, 102, 59, 3, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 1, 8289, 105, 110, 103, 5, 197, 1, 59, 264, 1, 197, 4, 2, 99, 115, 272, 277, 114, 59, 3, 55349, 56476, 105, 103, 110, 59, 1, 8788, 105, 108, 100, 101, 5, 195, 1, 59, 292, 1, 195, 109, 108, 5, 196, 1, 59, 301, 1, 196, 4, 8, 97, 99, 101, 102, 111, 114, 115, 117, 321, 350, 354, 383, 388, 394, 400, 405, 4, 2, 99, 114, 327, 336, 107, 115, 108, 97, 115, 104, 59, 1, 8726, 4, 2, 118, 119, 342, 345, 59, 1, 10983, 101, 100, 59, 1, 8966, 121, 59, 1, 1041, 4, 3, 99, 114, 116, 362, 369, 379, 97, 117, 115, 101, 59, 1, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 1, 8492, 97, 59, 1, 914, 114, 59, 3, 55349, 56581, 112, 102, 59, 3, 55349, 56633, 101, 118, 101, 59, 1, 728, 99, 114, 59, 1, 8492, 109, 112, 101, 113, 59, 1, 8782, 4, 14, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 442, 447, 456, 504, 542, 547, 569, 573, 577, 616, 678, 784, 790, 796, 99, 121, 59, 1, 1063, 80, 89, 5, 169, 1, 59, 454, 1, 169, 4, 3, 99, 112, 121, 464, 470, 497, 117, 116, 101, 59, 1, 262, 4, 2, 59, 105, 476, 478, 1, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8517, 108, 101, 121, 115, 59, 1, 8493, 4, 4, 97, 101, 105, 111, 514, 520, 530, 535, 114, 111, 110, 59, 1, 268, 100, 105, 108, 5, 199, 1, 59, 528, 1, 199, 114, 99, 59, 1, 264, 110, 105, 110, 116, 59, 1, 8752, 111, 116, 59, 1, 266, 4, 2, 100, 110, 553, 560, 105, 108, 108, 97, 59, 1, 184, 116, 101, 114, 68, 111, 116, 59, 1, 183, 114, 59, 1, 8493, 105, 59, 1, 935, 114, 99, 108, 101, 4, 4, 68, 77, 80, 84, 591, 596, 603, 609, 111, 116, 59, 1, 8857, 105, 110, 117, 115, 59, 1, 8854, 108, 117, 115, 59, 1, 8853, 105, 109, 101, 115, 59, 1, 8855, 111, 4, 2, 99, 115, 623, 646, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8754, 101, 67, 117, 114, 108, 121, 4, 2, 68, 81, 658, 671, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8221, 117, 111, 116, 101, 59, 1, 8217, 4, 4, 108, 110, 112, 117, 688, 701, 736, 753, 111, 110, 4, 2, 59, 101, 696, 698, 1, 8759, 59, 1, 10868, 4, 3, 103, 105, 116, 709, 717, 722, 114, 117, 101, 110, 116, 59, 1, 8801, 110, 116, 59, 1, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8750, 4, 2, 102, 114, 742, 745, 59, 1, 8450, 111, 100, 117, 99, 116, 59, 1, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8755, 111, 115, 115, 59, 1, 10799, 99, 114, 59, 3, 55349, 56478, 112, 4, 2, 59, 67, 803, 805, 1, 8915, 97, 112, 59, 1, 8781, 4, 11, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 834, 850, 855, 860, 865, 888, 903, 916, 921, 1011, 1415, 4, 2, 59, 111, 840, 842, 1, 8517, 116, 114, 97, 104, 100, 59, 1, 10513, 99, 121, 59, 1, 1026, 99, 121, 59, 1, 1029, 99, 121, 59, 1, 1039, 4, 3, 103, 114, 115, 873, 879, 883, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8609, 104, 118, 59, 1, 10980, 4, 2, 97, 121, 894, 900, 114, 111, 110, 59, 1, 270, 59, 1, 1044, 108, 4, 2, 59, 116, 910, 912, 1, 8711, 97, 59, 1, 916, 114, 59, 3, 55349, 56583, 4, 2, 97, 102, 927, 998, 4, 2, 99, 109, 933, 992, 114, 105, 116, 105, 99, 97, 108, 4, 4, 65, 68, 71, 84, 950, 957, 978, 985, 99, 117, 116, 101, 59, 1, 180, 111, 4, 2, 116, 117, 964, 967, 59, 1, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 1, 733, 114, 97, 118, 101, 59, 1, 96, 105, 108, 100, 101, 59, 1, 732, 111, 110, 100, 59, 1, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8518, 4, 4, 112, 116, 117, 119, 1021, 1026, 1048, 1249, 102, 59, 3, 55349, 56635, 4, 3, 59, 68, 69, 1034, 1036, 1041, 1, 168, 111, 116, 59, 1, 8412, 113, 117, 97, 108, 59, 1, 8784, 98, 108, 101, 4, 6, 67, 68, 76, 82, 85, 86, 1065, 1082, 1101, 1189, 1211, 1236, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8751, 111, 4, 2, 116, 119, 1089, 1092, 59, 1, 168, 110, 65, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 101, 111, 1107, 1141, 102, 116, 4, 3, 65, 82, 84, 1117, 1124, 1136, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8660, 101, 101, 59, 1, 10980, 110, 103, 4, 2, 76, 82, 1149, 1177, 101, 102, 116, 4, 2, 65, 82, 1158, 1165, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10233, 105, 103, 104, 116, 4, 2, 65, 84, 1199, 1206, 114, 114, 111, 119, 59, 1, 8658, 101, 101, 59, 1, 8872, 112, 4, 2, 65, 68, 1218, 1225, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8741, 110, 4, 6, 65, 66, 76, 82, 84, 97, 1264, 1292, 1299, 1352, 1391, 1408, 114, 114, 111, 119, 4, 3, 59, 66, 85, 1276, 1278, 1283, 1, 8595, 97, 114, 59, 1, 10515, 112, 65, 114, 114, 111, 119, 59, 1, 8693, 114, 101, 118, 101, 59, 1, 785, 101, 102, 116, 4, 3, 82, 84, 86, 1310, 1323, 1334, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 1, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10590, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1345, 1347, 1, 8637, 97, 114, 59, 1, 10582, 105, 103, 104, 116, 4, 2, 84, 86, 1362, 1373, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10591, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1384, 1386, 1, 8641, 97, 114, 59, 1, 10583, 101, 101, 4, 2, 59, 65, 1399, 1401, 1, 8868, 114, 114, 111, 119, 59, 1, 8615, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 99, 116, 1421, 1426, 114, 59, 3, 55349, 56479, 114, 111, 107, 59, 1, 272, 4, 16, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1466, 1470, 1478, 1489, 1515, 1520, 1525, 1536, 1544, 1593, 1609, 1617, 1650, 1664, 1668, 1677, 71, 59, 1, 330, 72, 5, 208, 1, 59, 1476, 1, 208, 99, 117, 116, 101, 5, 201, 1, 59, 1487, 1, 201, 4, 3, 97, 105, 121, 1497, 1503, 1512, 114, 111, 110, 59, 1, 282, 114, 99, 5, 202, 1, 59, 1510, 1, 202, 59, 1, 1069, 111, 116, 59, 1, 278, 114, 59, 3, 55349, 56584, 114, 97, 118, 101, 5, 200, 1, 59, 1534, 1, 200, 101, 109, 101, 110, 116, 59, 1, 8712, 4, 2, 97, 112, 1550, 1555, 99, 114, 59, 1, 274, 116, 121, 4, 2, 83, 86, 1563, 1576, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9643, 4, 2, 103, 112, 1599, 1604, 111, 110, 59, 1, 280, 102, 59, 3, 55349, 56636, 115, 105, 108, 111, 110, 59, 1, 917, 117, 4, 2, 97, 105, 1624, 1640, 108, 4, 2, 59, 84, 1631, 1633, 1, 10869, 105, 108, 100, 101, 59, 1, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8652, 4, 2, 99, 105, 1656, 1660, 114, 59, 1, 8496, 109, 59, 1, 10867, 97, 59, 1, 919, 109, 108, 5, 203, 1, 59, 1675, 1, 203, 4, 2, 105, 112, 1683, 1689, 115, 116, 115, 59, 1, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 1, 8519, 4, 5, 99, 102, 105, 111, 115, 1713, 1717, 1722, 1762, 1791, 121, 59, 1, 1060, 114, 59, 3, 55349, 56585, 108, 108, 101, 100, 4, 2, 83, 86, 1732, 1745, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9642, 4, 3, 112, 114, 117, 1770, 1775, 1781, 102, 59, 3, 55349, 56637, 65, 108, 108, 59, 1, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 1, 8497, 99, 114, 59, 1, 8497, 4, 12, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1822, 1827, 1834, 1848, 1855, 1877, 1882, 1887, 1890, 1896, 1978, 1984, 99, 121, 59, 1, 1027, 5, 62, 1, 59, 1832, 1, 62, 109, 109, 97, 4, 2, 59, 100, 1843, 1845, 1, 915, 59, 1, 988, 114, 101, 118, 101, 59, 1, 286, 4, 3, 101, 105, 121, 1863, 1869, 1874, 100, 105, 108, 59, 1, 290, 114, 99, 59, 1, 284, 59, 1, 1043, 111, 116, 59, 1, 288, 114, 59, 3, 55349, 56586, 59, 1, 8921, 112, 102, 59, 3, 55349, 56638, 101, 97, 116, 101, 114, 4, 6, 69, 70, 71, 76, 83, 84, 1915, 1933, 1944, 1953, 1959, 1971, 113, 117, 97, 108, 4, 2, 59, 76, 1925, 1927, 1, 8805, 101, 115, 115, 59, 1, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8807, 114, 101, 97, 116, 101, 114, 59, 1, 10914, 101, 115, 115, 59, 1, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10878, 105, 108, 100, 101, 59, 1, 8819, 99, 114, 59, 3, 55349, 56482, 59, 1, 8811, 4, 8, 65, 97, 99, 102, 105, 111, 115, 117, 2005, 2012, 2026, 2032, 2036, 2049, 2073, 2089, 82, 68, 99, 121, 59, 1, 1066, 4, 2, 99, 116, 2018, 2023, 101, 107, 59, 1, 711, 59, 1, 94, 105, 114, 99, 59, 1, 292, 114, 59, 1, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 1, 8459, 4, 2, 112, 114, 2055, 2059, 102, 59, 1, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 1, 9472, 4, 2, 99, 116, 2079, 2083, 114, 59, 1, 8459, 114, 111, 107, 59, 1, 294, 109, 112, 4, 2, 68, 69, 2097, 2107, 111, 119, 110, 72, 117, 109, 112, 59, 1, 8782, 113, 117, 97, 108, 59, 1, 8783, 4, 14, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 2144, 2149, 2155, 2160, 2171, 2189, 2194, 2198, 2209, 2245, 2307, 2329, 2334, 2341, 99, 121, 59, 1, 1045, 108, 105, 103, 59, 1, 306, 99, 121, 59, 1, 1025, 99, 117, 116, 101, 5, 205, 1, 59, 2169, 1, 205, 4, 2, 105, 121, 2177, 2186, 114, 99, 5, 206, 1, 59, 2184, 1, 206, 59, 1, 1048, 111, 116, 59, 1, 304, 114, 59, 1, 8465, 114, 97, 118, 101, 5, 204, 1, 59, 2207, 1, 204, 4, 3, 59, 97, 112, 2217, 2219, 2238, 1, 8465, 4, 2, 99, 103, 2225, 2229, 114, 59, 1, 298, 105, 110, 97, 114, 121, 73, 59, 1, 8520, 108, 105, 101, 115, 59, 1, 8658, 4, 2, 116, 118, 2251, 2281, 4, 2, 59, 101, 2257, 2259, 1, 8748, 4, 2, 103, 114, 2265, 2271, 114, 97, 108, 59, 1, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8898, 105, 115, 105, 98, 108, 101, 4, 2, 67, 84, 2293, 2300, 111, 109, 109, 97, 59, 1, 8291, 105, 109, 101, 115, 59, 1, 8290, 4, 3, 103, 112, 116, 2315, 2320, 2325, 111, 110, 59, 1, 302, 102, 59, 3, 55349, 56640, 97, 59, 1, 921, 99, 114, 59, 1, 8464, 105, 108, 100, 101, 59, 1, 296, 4, 2, 107, 109, 2347, 2352, 99, 121, 59, 1, 1030, 108, 5, 207, 1, 59, 2358, 1, 207, 4, 5, 99, 102, 111, 115, 117, 2372, 2386, 2391, 2397, 2414, 4, 2, 105, 121, 2378, 2383, 114, 99, 59, 1, 308, 59, 1, 1049, 114, 59, 3, 55349, 56589, 112, 102, 59, 3, 55349, 56641, 4, 2, 99, 101, 2403, 2408, 114, 59, 3, 55349, 56485, 114, 99, 121, 59, 1, 1032, 107, 99, 121, 59, 1, 1028, 4, 7, 72, 74, 97, 99, 102, 111, 115, 2436, 2441, 2446, 2452, 2467, 2472, 2478, 99, 121, 59, 1, 1061, 99, 121, 59, 1, 1036, 112, 112, 97, 59, 1, 922, 4, 2, 101, 121, 2458, 2464, 100, 105, 108, 59, 1, 310, 59, 1, 1050, 114, 59, 3, 55349, 56590, 112, 102, 59, 3, 55349, 56642, 99, 114, 59, 3, 55349, 56486, 4, 11, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2508, 2513, 2520, 2562, 2585, 2981, 2986, 3004, 3011, 3146, 3167, 99, 121, 59, 1, 1033, 5, 60, 1, 59, 2518, 1, 60, 4, 5, 99, 109, 110, 112, 114, 2532, 2538, 2544, 2548, 2558, 117, 116, 101, 59, 1, 313, 98, 100, 97, 59, 1, 923, 103, 59, 1, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 1, 8466, 114, 59, 1, 8606, 4, 3, 97, 101, 121, 2570, 2576, 2582, 114, 111, 110, 59, 1, 317, 100, 105, 108, 59, 1, 315, 59, 1, 1051, 4, 2, 102, 115, 2591, 2907, 116, 4, 10, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2614, 2663, 2672, 2728, 2735, 2760, 2820, 2870, 2888, 2895, 4, 2, 110, 114, 2620, 2633, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10216, 114, 111, 119, 4, 3, 59, 66, 82, 2644, 2646, 2651, 1, 8592, 97, 114, 59, 1, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8646, 101, 105, 108, 105, 110, 103, 59, 1, 8968, 111, 4, 2, 117, 119, 2679, 2692, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10214, 110, 4, 2, 84, 86, 2699, 2710, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10593, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2721, 2723, 1, 8643, 97, 114, 59, 1, 10585, 108, 111, 111, 114, 59, 1, 8970, 105, 103, 104, 116, 4, 2, 65, 86, 2745, 2752, 114, 114, 111, 119, 59, 1, 8596, 101, 99, 116, 111, 114, 59, 1, 10574, 4, 2, 101, 114, 2766, 2792, 101, 4, 3, 59, 65, 86, 2775, 2777, 2784, 1, 8867, 114, 114, 111, 119, 59, 1, 8612, 101, 99, 116, 111, 114, 59, 1, 10586, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 2806, 2808, 2813, 1, 8882, 97, 114, 59, 1, 10703, 113, 117, 97, 108, 59, 1, 8884, 112, 4, 3, 68, 84, 86, 2829, 2841, 2852, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10592, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2863, 2865, 1, 8639, 97, 114, 59, 1, 10584, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2881, 2883, 1, 8636, 97, 114, 59, 1, 10578, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8660, 115, 4, 6, 69, 70, 71, 76, 83, 84, 2922, 2936, 2947, 2956, 2962, 2974, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8806, 114, 101, 97, 116, 101, 114, 59, 1, 8822, 101, 115, 115, 59, 1, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10877, 105, 108, 100, 101, 59, 1, 8818, 114, 59, 3, 55349, 56591, 4, 2, 59, 101, 2992, 2994, 1, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8666, 105, 100, 111, 116, 59, 1, 319, 4, 3, 110, 112, 119, 3019, 3110, 3115, 103, 4, 4, 76, 82, 108, 114, 3030, 3058, 3070, 3098, 101, 102, 116, 4, 2, 65, 82, 3039, 3046, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10230, 101, 102, 116, 4, 2, 97, 114, 3079, 3086, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10233, 102, 59, 3, 55349, 56643, 101, 114, 4, 2, 76, 82, 3123, 3134, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8600, 4, 3, 99, 104, 116, 3154, 3158, 3161, 114, 59, 1, 8466, 59, 1, 8624, 114, 111, 107, 59, 1, 321, 59, 1, 8810, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 3188, 3192, 3196, 3222, 3227, 3237, 3243, 3248, 112, 59, 1, 10501, 121, 59, 1, 1052, 4, 2, 100, 108, 3202, 3213, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8287, 108, 105, 110, 116, 114, 102, 59, 1, 8499, 114, 59, 3, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 1, 8723, 112, 102, 59, 3, 55349, 56644, 99, 114, 59, 1, 8499, 59, 1, 924, 4, 9, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3271, 3276, 3283, 3306, 3422, 3427, 4120, 4126, 4137, 99, 121, 59, 1, 1034, 99, 117, 116, 101, 59, 1, 323, 4, 3, 97, 101, 121, 3291, 3297, 3303, 114, 111, 110, 59, 1, 327, 100, 105, 108, 59, 1, 325, 59, 1, 1053, 4, 3, 103, 115, 119, 3314, 3380, 3415, 97, 116, 105, 118, 101, 4, 3, 77, 84, 86, 3327, 3340, 3365, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8203, 104, 105, 4, 2, 99, 110, 3348, 3357, 107, 83, 112, 97, 99, 101, 59, 1, 8203, 83, 112, 97, 99, 101, 59, 1, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8203, 116, 101, 100, 4, 2, 71, 76, 3389, 3405, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 1, 8810, 76, 105, 110, 101, 59, 1, 10, 114, 59, 3, 55349, 56593, 4, 4, 66, 110, 112, 116, 3437, 3444, 3460, 3464, 114, 101, 97, 107, 59, 1, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 1, 160, 102, 59, 1, 8469, 4, 13, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3492, 3494, 3517, 3536, 3578, 3657, 3685, 3784, 3823, 3860, 3915, 4066, 4107, 1, 10988, 4, 2, 111, 117, 3500, 3510, 110, 103, 114, 117, 101, 110, 116, 59, 1, 8802, 112, 67, 97, 112, 59, 1, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8742, 4, 3, 108, 113, 120, 3544, 3552, 3571, 101, 109, 101, 110, 116, 59, 1, 8713, 117, 97, 108, 4, 2, 59, 84, 3561, 3563, 1, 8800, 105, 108, 100, 101, 59, 3, 8770, 824, 105, 115, 116, 115, 59, 1, 8708, 114, 101, 97, 116, 101, 114, 4, 7, 59, 69, 70, 71, 76, 83, 84, 3600, 3602, 3609, 3621, 3631, 3637, 3650, 1, 8815, 113, 117, 97, 108, 59, 1, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 3, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 3, 8811, 824, 101, 115, 115, 59, 1, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10878, 824, 105, 108, 100, 101, 59, 1, 8821, 117, 109, 112, 4, 2, 68, 69, 3666, 3677, 111, 119, 110, 72, 117, 109, 112, 59, 3, 8782, 824, 113, 117, 97, 108, 59, 3, 8783, 824, 101, 4, 2, 102, 115, 3692, 3724, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3709, 3711, 3717, 1, 8938, 97, 114, 59, 3, 10703, 824, 113, 117, 97, 108, 59, 1, 8940, 115, 4, 6, 59, 69, 71, 76, 83, 84, 3739, 3741, 3748, 3757, 3764, 3777, 1, 8814, 113, 117, 97, 108, 59, 1, 8816, 114, 101, 97, 116, 101, 114, 59, 1, 8824, 101, 115, 115, 59, 3, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10877, 824, 105, 108, 100, 101, 59, 1, 8820, 101, 115, 116, 101, 100, 4, 2, 71, 76, 3795, 3812, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 3, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 3, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 4, 3, 59, 69, 83, 3838, 3840, 3848, 1, 8832, 113, 117, 97, 108, 59, 3, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8928, 4, 2, 101, 105, 3866, 3881, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 1, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3900, 3902, 3908, 1, 8939, 97, 114, 59, 3, 10704, 824, 113, 117, 97, 108, 59, 1, 8941, 4, 2, 113, 117, 3921, 3973, 117, 97, 114, 101, 83, 117, 4, 2, 98, 112, 3933, 3952, 115, 101, 116, 4, 2, 59, 69, 3942, 3945, 3, 8847, 824, 113, 117, 97, 108, 59, 1, 8930, 101, 114, 115, 101, 116, 4, 2, 59, 69, 3963, 3966, 3, 8848, 824, 113, 117, 97, 108, 59, 1, 8931, 4, 3, 98, 99, 112, 3981, 4e3, 4045, 115, 101, 116, 4, 2, 59, 69, 3990, 3993, 3, 8834, 8402, 113, 117, 97, 108, 59, 1, 8840, 99, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 4015, 4017, 4025, 4037, 1, 8833, 113, 117, 97, 108, 59, 3, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8929, 105, 108, 100, 101, 59, 3, 8831, 824, 101, 114, 115, 101, 116, 4, 2, 59, 69, 4056, 4059, 3, 8835, 8402, 113, 117, 97, 108, 59, 1, 8841, 105, 108, 100, 101, 4, 4, 59, 69, 70, 84, 4080, 4082, 4089, 4100, 1, 8769, 113, 117, 97, 108, 59, 1, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8775, 105, 108, 100, 101, 59, 1, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8740, 99, 114, 59, 3, 55349, 56489, 105, 108, 100, 101, 5, 209, 1, 59, 4135, 1, 209, 59, 1, 925, 4, 14, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 4170, 4176, 4187, 4205, 4212, 4217, 4228, 4253, 4259, 4292, 4295, 4316, 4337, 4346, 108, 105, 103, 59, 1, 338, 99, 117, 116, 101, 5, 211, 1, 59, 4185, 1, 211, 4, 2, 105, 121, 4193, 4202, 114, 99, 5, 212, 1, 59, 4200, 1, 212, 59, 1, 1054, 98, 108, 97, 99, 59, 1, 336, 114, 59, 3, 55349, 56594, 114, 97, 118, 101, 5, 210, 1, 59, 4226, 1, 210, 4, 3, 97, 101, 105, 4236, 4241, 4246, 99, 114, 59, 1, 332, 103, 97, 59, 1, 937, 99, 114, 111, 110, 59, 1, 927, 112, 102, 59, 3, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 4, 2, 68, 81, 4272, 4285, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8220, 117, 111, 116, 101, 59, 1, 8216, 59, 1, 10836, 4, 2, 99, 108, 4301, 4306, 114, 59, 3, 55349, 56490, 97, 115, 104, 5, 216, 1, 59, 4314, 1, 216, 105, 4, 2, 108, 109, 4323, 4332, 100, 101, 5, 213, 1, 59, 4330, 1, 213, 101, 115, 59, 1, 10807, 109, 108, 5, 214, 1, 59, 4344, 1, 214, 101, 114, 4, 2, 66, 80, 4354, 4380, 4, 2, 97, 114, 4360, 4364, 114, 59, 1, 8254, 97, 99, 4, 2, 101, 107, 4372, 4375, 59, 1, 9182, 101, 116, 59, 1, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9180, 4, 9, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4413, 4422, 4426, 4431, 4435, 4438, 4448, 4471, 4561, 114, 116, 105, 97, 108, 68, 59, 1, 8706, 121, 59, 1, 1055, 114, 59, 3, 55349, 56595, 105, 59, 1, 934, 59, 1, 928, 117, 115, 77, 105, 110, 117, 115, 59, 1, 177, 4, 2, 105, 112, 4454, 4467, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 1, 8460, 102, 59, 1, 8473, 4, 4, 59, 101, 105, 111, 4481, 4483, 4526, 4531, 1, 10939, 99, 101, 100, 101, 115, 4, 4, 59, 69, 83, 84, 4498, 4500, 4507, 4519, 1, 8826, 113, 117, 97, 108, 59, 1, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8828, 105, 108, 100, 101, 59, 1, 8830, 109, 101, 59, 1, 8243, 4, 2, 100, 112, 4537, 4543, 117, 99, 116, 59, 1, 8719, 111, 114, 116, 105, 111, 110, 4, 2, 59, 97, 4555, 4557, 1, 8759, 108, 59, 1, 8733, 4, 2, 99, 105, 4567, 4572, 114, 59, 3, 55349, 56491, 59, 1, 936, 4, 4, 85, 102, 111, 115, 4585, 4594, 4599, 4604, 79, 84, 5, 34, 1, 59, 4592, 1, 34, 114, 59, 3, 55349, 56596, 112, 102, 59, 1, 8474, 99, 114, 59, 3, 55349, 56492, 4, 12, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4636, 4642, 4650, 4681, 4704, 4763, 4767, 4771, 5047, 5069, 5081, 5094, 97, 114, 114, 59, 1, 10512, 71, 5, 174, 1, 59, 4648, 1, 174, 4, 3, 99, 110, 114, 4658, 4664, 4668, 117, 116, 101, 59, 1, 340, 103, 59, 1, 10219, 114, 4, 2, 59, 116, 4675, 4677, 1, 8608, 108, 59, 1, 10518, 4, 3, 97, 101, 121, 4689, 4695, 4701, 114, 111, 110, 59, 1, 344, 100, 105, 108, 59, 1, 342, 59, 1, 1056, 4, 2, 59, 118, 4710, 4712, 1, 8476, 101, 114, 115, 101, 4, 2, 69, 85, 4722, 4748, 4, 2, 108, 113, 4728, 4736, 101, 109, 101, 110, 116, 59, 1, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10607, 114, 59, 1, 8476, 111, 59, 1, 929, 103, 104, 116, 4, 8, 65, 67, 68, 70, 84, 85, 86, 97, 4792, 4840, 4849, 4905, 4912, 4972, 5022, 5040, 4, 2, 110, 114, 4798, 4811, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10217, 114, 111, 119, 4, 3, 59, 66, 76, 4822, 4824, 4829, 1, 8594, 97, 114, 59, 1, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8644, 101, 105, 108, 105, 110, 103, 59, 1, 8969, 111, 4, 2, 117, 119, 4856, 4869, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10215, 110, 4, 2, 84, 86, 4876, 4887, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10589, 101, 99, 116, 111, 114, 4, 2, 59, 66, 4898, 4900, 1, 8642, 97, 114, 59, 1, 10581, 108, 111, 111, 114, 59, 1, 8971, 4, 2, 101, 114, 4918, 4944, 101, 4, 3, 59, 65, 86, 4927, 4929, 4936, 1, 8866, 114, 114, 111, 119, 59, 1, 8614, 101, 99, 116, 111, 114, 59, 1, 10587, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 4958, 4960, 4965, 1, 8883, 97, 114, 59, 1, 10704, 113, 117, 97, 108, 59, 1, 8885, 112, 4, 3, 68, 84, 86, 4981, 4993, 5004, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10588, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5015, 5017, 1, 8638, 97, 114, 59, 1, 10580, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5033, 5035, 1, 8640, 97, 114, 59, 1, 10579, 114, 114, 111, 119, 59, 1, 8658, 4, 2, 112, 117, 5053, 5057, 102, 59, 1, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 1, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8667, 4, 2, 99, 104, 5087, 5091, 114, 59, 1, 8475, 59, 1, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 1, 10740, 4, 13, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 5134, 5150, 5157, 5164, 5198, 5203, 5259, 5265, 5277, 5283, 5374, 5380, 5385, 4, 2, 67, 99, 5140, 5146, 72, 99, 121, 59, 1, 1065, 121, 59, 1, 1064, 70, 84, 99, 121, 59, 1, 1068, 99, 117, 116, 101, 59, 1, 346, 4, 5, 59, 97, 101, 105, 121, 5176, 5178, 5184, 5190, 5195, 1, 10940, 114, 111, 110, 59, 1, 352, 100, 105, 108, 59, 1, 350, 114, 99, 59, 1, 348, 59, 1, 1057, 114, 59, 3, 55349, 56598, 111, 114, 116, 4, 4, 68, 76, 82, 85, 5216, 5227, 5238, 5250, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8594, 112, 65, 114, 114, 111, 119, 59, 1, 8593, 103, 109, 97, 59, 1, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 1, 8728, 112, 102, 59, 3, 55349, 56650, 4, 2, 114, 117, 5289, 5293, 116, 59, 1, 8730, 97, 114, 101, 4, 4, 59, 73, 83, 85, 5306, 5308, 5322, 5367, 1, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8851, 117, 4, 2, 98, 112, 5329, 5347, 115, 101, 116, 4, 2, 59, 69, 5338, 5340, 1, 8847, 113, 117, 97, 108, 59, 1, 8849, 101, 114, 115, 101, 116, 4, 2, 59, 69, 5358, 5360, 1, 8848, 113, 117, 97, 108, 59, 1, 8850, 110, 105, 111, 110, 59, 1, 8852, 99, 114, 59, 3, 55349, 56494, 97, 114, 59, 1, 8902, 4, 4, 98, 99, 109, 112, 5395, 5420, 5475, 5478, 4, 2, 59, 115, 5401, 5403, 1, 8912, 101, 116, 4, 2, 59, 69, 5411, 5413, 1, 8912, 113, 117, 97, 108, 59, 1, 8838, 4, 2, 99, 104, 5426, 5468, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 5440, 5442, 5449, 5461, 1, 8827, 113, 117, 97, 108, 59, 1, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8829, 105, 108, 100, 101, 59, 1, 8831, 84, 104, 97, 116, 59, 1, 8715, 59, 1, 8721, 4, 3, 59, 101, 115, 5486, 5488, 5507, 1, 8913, 114, 115, 101, 116, 4, 2, 59, 69, 5498, 5500, 1, 8835, 113, 117, 97, 108, 59, 1, 8839, 101, 116, 59, 1, 8913, 4, 11, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5536, 5546, 5552, 5567, 5579, 5602, 5607, 5655, 5695, 5701, 5711, 79, 82, 78, 5, 222, 1, 59, 5544, 1, 222, 65, 68, 69, 59, 1, 8482, 4, 2, 72, 99, 5558, 5563, 99, 121, 59, 1, 1035, 121, 59, 1, 1062, 4, 2, 98, 117, 5573, 5576, 59, 1, 9, 59, 1, 932, 4, 3, 97, 101, 121, 5587, 5593, 5599, 114, 111, 110, 59, 1, 356, 100, 105, 108, 59, 1, 354, 59, 1, 1058, 114, 59, 3, 55349, 56599, 4, 2, 101, 105, 5613, 5631, 4, 2, 114, 116, 5619, 5627, 101, 102, 111, 114, 101, 59, 1, 8756, 97, 59, 1, 920, 4, 2, 99, 110, 5637, 5647, 107, 83, 112, 97, 99, 101, 59, 3, 8287, 8202, 83, 112, 97, 99, 101, 59, 1, 8201, 108, 100, 101, 4, 4, 59, 69, 70, 84, 5668, 5670, 5677, 5688, 1, 8764, 113, 117, 97, 108, 59, 1, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8773, 105, 108, 100, 101, 59, 1, 8776, 112, 102, 59, 3, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 1, 8411, 4, 2, 99, 116, 5717, 5722, 114, 59, 3, 55349, 56495, 114, 111, 107, 59, 1, 358, 4, 14, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 5758, 5789, 5805, 5823, 5830, 5835, 5846, 5852, 5921, 5937, 6089, 6095, 6101, 6108, 4, 2, 99, 114, 5764, 5774, 117, 116, 101, 5, 218, 1, 59, 5772, 1, 218, 114, 4, 2, 59, 111, 5781, 5783, 1, 8607, 99, 105, 114, 59, 1, 10569, 114, 4, 2, 99, 101, 5796, 5800, 121, 59, 1, 1038, 118, 101, 59, 1, 364, 4, 2, 105, 121, 5811, 5820, 114, 99, 5, 219, 1, 59, 5818, 1, 219, 59, 1, 1059, 98, 108, 97, 99, 59, 1, 368, 114, 59, 3, 55349, 56600, 114, 97, 118, 101, 5, 217, 1, 59, 5844, 1, 217, 97, 99, 114, 59, 1, 362, 4, 2, 100, 105, 5858, 5905, 101, 114, 4, 2, 66, 80, 5866, 5892, 4, 2, 97, 114, 5872, 5876, 114, 59, 1, 95, 97, 99, 4, 2, 101, 107, 5884, 5887, 59, 1, 9183, 101, 116, 59, 1, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9181, 111, 110, 4, 2, 59, 80, 5913, 5915, 1, 8899, 108, 117, 115, 59, 1, 8846, 4, 2, 103, 112, 5927, 5932, 111, 110, 59, 1, 370, 102, 59, 3, 55349, 56652, 4, 8, 65, 68, 69, 84, 97, 100, 112, 115, 5955, 5985, 5996, 6009, 6026, 6033, 6044, 6075, 114, 114, 111, 119, 4, 3, 59, 66, 68, 5967, 5969, 5974, 1, 8593, 97, 114, 59, 1, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10606, 101, 101, 4, 2, 59, 65, 6017, 6019, 1, 8869, 114, 114, 111, 119, 59, 1, 8613, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 4, 2, 76, 82, 6052, 6063, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8599, 105, 4, 2, 59, 108, 6082, 6084, 1, 978, 111, 110, 59, 1, 933, 105, 110, 103, 59, 1, 366, 99, 114, 59, 3, 55349, 56496, 105, 108, 100, 101, 59, 1, 360, 109, 108, 5, 220, 1, 59, 6115, 1, 220, 4, 9, 68, 98, 99, 100, 101, 102, 111, 115, 118, 6137, 6143, 6148, 6152, 6166, 6250, 6255, 6261, 6267, 97, 115, 104, 59, 1, 8875, 97, 114, 59, 1, 10987, 121, 59, 1, 1042, 97, 115, 104, 4, 2, 59, 108, 6161, 6163, 1, 8873, 59, 1, 10982, 4, 2, 101, 114, 6172, 6175, 59, 1, 8897, 4, 3, 98, 116, 121, 6183, 6188, 6238, 97, 114, 59, 1, 8214, 4, 2, 59, 105, 6194, 6196, 1, 8214, 99, 97, 108, 4, 4, 66, 76, 83, 84, 6209, 6214, 6220, 6231, 97, 114, 59, 1, 8739, 105, 110, 101, 59, 1, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 1, 10072, 105, 108, 100, 101, 59, 1, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8202, 114, 59, 3, 55349, 56601, 112, 102, 59, 3, 55349, 56653, 99, 114, 59, 3, 55349, 56497, 100, 97, 115, 104, 59, 1, 8874, 4, 5, 99, 101, 102, 111, 115, 6286, 6292, 6298, 6303, 6309, 105, 114, 99, 59, 1, 372, 100, 103, 101, 59, 1, 8896, 114, 59, 3, 55349, 56602, 112, 102, 59, 3, 55349, 56654, 99, 114, 59, 3, 55349, 56498, 4, 4, 102, 105, 111, 115, 6325, 6330, 6333, 6339, 114, 59, 3, 55349, 56603, 59, 1, 926, 112, 102, 59, 3, 55349, 56655, 99, 114, 59, 3, 55349, 56499, 4, 9, 65, 73, 85, 97, 99, 102, 111, 115, 117, 6365, 6370, 6375, 6380, 6391, 6405, 6410, 6416, 6422, 99, 121, 59, 1, 1071, 99, 121, 59, 1, 1031, 99, 121, 59, 1, 1070, 99, 117, 116, 101, 5, 221, 1, 59, 6389, 1, 221, 4, 2, 105, 121, 6397, 6402, 114, 99, 59, 1, 374, 59, 1, 1067, 114, 59, 3, 55349, 56604, 112, 102, 59, 3, 55349, 56656, 99, 114, 59, 3, 55349, 56500, 109, 108, 59, 1, 376, 4, 8, 72, 97, 99, 100, 101, 102, 111, 115, 6445, 6450, 6457, 6472, 6477, 6501, 6505, 6510, 99, 121, 59, 1, 1046, 99, 117, 116, 101, 59, 1, 377, 4, 2, 97, 121, 6463, 6469, 114, 111, 110, 59, 1, 381, 59, 1, 1047, 111, 116, 59, 1, 379, 4, 2, 114, 116, 6483, 6497, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 1, 8203, 97, 59, 1, 918, 114, 59, 1, 8488, 112, 102, 59, 1, 8484, 99, 114, 59, 3, 55349, 56501, 4, 16, 97, 98, 99, 101, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 6550, 6561, 6568, 6612, 6622, 6634, 6645, 6672, 6699, 6854, 6870, 6923, 6933, 6963, 6974, 6983, 99, 117, 116, 101, 5, 225, 1, 59, 6559, 1, 225, 114, 101, 118, 101, 59, 1, 259, 4, 6, 59, 69, 100, 105, 117, 121, 6582, 6584, 6588, 6591, 6600, 6609, 1, 8766, 59, 3, 8766, 819, 59, 1, 8767, 114, 99, 5, 226, 1, 59, 6598, 1, 226, 116, 101, 5, 180, 1, 59, 6607, 1, 180, 59, 1, 1072, 108, 105, 103, 5, 230, 1, 59, 6620, 1, 230, 4, 2, 59, 114, 6628, 6630, 1, 8289, 59, 3, 55349, 56606, 114, 97, 118, 101, 5, 224, 1, 59, 6643, 1, 224, 4, 2, 101, 112, 6651, 6667, 4, 2, 102, 112, 6657, 6663, 115, 121, 109, 59, 1, 8501, 104, 59, 1, 8501, 104, 97, 59, 1, 945, 4, 2, 97, 112, 6678, 6692, 4, 2, 99, 108, 6684, 6688, 114, 59, 1, 257, 103, 59, 1, 10815, 5, 38, 1, 59, 6697, 1, 38, 4, 2, 100, 103, 6705, 6737, 4, 5, 59, 97, 100, 115, 118, 6717, 6719, 6724, 6727, 6734, 1, 8743, 110, 100, 59, 1, 10837, 59, 1, 10844, 108, 111, 112, 101, 59, 1, 10840, 59, 1, 10842, 4, 7, 59, 101, 108, 109, 114, 115, 122, 6753, 6755, 6758, 6762, 6814, 6835, 6848, 1, 8736, 59, 1, 10660, 101, 59, 1, 8736, 115, 100, 4, 2, 59, 97, 6770, 6772, 1, 8737, 4, 8, 97, 98, 99, 100, 101, 102, 103, 104, 6790, 6793, 6796, 6799, 6802, 6805, 6808, 6811, 59, 1, 10664, 59, 1, 10665, 59, 1, 10666, 59, 1, 10667, 59, 1, 10668, 59, 1, 10669, 59, 1, 10670, 59, 1, 10671, 116, 4, 2, 59, 118, 6821, 6823, 1, 8735, 98, 4, 2, 59, 100, 6830, 6832, 1, 8894, 59, 1, 10653, 4, 2, 112, 116, 6841, 6845, 104, 59, 1, 8738, 59, 1, 197, 97, 114, 114, 59, 1, 9084, 4, 2, 103, 112, 6860, 6865, 111, 110, 59, 1, 261, 102, 59, 3, 55349, 56658, 4, 7, 59, 69, 97, 101, 105, 111, 112, 6886, 6888, 6891, 6897, 6900, 6904, 6908, 1, 8776, 59, 1, 10864, 99, 105, 114, 59, 1, 10863, 59, 1, 8778, 100, 59, 1, 8779, 115, 59, 1, 39, 114, 111, 120, 4, 2, 59, 101, 6917, 6919, 1, 8776, 113, 59, 1, 8778, 105, 110, 103, 5, 229, 1, 59, 6931, 1, 229, 4, 3, 99, 116, 121, 6941, 6946, 6949, 114, 59, 3, 55349, 56502, 59, 1, 42, 109, 112, 4, 2, 59, 101, 6957, 6959, 1, 8776, 113, 59, 1, 8781, 105, 108, 100, 101, 5, 227, 1, 59, 6972, 1, 227, 109, 108, 5, 228, 1, 59, 6981, 1, 228, 4, 2, 99, 105, 6989, 6997, 111, 110, 105, 110, 116, 59, 1, 8755, 110, 116, 59, 1, 10769, 4, 16, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 7036, 7041, 7119, 7135, 7149, 7155, 7219, 7224, 7347, 7354, 7463, 7489, 7786, 7793, 7814, 7866, 111, 116, 59, 1, 10989, 4, 2, 99, 114, 7047, 7094, 107, 4, 4, 99, 101, 112, 115, 7058, 7064, 7073, 7080, 111, 110, 103, 59, 1, 8780, 112, 115, 105, 108, 111, 110, 59, 1, 1014, 114, 105, 109, 101, 59, 1, 8245, 105, 109, 4, 2, 59, 101, 7088, 7090, 1, 8765, 113, 59, 1, 8909, 4, 2, 118, 119, 7100, 7105, 101, 101, 59, 1, 8893, 101, 100, 4, 2, 59, 103, 7113, 7115, 1, 8965, 101, 59, 1, 8965, 114, 107, 4, 2, 59, 116, 7127, 7129, 1, 9141, 98, 114, 107, 59, 1, 9142, 4, 2, 111, 121, 7141, 7146, 110, 103, 59, 1, 8780, 59, 1, 1073, 113, 117, 111, 59, 1, 8222, 4, 5, 99, 109, 112, 114, 116, 7167, 7181, 7188, 7193, 7199, 97, 117, 115, 4, 2, 59, 101, 7176, 7178, 1, 8757, 59, 1, 8757, 112, 116, 121, 118, 59, 1, 10672, 115, 105, 59, 1, 1014, 110, 111, 117, 59, 1, 8492, 4, 3, 97, 104, 119, 7207, 7210, 7213, 59, 1, 946, 59, 1, 8502, 101, 101, 110, 59, 1, 8812, 114, 59, 3, 55349, 56607, 103, 4, 7, 99, 111, 115, 116, 117, 118, 119, 7241, 7262, 7288, 7305, 7328, 7335, 7340, 4, 3, 97, 105, 117, 7249, 7253, 7258, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 4, 3, 100, 112, 116, 7270, 7275, 7281, 111, 116, 59, 1, 10752, 108, 117, 115, 59, 1, 10753, 105, 109, 101, 115, 59, 1, 10754, 4, 2, 113, 116, 7294, 7300, 99, 117, 112, 59, 1, 10758, 97, 114, 59, 1, 9733, 114, 105, 97, 110, 103, 108, 101, 4, 2, 100, 117, 7318, 7324, 111, 119, 110, 59, 1, 9661, 112, 59, 1, 9651, 112, 108, 117, 115, 59, 1, 10756, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 97, 114, 111, 119, 59, 1, 10509, 4, 3, 97, 107, 111, 7362, 7436, 7458, 4, 2, 99, 110, 7368, 7432, 107, 4, 3, 108, 115, 116, 7377, 7386, 7394, 111, 122, 101, 110, 103, 101, 59, 1, 10731, 113, 117, 97, 114, 101, 59, 1, 9642, 114, 105, 97, 110, 103, 108, 101, 4, 4, 59, 100, 108, 114, 7411, 7413, 7419, 7425, 1, 9652, 111, 119, 110, 59, 1, 9662, 101, 102, 116, 59, 1, 9666, 105, 103, 104, 116, 59, 1, 9656, 107, 59, 1, 9251, 4, 2, 49, 51, 7442, 7454, 4, 2, 50, 52, 7448, 7451, 59, 1, 9618, 59, 1, 9617, 52, 59, 1, 9619, 99, 107, 59, 1, 9608, 4, 2, 101, 111, 7469, 7485, 4, 2, 59, 113, 7475, 7478, 3, 61, 8421, 117, 105, 118, 59, 3, 8801, 8421, 116, 59, 1, 8976, 4, 4, 112, 116, 119, 120, 7499, 7504, 7517, 7523, 102, 59, 3, 55349, 56659, 4, 2, 59, 116, 7510, 7512, 1, 8869, 111, 109, 59, 1, 8869, 116, 105, 101, 59, 1, 8904, 4, 12, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7549, 7571, 7597, 7619, 7655, 7660, 7682, 7708, 7715, 7721, 7728, 7750, 4, 4, 76, 82, 108, 114, 7559, 7562, 7565, 7568, 59, 1, 9559, 59, 1, 9556, 59, 1, 9558, 59, 1, 9555, 4, 5, 59, 68, 85, 100, 117, 7583, 7585, 7588, 7591, 7594, 1, 9552, 59, 1, 9574, 59, 1, 9577, 59, 1, 9572, 59, 1, 9575, 4, 4, 76, 82, 108, 114, 7607, 7610, 7613, 7616, 59, 1, 9565, 59, 1, 9562, 59, 1, 9564, 59, 1, 9561, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7635, 7637, 7640, 7643, 7646, 7649, 7652, 1, 9553, 59, 1, 9580, 59, 1, 9571, 59, 1, 9568, 59, 1, 9579, 59, 1, 9570, 59, 1, 9567, 111, 120, 59, 1, 10697, 4, 4, 76, 82, 108, 114, 7670, 7673, 7676, 7679, 59, 1, 9557, 59, 1, 9554, 59, 1, 9488, 59, 1, 9484, 4, 5, 59, 68, 85, 100, 117, 7694, 7696, 7699, 7702, 7705, 1, 9472, 59, 1, 9573, 59, 1, 9576, 59, 1, 9516, 59, 1, 9524, 105, 110, 117, 115, 59, 1, 8863, 108, 117, 115, 59, 1, 8862, 105, 109, 101, 115, 59, 1, 8864, 4, 4, 76, 82, 108, 114, 7738, 7741, 7744, 7747, 59, 1, 9563, 59, 1, 9560, 59, 1, 9496, 59, 1, 9492, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7766, 7768, 7771, 7774, 7777, 7780, 7783, 1, 9474, 59, 1, 9578, 59, 1, 9569, 59, 1, 9566, 59, 1, 9532, 59, 1, 9508, 59, 1, 9500, 114, 105, 109, 101, 59, 1, 8245, 4, 2, 101, 118, 7799, 7804, 118, 101, 59, 1, 728, 98, 97, 114, 5, 166, 1, 59, 7812, 1, 166, 4, 4, 99, 101, 105, 111, 7824, 7829, 7834, 7846, 114, 59, 3, 55349, 56503, 109, 105, 59, 1, 8271, 109, 4, 2, 59, 101, 7841, 7843, 1, 8765, 59, 1, 8909, 108, 4, 3, 59, 98, 104, 7855, 7857, 7860, 1, 92, 59, 1, 10693, 115, 117, 98, 59, 1, 10184, 4, 2, 108, 109, 7872, 7885, 108, 4, 2, 59, 101, 7879, 7881, 1, 8226, 116, 59, 1, 8226, 112, 4, 3, 59, 69, 101, 7894, 7896, 7899, 1, 8782, 59, 1, 10926, 4, 2, 59, 113, 7905, 7907, 1, 8783, 59, 1, 8783, 4, 15, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 116, 117, 119, 121, 7942, 8021, 8075, 8080, 8121, 8126, 8157, 8279, 8295, 8430, 8446, 8485, 8491, 8707, 8726, 4, 3, 99, 112, 114, 7950, 7956, 8007, 117, 116, 101, 59, 1, 263, 4, 6, 59, 97, 98, 99, 100, 115, 7970, 7972, 7977, 7984, 7998, 8003, 1, 8745, 110, 100, 59, 1, 10820, 114, 99, 117, 112, 59, 1, 10825, 4, 2, 97, 117, 7990, 7994, 112, 59, 1, 10827, 112, 59, 1, 10823, 111, 116, 59, 1, 10816, 59, 3, 8745, 65024, 4, 2, 101, 111, 8013, 8017, 116, 59, 1, 8257, 110, 59, 1, 711, 4, 4, 97, 101, 105, 117, 8031, 8046, 8056, 8061, 4, 2, 112, 114, 8037, 8041, 115, 59, 1, 10829, 111, 110, 59, 1, 269, 100, 105, 108, 5, 231, 1, 59, 8054, 1, 231, 114, 99, 59, 1, 265, 112, 115, 4, 2, 59, 115, 8069, 8071, 1, 10828, 109, 59, 1, 10832, 111, 116, 59, 1, 267, 4, 3, 100, 109, 110, 8088, 8097, 8104, 105, 108, 5, 184, 1, 59, 8095, 1, 184, 112, 116, 121, 118, 59, 1, 10674, 116, 5, 162, 2, 59, 101, 8112, 8114, 1, 162, 114, 100, 111, 116, 59, 1, 183, 114, 59, 3, 55349, 56608, 4, 3, 99, 101, 105, 8134, 8138, 8154, 121, 59, 1, 1095, 99, 107, 4, 2, 59, 109, 8146, 8148, 1, 10003, 97, 114, 107, 59, 1, 10003, 59, 1, 967, 114, 4, 7, 59, 69, 99, 101, 102, 109, 115, 8174, 8176, 8179, 8258, 8261, 8268, 8273, 1, 9675, 59, 1, 10691, 4, 3, 59, 101, 108, 8187, 8189, 8193, 1, 710, 113, 59, 1, 8791, 101, 4, 2, 97, 100, 8200, 8223, 114, 114, 111, 119, 4, 2, 108, 114, 8210, 8216, 101, 102, 116, 59, 1, 8634, 105, 103, 104, 116, 59, 1, 8635, 4, 5, 82, 83, 97, 99, 100, 8235, 8238, 8241, 8246, 8252, 59, 1, 174, 59, 1, 9416, 115, 116, 59, 1, 8859, 105, 114, 99, 59, 1, 8858, 97, 115, 104, 59, 1, 8861, 59, 1, 8791, 110, 105, 110, 116, 59, 1, 10768, 105, 100, 59, 1, 10991, 99, 105, 114, 59, 1, 10690, 117, 98, 115, 4, 2, 59, 117, 8288, 8290, 1, 9827, 105, 116, 59, 1, 9827, 4, 4, 108, 109, 110, 112, 8305, 8326, 8376, 8400, 111, 110, 4, 2, 59, 101, 8313, 8315, 1, 58, 4, 2, 59, 113, 8321, 8323, 1, 8788, 59, 1, 8788, 4, 2, 109, 112, 8332, 8344, 97, 4, 2, 59, 116, 8339, 8341, 1, 44, 59, 1, 64, 4, 3, 59, 102, 108, 8352, 8354, 8358, 1, 8705, 110, 59, 1, 8728, 101, 4, 2, 109, 120, 8365, 8371, 101, 110, 116, 59, 1, 8705, 101, 115, 59, 1, 8450, 4, 2, 103, 105, 8382, 8395, 4, 2, 59, 100, 8388, 8390, 1, 8773, 111, 116, 59, 1, 10861, 110, 116, 59, 1, 8750, 4, 3, 102, 114, 121, 8408, 8412, 8417, 59, 3, 55349, 56660, 111, 100, 59, 1, 8720, 5, 169, 2, 59, 115, 8424, 8426, 1, 169, 114, 59, 1, 8471, 4, 2, 97, 111, 8436, 8441, 114, 114, 59, 1, 8629, 115, 115, 59, 1, 10007, 4, 2, 99, 117, 8452, 8457, 114, 59, 3, 55349, 56504, 4, 2, 98, 112, 8463, 8474, 4, 2, 59, 101, 8469, 8471, 1, 10959, 59, 1, 10961, 4, 2, 59, 101, 8480, 8482, 1, 10960, 59, 1, 10962, 100, 111, 116, 59, 1, 8943, 4, 7, 100, 101, 108, 112, 114, 118, 119, 8507, 8522, 8536, 8550, 8600, 8697, 8702, 97, 114, 114, 4, 2, 108, 114, 8516, 8519, 59, 1, 10552, 59, 1, 10549, 4, 2, 112, 115, 8528, 8532, 114, 59, 1, 8926, 99, 59, 1, 8927, 97, 114, 114, 4, 2, 59, 112, 8545, 8547, 1, 8630, 59, 1, 10557, 4, 6, 59, 98, 99, 100, 111, 115, 8564, 8566, 8573, 8587, 8592, 8596, 1, 8746, 114, 99, 97, 112, 59, 1, 10824, 4, 2, 97, 117, 8579, 8583, 112, 59, 1, 10822, 112, 59, 1, 10826, 111, 116, 59, 1, 8845, 114, 59, 1, 10821, 59, 3, 8746, 65024, 4, 4, 97, 108, 114, 118, 8610, 8623, 8663, 8672, 114, 114, 4, 2, 59, 109, 8618, 8620, 1, 8631, 59, 1, 10556, 121, 4, 3, 101, 118, 119, 8632, 8651, 8656, 113, 4, 2, 112, 115, 8639, 8645, 114, 101, 99, 59, 1, 8926, 117, 99, 99, 59, 1, 8927, 101, 101, 59, 1, 8910, 101, 100, 103, 101, 59, 1, 8911, 101, 110, 5, 164, 1, 59, 8670, 1, 164, 101, 97, 114, 114, 111, 119, 4, 2, 108, 114, 8684, 8690, 101, 102, 116, 59, 1, 8630, 105, 103, 104, 116, 59, 1, 8631, 101, 101, 59, 1, 8910, 101, 100, 59, 1, 8911, 4, 2, 99, 105, 8713, 8721, 111, 110, 105, 110, 116, 59, 1, 8754, 110, 116, 59, 1, 8753, 108, 99, 116, 121, 59, 1, 9005, 4, 19, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8773, 8778, 8783, 8821, 8839, 8854, 8887, 8914, 8930, 8944, 9036, 9041, 9058, 9197, 9227, 9258, 9281, 9297, 9305, 114, 114, 59, 1, 8659, 97, 114, 59, 1, 10597, 4, 4, 103, 108, 114, 115, 8793, 8799, 8805, 8809, 103, 101, 114, 59, 1, 8224, 101, 116, 104, 59, 1, 8504, 114, 59, 1, 8595, 104, 4, 2, 59, 118, 8816, 8818, 1, 8208, 59, 1, 8867, 4, 2, 107, 108, 8827, 8834, 97, 114, 111, 119, 59, 1, 10511, 97, 99, 59, 1, 733, 4, 2, 97, 121, 8845, 8851, 114, 111, 110, 59, 1, 271, 59, 1, 1076, 4, 3, 59, 97, 111, 8862, 8864, 8880, 1, 8518, 4, 2, 103, 114, 8870, 8876, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8650, 116, 115, 101, 113, 59, 1, 10871, 4, 3, 103, 108, 109, 8895, 8902, 8907, 5, 176, 1, 59, 8900, 1, 176, 116, 97, 59, 1, 948, 112, 116, 121, 118, 59, 1, 10673, 4, 2, 105, 114, 8920, 8926, 115, 104, 116, 59, 1, 10623, 59, 3, 55349, 56609, 97, 114, 4, 2, 108, 114, 8938, 8941, 59, 1, 8643, 59, 1, 8642, 4, 5, 97, 101, 103, 115, 118, 8956, 8986, 8989, 8996, 9001, 109, 4, 3, 59, 111, 115, 8965, 8967, 8983, 1, 8900, 110, 100, 4, 2, 59, 115, 8975, 8977, 1, 8900, 117, 105, 116, 59, 1, 9830, 59, 1, 9830, 59, 1, 168, 97, 109, 109, 97, 59, 1, 989, 105, 110, 59, 1, 8946, 4, 3, 59, 105, 111, 9009, 9011, 9031, 1, 247, 100, 101, 5, 247, 2, 59, 111, 9020, 9022, 1, 247, 110, 116, 105, 109, 101, 115, 59, 1, 8903, 110, 120, 59, 1, 8903, 99, 121, 59, 1, 1106, 99, 4, 2, 111, 114, 9048, 9053, 114, 110, 59, 1, 8990, 111, 112, 59, 1, 8973, 4, 5, 108, 112, 116, 117, 119, 9070, 9076, 9081, 9130, 9144, 108, 97, 114, 59, 1, 36, 102, 59, 3, 55349, 56661, 4, 5, 59, 101, 109, 112, 115, 9093, 9095, 9109, 9116, 9122, 1, 729, 113, 4, 2, 59, 100, 9102, 9104, 1, 8784, 111, 116, 59, 1, 8785, 105, 110, 117, 115, 59, 1, 8760, 108, 117, 115, 59, 1, 8724, 113, 117, 97, 114, 101, 59, 1, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 1, 8966, 110, 4, 3, 97, 100, 104, 9153, 9160, 9172, 114, 114, 111, 119, 59, 1, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 1, 8650, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 9184, 9190, 101, 102, 116, 59, 1, 8643, 105, 103, 104, 116, 59, 1, 8642, 4, 2, 98, 99, 9203, 9211, 107, 97, 114, 111, 119, 59, 1, 10512, 4, 2, 111, 114, 9217, 9222, 114, 110, 59, 1, 8991, 111, 112, 59, 1, 8972, 4, 3, 99, 111, 116, 9235, 9248, 9252, 4, 2, 114, 121, 9241, 9245, 59, 3, 55349, 56505, 59, 1, 1109, 108, 59, 1, 10742, 114, 111, 107, 59, 1, 273, 4, 2, 100, 114, 9264, 9269, 111, 116, 59, 1, 8945, 105, 4, 2, 59, 102, 9276, 9278, 1, 9663, 59, 1, 9662, 4, 2, 97, 104, 9287, 9292, 114, 114, 59, 1, 8693, 97, 114, 59, 1, 10607, 97, 110, 103, 108, 101, 59, 1, 10662, 4, 2, 99, 105, 9311, 9315, 121, 59, 1, 1119, 103, 114, 97, 114, 114, 59, 1, 10239, 4, 18, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 9361, 9376, 9398, 9439, 9444, 9447, 9462, 9495, 9531, 9585, 9598, 9614, 9659, 9755, 9771, 9792, 9808, 9826, 4, 2, 68, 111, 9367, 9372, 111, 116, 59, 1, 10871, 116, 59, 1, 8785, 4, 2, 99, 115, 9382, 9392, 117, 116, 101, 5, 233, 1, 59, 9390, 1, 233, 116, 101, 114, 59, 1, 10862, 4, 4, 97, 105, 111, 121, 9408, 9414, 9430, 9436, 114, 111, 110, 59, 1, 283, 114, 4, 2, 59, 99, 9421, 9423, 1, 8790, 5, 234, 1, 59, 9428, 1, 234, 108, 111, 110, 59, 1, 8789, 59, 1, 1101, 111, 116, 59, 1, 279, 59, 1, 8519, 4, 2, 68, 114, 9453, 9458, 111, 116, 59, 1, 8786, 59, 3, 55349, 56610, 4, 3, 59, 114, 115, 9470, 9472, 9482, 1, 10906, 97, 118, 101, 5, 232, 1, 59, 9480, 1, 232, 4, 2, 59, 100, 9488, 9490, 1, 10902, 111, 116, 59, 1, 10904, 4, 4, 59, 105, 108, 115, 9505, 9507, 9515, 9518, 1, 10905, 110, 116, 101, 114, 115, 59, 1, 9191, 59, 1, 8467, 4, 2, 59, 100, 9524, 9526, 1, 10901, 111, 116, 59, 1, 10903, 4, 3, 97, 112, 115, 9539, 9544, 9564, 99, 114, 59, 1, 275, 116, 121, 4, 3, 59, 115, 118, 9554, 9556, 9561, 1, 8709, 101, 116, 59, 1, 8709, 59, 1, 8709, 112, 4, 2, 49, 59, 9571, 9583, 4, 2, 51, 52, 9577, 9580, 59, 1, 8196, 59, 1, 8197, 1, 8195, 4, 2, 103, 115, 9591, 9594, 59, 1, 331, 112, 59, 1, 8194, 4, 2, 103, 112, 9604, 9609, 111, 110, 59, 1, 281, 102, 59, 3, 55349, 56662, 4, 3, 97, 108, 115, 9622, 9635, 9640, 114, 4, 2, 59, 115, 9629, 9631, 1, 8917, 108, 59, 1, 10723, 117, 115, 59, 1, 10865, 105, 4, 3, 59, 108, 118, 9649, 9651, 9656, 1, 949, 111, 110, 59, 1, 949, 59, 1, 1013, 4, 4, 99, 115, 117, 118, 9669, 9686, 9716, 9747, 4, 2, 105, 111, 9675, 9680, 114, 99, 59, 1, 8790, 108, 111, 110, 59, 1, 8789, 4, 2, 105, 108, 9692, 9696, 109, 59, 1, 8770, 97, 110, 116, 4, 2, 103, 108, 9705, 9710, 116, 114, 59, 1, 10902, 101, 115, 115, 59, 1, 10901, 4, 3, 97, 101, 105, 9724, 9729, 9734, 108, 115, 59, 1, 61, 115, 116, 59, 1, 8799, 118, 4, 2, 59, 68, 9741, 9743, 1, 8801, 68, 59, 1, 10872, 112, 97, 114, 115, 108, 59, 1, 10725, 4, 2, 68, 97, 9761, 9766, 111, 116, 59, 1, 8787, 114, 114, 59, 1, 10609, 4, 3, 99, 100, 105, 9779, 9783, 9788, 114, 59, 1, 8495, 111, 116, 59, 1, 8784, 109, 59, 1, 8770, 4, 2, 97, 104, 9798, 9801, 59, 1, 951, 5, 240, 1, 59, 9806, 1, 240, 4, 2, 109, 114, 9814, 9822, 108, 5, 235, 1, 59, 9820, 1, 235, 111, 59, 1, 8364, 4, 3, 99, 105, 112, 9834, 9838, 9843, 108, 59, 1, 33, 115, 116, 59, 1, 8707, 4, 2, 101, 111, 9849, 9859, 99, 116, 97, 116, 105, 111, 110, 59, 1, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 1, 8519, 4, 12, 97, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 115, 9896, 9910, 9914, 9921, 9954, 9960, 9967, 9989, 9994, 10027, 10036, 10164, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8786, 121, 59, 1, 1092, 109, 97, 108, 101, 59, 1, 9792, 4, 3, 105, 108, 114, 9929, 9935, 9950, 108, 105, 103, 59, 1, 64259, 4, 2, 105, 108, 9941, 9945, 103, 59, 1, 64256, 105, 103, 59, 1, 64260, 59, 3, 55349, 56611, 108, 105, 103, 59, 1, 64257, 108, 105, 103, 59, 3, 102, 106, 4, 3, 97, 108, 116, 9975, 9979, 9984, 116, 59, 1, 9837, 105, 103, 59, 1, 64258, 110, 115, 59, 1, 9649, 111, 102, 59, 1, 402, 4, 2, 112, 114, 1e4, 10005, 102, 59, 3, 55349, 56663, 4, 2, 97, 107, 10011, 10016, 108, 108, 59, 1, 8704, 4, 2, 59, 118, 10022, 10024, 1, 8916, 59, 1, 10969, 97, 114, 116, 105, 110, 116, 59, 1, 10765, 4, 2, 97, 111, 10042, 10159, 4, 2, 99, 115, 10048, 10155, 4, 6, 49, 50, 51, 52, 53, 55, 10062, 10102, 10114, 10135, 10139, 10151, 4, 6, 50, 51, 52, 53, 54, 56, 10076, 10083, 10086, 10093, 10096, 10099, 5, 189, 1, 59, 10081, 1, 189, 59, 1, 8531, 5, 188, 1, 59, 10091, 1, 188, 59, 1, 8533, 59, 1, 8537, 59, 1, 8539, 4, 2, 51, 53, 10108, 10111, 59, 1, 8532, 59, 1, 8534, 4, 3, 52, 53, 56, 10122, 10129, 10132, 5, 190, 1, 59, 10127, 1, 190, 59, 1, 8535, 59, 1, 8540, 53, 59, 1, 8536, 4, 2, 54, 56, 10145, 10148, 59, 1, 8538, 59, 1, 8541, 56, 59, 1, 8542, 108, 59, 1, 8260, 119, 110, 59, 1, 8994, 99, 114, 59, 3, 55349, 56507, 4, 17, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 10206, 10217, 10247, 10254, 10268, 10273, 10358, 10363, 10374, 10380, 10385, 10406, 10458, 10464, 10470, 10497, 10610, 4, 2, 59, 108, 10212, 10214, 1, 8807, 59, 1, 10892, 4, 3, 99, 109, 112, 10225, 10231, 10244, 117, 116, 101, 59, 1, 501, 109, 97, 4, 2, 59, 100, 10239, 10241, 1, 947, 59, 1, 989, 59, 1, 10886, 114, 101, 118, 101, 59, 1, 287, 4, 2, 105, 121, 10260, 10265, 114, 99, 59, 1, 285, 59, 1, 1075, 111, 116, 59, 1, 289, 4, 4, 59, 108, 113, 115, 10283, 10285, 10288, 10308, 1, 8805, 59, 1, 8923, 4, 3, 59, 113, 115, 10296, 10298, 10301, 1, 8805, 59, 1, 8807, 108, 97, 110, 116, 59, 1, 10878, 4, 4, 59, 99, 100, 108, 10318, 10320, 10324, 10345, 1, 10878, 99, 59, 1, 10921, 111, 116, 4, 2, 59, 111, 10332, 10334, 1, 10880, 4, 2, 59, 108, 10340, 10342, 1, 10882, 59, 1, 10884, 4, 2, 59, 101, 10351, 10354, 3, 8923, 65024, 115, 59, 1, 10900, 114, 59, 3, 55349, 56612, 4, 2, 59, 103, 10369, 10371, 1, 8811, 59, 1, 8921, 109, 101, 108, 59, 1, 8503, 99, 121, 59, 1, 1107, 4, 4, 59, 69, 97, 106, 10395, 10397, 10400, 10403, 1, 8823, 59, 1, 10898, 59, 1, 10917, 59, 1, 10916, 4, 4, 69, 97, 101, 115, 10416, 10419, 10434, 10453, 59, 1, 8809, 112, 4, 2, 59, 112, 10426, 10428, 1, 10890, 114, 111, 120, 59, 1, 10890, 4, 2, 59, 113, 10440, 10442, 1, 10888, 4, 2, 59, 113, 10448, 10450, 1, 10888, 59, 1, 8809, 105, 109, 59, 1, 8935, 112, 102, 59, 3, 55349, 56664, 97, 118, 101, 59, 1, 96, 4, 2, 99, 105, 10476, 10480, 114, 59, 1, 8458, 109, 4, 3, 59, 101, 108, 10489, 10491, 10494, 1, 8819, 59, 1, 10894, 59, 1, 10896, 5, 62, 6, 59, 99, 100, 108, 113, 114, 10512, 10514, 10527, 10532, 10538, 10545, 1, 62, 4, 2, 99, 105, 10520, 10523, 59, 1, 10919, 114, 59, 1, 10874, 111, 116, 59, 1, 8919, 80, 97, 114, 59, 1, 10645, 117, 101, 115, 116, 59, 1, 10876, 4, 5, 97, 100, 101, 108, 115, 10557, 10574, 10579, 10599, 10605, 4, 2, 112, 114, 10563, 10570, 112, 114, 111, 120, 59, 1, 10886, 114, 59, 1, 10616, 111, 116, 59, 1, 8919, 113, 4, 2, 108, 113, 10586, 10592, 101, 115, 115, 59, 1, 8923, 108, 101, 115, 115, 59, 1, 10892, 101, 115, 115, 59, 1, 8823, 105, 109, 59, 1, 8819, 4, 2, 101, 110, 10616, 10626, 114, 116, 110, 101, 113, 113, 59, 3, 8809, 65024, 69, 59, 3, 8809, 65024, 4, 10, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 10653, 10658, 10713, 10718, 10724, 10760, 10765, 10786, 10850, 10875, 114, 114, 59, 1, 8660, 4, 4, 105, 108, 109, 114, 10668, 10674, 10678, 10684, 114, 115, 112, 59, 1, 8202, 102, 59, 1, 189, 105, 108, 116, 59, 1, 8459, 4, 2, 100, 114, 10690, 10695, 99, 121, 59, 1, 1098, 4, 3, 59, 99, 119, 10703, 10705, 10710, 1, 8596, 105, 114, 59, 1, 10568, 59, 1, 8621, 97, 114, 59, 1, 8463, 105, 114, 99, 59, 1, 293, 4, 3, 97, 108, 114, 10732, 10748, 10754, 114, 116, 115, 4, 2, 59, 117, 10741, 10743, 1, 9829, 105, 116, 59, 1, 9829, 108, 105, 112, 59, 1, 8230, 99, 111, 110, 59, 1, 8889, 114, 59, 3, 55349, 56613, 115, 4, 2, 101, 119, 10772, 10779, 97, 114, 111, 119, 59, 1, 10533, 97, 114, 111, 119, 59, 1, 10534, 4, 5, 97, 109, 111, 112, 114, 10798, 10803, 10809, 10839, 10844, 114, 114, 59, 1, 8703, 116, 104, 116, 59, 1, 8763, 107, 4, 2, 108, 114, 10816, 10827, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8618, 102, 59, 3, 55349, 56665, 98, 97, 114, 59, 1, 8213, 4, 3, 99, 108, 116, 10858, 10863, 10869, 114, 59, 3, 55349, 56509, 97, 115, 104, 59, 1, 8463, 114, 111, 107, 59, 1, 295, 4, 2, 98, 112, 10881, 10887, 117, 108, 108, 59, 1, 8259, 104, 101, 110, 59, 1, 8208, 4, 15, 97, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 10925, 10936, 10958, 10977, 10990, 11001, 11039, 11045, 11101, 11192, 11220, 11226, 11237, 11285, 11299, 99, 117, 116, 101, 5, 237, 1, 59, 10934, 1, 237, 4, 3, 59, 105, 121, 10944, 10946, 10955, 1, 8291, 114, 99, 5, 238, 1, 59, 10953, 1, 238, 59, 1, 1080, 4, 2, 99, 120, 10964, 10968, 121, 59, 1, 1077, 99, 108, 5, 161, 1, 59, 10975, 1, 161, 4, 2, 102, 114, 10983, 10986, 59, 1, 8660, 59, 3, 55349, 56614, 114, 97, 118, 101, 5, 236, 1, 59, 10999, 1, 236, 4, 4, 59, 105, 110, 111, 11011, 11013, 11028, 11034, 1, 8520, 4, 2, 105, 110, 11019, 11024, 110, 116, 59, 1, 10764, 116, 59, 1, 8749, 102, 105, 110, 59, 1, 10716, 116, 97, 59, 1, 8489, 108, 105, 103, 59, 1, 307, 4, 3, 97, 111, 112, 11053, 11092, 11096, 4, 3, 99, 103, 116, 11061, 11065, 11088, 114, 59, 1, 299, 4, 3, 101, 108, 112, 11073, 11076, 11082, 59, 1, 8465, 105, 110, 101, 59, 1, 8464, 97, 114, 116, 59, 1, 8465, 104, 59, 1, 305, 102, 59, 1, 8887, 101, 100, 59, 1, 437, 4, 5, 59, 99, 102, 111, 116, 11113, 11115, 11121, 11136, 11142, 1, 8712, 97, 114, 101, 59, 1, 8453, 105, 110, 4, 2, 59, 116, 11129, 11131, 1, 8734, 105, 101, 59, 1, 10717, 100, 111, 116, 59, 1, 305, 4, 5, 59, 99, 101, 108, 112, 11154, 11156, 11161, 11179, 11186, 1, 8747, 97, 108, 59, 1, 8890, 4, 2, 103, 114, 11167, 11173, 101, 114, 115, 59, 1, 8484, 99, 97, 108, 59, 1, 8890, 97, 114, 104, 107, 59, 1, 10775, 114, 111, 100, 59, 1, 10812, 4, 4, 99, 103, 112, 116, 11202, 11206, 11211, 11216, 121, 59, 1, 1105, 111, 110, 59, 1, 303, 102, 59, 3, 55349, 56666, 97, 59, 1, 953, 114, 111, 100, 59, 1, 10812, 117, 101, 115, 116, 5, 191, 1, 59, 11235, 1, 191, 4, 2, 99, 105, 11243, 11248, 114, 59, 3, 55349, 56510, 110, 4, 5, 59, 69, 100, 115, 118, 11261, 11263, 11266, 11271, 11282, 1, 8712, 59, 1, 8953, 111, 116, 59, 1, 8949, 4, 2, 59, 118, 11277, 11279, 1, 8948, 59, 1, 8947, 59, 1, 8712, 4, 2, 59, 105, 11291, 11293, 1, 8290, 108, 100, 101, 59, 1, 297, 4, 2, 107, 109, 11305, 11310, 99, 121, 59, 1, 1110, 108, 5, 239, 1, 59, 11316, 1, 239, 4, 6, 99, 102, 109, 111, 115, 117, 11332, 11346, 11351, 11357, 11363, 11380, 4, 2, 105, 121, 11338, 11343, 114, 99, 59, 1, 309, 59, 1, 1081, 114, 59, 3, 55349, 56615, 97, 116, 104, 59, 1, 567, 112, 102, 59, 3, 55349, 56667, 4, 2, 99, 101, 11369, 11374, 114, 59, 3, 55349, 56511, 114, 99, 121, 59, 1, 1112, 107, 99, 121, 59, 1, 1108, 4, 8, 97, 99, 102, 103, 104, 106, 111, 115, 11404, 11418, 11433, 11438, 11445, 11450, 11455, 11461, 112, 112, 97, 4, 2, 59, 118, 11413, 11415, 1, 954, 59, 1, 1008, 4, 2, 101, 121, 11424, 11430, 100, 105, 108, 59, 1, 311, 59, 1, 1082, 114, 59, 3, 55349, 56616, 114, 101, 101, 110, 59, 1, 312, 99, 121, 59, 1, 1093, 99, 121, 59, 1, 1116, 112, 102, 59, 3, 55349, 56668, 99, 114, 59, 3, 55349, 56512, 4, 23, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 11515, 11538, 11544, 11555, 11560, 11721, 11780, 11818, 11868, 12136, 12160, 12171, 12203, 12208, 12246, 12275, 12327, 12509, 12523, 12569, 12641, 12732, 12752, 4, 3, 97, 114, 116, 11523, 11528, 11532, 114, 114, 59, 1, 8666, 114, 59, 1, 8656, 97, 105, 108, 59, 1, 10523, 97, 114, 114, 59, 1, 10510, 4, 2, 59, 103, 11550, 11552, 1, 8806, 59, 1, 10891, 97, 114, 59, 1, 10594, 4, 9, 99, 101, 103, 109, 110, 112, 113, 114, 116, 11580, 11586, 11594, 11600, 11606, 11624, 11627, 11636, 11694, 117, 116, 101, 59, 1, 314, 109, 112, 116, 121, 118, 59, 1, 10676, 114, 97, 110, 59, 1, 8466, 98, 100, 97, 59, 1, 955, 103, 4, 3, 59, 100, 108, 11615, 11617, 11620, 1, 10216, 59, 1, 10641, 101, 59, 1, 10216, 59, 1, 10885, 117, 111, 5, 171, 1, 59, 11634, 1, 171, 114, 4, 8, 59, 98, 102, 104, 108, 112, 115, 116, 11655, 11657, 11669, 11673, 11677, 11681, 11685, 11690, 1, 8592, 4, 2, 59, 102, 11663, 11665, 1, 8676, 115, 59, 1, 10527, 115, 59, 1, 10525, 107, 59, 1, 8617, 112, 59, 1, 8619, 108, 59, 1, 10553, 105, 109, 59, 1, 10611, 108, 59, 1, 8610, 4, 3, 59, 97, 101, 11702, 11704, 11709, 1, 10923, 105, 108, 59, 1, 10521, 4, 2, 59, 115, 11715, 11717, 1, 10925, 59, 3, 10925, 65024, 4, 3, 97, 98, 114, 11729, 11734, 11739, 114, 114, 59, 1, 10508, 114, 107, 59, 1, 10098, 4, 2, 97, 107, 11745, 11758, 99, 4, 2, 101, 107, 11752, 11755, 59, 1, 123, 59, 1, 91, 4, 2, 101, 115, 11764, 11767, 59, 1, 10635, 108, 4, 2, 100, 117, 11774, 11777, 59, 1, 10639, 59, 1, 10637, 4, 4, 97, 101, 117, 121, 11790, 11796, 11811, 11815, 114, 111, 110, 59, 1, 318, 4, 2, 100, 105, 11802, 11807, 105, 108, 59, 1, 316, 108, 59, 1, 8968, 98, 59, 1, 123, 59, 1, 1083, 4, 4, 99, 113, 114, 115, 11828, 11832, 11845, 11864, 97, 59, 1, 10550, 117, 111, 4, 2, 59, 114, 11840, 11842, 1, 8220, 59, 1, 8222, 4, 2, 100, 117, 11851, 11857, 104, 97, 114, 59, 1, 10599, 115, 104, 97, 114, 59, 1, 10571, 104, 59, 1, 8626, 4, 5, 59, 102, 103, 113, 115, 11880, 11882, 12008, 12011, 12031, 1, 8804, 116, 4, 5, 97, 104, 108, 114, 116, 11895, 11913, 11935, 11947, 11996, 114, 114, 111, 119, 4, 2, 59, 116, 11905, 11907, 1, 8592, 97, 105, 108, 59, 1, 8610, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 11925, 11931, 111, 119, 110, 59, 1, 8637, 112, 59, 1, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8647, 105, 103, 104, 116, 4, 3, 97, 104, 115, 11959, 11974, 11984, 114, 114, 111, 119, 4, 2, 59, 115, 11969, 11971, 1, 8596, 59, 1, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8907, 59, 1, 8922, 4, 3, 59, 113, 115, 12019, 12021, 12024, 1, 8804, 59, 1, 8806, 108, 97, 110, 116, 59, 1, 10877, 4, 5, 59, 99, 100, 103, 115, 12043, 12045, 12049, 12070, 12083, 1, 10877, 99, 59, 1, 10920, 111, 116, 4, 2, 59, 111, 12057, 12059, 1, 10879, 4, 2, 59, 114, 12065, 12067, 1, 10881, 59, 1, 10883, 4, 2, 59, 101, 12076, 12079, 3, 8922, 65024, 115, 59, 1, 10899, 4, 5, 97, 100, 101, 103, 115, 12095, 12103, 12108, 12126, 12131, 112, 112, 114, 111, 120, 59, 1, 10885, 111, 116, 59, 1, 8918, 113, 4, 2, 103, 113, 12115, 12120, 116, 114, 59, 1, 8922, 103, 116, 114, 59, 1, 10891, 116, 114, 59, 1, 8822, 105, 109, 59, 1, 8818, 4, 3, 105, 108, 114, 12144, 12150, 12156, 115, 104, 116, 59, 1, 10620, 111, 111, 114, 59, 1, 8970, 59, 3, 55349, 56617, 4, 2, 59, 69, 12166, 12168, 1, 8822, 59, 1, 10897, 4, 2, 97, 98, 12177, 12198, 114, 4, 2, 100, 117, 12184, 12187, 59, 1, 8637, 4, 2, 59, 108, 12193, 12195, 1, 8636, 59, 1, 10602, 108, 107, 59, 1, 9604, 99, 121, 59, 1, 1113, 4, 5, 59, 97, 99, 104, 116, 12220, 12222, 12227, 12235, 12241, 1, 8810, 114, 114, 59, 1, 8647, 111, 114, 110, 101, 114, 59, 1, 8990, 97, 114, 100, 59, 1, 10603, 114, 105, 59, 1, 9722, 4, 2, 105, 111, 12252, 12258, 100, 111, 116, 59, 1, 320, 117, 115, 116, 4, 2, 59, 97, 12267, 12269, 1, 9136, 99, 104, 101, 59, 1, 9136, 4, 4, 69, 97, 101, 115, 12285, 12288, 12303, 12322, 59, 1, 8808, 112, 4, 2, 59, 112, 12295, 12297, 1, 10889, 114, 111, 120, 59, 1, 10889, 4, 2, 59, 113, 12309, 12311, 1, 10887, 4, 2, 59, 113, 12317, 12319, 1, 10887, 59, 1, 8808, 105, 109, 59, 1, 8934, 4, 8, 97, 98, 110, 111, 112, 116, 119, 122, 12345, 12359, 12364, 12421, 12446, 12467, 12474, 12490, 4, 2, 110, 114, 12351, 12355, 103, 59, 1, 10220, 114, 59, 1, 8701, 114, 107, 59, 1, 10214, 103, 4, 3, 108, 109, 114, 12373, 12401, 12409, 101, 102, 116, 4, 2, 97, 114, 12382, 12389, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10231, 97, 112, 115, 116, 111, 59, 1, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10230, 112, 97, 114, 114, 111, 119, 4, 2, 108, 114, 12433, 12439, 101, 102, 116, 59, 1, 8619, 105, 103, 104, 116, 59, 1, 8620, 4, 3, 97, 102, 108, 12454, 12458, 12462, 114, 59, 1, 10629, 59, 3, 55349, 56669, 117, 115, 59, 1, 10797, 105, 109, 101, 115, 59, 1, 10804, 4, 2, 97, 98, 12480, 12485, 115, 116, 59, 1, 8727, 97, 114, 59, 1, 95, 4, 3, 59, 101, 102, 12498, 12500, 12506, 1, 9674, 110, 103, 101, 59, 1, 9674, 59, 1, 10731, 97, 114, 4, 2, 59, 108, 12517, 12519, 1, 40, 116, 59, 1, 10643, 4, 5, 97, 99, 104, 109, 116, 12535, 12540, 12548, 12561, 12564, 114, 114, 59, 1, 8646, 111, 114, 110, 101, 114, 59, 1, 8991, 97, 114, 4, 2, 59, 100, 12556, 12558, 1, 8651, 59, 1, 10605, 59, 1, 8206, 114, 105, 59, 1, 8895, 4, 6, 97, 99, 104, 105, 113, 116, 12583, 12589, 12594, 12597, 12614, 12635, 113, 117, 111, 59, 1, 8249, 114, 59, 3, 55349, 56513, 59, 1, 8624, 109, 4, 3, 59, 101, 103, 12606, 12608, 12611, 1, 8818, 59, 1, 10893, 59, 1, 10895, 4, 2, 98, 117, 12620, 12623, 59, 1, 91, 111, 4, 2, 59, 114, 12630, 12632, 1, 8216, 59, 1, 8218, 114, 111, 107, 59, 1, 322, 5, 60, 8, 59, 99, 100, 104, 105, 108, 113, 114, 12660, 12662, 12675, 12680, 12686, 12692, 12698, 12705, 1, 60, 4, 2, 99, 105, 12668, 12671, 59, 1, 10918, 114, 59, 1, 10873, 111, 116, 59, 1, 8918, 114, 101, 101, 59, 1, 8907, 109, 101, 115, 59, 1, 8905, 97, 114, 114, 59, 1, 10614, 117, 101, 115, 116, 59, 1, 10875, 4, 2, 80, 105, 12711, 12716, 97, 114, 59, 1, 10646, 4, 3, 59, 101, 102, 12724, 12726, 12729, 1, 9667, 59, 1, 8884, 59, 1, 9666, 114, 4, 2, 100, 117, 12739, 12746, 115, 104, 97, 114, 59, 1, 10570, 104, 97, 114, 59, 1, 10598, 4, 2, 101, 110, 12758, 12768, 114, 116, 110, 101, 113, 113, 59, 3, 8808, 65024, 69, 59, 3, 8808, 65024, 4, 14, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 12803, 12809, 12893, 12908, 12914, 12928, 12933, 12937, 13011, 13025, 13032, 13049, 13052, 13069, 68, 111, 116, 59, 1, 8762, 4, 4, 99, 108, 112, 114, 12819, 12827, 12849, 12887, 114, 5, 175, 1, 59, 12825, 1, 175, 4, 2, 101, 116, 12833, 12836, 59, 1, 9794, 4, 2, 59, 101, 12842, 12844, 1, 10016, 115, 101, 59, 1, 10016, 4, 2, 59, 115, 12855, 12857, 1, 8614, 116, 111, 4, 4, 59, 100, 108, 117, 12869, 12871, 12877, 12883, 1, 8614, 111, 119, 110, 59, 1, 8615, 101, 102, 116, 59, 1, 8612, 112, 59, 1, 8613, 107, 101, 114, 59, 1, 9646, 4, 2, 111, 121, 12899, 12905, 109, 109, 97, 59, 1, 10793, 59, 1, 1084, 97, 115, 104, 59, 1, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 1, 8737, 114, 59, 3, 55349, 56618, 111, 59, 1, 8487, 4, 3, 99, 100, 110, 12945, 12954, 12985, 114, 111, 5, 181, 1, 59, 12952, 1, 181, 4, 4, 59, 97, 99, 100, 12964, 12966, 12971, 12976, 1, 8739, 115, 116, 59, 1, 42, 105, 114, 59, 1, 10992, 111, 116, 5, 183, 1, 59, 12983, 1, 183, 117, 115, 4, 3, 59, 98, 100, 12995, 12997, 13e3, 1, 8722, 59, 1, 8863, 4, 2, 59, 117, 13006, 13008, 1, 8760, 59, 1, 10794, 4, 2, 99, 100, 13017, 13021, 112, 59, 1, 10971, 114, 59, 1, 8230, 112, 108, 117, 115, 59, 1, 8723, 4, 2, 100, 112, 13038, 13044, 101, 108, 115, 59, 1, 8871, 102, 59, 3, 55349, 56670, 59, 1, 8723, 4, 2, 99, 116, 13058, 13063, 114, 59, 3, 55349, 56514, 112, 111, 115, 59, 1, 8766, 4, 3, 59, 108, 109, 13077, 13079, 13087, 1, 956, 116, 105, 109, 97, 112, 59, 1, 8888, 97, 112, 59, 1, 8888, 4, 24, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 13142, 13165, 13217, 13229, 13247, 13330, 13359, 13414, 13420, 13508, 13513, 13579, 13602, 13626, 13631, 13762, 13767, 13855, 13936, 13995, 14214, 14285, 14312, 14432, 4, 2, 103, 116, 13148, 13152, 59, 3, 8921, 824, 4, 2, 59, 118, 13158, 13161, 3, 8811, 8402, 59, 3, 8811, 824, 4, 3, 101, 108, 116, 13173, 13200, 13204, 102, 116, 4, 2, 97, 114, 13181, 13188, 114, 114, 111, 119, 59, 1, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8654, 59, 3, 8920, 824, 4, 2, 59, 118, 13210, 13213, 3, 8810, 8402, 59, 3, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8655, 4, 2, 68, 100, 13235, 13241, 97, 115, 104, 59, 1, 8879, 97, 115, 104, 59, 1, 8878, 4, 5, 98, 99, 110, 112, 116, 13259, 13264, 13270, 13275, 13308, 108, 97, 59, 1, 8711, 117, 116, 101, 59, 1, 324, 103, 59, 3, 8736, 8402, 4, 5, 59, 69, 105, 111, 112, 13287, 13289, 13293, 13298, 13302, 1, 8777, 59, 3, 10864, 824, 100, 59, 3, 8779, 824, 115, 59, 1, 329, 114, 111, 120, 59, 1, 8777, 117, 114, 4, 2, 59, 97, 13316, 13318, 1, 9838, 108, 4, 2, 59, 115, 13325, 13327, 1, 9838, 59, 1, 8469, 4, 2, 115, 117, 13336, 13344, 112, 5, 160, 1, 59, 13342, 1, 160, 109, 112, 4, 2, 59, 101, 13352, 13355, 3, 8782, 824, 59, 3, 8783, 824, 4, 5, 97, 101, 111, 117, 121, 13371, 13385, 13391, 13407, 13411, 4, 2, 112, 114, 13377, 13380, 59, 1, 10819, 111, 110, 59, 1, 328, 100, 105, 108, 59, 1, 326, 110, 103, 4, 2, 59, 100, 13399, 13401, 1, 8775, 111, 116, 59, 3, 10861, 824, 112, 59, 1, 10818, 59, 1, 1085, 97, 115, 104, 59, 1, 8211, 4, 7, 59, 65, 97, 100, 113, 115, 120, 13436, 13438, 13443, 13466, 13472, 13478, 13494, 1, 8800, 114, 114, 59, 1, 8663, 114, 4, 2, 104, 114, 13450, 13454, 107, 59, 1, 10532, 4, 2, 59, 111, 13460, 13462, 1, 8599, 119, 59, 1, 8599, 111, 116, 59, 3, 8784, 824, 117, 105, 118, 59, 1, 8802, 4, 2, 101, 105, 13484, 13489, 97, 114, 59, 1, 10536, 109, 59, 3, 8770, 824, 105, 115, 116, 4, 2, 59, 115, 13503, 13505, 1, 8708, 59, 1, 8708, 114, 59, 3, 55349, 56619, 4, 4, 69, 101, 115, 116, 13523, 13527, 13563, 13568, 59, 3, 8807, 824, 4, 3, 59, 113, 115, 13535, 13537, 13559, 1, 8817, 4, 3, 59, 113, 115, 13545, 13547, 13551, 1, 8817, 59, 3, 8807, 824, 108, 97, 110, 116, 59, 3, 10878, 824, 59, 3, 10878, 824, 105, 109, 59, 1, 8821, 4, 2, 59, 114, 13574, 13576, 1, 8815, 59, 1, 8815, 4, 3, 65, 97, 112, 13587, 13592, 13597, 114, 114, 59, 1, 8654, 114, 114, 59, 1, 8622, 97, 114, 59, 1, 10994, 4, 3, 59, 115, 118, 13610, 13612, 13623, 1, 8715, 4, 2, 59, 100, 13618, 13620, 1, 8956, 59, 1, 8954, 59, 1, 8715, 99, 121, 59, 1, 1114, 4, 7, 65, 69, 97, 100, 101, 115, 116, 13647, 13652, 13656, 13661, 13665, 13737, 13742, 114, 114, 59, 1, 8653, 59, 3, 8806, 824, 114, 114, 59, 1, 8602, 114, 59, 1, 8229, 4, 4, 59, 102, 113, 115, 13675, 13677, 13703, 13725, 1, 8816, 116, 4, 2, 97, 114, 13684, 13691, 114, 114, 111, 119, 59, 1, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8622, 4, 3, 59, 113, 115, 13711, 13713, 13717, 1, 8816, 59, 3, 8806, 824, 108, 97, 110, 116, 59, 3, 10877, 824, 4, 2, 59, 115, 13731, 13734, 3, 10877, 824, 59, 1, 8814, 105, 109, 59, 1, 8820, 4, 2, 59, 114, 13748, 13750, 1, 8814, 105, 4, 2, 59, 101, 13757, 13759, 1, 8938, 59, 1, 8940, 105, 100, 59, 1, 8740, 4, 2, 112, 116, 13773, 13778, 102, 59, 3, 55349, 56671, 5, 172, 3, 59, 105, 110, 13787, 13789, 13829, 1, 172, 110, 4, 4, 59, 69, 100, 118, 13800, 13802, 13806, 13812, 1, 8713, 59, 3, 8953, 824, 111, 116, 59, 3, 8949, 824, 4, 3, 97, 98, 99, 13820, 13823, 13826, 59, 1, 8713, 59, 1, 8951, 59, 1, 8950, 105, 4, 2, 59, 118, 13836, 13838, 1, 8716, 4, 3, 97, 98, 99, 13846, 13849, 13852, 59, 1, 8716, 59, 1, 8958, 59, 1, 8957, 4, 3, 97, 111, 114, 13863, 13892, 13899, 114, 4, 4, 59, 97, 115, 116, 13874, 13876, 13883, 13888, 1, 8742, 108, 108, 101, 108, 59, 1, 8742, 108, 59, 3, 11005, 8421, 59, 3, 8706, 824, 108, 105, 110, 116, 59, 1, 10772, 4, 3, 59, 99, 101, 13907, 13909, 13914, 1, 8832, 117, 101, 59, 1, 8928, 4, 2, 59, 99, 13920, 13923, 3, 10927, 824, 4, 2, 59, 101, 13929, 13931, 1, 8832, 113, 59, 3, 10927, 824, 4, 4, 65, 97, 105, 116, 13946, 13951, 13971, 13982, 114, 114, 59, 1, 8655, 114, 114, 4, 3, 59, 99, 119, 13961, 13963, 13967, 1, 8603, 59, 3, 10547, 824, 59, 3, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8603, 114, 105, 4, 2, 59, 101, 13990, 13992, 1, 8939, 59, 1, 8941, 4, 7, 99, 104, 105, 109, 112, 113, 117, 14011, 14036, 14060, 14080, 14085, 14090, 14106, 4, 4, 59, 99, 101, 114, 14021, 14023, 14028, 14032, 1, 8833, 117, 101, 59, 1, 8929, 59, 3, 10928, 824, 59, 3, 55349, 56515, 111, 114, 116, 4, 2, 109, 112, 14045, 14050, 105, 100, 59, 1, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8742, 109, 4, 2, 59, 101, 14067, 14069, 1, 8769, 4, 2, 59, 113, 14075, 14077, 1, 8772, 59, 1, 8772, 105, 100, 59, 1, 8740, 97, 114, 59, 1, 8742, 115, 117, 4, 2, 98, 112, 14098, 14102, 101, 59, 1, 8930, 101, 59, 1, 8931, 4, 3, 98, 99, 112, 14114, 14157, 14171, 4, 4, 59, 69, 101, 115, 14124, 14126, 14130, 14133, 1, 8836, 59, 3, 10949, 824, 59, 1, 8840, 101, 116, 4, 2, 59, 101, 14141, 14144, 3, 8834, 8402, 113, 4, 2, 59, 113, 14151, 14153, 1, 8840, 59, 3, 10949, 824, 99, 4, 2, 59, 101, 14164, 14166, 1, 8833, 113, 59, 3, 10928, 824, 4, 4, 59, 69, 101, 115, 14181, 14183, 14187, 14190, 1, 8837, 59, 3, 10950, 824, 59, 1, 8841, 101, 116, 4, 2, 59, 101, 14198, 14201, 3, 8835, 8402, 113, 4, 2, 59, 113, 14208, 14210, 1, 8841, 59, 3, 10950, 824, 4, 4, 103, 105, 108, 114, 14224, 14228, 14238, 14242, 108, 59, 1, 8825, 108, 100, 101, 5, 241, 1, 59, 14236, 1, 241, 103, 59, 1, 8824, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 14254, 14269, 101, 102, 116, 4, 2, 59, 101, 14263, 14265, 1, 8938, 113, 59, 1, 8940, 105, 103, 104, 116, 4, 2, 59, 101, 14279, 14281, 1, 8939, 113, 59, 1, 8941, 4, 2, 59, 109, 14291, 14293, 1, 957, 4, 3, 59, 101, 115, 14301, 14303, 14308, 1, 35, 114, 111, 59, 1, 8470, 112, 59, 1, 8199, 4, 9, 68, 72, 97, 100, 103, 105, 108, 114, 115, 14332, 14338, 14344, 14349, 14355, 14369, 14376, 14408, 14426, 97, 115, 104, 59, 1, 8877, 97, 114, 114, 59, 1, 10500, 112, 59, 3, 8781, 8402, 97, 115, 104, 59, 1, 8876, 4, 2, 101, 116, 14361, 14365, 59, 3, 8805, 8402, 59, 3, 62, 8402, 110, 102, 105, 110, 59, 1, 10718, 4, 3, 65, 101, 116, 14384, 14389, 14393, 114, 114, 59, 1, 10498, 59, 3, 8804, 8402, 4, 2, 59, 114, 14399, 14402, 3, 60, 8402, 105, 101, 59, 3, 8884, 8402, 4, 2, 65, 116, 14414, 14419, 114, 114, 59, 1, 10499, 114, 105, 101, 59, 3, 8885, 8402, 105, 109, 59, 3, 8764, 8402, 4, 3, 65, 97, 110, 14440, 14445, 14468, 114, 114, 59, 1, 8662, 114, 4, 2, 104, 114, 14452, 14456, 107, 59, 1, 10531, 4, 2, 59, 111, 14462, 14464, 1, 8598, 119, 59, 1, 8598, 101, 97, 114, 59, 1, 10535, 4, 18, 83, 97, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 14512, 14515, 14535, 14560, 14597, 14603, 14618, 14643, 14657, 14662, 14701, 14741, 14747, 14769, 14851, 14877, 14907, 14916, 59, 1, 9416, 4, 2, 99, 115, 14521, 14531, 117, 116, 101, 5, 243, 1, 59, 14529, 1, 243, 116, 59, 1, 8859, 4, 2, 105, 121, 14541, 14557, 114, 4, 2, 59, 99, 14548, 14550, 1, 8858, 5, 244, 1, 59, 14555, 1, 244, 59, 1, 1086, 4, 5, 97, 98, 105, 111, 115, 14572, 14577, 14583, 14587, 14591, 115, 104, 59, 1, 8861, 108, 97, 99, 59, 1, 337, 118, 59, 1, 10808, 116, 59, 1, 8857, 111, 108, 100, 59, 1, 10684, 108, 105, 103, 59, 1, 339, 4, 2, 99, 114, 14609, 14614, 105, 114, 59, 1, 10687, 59, 3, 55349, 56620, 4, 3, 111, 114, 116, 14626, 14630, 14640, 110, 59, 1, 731, 97, 118, 101, 5, 242, 1, 59, 14638, 1, 242, 59, 1, 10689, 4, 2, 98, 109, 14649, 14654, 97, 114, 59, 1, 10677, 59, 1, 937, 110, 116, 59, 1, 8750, 4, 4, 97, 99, 105, 116, 14672, 14677, 14693, 14698, 114, 114, 59, 1, 8634, 4, 2, 105, 114, 14683, 14687, 114, 59, 1, 10686, 111, 115, 115, 59, 1, 10683, 110, 101, 59, 1, 8254, 59, 1, 10688, 4, 3, 97, 101, 105, 14709, 14714, 14719, 99, 114, 59, 1, 333, 103, 97, 59, 1, 969, 4, 3, 99, 100, 110, 14727, 14733, 14736, 114, 111, 110, 59, 1, 959, 59, 1, 10678, 117, 115, 59, 1, 8854, 112, 102, 59, 3, 55349, 56672, 4, 3, 97, 101, 108, 14755, 14759, 14764, 114, 59, 1, 10679, 114, 112, 59, 1, 10681, 117, 115, 59, 1, 8853, 4, 7, 59, 97, 100, 105, 111, 115, 118, 14785, 14787, 14792, 14831, 14837, 14841, 14848, 1, 8744, 114, 114, 59, 1, 8635, 4, 4, 59, 101, 102, 109, 14802, 14804, 14817, 14824, 1, 10845, 114, 4, 2, 59, 111, 14811, 14813, 1, 8500, 102, 59, 1, 8500, 5, 170, 1, 59, 14822, 1, 170, 5, 186, 1, 59, 14829, 1, 186, 103, 111, 102, 59, 1, 8886, 114, 59, 1, 10838, 108, 111, 112, 101, 59, 1, 10839, 59, 1, 10843, 4, 3, 99, 108, 111, 14859, 14863, 14873, 114, 59, 1, 8500, 97, 115, 104, 5, 248, 1, 59, 14871, 1, 248, 108, 59, 1, 8856, 105, 4, 2, 108, 109, 14884, 14893, 100, 101, 5, 245, 1, 59, 14891, 1, 245, 101, 115, 4, 2, 59, 97, 14901, 14903, 1, 8855, 115, 59, 1, 10806, 109, 108, 5, 246, 1, 59, 14914, 1, 246, 98, 97, 114, 59, 1, 9021, 4, 12, 97, 99, 101, 102, 104, 105, 108, 109, 111, 114, 115, 117, 14948, 14992, 14996, 15033, 15038, 15068, 15090, 15189, 15192, 15222, 15427, 15441, 114, 4, 4, 59, 97, 115, 116, 14959, 14961, 14976, 14989, 1, 8741, 5, 182, 2, 59, 108, 14968, 14970, 1, 182, 108, 101, 108, 59, 1, 8741, 4, 2, 105, 108, 14982, 14986, 109, 59, 1, 10995, 59, 1, 11005, 59, 1, 8706, 121, 59, 1, 1087, 114, 4, 5, 99, 105, 109, 112, 116, 15009, 15014, 15019, 15024, 15027, 110, 116, 59, 1, 37, 111, 100, 59, 1, 46, 105, 108, 59, 1, 8240, 59, 1, 8869, 101, 110, 107, 59, 1, 8241, 114, 59, 3, 55349, 56621, 4, 3, 105, 109, 111, 15046, 15057, 15063, 4, 2, 59, 118, 15052, 15054, 1, 966, 59, 1, 981, 109, 97, 116, 59, 1, 8499, 110, 101, 59, 1, 9742, 4, 3, 59, 116, 118, 15076, 15078, 15087, 1, 960, 99, 104, 102, 111, 114, 107, 59, 1, 8916, 59, 1, 982, 4, 2, 97, 117, 15096, 15119, 110, 4, 2, 99, 107, 15103, 15115, 107, 4, 2, 59, 104, 15110, 15112, 1, 8463, 59, 1, 8462, 118, 59, 1, 8463, 115, 4, 9, 59, 97, 98, 99, 100, 101, 109, 115, 116, 15140, 15142, 15148, 15151, 15156, 15168, 15171, 15179, 15184, 1, 43, 99, 105, 114, 59, 1, 10787, 59, 1, 8862, 105, 114, 59, 1, 10786, 4, 2, 111, 117, 15162, 15165, 59, 1, 8724, 59, 1, 10789, 59, 1, 10866, 110, 5, 177, 1, 59, 15177, 1, 177, 105, 109, 59, 1, 10790, 119, 111, 59, 1, 10791, 59, 1, 177, 4, 3, 105, 112, 117, 15200, 15208, 15213, 110, 116, 105, 110, 116, 59, 1, 10773, 102, 59, 3, 55349, 56673, 110, 100, 5, 163, 1, 59, 15220, 1, 163, 4, 10, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 15244, 15246, 15249, 15253, 15258, 15334, 15347, 15367, 15416, 15421, 1, 8826, 59, 1, 10931, 112, 59, 1, 10935, 117, 101, 59, 1, 8828, 4, 2, 59, 99, 15264, 15266, 1, 10927, 4, 6, 59, 97, 99, 101, 110, 115, 15280, 15282, 15290, 15299, 15303, 15329, 1, 8826, 112, 112, 114, 111, 120, 59, 1, 10935, 117, 114, 108, 121, 101, 113, 59, 1, 8828, 113, 59, 1, 10927, 4, 3, 97, 101, 115, 15311, 15319, 15324, 112, 112, 114, 111, 120, 59, 1, 10937, 113, 113, 59, 1, 10933, 105, 109, 59, 1, 8936, 105, 109, 59, 1, 8830, 109, 101, 4, 2, 59, 115, 15342, 15344, 1, 8242, 59, 1, 8473, 4, 3, 69, 97, 115, 15355, 15358, 15362, 59, 1, 10933, 112, 59, 1, 10937, 105, 109, 59, 1, 8936, 4, 3, 100, 102, 112, 15375, 15378, 15404, 59, 1, 8719, 4, 3, 97, 108, 115, 15386, 15392, 15398, 108, 97, 114, 59, 1, 9006, 105, 110, 101, 59, 1, 8978, 117, 114, 102, 59, 1, 8979, 4, 2, 59, 116, 15410, 15412, 1, 8733, 111, 59, 1, 8733, 105, 109, 59, 1, 8830, 114, 101, 108, 59, 1, 8880, 4, 2, 99, 105, 15433, 15438, 114, 59, 3, 55349, 56517, 59, 1, 968, 110, 99, 115, 112, 59, 1, 8200, 4, 6, 102, 105, 111, 112, 115, 117, 15462, 15467, 15472, 15478, 15485, 15491, 114, 59, 3, 55349, 56622, 110, 116, 59, 1, 10764, 112, 102, 59, 3, 55349, 56674, 114, 105, 109, 101, 59, 1, 8279, 99, 114, 59, 3, 55349, 56518, 4, 3, 97, 101, 111, 15499, 15520, 15534, 116, 4, 2, 101, 105, 15506, 15515, 114, 110, 105, 111, 110, 115, 59, 1, 8461, 110, 116, 59, 1, 10774, 115, 116, 4, 2, 59, 101, 15528, 15530, 1, 63, 113, 59, 1, 8799, 116, 5, 34, 1, 59, 15540, 1, 34, 4, 21, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 15586, 15609, 15615, 15620, 15796, 15855, 15893, 15931, 15977, 16001, 16039, 16183, 16204, 16222, 16228, 16285, 16312, 16318, 16363, 16408, 16416, 4, 3, 97, 114, 116, 15594, 15599, 15603, 114, 114, 59, 1, 8667, 114, 59, 1, 8658, 97, 105, 108, 59, 1, 10524, 97, 114, 114, 59, 1, 10511, 97, 114, 59, 1, 10596, 4, 7, 99, 100, 101, 110, 113, 114, 116, 15636, 15651, 15656, 15664, 15687, 15696, 15770, 4, 2, 101, 117, 15642, 15646, 59, 3, 8765, 817, 116, 101, 59, 1, 341, 105, 99, 59, 1, 8730, 109, 112, 116, 121, 118, 59, 1, 10675, 103, 4, 4, 59, 100, 101, 108, 15675, 15677, 15680, 15683, 1, 10217, 59, 1, 10642, 59, 1, 10661, 101, 59, 1, 10217, 117, 111, 5, 187, 1, 59, 15694, 1, 187, 114, 4, 11, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 15721, 15723, 15727, 15739, 15742, 15746, 15750, 15754, 15758, 15763, 15767, 1, 8594, 112, 59, 1, 10613, 4, 2, 59, 102, 15733, 15735, 1, 8677, 115, 59, 1, 10528, 59, 1, 10547, 115, 59, 1, 10526, 107, 59, 1, 8618, 112, 59, 1, 8620, 108, 59, 1, 10565, 105, 109, 59, 1, 10612, 108, 59, 1, 8611, 59, 1, 8605, 4, 2, 97, 105, 15776, 15781, 105, 108, 59, 1, 10522, 111, 4, 2, 59, 110, 15788, 15790, 1, 8758, 97, 108, 115, 59, 1, 8474, 4, 3, 97, 98, 114, 15804, 15809, 15814, 114, 114, 59, 1, 10509, 114, 107, 59, 1, 10099, 4, 2, 97, 107, 15820, 15833, 99, 4, 2, 101, 107, 15827, 15830, 59, 1, 125, 59, 1, 93, 4, 2, 101, 115, 15839, 15842, 59, 1, 10636, 108, 4, 2, 100, 117, 15849, 15852, 59, 1, 10638, 59, 1, 10640, 4, 4, 97, 101, 117, 121, 15865, 15871, 15886, 15890, 114, 111, 110, 59, 1, 345, 4, 2, 100, 105, 15877, 15882, 105, 108, 59, 1, 343, 108, 59, 1, 8969, 98, 59, 1, 125, 59, 1, 1088, 4, 4, 99, 108, 113, 115, 15903, 15907, 15914, 15927, 97, 59, 1, 10551, 100, 104, 97, 114, 59, 1, 10601, 117, 111, 4, 2, 59, 114, 15922, 15924, 1, 8221, 59, 1, 8221, 104, 59, 1, 8627, 4, 3, 97, 99, 103, 15939, 15966, 15970, 108, 4, 4, 59, 105, 112, 115, 15950, 15952, 15957, 15963, 1, 8476, 110, 101, 59, 1, 8475, 97, 114, 116, 59, 1, 8476, 59, 1, 8477, 116, 59, 1, 9645, 5, 174, 1, 59, 15975, 1, 174, 4, 3, 105, 108, 114, 15985, 15991, 15997, 115, 104, 116, 59, 1, 10621, 111, 111, 114, 59, 1, 8971, 59, 3, 55349, 56623, 4, 2, 97, 111, 16007, 16028, 114, 4, 2, 100, 117, 16014, 16017, 59, 1, 8641, 4, 2, 59, 108, 16023, 16025, 1, 8640, 59, 1, 10604, 4, 2, 59, 118, 16034, 16036, 1, 961, 59, 1, 1009, 4, 3, 103, 110, 115, 16047, 16167, 16171, 104, 116, 4, 6, 97, 104, 108, 114, 115, 116, 16063, 16081, 16103, 16130, 16143, 16155, 114, 114, 111, 119, 4, 2, 59, 116, 16073, 16075, 1, 8594, 97, 105, 108, 59, 1, 8611, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 16093, 16099, 111, 119, 110, 59, 1, 8641, 112, 59, 1, 8640, 101, 102, 116, 4, 2, 97, 104, 16112, 16120, 114, 114, 111, 119, 115, 59, 1, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8908, 103, 59, 1, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8787, 4, 3, 97, 104, 109, 16191, 16196, 16201, 114, 114, 59, 1, 8644, 97, 114, 59, 1, 8652, 59, 1, 8207, 111, 117, 115, 116, 4, 2, 59, 97, 16214, 16216, 1, 9137, 99, 104, 101, 59, 1, 9137, 109, 105, 100, 59, 1, 10990, 4, 4, 97, 98, 112, 116, 16238, 16252, 16257, 16278, 4, 2, 110, 114, 16244, 16248, 103, 59, 1, 10221, 114, 59, 1, 8702, 114, 107, 59, 1, 10215, 4, 3, 97, 102, 108, 16265, 16269, 16273, 114, 59, 1, 10630, 59, 3, 55349, 56675, 117, 115, 59, 1, 10798, 105, 109, 101, 115, 59, 1, 10805, 4, 2, 97, 112, 16291, 16304, 114, 4, 2, 59, 103, 16298, 16300, 1, 41, 116, 59, 1, 10644, 111, 108, 105, 110, 116, 59, 1, 10770, 97, 114, 114, 59, 1, 8649, 4, 4, 97, 99, 104, 113, 16328, 16334, 16339, 16342, 113, 117, 111, 59, 1, 8250, 114, 59, 3, 55349, 56519, 59, 1, 8625, 4, 2, 98, 117, 16348, 16351, 59, 1, 93, 111, 4, 2, 59, 114, 16358, 16360, 1, 8217, 59, 1, 8217, 4, 3, 104, 105, 114, 16371, 16377, 16383, 114, 101, 101, 59, 1, 8908, 109, 101, 115, 59, 1, 8906, 105, 4, 4, 59, 101, 102, 108, 16394, 16396, 16399, 16402, 1, 9657, 59, 1, 8885, 59, 1, 9656, 116, 114, 105, 59, 1, 10702, 108, 117, 104, 97, 114, 59, 1, 10600, 59, 1, 8478, 4, 19, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 16459, 16466, 16472, 16572, 16590, 16672, 16687, 16746, 16844, 16850, 16924, 16963, 16988, 17115, 17121, 17154, 17206, 17614, 17656, 99, 117, 116, 101, 59, 1, 347, 113, 117, 111, 59, 1, 8218, 4, 10, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 16494, 16496, 16499, 16513, 16518, 16531, 16536, 16556, 16564, 16569, 1, 8827, 59, 1, 10932, 4, 2, 112, 114, 16505, 16508, 59, 1, 10936, 111, 110, 59, 1, 353, 117, 101, 59, 1, 8829, 4, 2, 59, 100, 16524, 16526, 1, 10928, 105, 108, 59, 1, 351, 114, 99, 59, 1, 349, 4, 3, 69, 97, 115, 16544, 16547, 16551, 59, 1, 10934, 112, 59, 1, 10938, 105, 109, 59, 1, 8937, 111, 108, 105, 110, 116, 59, 1, 10771, 105, 109, 59, 1, 8831, 59, 1, 1089, 111, 116, 4, 3, 59, 98, 101, 16582, 16584, 16587, 1, 8901, 59, 1, 8865, 59, 1, 10854, 4, 7, 65, 97, 99, 109, 115, 116, 120, 16606, 16611, 16634, 16642, 16646, 16652, 16668, 114, 114, 59, 1, 8664, 114, 4, 2, 104, 114, 16618, 16622, 107, 59, 1, 10533, 4, 2, 59, 111, 16628, 16630, 1, 8600, 119, 59, 1, 8600, 116, 5, 167, 1, 59, 16640, 1, 167, 105, 59, 1, 59, 119, 97, 114, 59, 1, 10537, 109, 4, 2, 105, 110, 16659, 16665, 110, 117, 115, 59, 1, 8726, 59, 1, 8726, 116, 59, 1, 10038, 114, 4, 2, 59, 111, 16679, 16682, 3, 55349, 56624, 119, 110, 59, 1, 8994, 4, 4, 97, 99, 111, 121, 16697, 16702, 16716, 16739, 114, 112, 59, 1, 9839, 4, 2, 104, 121, 16708, 16713, 99, 121, 59, 1, 1097, 59, 1, 1096, 114, 116, 4, 2, 109, 112, 16724, 16729, 105, 100, 59, 1, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8741, 5, 173, 1, 59, 16744, 1, 173, 4, 2, 103, 109, 16752, 16770, 109, 97, 4, 3, 59, 102, 118, 16762, 16764, 16767, 1, 963, 59, 1, 962, 59, 1, 962, 4, 8, 59, 100, 101, 103, 108, 110, 112, 114, 16788, 16790, 16795, 16806, 16817, 16828, 16832, 16838, 1, 8764, 111, 116, 59, 1, 10858, 4, 2, 59, 113, 16801, 16803, 1, 8771, 59, 1, 8771, 4, 2, 59, 69, 16812, 16814, 1, 10910, 59, 1, 10912, 4, 2, 59, 69, 16823, 16825, 1, 10909, 59, 1, 10911, 101, 59, 1, 8774, 108, 117, 115, 59, 1, 10788, 97, 114, 114, 59, 1, 10610, 97, 114, 114, 59, 1, 8592, 4, 4, 97, 101, 105, 116, 16860, 16883, 16891, 16904, 4, 2, 108, 115, 16866, 16878, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 1, 8726, 104, 112, 59, 1, 10803, 112, 97, 114, 115, 108, 59, 1, 10724, 4, 2, 100, 108, 16897, 16900, 59, 1, 8739, 101, 59, 1, 8995, 4, 2, 59, 101, 16910, 16912, 1, 10922, 4, 2, 59, 115, 16918, 16920, 1, 10924, 59, 3, 10924, 65024, 4, 3, 102, 108, 112, 16932, 16938, 16958, 116, 99, 121, 59, 1, 1100, 4, 2, 59, 98, 16944, 16946, 1, 47, 4, 2, 59, 97, 16952, 16954, 1, 10692, 114, 59, 1, 9023, 102, 59, 3, 55349, 56676, 97, 4, 2, 100, 114, 16970, 16985, 101, 115, 4, 2, 59, 117, 16978, 16980, 1, 9824, 105, 116, 59, 1, 9824, 59, 1, 8741, 4, 3, 99, 115, 117, 16996, 17028, 17089, 4, 2, 97, 117, 17002, 17015, 112, 4, 2, 59, 115, 17009, 17011, 1, 8851, 59, 3, 8851, 65024, 112, 4, 2, 59, 115, 17022, 17024, 1, 8852, 59, 3, 8852, 65024, 117, 4, 2, 98, 112, 17035, 17062, 4, 3, 59, 101, 115, 17043, 17045, 17048, 1, 8847, 59, 1, 8849, 101, 116, 4, 2, 59, 101, 17056, 17058, 1, 8847, 113, 59, 1, 8849, 4, 3, 59, 101, 115, 17070, 17072, 17075, 1, 8848, 59, 1, 8850, 101, 116, 4, 2, 59, 101, 17083, 17085, 1, 8848, 113, 59, 1, 8850, 4, 3, 59, 97, 102, 17097, 17099, 17112, 1, 9633, 114, 4, 2, 101, 102, 17106, 17109, 59, 1, 9633, 59, 1, 9642, 59, 1, 9642, 97, 114, 114, 59, 1, 8594, 4, 4, 99, 101, 109, 116, 17131, 17136, 17142, 17148, 114, 59, 3, 55349, 56520, 116, 109, 110, 59, 1, 8726, 105, 108, 101, 59, 1, 8995, 97, 114, 102, 59, 1, 8902, 4, 2, 97, 114, 17160, 17172, 114, 4, 2, 59, 102, 17167, 17169, 1, 9734, 59, 1, 9733, 4, 2, 97, 110, 17178, 17202, 105, 103, 104, 116, 4, 2, 101, 112, 17188, 17197, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 104, 105, 59, 1, 981, 115, 59, 1, 175, 4, 5, 98, 99, 109, 110, 112, 17218, 17351, 17420, 17423, 17427, 4, 9, 59, 69, 100, 101, 109, 110, 112, 114, 115, 17238, 17240, 17243, 17248, 17261, 17267, 17279, 17285, 17291, 1, 8834, 59, 1, 10949, 111, 116, 59, 1, 10941, 4, 2, 59, 100, 17254, 17256, 1, 8838, 111, 116, 59, 1, 10947, 117, 108, 116, 59, 1, 10945, 4, 2, 69, 101, 17273, 17276, 59, 1, 10955, 59, 1, 8842, 108, 117, 115, 59, 1, 10943, 97, 114, 114, 59, 1, 10617, 4, 3, 101, 105, 117, 17299, 17335, 17339, 116, 4, 3, 59, 101, 110, 17308, 17310, 17322, 1, 8834, 113, 4, 2, 59, 113, 17317, 17319, 1, 8838, 59, 1, 10949, 101, 113, 4, 2, 59, 113, 17330, 17332, 1, 8842, 59, 1, 10955, 109, 59, 1, 10951, 4, 2, 98, 112, 17345, 17348, 59, 1, 10965, 59, 1, 10963, 99, 4, 6, 59, 97, 99, 101, 110, 115, 17366, 17368, 17376, 17385, 17389, 17415, 1, 8827, 112, 112, 114, 111, 120, 59, 1, 10936, 117, 114, 108, 121, 101, 113, 59, 1, 8829, 113, 59, 1, 10928, 4, 3, 97, 101, 115, 17397, 17405, 17410, 112, 112, 114, 111, 120, 59, 1, 10938, 113, 113, 59, 1, 10934, 105, 109, 59, 1, 8937, 105, 109, 59, 1, 8831, 59, 1, 8721, 103, 59, 1, 9834, 4, 13, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 17455, 17462, 17469, 17476, 17478, 17481, 17496, 17509, 17524, 17530, 17536, 17548, 17554, 5, 185, 1, 59, 17460, 1, 185, 5, 178, 1, 59, 17467, 1, 178, 5, 179, 1, 59, 17474, 1, 179, 1, 8835, 59, 1, 10950, 4, 2, 111, 115, 17487, 17491, 116, 59, 1, 10942, 117, 98, 59, 1, 10968, 4, 2, 59, 100, 17502, 17504, 1, 8839, 111, 116, 59, 1, 10948, 115, 4, 2, 111, 117, 17516, 17520, 108, 59, 1, 10185, 98, 59, 1, 10967, 97, 114, 114, 59, 1, 10619, 117, 108, 116, 59, 1, 10946, 4, 2, 69, 101, 17542, 17545, 59, 1, 10956, 59, 1, 8843, 108, 117, 115, 59, 1, 10944, 4, 3, 101, 105, 117, 17562, 17598, 17602, 116, 4, 3, 59, 101, 110, 17571, 17573, 17585, 1, 8835, 113, 4, 2, 59, 113, 17580, 17582, 1, 8839, 59, 1, 10950, 101, 113, 4, 2, 59, 113, 17593, 17595, 1, 8843, 59, 1, 10956, 109, 59, 1, 10952, 4, 2, 98, 112, 17608, 17611, 59, 1, 10964, 59, 1, 10966, 4, 3, 65, 97, 110, 17622, 17627, 17650, 114, 114, 59, 1, 8665, 114, 4, 2, 104, 114, 17634, 17638, 107, 59, 1, 10534, 4, 2, 59, 111, 17644, 17646, 1, 8601, 119, 59, 1, 8601, 119, 97, 114, 59, 1, 10538, 108, 105, 103, 5, 223, 1, 59, 17664, 1, 223, 4, 13, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 115, 119, 17694, 17709, 17714, 17737, 17742, 17749, 17754, 17860, 17905, 17957, 17964, 18090, 18122, 4, 2, 114, 117, 17700, 17706, 103, 101, 116, 59, 1, 8982, 59, 1, 964, 114, 107, 59, 1, 9140, 4, 3, 97, 101, 121, 17722, 17728, 17734, 114, 111, 110, 59, 1, 357, 100, 105, 108, 59, 1, 355, 59, 1, 1090, 111, 116, 59, 1, 8411, 108, 114, 101, 99, 59, 1, 8981, 114, 59, 3, 55349, 56625, 4, 4, 101, 105, 107, 111, 17764, 17805, 17836, 17851, 4, 2, 114, 116, 17770, 17786, 101, 4, 2, 52, 102, 17777, 17780, 59, 1, 8756, 111, 114, 101, 59, 1, 8756, 97, 4, 3, 59, 115, 118, 17795, 17797, 17802, 1, 952, 121, 109, 59, 1, 977, 59, 1, 977, 4, 2, 99, 110, 17811, 17831, 107, 4, 2, 97, 115, 17818, 17826, 112, 112, 114, 111, 120, 59, 1, 8776, 105, 109, 59, 1, 8764, 115, 112, 59, 1, 8201, 4, 2, 97, 115, 17842, 17846, 112, 59, 1, 8776, 105, 109, 59, 1, 8764, 114, 110, 5, 254, 1, 59, 17858, 1, 254, 4, 3, 108, 109, 110, 17868, 17873, 17901, 100, 101, 59, 1, 732, 101, 115, 5, 215, 3, 59, 98, 100, 17884, 17886, 17898, 1, 215, 4, 2, 59, 97, 17892, 17894, 1, 8864, 114, 59, 1, 10801, 59, 1, 10800, 116, 59, 1, 8749, 4, 3, 101, 112, 115, 17913, 17917, 17953, 97, 59, 1, 10536, 4, 4, 59, 98, 99, 102, 17927, 17929, 17934, 17939, 1, 8868, 111, 116, 59, 1, 9014, 105, 114, 59, 1, 10993, 4, 2, 59, 111, 17945, 17948, 3, 55349, 56677, 114, 107, 59, 1, 10970, 97, 59, 1, 10537, 114, 105, 109, 101, 59, 1, 8244, 4, 3, 97, 105, 112, 17972, 17977, 18082, 100, 101, 59, 1, 8482, 4, 7, 97, 100, 101, 109, 112, 115, 116, 17993, 18051, 18056, 18059, 18066, 18072, 18076, 110, 103, 108, 101, 4, 5, 59, 100, 108, 113, 114, 18009, 18011, 18017, 18032, 18035, 1, 9653, 111, 119, 110, 59, 1, 9663, 101, 102, 116, 4, 2, 59, 101, 18026, 18028, 1, 9667, 113, 59, 1, 8884, 59, 1, 8796, 105, 103, 104, 116, 4, 2, 59, 101, 18045, 18047, 1, 9657, 113, 59, 1, 8885, 111, 116, 59, 1, 9708, 59, 1, 8796, 105, 110, 117, 115, 59, 1, 10810, 108, 117, 115, 59, 1, 10809, 98, 59, 1, 10701, 105, 109, 101, 59, 1, 10811, 101, 122, 105, 117, 109, 59, 1, 9186, 4, 3, 99, 104, 116, 18098, 18111, 18116, 4, 2, 114, 121, 18104, 18108, 59, 3, 55349, 56521, 59, 1, 1094, 99, 121, 59, 1, 1115, 114, 111, 107, 59, 1, 359, 4, 2, 105, 111, 18128, 18133, 120, 116, 59, 1, 8812, 104, 101, 97, 100, 4, 2, 108, 114, 18143, 18154, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8608, 4, 18, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 18204, 18209, 18214, 18234, 18250, 18268, 18292, 18308, 18319, 18343, 18379, 18397, 18413, 18504, 18547, 18553, 18584, 18603, 114, 114, 59, 1, 8657, 97, 114, 59, 1, 10595, 4, 2, 99, 114, 18220, 18230, 117, 116, 101, 5, 250, 1, 59, 18228, 1, 250, 114, 59, 1, 8593, 114, 4, 2, 99, 101, 18241, 18245, 121, 59, 1, 1118, 118, 101, 59, 1, 365, 4, 2, 105, 121, 18256, 18265, 114, 99, 5, 251, 1, 59, 18263, 1, 251, 59, 1, 1091, 4, 3, 97, 98, 104, 18276, 18281, 18287, 114, 114, 59, 1, 8645, 108, 97, 99, 59, 1, 369, 97, 114, 59, 1, 10606, 4, 2, 105, 114, 18298, 18304, 115, 104, 116, 59, 1, 10622, 59, 3, 55349, 56626, 114, 97, 118, 101, 5, 249, 1, 59, 18317, 1, 249, 4, 2, 97, 98, 18325, 18338, 114, 4, 2, 108, 114, 18332, 18335, 59, 1, 8639, 59, 1, 8638, 108, 107, 59, 1, 9600, 4, 2, 99, 116, 18349, 18374, 4, 2, 111, 114, 18355, 18369, 114, 110, 4, 2, 59, 101, 18363, 18365, 1, 8988, 114, 59, 1, 8988, 111, 112, 59, 1, 8975, 114, 105, 59, 1, 9720, 4, 2, 97, 108, 18385, 18390, 99, 114, 59, 1, 363, 5, 168, 1, 59, 18395, 1, 168, 4, 2, 103, 112, 18403, 18408, 111, 110, 59, 1, 371, 102, 59, 3, 55349, 56678, 4, 6, 97, 100, 104, 108, 115, 117, 18427, 18434, 18445, 18470, 18475, 18494, 114, 114, 111, 119, 59, 1, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8597, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 18457, 18463, 101, 102, 116, 59, 1, 8639, 105, 103, 104, 116, 59, 1, 8638, 117, 115, 59, 1, 8846, 105, 4, 3, 59, 104, 108, 18484, 18486, 18489, 1, 965, 59, 1, 978, 111, 110, 59, 1, 965, 112, 97, 114, 114, 111, 119, 115, 59, 1, 8648, 4, 3, 99, 105, 116, 18512, 18537, 18542, 4, 2, 111, 114, 18518, 18532, 114, 110, 4, 2, 59, 101, 18526, 18528, 1, 8989, 114, 59, 1, 8989, 111, 112, 59, 1, 8974, 110, 103, 59, 1, 367, 114, 105, 59, 1, 9721, 99, 114, 59, 3, 55349, 56522, 4, 3, 100, 105, 114, 18561, 18566, 18572, 111, 116, 59, 1, 8944, 108, 100, 101, 59, 1, 361, 105, 4, 2, 59, 102, 18579, 18581, 1, 9653, 59, 1, 9652, 4, 2, 97, 109, 18590, 18595, 114, 114, 59, 1, 8648, 108, 5, 252, 1, 59, 18601, 1, 252, 97, 110, 103, 108, 101, 59, 1, 10663, 4, 15, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 18643, 18648, 18661, 18667, 18847, 18851, 18857, 18904, 18909, 18915, 18931, 18937, 18943, 18949, 18996, 114, 114, 59, 1, 8661, 97, 114, 4, 2, 59, 118, 18656, 18658, 1, 10984, 59, 1, 10985, 97, 115, 104, 59, 1, 8872, 4, 2, 110, 114, 18673, 18679, 103, 114, 116, 59, 1, 10652, 4, 7, 101, 107, 110, 112, 114, 115, 116, 18695, 18704, 18711, 18720, 18742, 18754, 18810, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 97, 112, 112, 97, 59, 1, 1008, 111, 116, 104, 105, 110, 103, 59, 1, 8709, 4, 3, 104, 105, 114, 18728, 18732, 18735, 105, 59, 1, 981, 59, 1, 982, 111, 112, 116, 111, 59, 1, 8733, 4, 2, 59, 104, 18748, 18750, 1, 8597, 111, 59, 1, 1009, 4, 2, 105, 117, 18760, 18766, 103, 109, 97, 59, 1, 962, 4, 2, 98, 112, 18772, 18791, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18784, 18787, 3, 8842, 65024, 59, 3, 10955, 65024, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18803, 18806, 3, 8843, 65024, 59, 3, 10956, 65024, 4, 2, 104, 114, 18816, 18822, 101, 116, 97, 59, 1, 977, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 18834, 18840, 101, 102, 116, 59, 1, 8882, 105, 103, 104, 116, 59, 1, 8883, 121, 59, 1, 1074, 97, 115, 104, 59, 1, 8866, 4, 3, 101, 108, 114, 18865, 18884, 18890, 4, 3, 59, 98, 101, 18873, 18875, 18880, 1, 8744, 97, 114, 59, 1, 8891, 113, 59, 1, 8794, 108, 105, 112, 59, 1, 8942, 4, 2, 98, 116, 18896, 18901, 97, 114, 59, 1, 124, 59, 1, 124, 114, 59, 3, 55349, 56627, 116, 114, 105, 59, 1, 8882, 115, 117, 4, 2, 98, 112, 18923, 18927, 59, 3, 8834, 8402, 59, 3, 8835, 8402, 112, 102, 59, 3, 55349, 56679, 114, 111, 112, 59, 1, 8733, 116, 114, 105, 59, 1, 8883, 4, 2, 99, 117, 18955, 18960, 114, 59, 3, 55349, 56523, 4, 2, 98, 112, 18966, 18981, 110, 4, 2, 69, 101, 18973, 18977, 59, 3, 10955, 65024, 59, 3, 8842, 65024, 110, 4, 2, 69, 101, 18988, 18992, 59, 3, 10956, 65024, 59, 3, 8843, 65024, 105, 103, 122, 97, 103, 59, 1, 10650, 4, 7, 99, 101, 102, 111, 112, 114, 115, 19020, 19026, 19061, 19066, 19072, 19075, 19089, 105, 114, 99, 59, 1, 373, 4, 2, 100, 105, 19032, 19055, 4, 2, 98, 103, 19038, 19043, 97, 114, 59, 1, 10847, 101, 4, 2, 59, 113, 19050, 19052, 1, 8743, 59, 1, 8793, 101, 114, 112, 59, 1, 8472, 114, 59, 3, 55349, 56628, 112, 102, 59, 3, 55349, 56680, 59, 1, 8472, 4, 2, 59, 101, 19081, 19083, 1, 8768, 97, 116, 104, 59, 1, 8768, 99, 114, 59, 3, 55349, 56524, 4, 14, 99, 100, 102, 104, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 19125, 19146, 19152, 19157, 19173, 19176, 19192, 19197, 19202, 19236, 19252, 19269, 19286, 19291, 4, 3, 97, 105, 117, 19133, 19137, 19142, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 116, 114, 105, 59, 1, 9661, 114, 59, 3, 55349, 56629, 4, 2, 65, 97, 19163, 19168, 114, 114, 59, 1, 10234, 114, 114, 59, 1, 10231, 59, 1, 958, 4, 2, 65, 97, 19182, 19187, 114, 114, 59, 1, 10232, 114, 114, 59, 1, 10229, 97, 112, 59, 1, 10236, 105, 115, 59, 1, 8955, 4, 3, 100, 112, 116, 19210, 19215, 19230, 111, 116, 59, 1, 10752, 4, 2, 102, 108, 19221, 19225, 59, 3, 55349, 56681, 117, 115, 59, 1, 10753, 105, 109, 101, 59, 1, 10754, 4, 2, 65, 97, 19242, 19247, 114, 114, 59, 1, 10233, 114, 114, 59, 1, 10230, 4, 2, 99, 113, 19258, 19263, 114, 59, 3, 55349, 56525, 99, 117, 112, 59, 1, 10758, 4, 2, 112, 116, 19275, 19281, 108, 117, 115, 59, 1, 10756, 114, 105, 59, 1, 9651, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 19316, 19335, 19349, 19357, 19362, 19367, 19373, 19379, 99, 4, 2, 117, 121, 19323, 19332, 116, 101, 5, 253, 1, 59, 19330, 1, 253, 59, 1, 1103, 4, 2, 105, 121, 19341, 19346, 114, 99, 59, 1, 375, 59, 1, 1099, 110, 5, 165, 1, 59, 19355, 1, 165, 114, 59, 3, 55349, 56630, 99, 121, 59, 1, 1111, 112, 102, 59, 3, 55349, 56682, 99, 114, 59, 3, 55349, 56526, 4, 2, 99, 109, 19385, 19389, 121, 59, 1, 1102, 108, 5, 255, 1, 59, 19395, 1, 255, 4, 10, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 19419, 19426, 19441, 19446, 19462, 19467, 19472, 19480, 19486, 19492, 99, 117, 116, 101, 59, 1, 378, 4, 2, 97, 121, 19432, 19438, 114, 111, 110, 59, 1, 382, 59, 1, 1079, 111, 116, 59, 1, 380, 4, 2, 101, 116, 19452, 19458, 116, 114, 102, 59, 1, 8488, 97, 59, 1, 950, 114, 59, 3, 55349, 56631, 99, 121, 59, 1, 1078, 103, 114, 97, 114, 114, 59, 1, 8669, 112, 102, 59, 3, 55349, 56683, 99, 114, 59, 3, 55349, 56527, 4, 2, 106, 110, 19498, 19501, 59, 1, 8205, 106, 59, 1, 8204]);
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/tokenizer/index.js
  var require_tokenizer = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/tokenizer/index.js"(exports, module) {
      "use strict";
      var Preprocessor = require_preprocessor();
      var unicode = require_unicode();
      var neTree = require_named_entity_data();
      var ERR = require_error_codes();
      var $ = unicode.CODE_POINTS;
      var $$ = unicode.CODE_POINT_SEQUENCES;
      var C1_CONTROLS_REFERENCE_REPLACEMENTS = {
        128: 8364,
        130: 8218,
        131: 402,
        132: 8222,
        133: 8230,
        134: 8224,
        135: 8225,
        136: 710,
        137: 8240,
        138: 352,
        139: 8249,
        140: 338,
        142: 381,
        145: 8216,
        146: 8217,
        147: 8220,
        148: 8221,
        149: 8226,
        150: 8211,
        151: 8212,
        152: 732,
        153: 8482,
        154: 353,
        155: 8250,
        156: 339,
        158: 382,
        159: 376
      };
      var HAS_DATA_FLAG = 1 << 0;
      var DATA_DUPLET_FLAG = 1 << 1;
      var HAS_BRANCHES_FLAG = 1 << 2;
      var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;
      var DATA_STATE = "DATA_STATE";
      var RCDATA_STATE = "RCDATA_STATE";
      var RAWTEXT_STATE = "RAWTEXT_STATE";
      var SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE";
      var PLAINTEXT_STATE = "PLAINTEXT_STATE";
      var TAG_OPEN_STATE = "TAG_OPEN_STATE";
      var END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE";
      var TAG_NAME_STATE = "TAG_NAME_STATE";
      var RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE";
      var RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE";
      var RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE";
      var RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE";
      var RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE";
      var RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE";
      var SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE";
      var SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE";
      var SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE";
      var SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE";
      var SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE";
      var SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE";
      var SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE";
      var SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE";
      var BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE";
      var ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE";
      var AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE";
      var BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE";
      var ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE";
      var ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE";
      var ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE";
      var AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE";
      var SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE";
      var BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE";
      var MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE";
      var COMMENT_START_STATE = "COMMENT_START_STATE";
      var COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE";
      var COMMENT_STATE = "COMMENT_STATE";
      var COMMENT_LESS_THAN_SIGN_STATE = "COMMENT_LESS_THAN_SIGN_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_STATE = "COMMENT_LESS_THAN_SIGN_BANG_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE";
      var COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE";
      var COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE";
      var COMMENT_END_STATE = "COMMENT_END_STATE";
      var COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE";
      var DOCTYPE_STATE = "DOCTYPE_STATE";
      var BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE";
      var DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE";
      var AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE";
      var AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE";
      var BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
      var DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE";
      var DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE";
      var AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
      var BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE";
      var AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE";
      var BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
      var DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE";
      var DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE";
      var AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
      var BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE";
      var CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
      var CDATA_SECTION_BRACKET_STATE = "CDATA_SECTION_BRACKET_STATE";
      var CDATA_SECTION_END_STATE = "CDATA_SECTION_END_STATE";
      var CHARACTER_REFERENCE_STATE = "CHARACTER_REFERENCE_STATE";
      var NAMED_CHARACTER_REFERENCE_STATE = "NAMED_CHARACTER_REFERENCE_STATE";
      var AMBIGUOUS_AMPERSAND_STATE = "AMBIGUOS_AMPERSAND_STATE";
      var NUMERIC_CHARACTER_REFERENCE_STATE = "NUMERIC_CHARACTER_REFERENCE_STATE";
      var HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_START_STATE";
      var DECIMAL_CHARACTER_REFERENCE_START_STATE = "DECIMAL_CHARACTER_REFERENCE_START_STATE";
      var HEXADEMICAL_CHARACTER_REFERENCE_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_STATE";
      var DECIMAL_CHARACTER_REFERENCE_STATE = "DECIMAL_CHARACTER_REFERENCE_STATE";
      var NUMERIC_CHARACTER_REFERENCE_END_STATE = "NUMERIC_CHARACTER_REFERENCE_END_STATE";
      function isWhitespace(cp) {
        return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
      }
      function isAsciiDigit(cp) {
        return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
      }
      function isAsciiUpper(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
      }
      function isAsciiLower(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
      }
      function isAsciiLetter(cp) {
        return isAsciiLower(cp) || isAsciiUpper(cp);
      }
      function isAsciiAlphaNumeric(cp) {
        return isAsciiLetter(cp) || isAsciiDigit(cp);
      }
      function isAsciiUpperHexDigit(cp) {
        return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F;
      }
      function isAsciiLowerHexDigit(cp) {
        return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F;
      }
      function isAsciiHexDigit(cp) {
        return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
      }
      function toAsciiLowerCodePoint(cp) {
        return cp + 32;
      }
      function toChar(cp) {
        if (cp <= 65535) {
          return String.fromCharCode(cp);
        }
        cp -= 65536;
        return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
      }
      function toAsciiLowerChar(cp) {
        return String.fromCharCode(toAsciiLowerCodePoint(cp));
      }
      function findNamedEntityTreeBranch(nodeIx, cp) {
        const branchCount = neTree[++nodeIx];
        let lo = ++nodeIx;
        let hi = lo + branchCount - 1;
        while (lo <= hi) {
          const mid = lo + hi >>> 1;
          const midCp = neTree[mid];
          if (midCp < cp) {
            lo = mid + 1;
          } else if (midCp > cp) {
            hi = mid - 1;
          } else {
            return neTree[mid + branchCount];
          }
        }
        return -1;
      }
      var Tokenizer = class {
        constructor() {
          this.preprocessor = new Preprocessor();
          this.tokenQueue = [];
          this.allowCDATA = false;
          this.state = DATA_STATE;
          this.returnState = "";
          this.charRefCode = -1;
          this.tempBuff = [];
          this.lastStartTagName = "";
          this.consumedAfterSnapshot = -1;
          this.active = false;
          this.currentCharacterToken = null;
          this.currentToken = null;
          this.currentAttr = null;
        }
        _err() {
        }
        _errOnNextCodePoint(err) {
          this._consume();
          this._err(err);
          this._unconsume();
        }
        getNextToken() {
          while (!this.tokenQueue.length && this.active) {
            this.consumedAfterSnapshot = 0;
            const cp = this._consume();
            if (!this._ensureHibernation()) {
              this[this.state](cp);
            }
          }
          return this.tokenQueue.shift();
        }
        write(chunk, isLastChunk) {
          this.active = true;
          this.preprocessor.write(chunk, isLastChunk);
        }
        insertHtmlAtCurrentPos(chunk) {
          this.active = true;
          this.preprocessor.insertHtmlAtCurrentPos(chunk);
        }
        _ensureHibernation() {
          if (this.preprocessor.endOfChunkHit) {
            for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
              this.preprocessor.retreat();
            }
            this.active = false;
            this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });
            return true;
          }
          return false;
        }
        _consume() {
          this.consumedAfterSnapshot++;
          return this.preprocessor.advance();
        }
        _unconsume() {
          this.consumedAfterSnapshot--;
          this.preprocessor.retreat();
        }
        _reconsumeInState(state2) {
          this.state = state2;
          this._unconsume();
        }
        _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
          let consumedCount = 0;
          let isMatch = true;
          const patternLength = pattern.length;
          let patternPos = 0;
          let cp = startCp;
          let patternCp = void 0;
          for (; patternPos < patternLength; patternPos++) {
            if (patternPos > 0) {
              cp = this._consume();
              consumedCount++;
            }
            if (cp === $.EOF) {
              isMatch = false;
              break;
            }
            patternCp = pattern[patternPos];
            if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
              isMatch = false;
              break;
            }
          }
          if (!isMatch) {
            while (consumedCount--) {
              this._unconsume();
            }
          }
          return isMatch;
        }
        _isTempBufferEqualToScriptString() {
          if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
            return false;
          }
          for (let i = 0; i < this.tempBuff.length; i++) {
            if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
              return false;
            }
          }
          return true;
        }
        _createStartTagToken() {
          this.currentToken = {
            type: Tokenizer.START_TAG_TOKEN,
            tagName: "",
            selfClosing: false,
            ackSelfClosing: false,
            attrs: []
          };
        }
        _createEndTagToken() {
          this.currentToken = {
            type: Tokenizer.END_TAG_TOKEN,
            tagName: "",
            selfClosing: false,
            attrs: []
          };
        }
        _createCommentToken() {
          this.currentToken = {
            type: Tokenizer.COMMENT_TOKEN,
            data: ""
          };
        }
        _createDoctypeToken(initialName) {
          this.currentToken = {
            type: Tokenizer.DOCTYPE_TOKEN,
            name: initialName,
            forceQuirks: false,
            publicId: null,
            systemId: null
          };
        }
        _createCharacterToken(type, ch) {
          this.currentCharacterToken = {
            type,
            chars: ch
          };
        }
        _createEOFToken() {
          this.currentToken = { type: Tokenizer.EOF_TOKEN };
        }
        _createAttr(attrNameFirstCh) {
          this.currentAttr = {
            name: attrNameFirstCh,
            value: ""
          };
        }
        _leaveAttrName(toState) {
          if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
            this.currentToken.attrs.push(this.currentAttr);
          } else {
            this._err(ERR.duplicateAttribute);
          }
          this.state = toState;
        }
        _leaveAttrValue(toState) {
          this.state = toState;
        }
        _emitCurrentToken() {
          this._emitCurrentCharacterToken();
          const ct = this.currentToken;
          this.currentToken = null;
          if (ct.type === Tokenizer.START_TAG_TOKEN) {
            this.lastStartTagName = ct.tagName;
          } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
            if (ct.attrs.length > 0) {
              this._err(ERR.endTagWithAttributes);
            }
            if (ct.selfClosing) {
              this._err(ERR.endTagWithTrailingSolidus);
            }
          }
          this.tokenQueue.push(ct);
        }
        _emitCurrentCharacterToken() {
          if (this.currentCharacterToken) {
            this.tokenQueue.push(this.currentCharacterToken);
            this.currentCharacterToken = null;
          }
        }
        _emitEOFToken() {
          this._createEOFToken();
          this._emitCurrentToken();
        }
        _appendCharToCurrentCharacterToken(type, ch) {
          if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
            this._emitCurrentCharacterToken();
          }
          if (this.currentCharacterToken) {
            this.currentCharacterToken.chars += ch;
          } else {
            this._createCharacterToken(type, ch);
          }
        }
        _emitCodePoint(cp) {
          let type = Tokenizer.CHARACTER_TOKEN;
          if (isWhitespace(cp)) {
            type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          } else if (cp === $.NULL) {
            type = Tokenizer.NULL_CHARACTER_TOKEN;
          }
          this._appendCharToCurrentCharacterToken(type, toChar(cp));
        }
        _emitSeveralCodePoints(codePoints) {
          for (let i = 0; i < codePoints.length; i++) {
            this._emitCodePoint(codePoints[i]);
          }
        }
        _emitChars(ch) {
          this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
        }
        _matchNamedCharacterReference(startCp) {
          let result = null;
          let excess = 1;
          let i = findNamedEntityTreeBranch(0, startCp);
          this.tempBuff.push(startCp);
          while (i > -1) {
            const current = neTree[i];
            const inNode = current < MAX_BRANCH_MARKER_VALUE;
            const nodeWithData = inNode && current & HAS_DATA_FLAG;
            if (nodeWithData) {
              result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
              excess = 0;
            }
            const cp = this._consume();
            this.tempBuff.push(cp);
            excess++;
            if (cp === $.EOF) {
              break;
            }
            if (inNode) {
              i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
            } else {
              i = cp === current ? ++i : -1;
            }
          }
          while (excess--) {
            this.tempBuff.pop();
            this._unconsume();
          }
          return result;
        }
        _isCharacterReferenceInAttribute() {
          return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
        }
        _isCharacterReferenceAttributeQuirk(withSemicolon) {
          if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
            const nextCp = this._consume();
            this._unconsume();
            return nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
          }
          return false;
        }
        _flushCodePointsConsumedAsCharacterReference() {
          if (this._isCharacterReferenceInAttribute()) {
            for (let i = 0; i < this.tempBuff.length; i++) {
              this.currentAttr.value += toChar(this.tempBuff[i]);
            }
          } else {
            this._emitSeveralCodePoints(this.tempBuff);
          }
          this.tempBuff = [];
        }
        [DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = TAG_OPEN_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = DATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitCodePoint(cp);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [RCDATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.AMPERSAND) {
            this.returnState = RCDATA_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = RCDATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [RAWTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [PLAINTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();
          if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [TAG_OPEN_STATE](cp) {
          if (cp === $.EXCLAMATION_MARK) {
            this.state = MARKUP_DECLARATION_OPEN_STATE;
          } else if (cp === $.SOLIDUS) {
            this.state = END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
            this._createStartTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $.QUESTION_MARK) {
            this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("<");
            this._emitEOFToken();
          } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._emitChars("<");
            this._reconsumeInState(DATA_STATE);
          }
        }
        [END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingEndTagName);
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofBeforeTagName);
            this._emitChars("</");
            this._emitEOFToken();
          } else {
            this._err(ERR.invalidFirstCharacterOfTagName);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
        }
        [TAG_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          } else if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentToken.tagName += toChar(cp);
          }
        }
        [RCDATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RCDATA_END_TAG_OPEN_STATE;
          } else {
            this._emitChars("<");
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RCDATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RCDATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this.state = DATA_STATE;
                this._emitCurrentToken();
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RCDATA_STATE);
          }
        }
        [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = RAWTEXT_END_TAG_OPEN_STATE;
          } else {
            this._emitChars("<");
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [RAWTEXT_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [RAWTEXT_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(RAWTEXT_STATE);
          }
        }
        [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
          } else if (cp === $.EXCLAMATION_MARK) {
            this.state = SCRIPT_DATA_ESCAPE_START_STATE;
            this._emitChars("<!");
          } else {
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              } else if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              } else if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
            this._emitChars("-");
          } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else {
            this._reconsumeInState(SCRIPT_DATA_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars(">");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
            this.tempBuff = [];
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
          } else {
            this._emitChars("<");
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
          } else {
            this._emitChars("</");
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
            this.currentToken.tagName += toAsciiLowerChar(cp);
            this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
            this.currentToken.tagName += toChar(cp);
            this.tempBuff.push(cp);
          } else {
            if (this.lastStartTagName === this.currentToken.tagName) {
              if (isWhitespace(cp)) {
                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                return;
              }
              if (cp === $.SOLIDUS) {
                this.state = SELF_CLOSING_START_TAG_STATE;
                return;
              }
              if (cp === $.GREATER_THAN_SIGN) {
                this._emitCurrentToken();
                this.state = DATA_STATE;
                return;
              }
            }
            this._emitChars("</");
            this._emitSeveralCodePoints(this.tempBuff);
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
            this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
          } else {
            this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this._emitChars("-");
          } else if (cp === $.LESS_THAN_SIGN) {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
            this._emitChars("<");
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = SCRIPT_DATA_STATE;
            this._emitChars(">");
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitChars(unicode.REPLACEMENT_CHARACTER);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInScriptHtmlCommentLikeText);
            this._emitEOFToken();
          } else {
            this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.SOLIDUS) {
            this.tempBuff = [];
            this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
            this._emitChars("/");
          } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
        }
        [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
            this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
            this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
            this.tempBuff.push(toAsciiLowerCodePoint(cp));
            this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
            this.tempBuff.push(cp);
            this._emitCodePoint(cp);
          } else {
            this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
        }
        [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.EQUALS_SIGN) {
            this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
            this._createAttr("=");
            this.state = ATTRIBUTE_NAME_STATE;
          } else {
            this._createAttr("");
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
        }
        [ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN || cp === $.EOF) {
            this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
            this._unconsume();
          } else if (cp === $.EQUALS_SIGN) {
            this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
          } else if (isAsciiUpper(cp)) {
            this.currentAttr.name += toAsciiLowerChar(cp);
          } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
            this._err(ERR.unexpectedCharacterInAttributeName);
            this.currentAttr.name += toChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;
          } else {
            this.currentAttr.name += toChar(cp);
          }
        }
        [AFTER_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.SOLIDUS) {
            this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $.EQUALS_SIGN) {
            this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._createAttr("");
            this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
        }
        [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingAttributeValue);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else {
            this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
          }
        }
        [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
          if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.AMPERSAND) {
            this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
            this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
            this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
            this.currentAttr.value += toChar(cp);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this.currentAttr.value += toChar(cp);
          }
        }
        [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
          if (isWhitespace(cp)) {
            this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $.SOLIDUS) {
            this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._leaveAttrValue(DATA_STATE);
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._err(ERR.missingWhitespaceBetweenAttributes);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
        }
        [SELF_CLOSING_START_TAG_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.currentToken.selfClosing = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInTag);
            this._emitEOFToken();
          } else {
            this._err(ERR.unexpectedSolidusInTag);
            this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
        }
        [BOGUS_COMMENT_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
          } else {
            this.currentToken.data += toChar(cp);
          }
        }
        [MARKUP_DECLARATION_OPEN_STATE](cp) {
          if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
            this._createCommentToken();
            this.state = COMMENT_START_STATE;
          } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
            this.state = DOCTYPE_STATE;
          } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
            if (this.allowCDATA) {
              this.state = CDATA_SECTION_STATE;
            } else {
              this._err(ERR.cdataInHtmlContent);
              this._createCommentToken();
              this.currentToken.data = "[CDATA[";
              this.state = BOGUS_COMMENT_STATE;
            }
          } else if (!this._ensureHibernation()) {
            this._err(ERR.incorrectlyOpenedComment);
            this._createCommentToken();
            this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
        }
        [COMMENT_START_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_START_DASH_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_START_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptClosingOfEmptyComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "-";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += "<";
            this.state = COMMENT_LESS_THAN_SIGN_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += toChar(cp);
          }
        }
        [COMMENT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $.EXCLAMATION_MARK) {
            this.currentToken.data += "!";
            this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
          } else if (cp === $.LESS_THAN_SIGN) {
            this.currentToken.data += "!";
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
          } else {
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
          } else {
            this._reconsumeInState(COMMENT_END_DASH_STATE);
          }
        }
        [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
          if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {
            this._err(ERR.nestedComment);
          }
          this._reconsumeInState(COMMENT_END_STATE);
        }
        [COMMENT_END_DASH_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.state = COMMENT_END_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "-";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_END_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EXCLAMATION_MARK) {
            this.state = COMMENT_END_BANG_STATE;
          } else if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += "-";
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "--";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [COMMENT_END_BANG_STATE](cp) {
          if (cp === $.HYPHEN_MINUS) {
            this.currentToken.data += "--!";
            this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.incorrectlyClosedComment);
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInComment);
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.data += "--!";
            this._reconsumeInState(COMMENT_STATE);
          }
        }
        [DOCTYPE_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingWhitespaceBeforeDoctypeName);
            this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          }
        }
        [BEFORE_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (isAsciiUpper(cp)) {
            this._createDoctypeToken(toAsciiLowerChar(cp));
            this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);
            this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeName);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this._createDoctypeToken(null);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._createDoctypeToken(toChar(cp));
            this.state = DOCTYPE_NAME_STATE;
          }
        }
        [DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = AFTER_DOCTYPE_NAME_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
            this.currentToken.name += toAsciiLowerChar(cp);
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.name += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.name += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
          } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
            this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
          } else if (!this._ensureHibernation()) {
            this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.publicId = "";
            this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.publicId += toChar(cp);
          }
        }
        [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypePublicIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.publicId += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
          if (isWhitespace(cp)) {
            this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.QUOTATION_MARK) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.QUOTATION_MARK) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $.APOSTROPHE) {
            this.currentToken.systemId = "";
            this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.missingDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this.state = DATA_STATE;
            this._emitCurrentToken();
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $.QUOTATION_MARK) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.systemId += toChar(cp);
          }
        }
        [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $.APOSTROPHE) {
            this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
            this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
          } else if (cp === $.GREATER_THAN_SIGN) {
            this._err(ERR.abruptDoctypeSystemIdentifier);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this.currentToken.systemId += toChar(cp);
          }
        }
        [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace(cp)) {
            return;
          }
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInDoctype);
            this.currentToken.forceQuirks = true;
            this._emitCurrentToken();
            this._emitEOFToken();
          } else {
            this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
            this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
        }
        [BOGUS_DOCTYPE_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this._emitCurrentToken();
            this.state = DATA_STATE;
          } else if (cp === $.NULL) {
            this._err(ERR.unexpectedNullCharacter);
          } else if (cp === $.EOF) {
            this._emitCurrentToken();
            this._emitEOFToken();
          }
        }
        [CDATA_SECTION_STATE](cp) {
          if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_BRACKET_STATE;
          } else if (cp === $.EOF) {
            this._err(ERR.eofInCdata);
            this._emitEOFToken();
          } else {
            this._emitCodePoint(cp);
          }
        }
        [CDATA_SECTION_BRACKET_STATE](cp) {
          if (cp === $.RIGHT_SQUARE_BRACKET) {
            this.state = CDATA_SECTION_END_STATE;
          } else {
            this._emitChars("]");
            this._reconsumeInState(CDATA_SECTION_STATE);
          }
        }
        [CDATA_SECTION_END_STATE](cp) {
          if (cp === $.GREATER_THAN_SIGN) {
            this.state = DATA_STATE;
          } else if (cp === $.RIGHT_SQUARE_BRACKET) {
            this._emitChars("]");
          } else {
            this._emitChars("]]");
            this._reconsumeInState(CDATA_SECTION_STATE);
          }
        }
        [CHARACTER_REFERENCE_STATE](cp) {
          this.tempBuff = [$.AMPERSAND];
          if (cp === $.NUMBER_SIGN) {
            this.tempBuff.push(cp);
            this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
          } else if (isAsciiAlphaNumeric(cp)) {
            this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
          } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [NAMED_CHARACTER_REFERENCE_STATE](cp) {
          const matchResult = this._matchNamedCharacterReference(cp);
          if (this._ensureHibernation()) {
            this.tempBuff = [$.AMPERSAND];
          } else if (matchResult) {
            const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $.SEMICOLON;
            if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
              if (!withSemicolon) {
                this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
              }
              this.tempBuff = matchResult;
            }
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = this.returnState;
          } else {
            this._flushCodePointsConsumedAsCharacterReference();
            this.state = AMBIGUOUS_AMPERSAND_STATE;
          }
        }
        [AMBIGUOUS_AMPERSAND_STATE](cp) {
          if (isAsciiAlphaNumeric(cp)) {
            if (this._isCharacterReferenceInAttribute()) {
              this.currentAttr.value += toChar(cp);
            } else {
              this._emitCodePoint(cp);
            }
          } else {
            if (cp === $.SEMICOLON) {
              this._err(ERR.unknownNamedCharacterReference);
            }
            this._reconsumeInState(this.returnState);
          }
        }
        [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
          this.charRefCode = 0;
          if (cp === $.LATIN_SMALL_X || cp === $.LATIN_CAPITAL_X) {
            this.tempBuff.push(cp);
            this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
          } else {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
          }
        }
        [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiHexDigit(cp)) {
            this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
          } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiDigit(cp)) {
            this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
          } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointsConsumedAsCharacterReference();
            this._reconsumeInState(this.returnState);
          }
        }
        [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiUpperHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 55;
          } else if (isAsciiLowerHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 87;
          } else if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 48;
          } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
        }
        [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 10 + cp - 48;
          } else if (cp === $.SEMICOLON) {
            this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
        }
        [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
          if (this.charRefCode === $.NULL) {
            this._err(ERR.nullCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (this.charRefCode > 1114111) {
            this._err(ERR.characterReferenceOutsideUnicodeRange);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (unicode.isSurrogate(this.charRefCode)) {
            this._err(ERR.surrogateCharacterReference);
            this.charRefCode = $.REPLACEMENT_CHARACTER;
          } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {
            this._err(ERR.noncharacterCharacterReference);
          } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $.CARRIAGE_RETURN) {
            this._err(ERR.controlCharacterReference);
            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];
            if (replacement) {
              this.charRefCode = replacement;
            }
          }
          this.tempBuff = [this.charRefCode];
          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
        }
      };
      Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
      Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
      Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
      Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
      Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
      Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
      Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
      Tokenizer.EOF_TOKEN = "EOF_TOKEN";
      Tokenizer.HIBERNATION_TOKEN = "HIBERNATION_TOKEN";
      Tokenizer.MODE = {
        DATA: DATA_STATE,
        RCDATA: RCDATA_STATE,
        RAWTEXT: RAWTEXT_STATE,
        SCRIPT_DATA: SCRIPT_DATA_STATE,
        PLAINTEXT: PLAINTEXT_STATE
      };
      Tokenizer.getTokenAttr = function(token, attrName) {
        for (let i = token.attrs.length - 1; i >= 0; i--) {
          if (token.attrs[i].name === attrName) {
            return token.attrs[i].value;
          }
        }
        return null;
      };
      module.exports = Tokenizer;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/common/html.js
  var require_html = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/common/html.js"(exports) {
      "use strict";
      var NS = exports.NAMESPACES = {
        HTML: "http://www.w3.org/1999/xhtml",
        MATHML: "http://www.w3.org/1998/Math/MathML",
        SVG: "http://www.w3.org/2000/svg",
        XLINK: "http://www.w3.org/1999/xlink",
        XML: "http://www.w3.org/XML/1998/namespace",
        XMLNS: "http://www.w3.org/2000/xmlns/"
      };
      exports.ATTRS = {
        TYPE: "type",
        ACTION: "action",
        ENCODING: "encoding",
        PROMPT: "prompt",
        NAME: "name",
        COLOR: "color",
        FACE: "face",
        SIZE: "size"
      };
      exports.DOCUMENT_MODE = {
        NO_QUIRKS: "no-quirks",
        QUIRKS: "quirks",
        LIMITED_QUIRKS: "limited-quirks"
      };
      var $ = exports.TAG_NAMES = {
        A: "a",
        ADDRESS: "address",
        ANNOTATION_XML: "annotation-xml",
        APPLET: "applet",
        AREA: "area",
        ARTICLE: "article",
        ASIDE: "aside",
        B: "b",
        BASE: "base",
        BASEFONT: "basefont",
        BGSOUND: "bgsound",
        BIG: "big",
        BLOCKQUOTE: "blockquote",
        BODY: "body",
        BR: "br",
        BUTTON: "button",
        CAPTION: "caption",
        CENTER: "center",
        CODE: "code",
        COL: "col",
        COLGROUP: "colgroup",
        DD: "dd",
        DESC: "desc",
        DETAILS: "details",
        DIALOG: "dialog",
        DIR: "dir",
        DIV: "div",
        DL: "dl",
        DT: "dt",
        EM: "em",
        EMBED: "embed",
        FIELDSET: "fieldset",
        FIGCAPTION: "figcaption",
        FIGURE: "figure",
        FONT: "font",
        FOOTER: "footer",
        FOREIGN_OBJECT: "foreignObject",
        FORM: "form",
        FRAME: "frame",
        FRAMESET: "frameset",
        H1: "h1",
        H2: "h2",
        H3: "h3",
        H4: "h4",
        H5: "h5",
        H6: "h6",
        HEAD: "head",
        HEADER: "header",
        HGROUP: "hgroup",
        HR: "hr",
        HTML: "html",
        I: "i",
        IMG: "img",
        IMAGE: "image",
        INPUT: "input",
        IFRAME: "iframe",
        KEYGEN: "keygen",
        LABEL: "label",
        LI: "li",
        LINK: "link",
        LISTING: "listing",
        MAIN: "main",
        MALIGNMARK: "malignmark",
        MARQUEE: "marquee",
        MATH: "math",
        MENU: "menu",
        META: "meta",
        MGLYPH: "mglyph",
        MI: "mi",
        MO: "mo",
        MN: "mn",
        MS: "ms",
        MTEXT: "mtext",
        NAV: "nav",
        NOBR: "nobr",
        NOFRAMES: "noframes",
        NOEMBED: "noembed",
        NOSCRIPT: "noscript",
        OBJECT: "object",
        OL: "ol",
        OPTGROUP: "optgroup",
        OPTION: "option",
        P: "p",
        PARAM: "param",
        PLAINTEXT: "plaintext",
        PRE: "pre",
        RB: "rb",
        RP: "rp",
        RT: "rt",
        RTC: "rtc",
        RUBY: "ruby",
        S: "s",
        SCRIPT: "script",
        SECTION: "section",
        SELECT: "select",
        SOURCE: "source",
        SMALL: "small",
        SPAN: "span",
        STRIKE: "strike",
        STRONG: "strong",
        STYLE: "style",
        SUB: "sub",
        SUMMARY: "summary",
        SUP: "sup",
        TABLE: "table",
        TBODY: "tbody",
        TEMPLATE: "template",
        TEXTAREA: "textarea",
        TFOOT: "tfoot",
        TD: "td",
        TH: "th",
        THEAD: "thead",
        TITLE: "title",
        TR: "tr",
        TRACK: "track",
        TT: "tt",
        U: "u",
        UL: "ul",
        SVG: "svg",
        VAR: "var",
        WBR: "wbr",
        XMP: "xmp"
      };
      exports.SPECIAL_ELEMENTS = {
        [NS.HTML]: {
          [$.ADDRESS]: true,
          [$.APPLET]: true,
          [$.AREA]: true,
          [$.ARTICLE]: true,
          [$.ASIDE]: true,
          [$.BASE]: true,
          [$.BASEFONT]: true,
          [$.BGSOUND]: true,
          [$.BLOCKQUOTE]: true,
          [$.BODY]: true,
          [$.BR]: true,
          [$.BUTTON]: true,
          [$.CAPTION]: true,
          [$.CENTER]: true,
          [$.COL]: true,
          [$.COLGROUP]: true,
          [$.DD]: true,
          [$.DETAILS]: true,
          [$.DIR]: true,
          [$.DIV]: true,
          [$.DL]: true,
          [$.DT]: true,
          [$.EMBED]: true,
          [$.FIELDSET]: true,
          [$.FIGCAPTION]: true,
          [$.FIGURE]: true,
          [$.FOOTER]: true,
          [$.FORM]: true,
          [$.FRAME]: true,
          [$.FRAMESET]: true,
          [$.H1]: true,
          [$.H2]: true,
          [$.H3]: true,
          [$.H4]: true,
          [$.H5]: true,
          [$.H6]: true,
          [$.HEAD]: true,
          [$.HEADER]: true,
          [$.HGROUP]: true,
          [$.HR]: true,
          [$.HTML]: true,
          [$.IFRAME]: true,
          [$.IMG]: true,
          [$.INPUT]: true,
          [$.LI]: true,
          [$.LINK]: true,
          [$.LISTING]: true,
          [$.MAIN]: true,
          [$.MARQUEE]: true,
          [$.MENU]: true,
          [$.META]: true,
          [$.NAV]: true,
          [$.NOEMBED]: true,
          [$.NOFRAMES]: true,
          [$.NOSCRIPT]: true,
          [$.OBJECT]: true,
          [$.OL]: true,
          [$.P]: true,
          [$.PARAM]: true,
          [$.PLAINTEXT]: true,
          [$.PRE]: true,
          [$.SCRIPT]: true,
          [$.SECTION]: true,
          [$.SELECT]: true,
          [$.SOURCE]: true,
          [$.STYLE]: true,
          [$.SUMMARY]: true,
          [$.TABLE]: true,
          [$.TBODY]: true,
          [$.TD]: true,
          [$.TEMPLATE]: true,
          [$.TEXTAREA]: true,
          [$.TFOOT]: true,
          [$.TH]: true,
          [$.THEAD]: true,
          [$.TITLE]: true,
          [$.TR]: true,
          [$.TRACK]: true,
          [$.UL]: true,
          [$.WBR]: true,
          [$.XMP]: true
        },
        [NS.MATHML]: {
          [$.MI]: true,
          [$.MO]: true,
          [$.MN]: true,
          [$.MS]: true,
          [$.MTEXT]: true,
          [$.ANNOTATION_XML]: true
        },
        [NS.SVG]: {
          [$.TITLE]: true,
          [$.FOREIGN_OBJECT]: true,
          [$.DESC]: true
        }
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/parser/open-element-stack.js
  var require_open_element_stack = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/parser/open-element-stack.js"(exports, module) {
      "use strict";
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      function isImpliedEndTagRequired(tn) {
        switch (tn.length) {
          case 1:
            return tn === $.P;
          case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;
          case 3:
            return tn === $.RTC;
          case 6:
            return tn === $.OPTION;
          case 8:
            return tn === $.OPTGROUP;
        }
        return false;
      }
      function isImpliedEndTagRequiredThoroughly(tn) {
        switch (tn.length) {
          case 1:
            return tn === $.P;
          case 2:
            return tn === $.RB || tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI || tn === $.TD || tn === $.TH || tn === $.TR;
          case 3:
            return tn === $.RTC;
          case 5:
            return tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD;
          case 6:
            return tn === $.OPTION;
          case 7:
            return tn === $.CAPTION;
          case 8:
            return tn === $.OPTGROUP || tn === $.COLGROUP;
        }
        return false;
      }
      function isScopingElement(tn, ns) {
        switch (tn.length) {
          case 2:
            if (tn === $.TD || tn === $.TH) {
              return ns === NS.HTML;
            } else if (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS) {
              return ns === NS.MATHML;
            }
            break;
          case 4:
            if (tn === $.HTML) {
              return ns === NS.HTML;
            } else if (tn === $.DESC) {
              return ns === NS.SVG;
            }
            break;
          case 5:
            if (tn === $.TABLE) {
              return ns === NS.HTML;
            } else if (tn === $.MTEXT) {
              return ns === NS.MATHML;
            } else if (tn === $.TITLE) {
              return ns === NS.SVG;
            }
            break;
          case 6:
            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;
          case 7:
            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;
          case 8:
            return tn === $.TEMPLATE && ns === NS.HTML;
          case 13:
            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;
          case 14:
            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
        }
        return false;
      }
      var OpenElementStack = class {
        constructor(document4, treeAdapter) {
          this.stackTop = -1;
          this.items = [];
          this.current = document4;
          this.currentTagName = null;
          this.currentTmplContent = null;
          this.tmplCount = 0;
          this.treeAdapter = treeAdapter;
        }
        _indexOf(element4) {
          let idx = -1;
          for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element4) {
              idx = i;
              break;
            }
          }
          return idx;
        }
        _isInTemplate() {
          return this.currentTagName === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
        }
        _updateCurrentElement() {
          this.current = this.items[this.stackTop];
          this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
          this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
        }
        push(element4) {
          this.items[++this.stackTop] = element4;
          this._updateCurrentElement();
          if (this._isInTemplate()) {
            this.tmplCount++;
          }
        }
        pop() {
          this.stackTop--;
          if (this.tmplCount > 0 && this._isInTemplate()) {
            this.tmplCount--;
          }
          this._updateCurrentElement();
        }
        replace(oldElement, newElement) {
          const idx = this._indexOf(oldElement);
          this.items[idx] = newElement;
          if (idx === this.stackTop) {
            this._updateCurrentElement();
          }
        }
        insertAfter(referenceElement, newElement) {
          const insertionIdx = this._indexOf(referenceElement) + 1;
          this.items.splice(insertionIdx, 0, newElement);
          if (insertionIdx === ++this.stackTop) {
            this._updateCurrentElement();
          }
        }
        popUntilTagNamePopped(tagName) {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === tagName && ns === NS.HTML) {
              break;
            }
          }
        }
        popUntilElementPopped(element4) {
          while (this.stackTop > -1) {
            const poppedElement = this.current;
            this.pop();
            if (poppedElement === element4) {
              break;
            }
          }
        }
        popUntilNumberedHeaderPopped() {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6 && ns === NS.HTML) {
              break;
            }
          }
        }
        popUntilTableCellPopped() {
          while (this.stackTop > -1) {
            const tn = this.currentTagName;
            const ns = this.treeAdapter.getNamespaceURI(this.current);
            this.pop();
            if (tn === $.TD || tn === $.TH && ns === NS.HTML) {
              break;
            }
          }
        }
        popAllUpToHtmlElement() {
          this.stackTop = 0;
          this._updateCurrentElement();
        }
        clearBackToTableContext() {
          while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        clearBackToTableBodyContext() {
          while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT && this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        clearBackToTableRowContext() {
          while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
            this.pop();
          }
        }
        remove(element4) {
          for (let i = this.stackTop; i >= 0; i--) {
            if (this.items[i] === element4) {
              this.items.splice(i, 1);
              this.stackTop--;
              this._updateCurrentElement();
              break;
            }
          }
        }
        tryPeekProperlyNestedBodyElement() {
          const element4 = this.items[1];
          return element4 && this.treeAdapter.getTagName(element4) === $.BODY ? element4 : null;
        }
        contains(element4) {
          return this._indexOf(element4) > -1;
        }
        getCommonAncestor(element4) {
          let elementIdx = this._indexOf(element4);
          return --elementIdx >= 0 ? this.items[elementIdx] : null;
        }
        isRootHtmlElementCurrent() {
          return this.stackTop === 0 && this.currentTagName === $.HTML;
        }
        hasInScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if (isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasNumberedHeaderInScope() {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if ((tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) && ns === NS.HTML) {
              return true;
            }
            if (isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInListItemScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if ((tn === $.UL || tn === $.OL) && ns === NS.HTML || isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInButtonScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (tn === tagName && ns === NS.HTML) {
              return true;
            }
            if (tn === $.BUTTON && ns === NS.HTML || isScopingElement(tn, ns)) {
              return false;
            }
          }
          return true;
        }
        hasInTableScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === tagName) {
              return true;
            }
            if (tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) {
              return false;
            }
          }
          return true;
        }
        hasTableBodyContextInTableScope() {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT) {
              return true;
            }
            if (tn === $.TABLE || tn === $.HTML) {
              return false;
            }
          }
          return true;
        }
        hasInSelectScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
            const tn = this.treeAdapter.getTagName(this.items[i]);
            const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
            if (ns !== NS.HTML) {
              continue;
            }
            if (tn === tagName) {
              return true;
            }
            if (tn !== $.OPTION && tn !== $.OPTGROUP) {
              return false;
            }
          }
          return true;
        }
        generateImpliedEndTags() {
          while (isImpliedEndTagRequired(this.currentTagName)) {
            this.pop();
          }
        }
        generateImpliedEndTagsThoroughly() {
          while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
            this.pop();
          }
        }
        generateImpliedEndTagsWithExclusion(exclusionTagName) {
          while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
            this.pop();
          }
        }
      };
      module.exports = OpenElementStack;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/parser/formatting-element-list.js
  var require_formatting_element_list = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/parser/formatting-element-list.js"(exports, module) {
      "use strict";
      var NOAH_ARK_CAPACITY = 3;
      var FormattingElementList = class {
        constructor(treeAdapter) {
          this.length = 0;
          this.entries = [];
          this.treeAdapter = treeAdapter;
          this.bookmark = null;
        }
        _getNoahArkConditionCandidates(newElement) {
          const candidates = [];
          if (this.length >= NOAH_ARK_CAPACITY) {
            const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
            const neTagName = this.treeAdapter.getTagName(newElement);
            const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
            for (let i = this.length - 1; i >= 0; i--) {
              const entry = this.entries[i];
              if (entry.type === FormattingElementList.MARKER_ENTRY) {
                break;
              }
              const element4 = entry.element;
              const elementAttrs = this.treeAdapter.getAttrList(element4);
              const isCandidate = this.treeAdapter.getTagName(element4) === neTagName && this.treeAdapter.getNamespaceURI(element4) === neNamespaceURI && elementAttrs.length === neAttrsLength;
              if (isCandidate) {
                candidates.push({ idx: i, attrs: elementAttrs });
              }
            }
          }
          return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
        }
        _ensureNoahArkCondition(newElement) {
          const candidates = this._getNoahArkConditionCandidates(newElement);
          let cLength = candidates.length;
          if (cLength) {
            const neAttrs = this.treeAdapter.getAttrList(newElement);
            const neAttrsLength = neAttrs.length;
            const neAttrsMap = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < neAttrsLength; i++) {
              const neAttr = neAttrs[i];
              neAttrsMap[neAttr.name] = neAttr.value;
            }
            for (let i = 0; i < neAttrsLength; i++) {
              for (let j = 0; j < cLength; j++) {
                const cAttr = candidates[j].attrs[i];
                if (neAttrsMap[cAttr.name] !== cAttr.value) {
                  candidates.splice(j, 1);
                  cLength--;
                }
                if (candidates.length < NOAH_ARK_CAPACITY) {
                  return;
                }
              }
            }
            for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
              this.entries.splice(candidates[i].idx, 1);
              this.length--;
            }
          }
        }
        insertMarker() {
          this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
          this.length++;
        }
        pushElement(element4, token) {
          this._ensureNoahArkCondition(element4);
          this.entries.push({
            type: FormattingElementList.ELEMENT_ENTRY,
            element: element4,
            token
          });
          this.length++;
        }
        insertElementAfterBookmark(element4, token) {
          let bookmarkIdx = this.length - 1;
          for (; bookmarkIdx >= 0; bookmarkIdx--) {
            if (this.entries[bookmarkIdx] === this.bookmark) {
              break;
            }
          }
          this.entries.splice(bookmarkIdx + 1, 0, {
            type: FormattingElementList.ELEMENT_ENTRY,
            element: element4,
            token
          });
          this.length++;
        }
        removeEntry(entry) {
          for (let i = this.length - 1; i >= 0; i--) {
            if (this.entries[i] === entry) {
              this.entries.splice(i, 1);
              this.length--;
              break;
            }
          }
        }
        clearToLastMarker() {
          while (this.length) {
            const entry = this.entries.pop();
            this.length--;
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              break;
            }
          }
        }
        getElementEntryInScopeWithTagName(tagName) {
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              return null;
            }
            if (this.treeAdapter.getTagName(entry.element) === tagName) {
              return entry;
            }
          }
          return null;
        }
        getElementEntry(element4) {
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element4) {
              return entry;
            }
          }
          return null;
        }
      };
      FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
      FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
      module.exports = FormattingElementList;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/utils/mixin.js
  var require_mixin = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/utils/mixin.js"(exports, module) {
      "use strict";
      var Mixin = class {
        constructor(host) {
          const originalMethods = {};
          const overriddenMethods = this._getOverriddenMethods(this, originalMethods);
          for (const key of Object.keys(overriddenMethods)) {
            if (typeof overriddenMethods[key] === "function") {
              originalMethods[key] = host[key];
              host[key] = overriddenMethods[key];
            }
          }
        }
        _getOverriddenMethods() {
          throw new Error("Not implemented");
        }
      };
      Mixin.install = function(host, Ctor, opts) {
        if (!host.__mixins) {
          host.__mixins = [];
        }
        for (let i = 0; i < host.__mixins.length; i++) {
          if (host.__mixins[i].constructor === Ctor) {
            return host.__mixins[i];
          }
        }
        const mixin = new Ctor(host, opts);
        host.__mixins.push(mixin);
        return mixin;
      };
      module.exports = Mixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js
  var require_preprocessor_mixin = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js"(exports, module) {
      "use strict";
      var Mixin = require_mixin();
      var PositionTrackingPreprocessorMixin = class extends Mixin {
        constructor(preprocessor) {
          super(preprocessor);
          this.preprocessor = preprocessor;
          this.isEol = false;
          this.lineStartPos = 0;
          this.droppedBufferSize = 0;
          this.offset = 0;
          this.col = 0;
          this.line = 1;
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            advance() {
              const pos = this.pos + 1;
              const ch = this.html[pos];
              if (mxn.isEol) {
                mxn.isEol = false;
                mxn.line++;
                mxn.lineStartPos = pos;
              }
              if (ch === "\n" || ch === "\r" && this.html[pos + 1] !== "\n") {
                mxn.isEol = true;
              }
              mxn.col = pos - mxn.lineStartPos + 1;
              mxn.offset = mxn.droppedBufferSize + pos;
              return orig.advance.call(this);
            },
            retreat() {
              orig.retreat.call(this);
              mxn.isEol = false;
              mxn.col = this.pos - mxn.lineStartPos + 1;
            },
            dropParsedChunk() {
              const prevPos = this.pos;
              orig.dropParsedChunk.call(this);
              const reduction = prevPos - this.pos;
              mxn.lineStartPos -= reduction;
              mxn.droppedBufferSize += reduction;
              mxn.offset = mxn.droppedBufferSize + this.pos;
            }
          };
        }
      };
      module.exports = PositionTrackingPreprocessorMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js
  var require_tokenizer_mixin = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js"(exports, module) {
      "use strict";
      var Mixin = require_mixin();
      var Tokenizer = require_tokenizer();
      var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
      var LocationInfoTokenizerMixin = class extends Mixin {
        constructor(tokenizer) {
          super(tokenizer);
          this.tokenizer = tokenizer;
          this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
          this.currentAttrLocation = null;
          this.ctLoc = null;
        }
        _getCurrentLocation() {
          return {
            startLine: this.posTracker.line,
            startCol: this.posTracker.col,
            startOffset: this.posTracker.offset,
            endLine: -1,
            endCol: -1,
            endOffset: -1
          };
        }
        _attachCurrentAttrLocationInfo() {
          this.currentAttrLocation.endLine = this.posTracker.line;
          this.currentAttrLocation.endCol = this.posTracker.col;
          this.currentAttrLocation.endOffset = this.posTracker.offset;
          const currentToken = this.tokenizer.currentToken;
          const currentAttr = this.tokenizer.currentAttr;
          if (!currentToken.location.attrs) {
            currentToken.location.attrs = /* @__PURE__ */ Object.create(null);
          }
          currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
        }
        _getOverriddenMethods(mxn, orig) {
          const methods = {
            _createStartTagToken() {
              orig._createStartTagToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createEndTagToken() {
              orig._createEndTagToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createCommentToken() {
              orig._createCommentToken.call(this);
              this.currentToken.location = mxn.ctLoc;
            },
            _createDoctypeToken(initialName) {
              orig._createDoctypeToken.call(this, initialName);
              this.currentToken.location = mxn.ctLoc;
            },
            _createCharacterToken(type, ch) {
              orig._createCharacterToken.call(this, type, ch);
              this.currentCharacterToken.location = mxn.ctLoc;
            },
            _createEOFToken() {
              orig._createEOFToken.call(this);
              this.currentToken.location = mxn._getCurrentLocation();
            },
            _createAttr(attrNameFirstCh) {
              orig._createAttr.call(this, attrNameFirstCh);
              mxn.currentAttrLocation = mxn._getCurrentLocation();
            },
            _leaveAttrName(toState) {
              orig._leaveAttrName.call(this, toState);
              mxn._attachCurrentAttrLocationInfo();
            },
            _leaveAttrValue(toState) {
              orig._leaveAttrValue.call(this, toState);
              mxn._attachCurrentAttrLocationInfo();
            },
            _emitCurrentToken() {
              const ctLoc = this.currentToken.location;
              if (this.currentCharacterToken) {
                this.currentCharacterToken.location.endLine = ctLoc.startLine;
                this.currentCharacterToken.location.endCol = ctLoc.startCol;
                this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
              }
              if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
                ctLoc.endLine = ctLoc.startLine;
                ctLoc.endCol = ctLoc.startCol;
                ctLoc.endOffset = ctLoc.startOffset;
              } else {
                ctLoc.endLine = mxn.posTracker.line;
                ctLoc.endCol = mxn.posTracker.col + 1;
                ctLoc.endOffset = mxn.posTracker.offset + 1;
              }
              orig._emitCurrentToken.call(this);
            },
            _emitCurrentCharacterToken() {
              const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;
              if (ctLoc && ctLoc.endOffset === -1) {
                ctLoc.endLine = mxn.posTracker.line;
                ctLoc.endCol = mxn.posTracker.col;
                ctLoc.endOffset = mxn.posTracker.offset;
              }
              orig._emitCurrentCharacterToken.call(this);
            }
          };
          Object.keys(Tokenizer.MODE).forEach((modeName) => {
            const state2 = Tokenizer.MODE[modeName];
            methods[state2] = function(cp) {
              mxn.ctLoc = mxn._getCurrentLocation();
              orig[state2].call(this, cp);
            };
          });
          return methods;
        }
      };
      module.exports = LocationInfoTokenizerMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js
  var require_open_element_stack_mixin = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js"(exports, module) {
      "use strict";
      var Mixin = require_mixin();
      var LocationInfoOpenElementStackMixin = class extends Mixin {
        constructor(stack, opts) {
          super(stack);
          this.onItemPop = opts.onItemPop;
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            pop() {
              mxn.onItemPop(this.current);
              orig.pop.call(this);
            },
            popAllUpToHtmlElement() {
              for (let i = this.stackTop; i > 0; i--) {
                mxn.onItemPop(this.items[i]);
              }
              orig.popAllUpToHtmlElement.call(this);
            },
            remove(element4) {
              mxn.onItemPop(this.current);
              orig.remove.call(this, element4);
            }
          };
        }
      };
      module.exports = LocationInfoOpenElementStackMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/location-info/parser-mixin.js
  var require_parser_mixin = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/location-info/parser-mixin.js"(exports, module) {
      "use strict";
      var Mixin = require_mixin();
      var Tokenizer = require_tokenizer();
      var LocationInfoTokenizerMixin = require_tokenizer_mixin();
      var LocationInfoOpenElementStackMixin = require_open_element_stack_mixin();
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var LocationInfoParserMixin = class extends Mixin {
        constructor(parser) {
          super(parser);
          this.parser = parser;
          this.treeAdapter = this.parser.treeAdapter;
          this.posTracker = null;
          this.lastStartTagToken = null;
          this.lastFosterParentingLocation = null;
          this.currentToken = null;
        }
        _setStartLocation(element4) {
          let loc = null;
          if (this.lastStartTagToken) {
            loc = Object.assign({}, this.lastStartTagToken.location);
            loc.startTag = this.lastStartTagToken.location;
          }
          this.treeAdapter.setNodeSourceCodeLocation(element4, loc);
        }
        _setEndLocation(element4, closingToken) {
          const loc = this.treeAdapter.getNodeSourceCodeLocation(element4);
          if (loc) {
            if (closingToken.location) {
              const ctLoc = closingToken.location;
              const tn = this.treeAdapter.getTagName(element4);
              const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;
              const endLoc = {};
              if (isClosingEndTag) {
                endLoc.endTag = Object.assign({}, ctLoc);
                endLoc.endLine = ctLoc.endLine;
                endLoc.endCol = ctLoc.endCol;
                endLoc.endOffset = ctLoc.endOffset;
              } else {
                endLoc.endLine = ctLoc.startLine;
                endLoc.endCol = ctLoc.startCol;
                endLoc.endOffset = ctLoc.startOffset;
              }
              this.treeAdapter.updateNodeSourceCodeLocation(element4, endLoc);
            }
          }
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            _bootstrap(document4, fragmentContext) {
              orig._bootstrap.call(this, document4, fragmentContext);
              mxn.lastStartTagToken = null;
              mxn.lastFosterParentingLocation = null;
              mxn.currentToken = null;
              const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
              mxn.posTracker = tokenizerMixin.posTracker;
              Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
                onItemPop: function(element4) {
                  mxn._setEndLocation(element4, mxn.currentToken);
                }
              });
            },
            _runParsingLoop(scriptHandler) {
              orig._runParsingLoop.call(this, scriptHandler);
              for (let i = this.openElements.stackTop; i >= 0; i--) {
                mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
              }
            },
            _processTokenInForeignContent(token) {
              mxn.currentToken = token;
              orig._processTokenInForeignContent.call(this, token);
            },
            _processToken(token) {
              mxn.currentToken = token;
              orig._processToken.call(this, token);
              const requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));
              if (requireExplicitUpdate) {
                for (let i = this.openElements.stackTop; i >= 0; i--) {
                  const element4 = this.openElements.items[i];
                  if (this.treeAdapter.getTagName(element4) === token.tagName) {
                    mxn._setEndLocation(element4, token);
                    break;
                  }
                }
              }
            },
            _setDocumentType(token) {
              orig._setDocumentType.call(this, token);
              const documentChildren = this.treeAdapter.getChildNodes(this.document);
              const cnLength = documentChildren.length;
              for (let i = 0; i < cnLength; i++) {
                const node2 = documentChildren[i];
                if (this.treeAdapter.isDocumentTypeNode(node2)) {
                  this.treeAdapter.setNodeSourceCodeLocation(node2, token.location);
                  break;
                }
              }
            },
            _attachElementToTree(element4) {
              mxn._setStartLocation(element4);
              mxn.lastStartTagToken = null;
              orig._attachElementToTree.call(this, element4);
            },
            _appendElement(token, namespaceURI) {
              mxn.lastStartTagToken = token;
              orig._appendElement.call(this, token, namespaceURI);
            },
            _insertElement(token, namespaceURI) {
              mxn.lastStartTagToken = token;
              orig._insertElement.call(this, token, namespaceURI);
            },
            _insertTemplate(token) {
              mxn.lastStartTagToken = token;
              orig._insertTemplate.call(this, token);
              const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
              this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
            },
            _insertFakeRootElement() {
              orig._insertFakeRootElement.call(this);
              this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
            },
            _appendCommentNode(token, parent) {
              orig._appendCommentNode.call(this, token, parent);
              const children = this.treeAdapter.getChildNodes(parent);
              const commentNode = children[children.length - 1];
              this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
            },
            _findFosterParentingLocation() {
              mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
              return mxn.lastFosterParentingLocation;
            },
            _insertCharacters(token) {
              orig._insertCharacters.call(this, token);
              const hasFosterParent = this._shouldFosterParentOnInsertion();
              const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
              const siblings = this.treeAdapter.getChildNodes(parent);
              const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;
              const textNode = siblings[textNodeIdx];
              const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
              if (tnLoc) {
                const { endLine, endCol, endOffset } = token.location;
                this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
              } else {
                this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
              }
            }
          };
        }
      };
      module.exports = LocationInfoParserMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/mixin-base.js
  var require_mixin_base = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/mixin-base.js"(exports, module) {
      "use strict";
      var Mixin = require_mixin();
      var ErrorReportingMixinBase = class extends Mixin {
        constructor(host, opts) {
          super(host);
          this.posTracker = null;
          this.onParseError = opts.onParseError;
        }
        _setErrorLocation(err) {
          err.startLine = err.endLine = this.posTracker.line;
          err.startCol = err.endCol = this.posTracker.col;
          err.startOffset = err.endOffset = this.posTracker.offset;
        }
        _reportError(code3) {
          const err = {
            code: code3,
            startLine: -1,
            startCol: -1,
            startOffset: -1,
            endLine: -1,
            endCol: -1,
            endOffset: -1
          };
          this._setErrorLocation(err);
          this.onParseError(err);
        }
        _getOverriddenMethods(mxn) {
          return {
            _err(code3) {
              mxn._reportError(code3);
            }
          };
        }
      };
      module.exports = ErrorReportingMixinBase;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js
  var require_preprocessor_mixin2 = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js"(exports, module) {
      "use strict";
      var ErrorReportingMixinBase = require_mixin_base();
      var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
      var Mixin = require_mixin();
      var ErrorReportingPreprocessorMixin = class extends ErrorReportingMixinBase {
        constructor(preprocessor, opts) {
          super(preprocessor, opts);
          this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
          this.lastErrOffset = -1;
        }
        _reportError(code3) {
          if (this.lastErrOffset !== this.posTracker.offset) {
            this.lastErrOffset = this.posTracker.offset;
            super._reportError(code3);
          }
        }
      };
      module.exports = ErrorReportingPreprocessorMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js
  var require_tokenizer_mixin2 = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js"(exports, module) {
      "use strict";
      var ErrorReportingMixinBase = require_mixin_base();
      var ErrorReportingPreprocessorMixin = require_preprocessor_mixin2();
      var Mixin = require_mixin();
      var ErrorReportingTokenizerMixin = class extends ErrorReportingMixinBase {
        constructor(tokenizer, opts) {
          super(tokenizer, opts);
          const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);
          this.posTracker = preprocessorMixin.posTracker;
        }
      };
      module.exports = ErrorReportingTokenizerMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js
  var require_parser_mixin2 = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"(exports, module) {
      "use strict";
      var ErrorReportingMixinBase = require_mixin_base();
      var ErrorReportingTokenizerMixin = require_tokenizer_mixin2();
      var LocationInfoTokenizerMixin = require_tokenizer_mixin();
      var Mixin = require_mixin();
      var ErrorReportingParserMixin = class extends ErrorReportingMixinBase {
        constructor(parser, opts) {
          super(parser, opts);
          this.opts = opts;
          this.ctLoc = null;
          this.locBeforeToken = false;
        }
        _setErrorLocation(err) {
          if (this.ctLoc) {
            err.startLine = this.ctLoc.startLine;
            err.startCol = this.ctLoc.startCol;
            err.startOffset = this.ctLoc.startOffset;
            err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
            err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
            err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
          }
        }
        _getOverriddenMethods(mxn, orig) {
          return {
            _bootstrap(document4, fragmentContext) {
              orig._bootstrap.call(this, document4, fragmentContext);
              Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
              Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
            },
            _processInputToken(token) {
              mxn.ctLoc = token.location;
              orig._processInputToken.call(this, token);
            },
            _err(code3, options) {
              mxn.locBeforeToken = options && options.beforeToken;
              mxn._reportError(code3);
            }
          };
        }
      };
      module.exports = ErrorReportingParserMixin;
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/tree-adapters/default.js
  var require_default = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/tree-adapters/default.js"(exports) {
      "use strict";
      var { DOCUMENT_MODE } = require_html();
      exports.createDocument = function() {
        return {
          nodeName: "#document",
          mode: DOCUMENT_MODE.NO_QUIRKS,
          childNodes: []
        };
      };
      exports.createDocumentFragment = function() {
        return {
          nodeName: "#document-fragment",
          childNodes: []
        };
      };
      exports.createElement = function(tagName, namespaceURI, attrs) {
        return {
          nodeName: tagName,
          tagName,
          attrs,
          namespaceURI,
          childNodes: [],
          parentNode: null
        };
      };
      exports.createCommentNode = function(data) {
        return {
          nodeName: "#comment",
          data,
          parentNode: null
        };
      };
      var createTextNode = function(value) {
        return {
          nodeName: "#text",
          value,
          parentNode: null
        };
      };
      var appendChild = exports.appendChild = function(parentNode, newNode) {
        parentNode.childNodes.push(newNode);
        newNode.parentNode = parentNode;
      };
      var insertBefore = exports.insertBefore = function(parentNode, newNode, referenceNode) {
        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
        parentNode.childNodes.splice(insertionIdx, 0, newNode);
        newNode.parentNode = parentNode;
      };
      exports.setTemplateContent = function(templateElement, contentElement) {
        templateElement.content = contentElement;
      };
      exports.getTemplateContent = function(templateElement) {
        return templateElement.content;
      };
      exports.setDocumentType = function(document4, name, publicId, systemId) {
        let doctypeNode = null;
        for (let i = 0; i < document4.childNodes.length; i++) {
          if (document4.childNodes[i].nodeName === "#documentType") {
            doctypeNode = document4.childNodes[i];
            break;
          }
        }
        if (doctypeNode) {
          doctypeNode.name = name;
          doctypeNode.publicId = publicId;
          doctypeNode.systemId = systemId;
        } else {
          appendChild(document4, {
            nodeName: "#documentType",
            name,
            publicId,
            systemId
          });
        }
      };
      exports.setDocumentMode = function(document4, mode2) {
        document4.mode = mode2;
      };
      exports.getDocumentMode = function(document4) {
        return document4.mode;
      };
      exports.detachNode = function(node2) {
        if (node2.parentNode) {
          const idx = node2.parentNode.childNodes.indexOf(node2);
          node2.parentNode.childNodes.splice(idx, 1);
          node2.parentNode = null;
        }
      };
      exports.insertText = function(parentNode, text6) {
        if (parentNode.childNodes.length) {
          const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
          if (prevNode.nodeName === "#text") {
            prevNode.value += text6;
            return;
          }
        }
        appendChild(parentNode, createTextNode(text6));
      };
      exports.insertTextBefore = function(parentNode, text6, referenceNode) {
        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
        if (prevNode && prevNode.nodeName === "#text") {
          prevNode.value += text6;
        } else {
          insertBefore(parentNode, createTextNode(text6), referenceNode);
        }
      };
      exports.adoptAttributes = function(recipient, attrs) {
        const recipientAttrsMap = [];
        for (let i = 0; i < recipient.attrs.length; i++) {
          recipientAttrsMap.push(recipient.attrs[i].name);
        }
        for (let j = 0; j < attrs.length; j++) {
          if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
            recipient.attrs.push(attrs[j]);
          }
        }
      };
      exports.getFirstChild = function(node2) {
        return node2.childNodes[0];
      };
      exports.getChildNodes = function(node2) {
        return node2.childNodes;
      };
      exports.getParentNode = function(node2) {
        return node2.parentNode;
      };
      exports.getAttrList = function(element4) {
        return element4.attrs;
      };
      exports.getTagName = function(element4) {
        return element4.tagName;
      };
      exports.getNamespaceURI = function(element4) {
        return element4.namespaceURI;
      };
      exports.getTextNodeContent = function(textNode) {
        return textNode.value;
      };
      exports.getCommentNodeContent = function(commentNode) {
        return commentNode.data;
      };
      exports.getDocumentTypeNodeName = function(doctypeNode) {
        return doctypeNode.name;
      };
      exports.getDocumentTypeNodePublicId = function(doctypeNode) {
        return doctypeNode.publicId;
      };
      exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
        return doctypeNode.systemId;
      };
      exports.isTextNode = function(node2) {
        return node2.nodeName === "#text";
      };
      exports.isCommentNode = function(node2) {
        return node2.nodeName === "#comment";
      };
      exports.isDocumentTypeNode = function(node2) {
        return node2.nodeName === "#documentType";
      };
      exports.isElementNode = function(node2) {
        return !!node2.tagName;
      };
      exports.setNodeSourceCodeLocation = function(node2, location2) {
        node2.sourceCodeLocation = location2;
      };
      exports.getNodeSourceCodeLocation = function(node2) {
        return node2.sourceCodeLocation;
      };
      exports.updateNodeSourceCodeLocation = function(node2, endLocation) {
        node2.sourceCodeLocation = Object.assign(node2.sourceCodeLocation, endLocation);
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/utils/merge-options.js
  var require_merge_options = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/utils/merge-options.js"(exports, module) {
      "use strict";
      module.exports = function mergeOptions(defaults, options) {
        options = options || /* @__PURE__ */ Object.create(null);
        return [defaults, options].reduce((merged, optObj) => {
          Object.keys(optObj).forEach((key) => {
            merged[key] = optObj[key];
          });
          return merged;
        }, /* @__PURE__ */ Object.create(null));
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/common/doctype.js
  var require_doctype = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/common/doctype.js"(exports) {
      "use strict";
      var { DOCUMENT_MODE } = require_html();
      var VALID_DOCTYPE_NAME = "html";
      var VALID_SYSTEM_ID = "about:legacy-compat";
      var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
      var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
        "+//silmaril//dtd html pro v0r11 19970101//",
        "-//as//dtd html 3.0 aswedit + extensions//",
        "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
        "-//ietf//dtd html 2.0 level 1//",
        "-//ietf//dtd html 2.0 level 2//",
        "-//ietf//dtd html 2.0 strict level 1//",
        "-//ietf//dtd html 2.0 strict level 2//",
        "-//ietf//dtd html 2.0 strict//",
        "-//ietf//dtd html 2.0//",
        "-//ietf//dtd html 2.1e//",
        "-//ietf//dtd html 3.0//",
        "-//ietf//dtd html 3.2 final//",
        "-//ietf//dtd html 3.2//",
        "-//ietf//dtd html 3//",
        "-//ietf//dtd html level 0//",
        "-//ietf//dtd html level 1//",
        "-//ietf//dtd html level 2//",
        "-//ietf//dtd html level 3//",
        "-//ietf//dtd html strict level 0//",
        "-//ietf//dtd html strict level 1//",
        "-//ietf//dtd html strict level 2//",
        "-//ietf//dtd html strict level 3//",
        "-//ietf//dtd html strict//",
        "-//ietf//dtd html//",
        "-//metrius//dtd metrius presentational//",
        "-//microsoft//dtd internet explorer 2.0 html strict//",
        "-//microsoft//dtd internet explorer 2.0 html//",
        "-//microsoft//dtd internet explorer 2.0 tables//",
        "-//microsoft//dtd internet explorer 3.0 html strict//",
        "-//microsoft//dtd internet explorer 3.0 html//",
        "-//microsoft//dtd internet explorer 3.0 tables//",
        "-//netscape comm. corp.//dtd html//",
        "-//netscape comm. corp.//dtd strict html//",
        "-//o'reilly and associates//dtd html 2.0//",
        "-//o'reilly and associates//dtd html extended 1.0//",
        "-//o'reilly and associates//dtd html extended relaxed 1.0//",
        "-//sq//dtd html 2.0 hotmetal + extensions//",
        "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
        "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
        "-//spyglass//dtd html 2.0 extended//",
        "-//sun microsystems corp.//dtd hotjava html//",
        "-//sun microsystems corp.//dtd hotjava strict html//",
        "-//w3c//dtd html 3 1995-03-24//",
        "-//w3c//dtd html 3.2 draft//",
        "-//w3c//dtd html 3.2 final//",
        "-//w3c//dtd html 3.2//",
        "-//w3c//dtd html 3.2s draft//",
        "-//w3c//dtd html 4.0 frameset//",
        "-//w3c//dtd html 4.0 transitional//",
        "-//w3c//dtd html experimental 19960712//",
        "-//w3c//dtd html experimental 970421//",
        "-//w3c//dtd w3 html//",
        "-//w3o//dtd w3 html 3.0//",
        "-//webtechs//dtd mozilla html 2.0//",
        "-//webtechs//dtd mozilla html//"
      ];
      var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
        "-//w3c//dtd html 4.01 frameset//",
        "-//w3c//dtd html 4.01 transitional//"
      ]);
      var QUIRKS_MODE_PUBLIC_IDS = ["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"];
      var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
      var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
        "-//w3c//dtd html 4.01 frameset//",
        "-//w3c//dtd html 4.01 transitional//"
      ]);
      function enquoteDoctypeId(id4) {
        const quote = id4.indexOf('"') !== -1 ? "'" : '"';
        return quote + id4 + quote;
      }
      function hasPrefix(publicId, prefixes) {
        for (let i = 0; i < prefixes.length; i++) {
          if (publicId.indexOf(prefixes[i]) === 0) {
            return true;
          }
        }
        return false;
      }
      exports.isConforming = function(token) {
        return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
      };
      exports.getDocumentMode = function(token) {
        if (token.name !== VALID_DOCTYPE_NAME) {
          return DOCUMENT_MODE.QUIRKS;
        }
        const systemId = token.systemId;
        if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
          return DOCUMENT_MODE.QUIRKS;
        }
        let publicId = token.publicId;
        if (publicId !== null) {
          publicId = publicId.toLowerCase();
          if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
            return DOCUMENT_MODE.QUIRKS;
          }
          let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
          if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.QUIRKS;
          }
          prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
          if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.LIMITED_QUIRKS;
          }
        }
        return DOCUMENT_MODE.NO_QUIRKS;
      };
      exports.serializeContent = function(name, publicId, systemId) {
        let str = "!DOCTYPE ";
        if (name) {
          str += name;
        }
        if (publicId) {
          str += " PUBLIC " + enquoteDoctypeId(publicId);
        } else if (systemId) {
          str += " SYSTEM";
        }
        if (systemId !== null) {
          str += " " + enquoteDoctypeId(systemId);
        }
        return str;
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/common/foreign-content.js
  var require_foreign_content = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/common/foreign-content.js"(exports) {
      "use strict";
      var Tokenizer = require_tokenizer();
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      var ATTRS = HTML.ATTRS;
      var MIME_TYPES = {
        TEXT_HTML: "text/html",
        APPLICATION_XML: "application/xhtml+xml"
      };
      var DEFINITION_URL_ATTR = "definitionurl";
      var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
      var SVG_ATTRS_ADJUSTMENT_MAP = {
        attributename: "attributeName",
        attributetype: "attributeType",
        basefrequency: "baseFrequency",
        baseprofile: "baseProfile",
        calcmode: "calcMode",
        clippathunits: "clipPathUnits",
        diffuseconstant: "diffuseConstant",
        edgemode: "edgeMode",
        filterunits: "filterUnits",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        limitingconeangle: "limitingConeAngle",
        markerheight: "markerHeight",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        numoctaves: "numOctaves",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        refx: "refX",
        refy: "refY",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stitchtiles: "stitchTiles",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textlength: "textLength",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        xchannelselector: "xChannelSelector",
        ychannelselector: "yChannelSelector",
        zoomandpan: "zoomAndPan"
      };
      var XML_ATTRS_ADJUSTMENT_MAP = {
        "xlink:actuate": { prefix: "xlink", name: "actuate", namespace: NS.XLINK },
        "xlink:arcrole": { prefix: "xlink", name: "arcrole", namespace: NS.XLINK },
        "xlink:href": { prefix: "xlink", name: "href", namespace: NS.XLINK },
        "xlink:role": { prefix: "xlink", name: "role", namespace: NS.XLINK },
        "xlink:show": { prefix: "xlink", name: "show", namespace: NS.XLINK },
        "xlink:title": { prefix: "xlink", name: "title", namespace: NS.XLINK },
        "xlink:type": { prefix: "xlink", name: "type", namespace: NS.XLINK },
        "xml:base": { prefix: "xml", name: "base", namespace: NS.XML },
        "xml:lang": { prefix: "xml", name: "lang", namespace: NS.XML },
        "xml:space": { prefix: "xml", name: "space", namespace: NS.XML },
        xmlns: { prefix: "", name: "xmlns", namespace: NS.XMLNS },
        "xmlns:xlink": { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }
      };
      var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
        altglyph: "altGlyph",
        altglyphdef: "altGlyphDef",
        altglyphitem: "altGlyphItem",
        animatecolor: "animateColor",
        animatemotion: "animateMotion",
        animatetransform: "animateTransform",
        clippath: "clipPath",
        feblend: "feBlend",
        fecolormatrix: "feColorMatrix",
        fecomponenttransfer: "feComponentTransfer",
        fecomposite: "feComposite",
        feconvolvematrix: "feConvolveMatrix",
        fediffuselighting: "feDiffuseLighting",
        fedisplacementmap: "feDisplacementMap",
        fedistantlight: "feDistantLight",
        feflood: "feFlood",
        fefunca: "feFuncA",
        fefuncb: "feFuncB",
        fefuncg: "feFuncG",
        fefuncr: "feFuncR",
        fegaussianblur: "feGaussianBlur",
        feimage: "feImage",
        femerge: "feMerge",
        femergenode: "feMergeNode",
        femorphology: "feMorphology",
        feoffset: "feOffset",
        fepointlight: "fePointLight",
        fespecularlighting: "feSpecularLighting",
        fespotlight: "feSpotLight",
        fetile: "feTile",
        feturbulence: "feTurbulence",
        foreignobject: "foreignObject",
        glyphref: "glyphRef",
        lineargradient: "linearGradient",
        radialgradient: "radialGradient",
        textpath: "textPath"
      };
      var EXITS_FOREIGN_CONTENT = {
        [$.B]: true,
        [$.BIG]: true,
        [$.BLOCKQUOTE]: true,
        [$.BODY]: true,
        [$.BR]: true,
        [$.CENTER]: true,
        [$.CODE]: true,
        [$.DD]: true,
        [$.DIV]: true,
        [$.DL]: true,
        [$.DT]: true,
        [$.EM]: true,
        [$.EMBED]: true,
        [$.H1]: true,
        [$.H2]: true,
        [$.H3]: true,
        [$.H4]: true,
        [$.H5]: true,
        [$.H6]: true,
        [$.HEAD]: true,
        [$.HR]: true,
        [$.I]: true,
        [$.IMG]: true,
        [$.LI]: true,
        [$.LISTING]: true,
        [$.MENU]: true,
        [$.META]: true,
        [$.NOBR]: true,
        [$.OL]: true,
        [$.P]: true,
        [$.PRE]: true,
        [$.RUBY]: true,
        [$.S]: true,
        [$.SMALL]: true,
        [$.SPAN]: true,
        [$.STRONG]: true,
        [$.STRIKE]: true,
        [$.SUB]: true,
        [$.SUP]: true,
        [$.TABLE]: true,
        [$.TT]: true,
        [$.U]: true,
        [$.UL]: true,
        [$.VAR]: true
      };
      exports.causesExit = function(startTagToken2) {
        const tn = startTagToken2.tagName;
        const isFontWithAttrs = tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken2, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken2, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken2, ATTRS.FACE) !== null);
        return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
      };
      exports.adjustTokenMathMLAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          if (token.attrs[i].name === DEFINITION_URL_ATTR) {
            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
          }
        }
      };
      exports.adjustTokenSVGAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
          if (adjustedAttrName) {
            token.attrs[i].name = adjustedAttrName;
          }
        }
      };
      exports.adjustTokenXMLAttrs = function(token) {
        for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];
          if (adjustedAttrEntry) {
            token.attrs[i].prefix = adjustedAttrEntry.prefix;
            token.attrs[i].name = adjustedAttrEntry.name;
            token.attrs[i].namespace = adjustedAttrEntry.namespace;
          }
        }
      };
      exports.adjustTokenSVGTagName = function(token) {
        const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
        if (adjustedTagName) {
          token.tagName = adjustedTagName;
        }
      };
      function isMathMLTextIntegrationPoint(tn, ns) {
        return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
      }
      function isHtmlIntegrationPoint(tn, ns, attrs) {
        if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
          for (let i = 0; i < attrs.length; i++) {
            if (attrs[i].name === ATTRS.ENCODING) {
              const value = attrs[i].value.toLowerCase();
              return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
          }
        }
        return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
      }
      exports.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {
        if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
          return true;
        }
        if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
          return true;
        }
        return false;
      };
    }
  });

  // ../ecopan_bot/node_modules/parse5/lib/parser/index.js
  var require_parser = __commonJS({
    "../ecopan_bot/node_modules/parse5/lib/parser/index.js"(exports, module) {
      "use strict";
      var Tokenizer = require_tokenizer();
      var OpenElementStack = require_open_element_stack();
      var FormattingElementList = require_formatting_element_list();
      var LocationInfoParserMixin = require_parser_mixin();
      var ErrorReportingParserMixin = require_parser_mixin2();
      var Mixin = require_mixin();
      var defaultTreeAdapter = require_default();
      var mergeOptions = require_merge_options();
      var doctype2 = require_doctype();
      var foreignContent = require_foreign_content();
      var ERR = require_error_codes();
      var unicode = require_unicode();
      var HTML = require_html();
      var $ = HTML.TAG_NAMES;
      var NS = HTML.NAMESPACES;
      var ATTRS = HTML.ATTRS;
      var DEFAULT_OPTIONS = {
        scriptingEnabled: true,
        sourceCodeLocationInfo: false,
        onParseError: null,
        treeAdapter: defaultTreeAdapter
      };
      var HIDDEN_INPUT_TYPE = "hidden";
      var AA_OUTER_LOOP_ITER = 8;
      var AA_INNER_LOOP_ITER = 3;
      var INITIAL_MODE = "INITIAL_MODE";
      var BEFORE_HTML_MODE = "BEFORE_HTML_MODE";
      var BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE";
      var IN_HEAD_MODE = "IN_HEAD_MODE";
      var IN_HEAD_NO_SCRIPT_MODE = "IN_HEAD_NO_SCRIPT_MODE";
      var AFTER_HEAD_MODE = "AFTER_HEAD_MODE";
      var IN_BODY_MODE = "IN_BODY_MODE";
      var TEXT_MODE = "TEXT_MODE";
      var IN_TABLE_MODE = "IN_TABLE_MODE";
      var IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE";
      var IN_CAPTION_MODE = "IN_CAPTION_MODE";
      var IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE";
      var IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE";
      var IN_ROW_MODE = "IN_ROW_MODE";
      var IN_CELL_MODE = "IN_CELL_MODE";
      var IN_SELECT_MODE = "IN_SELECT_MODE";
      var IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE";
      var IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE";
      var AFTER_BODY_MODE = "AFTER_BODY_MODE";
      var IN_FRAMESET_MODE = "IN_FRAMESET_MODE";
      var AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE";
      var AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE";
      var AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
      var INSERTION_MODE_RESET_MAP = {
        [$.TR]: IN_ROW_MODE,
        [$.TBODY]: IN_TABLE_BODY_MODE,
        [$.THEAD]: IN_TABLE_BODY_MODE,
        [$.TFOOT]: IN_TABLE_BODY_MODE,
        [$.CAPTION]: IN_CAPTION_MODE,
        [$.COLGROUP]: IN_COLUMN_GROUP_MODE,
        [$.TABLE]: IN_TABLE_MODE,
        [$.BODY]: IN_BODY_MODE,
        [$.FRAMESET]: IN_FRAMESET_MODE
      };
      var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
        [$.CAPTION]: IN_TABLE_MODE,
        [$.COLGROUP]: IN_TABLE_MODE,
        [$.TBODY]: IN_TABLE_MODE,
        [$.TFOOT]: IN_TABLE_MODE,
        [$.THEAD]: IN_TABLE_MODE,
        [$.COL]: IN_COLUMN_GROUP_MODE,
        [$.TR]: IN_TABLE_BODY_MODE,
        [$.TD]: IN_ROW_MODE,
        [$.TH]: IN_ROW_MODE
      };
      var TOKEN_HANDLERS = {
        [INITIAL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
          [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.EOF_TOKEN]: tokenInInitialMode
        },
        [BEFORE_HTML_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
        },
        [BEFORE_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHead
        },
        [IN_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHead,
          [Tokenizer.END_TAG_TOKEN]: endTagInHead,
          [Tokenizer.EOF_TOKEN]: tokenInHead
        },
        [IN_HEAD_NO_SCRIPT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
          [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
          [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
        },
        [AFTER_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
          [Tokenizer.EOF_TOKEN]: tokenAfterHead
        },
        [IN_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: ignoreToken,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: ignoreToken,
          [Tokenizer.END_TAG_TOKEN]: endTagInText,
          [Tokenizer.EOF_TOKEN]: eofInText
        },
        [IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TABLE_TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
          [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
          [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
          [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.EOF_TOKEN]: tokenInTableText
        },
        [IN_CAPTION_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
          [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_COLUMN_GROUP_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
          [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TABLE_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_ROW_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInRow,
          [Tokenizer.END_TAG_TOKEN]: endTagInRow,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_CELL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCell,
          [Tokenizer.END_TAG_TOKEN]: endTagInCell,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_SELECT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_SELECT_IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
        },
        [IN_TEMPLATE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
          [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
          [Tokenizer.EOF_TOKEN]: eofInTemplate
        },
        [AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [IN_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
          [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
        },
        [AFTER_AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: ignoreToken,
          [Tokenizer.EOF_TOKEN]: stopParsing
        }
      };
      var Parser2 = class {
        constructor(options) {
          this.options = mergeOptions(DEFAULT_OPTIONS, options);
          this.treeAdapter = this.options.treeAdapter;
          this.pendingScript = null;
          if (this.options.sourceCodeLocationInfo) {
            Mixin.install(this, LocationInfoParserMixin);
          }
          if (this.options.onParseError) {
            Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });
          }
        }
        parse(html4) {
          const document4 = this.treeAdapter.createDocument();
          this._bootstrap(document4, null);
          this.tokenizer.write(html4, true);
          this._runParsingLoop(null);
          return document4;
        }
        parseFragment(html4, fragmentContext) {
          if (!fragmentContext) {
            fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
          }
          const documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
          this._bootstrap(documentMock, fragmentContext);
          if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
            this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
          }
          this._initTokenizerForFragmentParsing();
          this._insertFakeRootElement();
          this._resetInsertionMode();
          this._findFormInFragmentContext();
          this.tokenizer.write(html4, true);
          this._runParsingLoop(null);
          const rootElement = this.treeAdapter.getFirstChild(documentMock);
          const fragment2 = this.treeAdapter.createDocumentFragment();
          this._adoptNodes(rootElement, fragment2);
          return fragment2;
        }
        _bootstrap(document4, fragmentContext) {
          this.tokenizer = new Tokenizer(this.options);
          this.stopped = false;
          this.insertionMode = INITIAL_MODE;
          this.originalInsertionMode = "";
          this.document = document4;
          this.fragmentContext = fragmentContext;
          this.headElement = null;
          this.formElement = null;
          this.openElements = new OpenElementStack(this.document, this.treeAdapter);
          this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
          this.tmplInsertionModeStack = [];
          this.tmplInsertionModeStackTop = -1;
          this.currentTmplInsertionMode = null;
          this.pendingCharacterTokens = [];
          this.hasNonWhitespacePendingCharacterToken = false;
          this.framesetOk = true;
          this.skipNextNewLine = false;
          this.fosterParentingEnabled = false;
        }
        _err() {
        }
        _runParsingLoop(scriptHandler) {
          while (!this.stopped) {
            this._setupTokenizerCDATAMode();
            const token = this.tokenizer.getNextToken();
            if (token.type === Tokenizer.HIBERNATION_TOKEN) {
              break;
            }
            if (this.skipNextNewLine) {
              this.skipNextNewLine = false;
              if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
                if (token.chars.length === 1) {
                  continue;
                }
                token.chars = token.chars.substr(1);
              }
            }
            this._processInputToken(token);
            if (scriptHandler && this.pendingScript) {
              break;
            }
          }
        }
        runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
          this._runParsingLoop(scriptHandler);
          if (scriptHandler && this.pendingScript) {
            const script = this.pendingScript;
            this.pendingScript = null;
            scriptHandler(script);
            return;
          }
          if (writeCallback) {
            writeCallback();
          }
        }
        _setupTokenizerCDATAMode() {
          const current = this._getAdjustedCurrentElement();
          this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
        }
        _switchToTextParsing(currentToken, nextTokenizerState) {
          this._insertElement(currentToken, NS.HTML);
          this.tokenizer.state = nextTokenizerState;
          this.originalInsertionMode = this.insertionMode;
          this.insertionMode = TEXT_MODE;
        }
        switchToPlaintextParsing() {
          this.insertionMode = TEXT_MODE;
          this.originalInsertionMode = IN_BODY_MODE;
          this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
        }
        _getAdjustedCurrentElement() {
          return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
        }
        _findFormInFragmentContext() {
          let node2 = this.fragmentContext;
          do {
            if (this.treeAdapter.getTagName(node2) === $.FORM) {
              this.formElement = node2;
              break;
            }
            node2 = this.treeAdapter.getParentNode(node2);
          } while (node2);
        }
        _initTokenizerForFragmentParsing() {
          if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
            const tn = this.treeAdapter.getTagName(this.fragmentContext);
            if (tn === $.TITLE || tn === $.TEXTAREA) {
              this.tokenizer.state = Tokenizer.MODE.RCDATA;
            } else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME || tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
              this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
            } else if (tn === $.SCRIPT) {
              this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
            } else if (tn === $.PLAINTEXT) {
              this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
            }
          }
        }
        _setDocumentType(token) {
          const name = token.name || "";
          const publicId = token.publicId || "";
          const systemId = token.systemId || "";
          this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
        }
        _attachElementToTree(element4) {
          if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentElement(element4);
          } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;
            this.treeAdapter.appendChild(parent, element4);
          }
        }
        _appendElement(token, namespaceURI) {
          const element4 = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
          this._attachElementToTree(element4);
        }
        _insertElement(token, namespaceURI) {
          const element4 = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
          this._attachElementToTree(element4);
          this.openElements.push(element4);
        }
        _insertFakeElement(tagName) {
          const element4 = this.treeAdapter.createElement(tagName, NS.HTML, []);
          this._attachElementToTree(element4);
          this.openElements.push(element4);
        }
        _insertTemplate(token) {
          const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
          const content3 = this.treeAdapter.createDocumentFragment();
          this.treeAdapter.setTemplateContent(tmpl, content3);
          this._attachElementToTree(tmpl);
          this.openElements.push(tmpl);
        }
        _insertFakeRootElement() {
          const element4 = this.treeAdapter.createElement($.HTML, NS.HTML, []);
          this.treeAdapter.appendChild(this.openElements.current, element4);
          this.openElements.push(element4);
        }
        _appendCommentNode(token, parent) {
          const commentNode = this.treeAdapter.createCommentNode(token.data);
          this.treeAdapter.appendChild(parent, commentNode);
        }
        _insertCharacters(token) {
          if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentText(token.chars);
          } else {
            const parent = this.openElements.currentTmplContent || this.openElements.current;
            this.treeAdapter.insertText(parent, token.chars);
          }
        }
        _adoptNodes(donor, recipient) {
          for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
            this.treeAdapter.detachNode(child);
            this.treeAdapter.appendChild(recipient, child);
          }
        }
        _shouldProcessTokenInForeignContent(token) {
          const current = this._getAdjustedCurrentElement();
          if (!current || current === this.document) {
            return false;
          }
          const ns = this.treeAdapter.getNamespaceURI(current);
          if (ns === NS.HTML) {
            return false;
          }
          if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
            return false;
          }
          const isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          const isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;
          if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
            return false;
          }
          if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) {
            return false;
          }
          return token.type !== Tokenizer.EOF_TOKEN;
        }
        _processToken(token) {
          TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
        }
        _processTokenInBodyMode(token) {
          TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
        }
        _processTokenInForeignContent(token) {
          if (token.type === Tokenizer.CHARACTER_TOKEN) {
            characterInForeignContent(this, token);
          } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
            nullCharacterInForeignContent(this, token);
          } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
            insertCharacters(this, token);
          } else if (token.type === Tokenizer.COMMENT_TOKEN) {
            appendComment(this, token);
          } else if (token.type === Tokenizer.START_TAG_TOKEN) {
            startTagInForeignContent(this, token);
          } else if (token.type === Tokenizer.END_TAG_TOKEN) {
            endTagInForeignContent(this, token);
          }
        }
        _processInputToken(token) {
          if (this._shouldProcessTokenInForeignContent(token)) {
            this._processTokenInForeignContent(token);
          } else {
            this._processToken(token);
          }
          if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
            this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
          }
        }
        _isIntegrationPoint(element4, foreignNS) {
          const tn = this.treeAdapter.getTagName(element4);
          const ns = this.treeAdapter.getNamespaceURI(element4);
          const attrs = this.treeAdapter.getAttrList(element4);
          return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
        }
        _reconstructActiveFormattingElements() {
          const listLength = this.activeFormattingElements.length;
          if (listLength) {
            let unopenIdx = listLength;
            let entry = null;
            do {
              unopenIdx--;
              entry = this.activeFormattingElements.entries[unopenIdx];
              if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                unopenIdx++;
                break;
              }
            } while (unopenIdx > 0);
            for (let i = unopenIdx; i < listLength; i++) {
              entry = this.activeFormattingElements.entries[i];
              this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
              entry.element = this.openElements.current;
            }
          }
        }
        _closeTableCell() {
          this.openElements.generateImpliedEndTags();
          this.openElements.popUntilTableCellPopped();
          this.activeFormattingElements.clearToLastMarker();
          this.insertionMode = IN_ROW_MODE;
        }
        _closePElement() {
          this.openElements.generateImpliedEndTagsWithExclusion($.P);
          this.openElements.popUntilTagNamePopped($.P);
        }
        _resetInsertionMode() {
          for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {
            let element4 = this.openElements.items[i];
            if (i === 0) {
              last = true;
              if (this.fragmentContext) {
                element4 = this.fragmentContext;
              }
            }
            const tn = this.treeAdapter.getTagName(element4);
            const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
            if (newInsertionMode) {
              this.insertionMode = newInsertionMode;
              break;
            } else if (!last && (tn === $.TD || tn === $.TH)) {
              this.insertionMode = IN_CELL_MODE;
              break;
            } else if (!last && tn === $.HEAD) {
              this.insertionMode = IN_HEAD_MODE;
              break;
            } else if (tn === $.SELECT) {
              this._resetInsertionModeForSelect(i);
              break;
            } else if (tn === $.TEMPLATE) {
              this.insertionMode = this.currentTmplInsertionMode;
              break;
            } else if (tn === $.HTML) {
              this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
              break;
            } else if (last) {
              this.insertionMode = IN_BODY_MODE;
              break;
            }
          }
        }
        _resetInsertionModeForSelect(selectIdx) {
          if (selectIdx > 0) {
            for (let i = selectIdx - 1; i > 0; i--) {
              const ancestor = this.openElements.items[i];
              const tn = this.treeAdapter.getTagName(ancestor);
              if (tn === $.TEMPLATE) {
                break;
              } else if (tn === $.TABLE) {
                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                return;
              }
            }
          }
          this.insertionMode = IN_SELECT_MODE;
        }
        _pushTmplInsertionMode(mode2) {
          this.tmplInsertionModeStack.push(mode2);
          this.tmplInsertionModeStackTop++;
          this.currentTmplInsertionMode = mode2;
        }
        _popTmplInsertionMode() {
          this.tmplInsertionModeStack.pop();
          this.tmplInsertionModeStackTop--;
          this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
        }
        _isElementCausesFosterParenting(element4) {
          const tn = this.treeAdapter.getTagName(element4);
          return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
        }
        _shouldFosterParentOnInsertion() {
          return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
        }
        _findFosterParentingLocation() {
          const location2 = {
            parent: null,
            beforeElement: null
          };
          for (let i = this.openElements.stackTop; i >= 0; i--) {
            const openElement = this.openElements.items[i];
            const tn = this.treeAdapter.getTagName(openElement);
            const ns = this.treeAdapter.getNamespaceURI(openElement);
            if (tn === $.TEMPLATE && ns === NS.HTML) {
              location2.parent = this.treeAdapter.getTemplateContent(openElement);
              break;
            } else if (tn === $.TABLE) {
              location2.parent = this.treeAdapter.getParentNode(openElement);
              if (location2.parent) {
                location2.beforeElement = openElement;
              } else {
                location2.parent = this.openElements.items[i - 1];
              }
              break;
            }
          }
          if (!location2.parent) {
            location2.parent = this.openElements.items[0];
          }
          return location2;
        }
        _fosterParentElement(element4) {
          const location2 = this._findFosterParentingLocation();
          if (location2.beforeElement) {
            this.treeAdapter.insertBefore(location2.parent, element4, location2.beforeElement);
          } else {
            this.treeAdapter.appendChild(location2.parent, element4);
          }
        }
        _fosterParentText(chars) {
          const location2 = this._findFosterParentingLocation();
          if (location2.beforeElement) {
            this.treeAdapter.insertTextBefore(location2.parent, chars, location2.beforeElement);
          } else {
            this.treeAdapter.insertText(location2.parent, chars);
          }
        }
        _isSpecialElement(element4) {
          const tn = this.treeAdapter.getTagName(element4);
          const ns = this.treeAdapter.getNamespaceURI(element4);
          return HTML.SPECIAL_ELEMENTS[ns][tn];
        }
      };
      module.exports = Parser2;
      function aaObtainFormattingElementEntry(p, token) {
        let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
        if (formattingElementEntry) {
          if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
          } else if (!p.openElements.hasInScope(token.tagName)) {
            formattingElementEntry = null;
          }
        } else {
          genericEndTagInBody(p, token);
        }
        return formattingElementEntry;
      }
      function aaObtainFurthestBlock(p, formattingElementEntry) {
        let furthestBlock = null;
        for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element4 = p.openElements.items[i];
          if (element4 === formattingElementEntry.element) {
            break;
          }
          if (p._isSpecialElement(element4)) {
            furthestBlock = element4;
          }
        }
        if (!furthestBlock) {
          p.openElements.popUntilElementPopped(formattingElementEntry.element);
          p.activeFormattingElements.removeEntry(formattingElementEntry);
        }
        return furthestBlock;
      }
      function aaInnerLoop(p, furthestBlock, formattingElement) {
        let lastElement = furthestBlock;
        let nextElement = p.openElements.getCommonAncestor(furthestBlock);
        for (let i = 0, element4 = nextElement; element4 !== formattingElement; i++, element4 = nextElement) {
          nextElement = p.openElements.getCommonAncestor(element4);
          const elementEntry = p.activeFormattingElements.getElementEntry(element4);
          const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
          const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
          if (shouldRemoveFromOpenElements) {
            if (counterOverflow) {
              p.activeFormattingElements.removeEntry(elementEntry);
            }
            p.openElements.remove(element4);
          } else {
            element4 = aaRecreateElementFromEntry(p, elementEntry);
            if (lastElement === furthestBlock) {
              p.activeFormattingElements.bookmark = elementEntry;
            }
            p.treeAdapter.detachNode(lastElement);
            p.treeAdapter.appendChild(element4, lastElement);
            lastElement = element4;
          }
        }
        return lastElement;
      }
      function aaRecreateElementFromEntry(p, elementEntry) {
        const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
        const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
        p.openElements.replace(elementEntry.element, newElement);
        elementEntry.element = newElement;
        return newElement;
      }
      function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
        if (p._isElementCausesFosterParenting(commonAncestor)) {
          p._fosterParentElement(lastElement);
        } else {
          const tn = p.treeAdapter.getTagName(commonAncestor);
          const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
          if (tn === $.TEMPLATE && ns === NS.HTML) {
            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
          }
          p.treeAdapter.appendChild(commonAncestor, lastElement);
        }
      }
      function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
        const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
        const token = formattingElementEntry.token;
        const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
        p._adoptNodes(furthestBlock, newElement);
        p.treeAdapter.appendChild(furthestBlock, newElement);
        p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
        p.openElements.remove(formattingElementEntry.element);
        p.openElements.insertAfter(furthestBlock, newElement);
      }
      function callAdoptionAgency(p, token) {
        let formattingElementEntry;
        for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
          formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);
          if (!formattingElementEntry) {
            break;
          }
          const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
          if (!furthestBlock) {
            break;
          }
          p.activeFormattingElements.bookmark = formattingElementEntry;
          const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
          const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
          p.treeAdapter.detachNode(lastElement);
          aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
          aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
        }
      }
      function ignoreToken() {
      }
      function misplacedDoctype(p) {
        p._err(ERR.misplacedDoctype);
      }
      function appendComment(p, token) {
        p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
      }
      function appendCommentToRootHtmlElement(p, token) {
        p._appendCommentNode(token, p.openElements.items[0]);
      }
      function appendCommentToDocument(p, token) {
        p._appendCommentNode(token, p.document);
      }
      function insertCharacters(p, token) {
        p._insertCharacters(token);
      }
      function stopParsing(p) {
        p.stopped = true;
      }
      function doctypeInInitialMode(p, token) {
        p._setDocumentType(token);
        const mode2 = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype2.getDocumentMode(token);
        if (!doctype2.isConforming(token)) {
          p._err(ERR.nonConformingDoctype);
        }
        p.treeAdapter.setDocumentMode(p.document, mode2);
        p.insertionMode = BEFORE_HTML_MODE;
      }
      function tokenInInitialMode(p, token) {
        p._err(ERR.missingDoctype, { beforeToken: true });
        p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
        p.insertionMode = BEFORE_HTML_MODE;
        p._processToken(token);
      }
      function startTagBeforeHtml(p, token) {
        if (token.tagName === $.HTML) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = BEFORE_HEAD_MODE;
        } else {
          tokenBeforeHtml(p, token);
        }
      }
      function endTagBeforeHtml(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
          tokenBeforeHtml(p, token);
        }
      }
      function tokenBeforeHtml(p, token) {
        p._insertFakeRootElement();
        p.insertionMode = BEFORE_HEAD_MODE;
        p._processToken(token);
      }
      function startTagBeforeHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.HEAD) {
          p._insertElement(token, NS.HTML);
          p.headElement = p.openElements.current;
          p.insertionMode = IN_HEAD_MODE;
        } else {
          tokenBeforeHead(p, token);
        }
      }
      function endTagBeforeHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenBeforeHead(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenBeforeHead(p, token) {
        p._insertFakeElement($.HEAD);
        p.headElement = p.openElements.current;
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
      }
      function startTagInHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.TITLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
        } else if (tn === $.NOSCRIPT) {
          if (p.options.scriptingEnabled) {
            p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
          } else {
            p._insertElement(token, NS.HTML);
            p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
          }
        } else if (tn === $.NOFRAMES || tn === $.STYLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
        } else if (tn === $.SCRIPT) {
          p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
        } else if (tn === $.TEMPLATE) {
          p._insertTemplate(token, NS.HTML);
          p.activeFormattingElements.insertMarker();
          p.framesetOk = false;
          p.insertionMode = IN_TEMPLATE_MODE;
          p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
        } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
        } else {
          tokenInHead(p, token);
        }
      }
      function endTagInHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HEAD) {
          p.openElements.pop();
          p.insertionMode = AFTER_HEAD_MODE;
        } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
          tokenInHead(p, token);
        } else if (tn === $.TEMPLATE) {
          if (p.openElements.tmplCount > 0) {
            p.openElements.generateImpliedEndTagsThoroughly();
            if (p.openElements.currentTagName !== $.TEMPLATE) {
              p._err(ERR.closingOfElementWithOpenChildElements);
            }
            p.openElements.popUntilTagNamePopped($.TEMPLATE);
            p.activeFormattingElements.clearToLastMarker();
            p._popTmplInsertionMode();
            p._resetInsertionMode();
          } else {
            p._err(ERR.endTagWithoutMatchingOpenElement);
          }
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenInHead(p, token) {
        p.openElements.pop();
        p.insertionMode = AFTER_HEAD_MODE;
        p._processToken(token);
      }
      function startTagInHeadNoScript(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BASEFONT || tn === $.BGSOUND || tn === $.HEAD || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.STYLE) {
          startTagInHead(p, token);
        } else if (tn === $.NOSCRIPT) {
          p._err(ERR.nestedNoscriptInHead);
        } else {
          tokenInHeadNoScript(p, token);
        }
      }
      function endTagInHeadNoScript(p, token) {
        const tn = token.tagName;
        if (tn === $.NOSCRIPT) {
          p.openElements.pop();
          p.insertionMode = IN_HEAD_MODE;
        } else if (tn === $.BR) {
          tokenInHeadNoScript(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenInHeadNoScript(p, token) {
        const errCode = token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
        p._err(errCode);
        p.openElements.pop();
        p.insertionMode = IN_HEAD_MODE;
        p._processToken(token);
      }
      function startTagAfterHead(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.BODY) {
          p._insertElement(token, NS.HTML);
          p.framesetOk = false;
          p.insertionMode = IN_BODY_MODE;
        } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
        } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
          p._err(ERR.abandonedHeadElementChild);
          p.openElements.push(p.headElement);
          startTagInHead(p, token);
          p.openElements.remove(p.headElement);
        } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
        } else {
          tokenAfterHead(p, token);
        }
      }
      function endTagAfterHead(p, token) {
        const tn = token.tagName;
        if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenAfterHead(p, token);
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
        }
      }
      function tokenAfterHead(p, token) {
        p._insertFakeElement($.BODY);
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function whitespaceCharacterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
      }
      function characterInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertCharacters(token);
        p.framesetOk = false;
      }
      function htmlStartTagInBody(p, token) {
        if (p.openElements.tmplCount === 0) {
          p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
        }
      }
      function bodyStartTagInBody(p, token) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (bodyElement && p.openElements.tmplCount === 0) {
          p.framesetOk = false;
          p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
        }
      }
      function framesetStartTagInBody(p, token) {
        const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
        if (p.framesetOk && bodyElement) {
          p.treeAdapter.detachNode(bodyElement);
          p.openElements.popAllUpToHtmlElement();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
        }
      }
      function addressStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function numberedHeaderStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        const tn = p.openElements.currentTagName;
        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
          p.openElements.pop();
        }
        p._insertElement(token, NS.HTML);
      }
      function preStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.skipNextNewLine = true;
        p.framesetOk = false;
      }
      function formStartTagInBody(p, token) {
        const inTemplate = p.openElements.tmplCount > 0;
        if (!p.formElement || inTemplate) {
          if (p.openElements.hasInButtonScope($.P)) {
            p._closePElement();
          }
          p._insertElement(token, NS.HTML);
          if (!inTemplate) {
            p.formElement = p.openElements.current;
          }
        }
      }
      function listItemStartTagInBody(p, token) {
        p.framesetOk = false;
        const tn = token.tagName;
        for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element4 = p.openElements.items[i];
          const elementTn = p.treeAdapter.getTagName(element4);
          let closeTn = null;
          if (tn === $.LI && elementTn === $.LI) {
            closeTn = $.LI;
          } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
            closeTn = elementTn;
          }
          if (closeTn) {
            p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
            p.openElements.popUntilTagNamePopped(closeTn);
            break;
          }
          if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element4)) {
            break;
          }
        }
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function plaintextStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
      }
      function buttonStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.BUTTON)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped($.BUTTON);
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
      }
      function aStartTagInBody(p, token) {
        const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);
        if (activeElementEntry) {
          callAdoptionAgency(p, token);
          p.openElements.remove(activeElementEntry.element);
          p.activeFormattingElements.removeEntry(activeElementEntry);
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function bStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function nobrStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        if (p.openElements.hasInScope($.NOBR)) {
          callAdoptionAgency(p, token);
          p._reconstructActiveFormattingElements();
        }
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.pushElement(p.openElements.current, token);
      }
      function appletStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.activeFormattingElements.insertMarker();
        p.framesetOk = false;
      }
      function tableStartTagInBody(p, token) {
        if (p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        p.insertionMode = IN_TABLE_MODE;
      }
      function areaStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
        token.ackSelfClosing = true;
      }
      function inputStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._appendElement(token, NS.HTML);
        const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
        if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
          p.framesetOk = false;
        }
        token.ackSelfClosing = true;
      }
      function paramStartTagInBody(p, token) {
        p._appendElement(token, NS.HTML);
        token.ackSelfClosing = true;
      }
      function hrStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._appendElement(token, NS.HTML);
        p.framesetOk = false;
        token.ackSelfClosing = true;
      }
      function imageStartTagInBody(p, token) {
        token.tagName = $.IMG;
        areaStartTagInBody(p, token);
      }
      function textareaStartTagInBody(p, token) {
        p._insertElement(token, NS.HTML);
        p.skipNextNewLine = true;
        p.tokenizer.state = Tokenizer.MODE.RCDATA;
        p.originalInsertionMode = p.insertionMode;
        p.framesetOk = false;
        p.insertionMode = TEXT_MODE;
      }
      function xmpStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._reconstructActiveFormattingElements();
        p.framesetOk = false;
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function iframeStartTagInBody(p, token) {
        p.framesetOk = false;
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function noembedStartTagInBody(p, token) {
        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      }
      function selectStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
        p.framesetOk = false;
        if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE || p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE || p.insertionMode === IN_CELL_MODE) {
          p.insertionMode = IN_SELECT_IN_TABLE_MODE;
        } else {
          p.insertionMode = IN_SELECT_MODE;
        }
      }
      function optgroupStartTagInBody(p, token) {
        if (p.openElements.currentTagName === $.OPTION) {
          p.openElements.pop();
        }
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
      }
      function rbStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTags();
        }
        p._insertElement(token, NS.HTML);
      }
      function rtStartTagInBody(p, token) {
        if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
        }
        p._insertElement(token, NS.HTML);
      }
      function menuStartTagInBody(p, token) {
        if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
        }
        p._insertElement(token, NS.HTML);
      }
      function mathStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        foreignContent.adjustTokenMathMLAttrs(token);
        foreignContent.adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
          p._appendElement(token, NS.MATHML);
        } else {
          p._insertElement(token, NS.MATHML);
        }
        token.ackSelfClosing = true;
      }
      function svgStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        foreignContent.adjustTokenSVGAttrs(token);
        foreignContent.adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
          p._appendElement(token, NS.SVG);
        } else {
          p._insertElement(token, NS.SVG);
        }
        token.ackSelfClosing = true;
      }
      function genericStartTagInBody(p, token) {
        p._reconstructActiveFormattingElements();
        p._insertElement(token, NS.HTML);
      }
      function startTagInBody(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 1:
            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
              bStartTagInBody(p, token);
            } else if (tn === $.P) {
              addressStartTagInBody(p, token);
            } else if (tn === $.A) {
              aStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 2:
            if (tn === $.DL || tn === $.OL || tn === $.UL) {
              addressStartTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
              numberedHeaderStartTagInBody(p, token);
            } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
              listItemStartTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
              bStartTagInBody(p, token);
            } else if (tn === $.BR) {
              areaStartTagInBody(p, token);
            } else if (tn === $.HR) {
              hrStartTagInBody(p, token);
            } else if (tn === $.RB) {
              rbStartTagInBody(p, token);
            } else if (tn === $.RT || tn === $.RP) {
              rtStartTagInBody(p, token);
            } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
              genericStartTagInBody(p, token);
            }
            break;
          case 3:
            if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
              addressStartTagInBody(p, token);
            } else if (tn === $.PRE) {
              preStartTagInBody(p, token);
            } else if (tn === $.BIG) {
              bStartTagInBody(p, token);
            } else if (tn === $.IMG || tn === $.WBR) {
              areaStartTagInBody(p, token);
            } else if (tn === $.XMP) {
              xmpStartTagInBody(p, token);
            } else if (tn === $.SVG) {
              svgStartTagInBody(p, token);
            } else if (tn === $.RTC) {
              rbStartTagInBody(p, token);
            } else if (tn !== $.COL) {
              genericStartTagInBody(p, token);
            }
            break;
          case 4:
            if (tn === $.HTML) {
              htmlStartTagInBody(p, token);
            } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
              startTagInHead(p, token);
            } else if (tn === $.BODY) {
              bodyStartTagInBody(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
              addressStartTagInBody(p, token);
            } else if (tn === $.FORM) {
              formStartTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT) {
              bStartTagInBody(p, token);
            } else if (tn === $.NOBR) {
              nobrStartTagInBody(p, token);
            } else if (tn === $.AREA) {
              areaStartTagInBody(p, token);
            } else if (tn === $.MATH) {
              mathStartTagInBody(p, token);
            } else if (tn === $.MENU) {
              menuStartTagInBody(p, token);
            } else if (tn !== $.HEAD) {
              genericStartTagInBody(p, token);
            }
            break;
          case 5:
            if (tn === $.STYLE || tn === $.TITLE) {
              startTagInHead(p, token);
            } else if (tn === $.ASIDE) {
              addressStartTagInBody(p, token);
            } else if (tn === $.SMALL) {
              bStartTagInBody(p, token);
            } else if (tn === $.TABLE) {
              tableStartTagInBody(p, token);
            } else if (tn === $.EMBED) {
              areaStartTagInBody(p, token);
            } else if (tn === $.INPUT) {
              inputStartTagInBody(p, token);
            } else if (tn === $.PARAM || tn === $.TRACK) {
              paramStartTagInBody(p, token);
            } else if (tn === $.IMAGE) {
              imageStartTagInBody(p, token);
            } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
              genericStartTagInBody(p, token);
            }
            break;
          case 6:
            if (tn === $.SCRIPT) {
              startTagInHead(p, token);
            } else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
              addressStartTagInBody(p, token);
            } else if (tn === $.BUTTON) {
              buttonStartTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
              bStartTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
              appletStartTagInBody(p, token);
            } else if (tn === $.KEYGEN) {
              areaStartTagInBody(p, token);
            } else if (tn === $.SOURCE) {
              paramStartTagInBody(p, token);
            } else if (tn === $.IFRAME) {
              iframeStartTagInBody(p, token);
            } else if (tn === $.SELECT) {
              selectStartTagInBody(p, token);
            } else if (tn === $.OPTION) {
              optgroupStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 7:
            if (tn === $.BGSOUND) {
              startTagInHead(p, token);
            } else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY) {
              addressStartTagInBody(p, token);
            } else if (tn === $.LISTING) {
              preStartTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
              appletStartTagInBody(p, token);
            } else if (tn === $.NOEMBED) {
              noembedStartTagInBody(p, token);
            } else if (tn !== $.CAPTION) {
              genericStartTagInBody(p, token);
            }
            break;
          case 8:
            if (tn === $.BASEFONT) {
              startTagInHead(p, token);
            } else if (tn === $.FRAMESET) {
              framesetStartTagInBody(p, token);
            } else if (tn === $.FIELDSET) {
              addressStartTagInBody(p, token);
            } else if (tn === $.TEXTAREA) {
              textareaStartTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
              startTagInHead(p, token);
            } else if (tn === $.NOSCRIPT) {
              if (p.options.scriptingEnabled) {
                noembedStartTagInBody(p, token);
              } else {
                genericStartTagInBody(p, token);
              }
            } else if (tn === $.OPTGROUP) {
              optgroupStartTagInBody(p, token);
            } else if (tn !== $.COLGROUP) {
              genericStartTagInBody(p, token);
            }
            break;
          case 9:
            if (tn === $.PLAINTEXT) {
              plaintextStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
              addressStartTagInBody(p, token);
            } else {
              genericStartTagInBody(p, token);
            }
            break;
          default:
            genericStartTagInBody(p, token);
        }
      }
      function bodyEndTagInBody(p) {
        if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
        }
      }
      function htmlEndTagInBody(p, token) {
        if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
          p._processToken(token);
        }
      }
      function addressEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
        }
      }
      function formEndTagInBody(p) {
        const inTemplate = p.openElements.tmplCount > 0;
        const formElement = p.formElement;
        if (!inTemplate) {
          p.formElement = null;
        }
        if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
          p.openElements.generateImpliedEndTags();
          if (inTemplate) {
            p.openElements.popUntilTagNamePopped($.FORM);
          } else {
            p.openElements.remove(formElement);
          }
        }
      }
      function pEndTagInBody(p) {
        if (!p.openElements.hasInButtonScope($.P)) {
          p._insertFakeElement($.P);
        }
        p._closePElement();
      }
      function liEndTagInBody(p) {
        if (p.openElements.hasInListItemScope($.LI)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.LI);
          p.openElements.popUntilTagNamePopped($.LI);
        }
      }
      function ddEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTagsWithExclusion(tn);
          p.openElements.popUntilTagNamePopped(tn);
        }
      }
      function numberedHeaderEndTagInBody(p) {
        if (p.openElements.hasNumberedHeaderInScope()) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilNumberedHeaderPopped();
        }
      }
      function appletEndTagInBody(p, token) {
        const tn = token.tagName;
        if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
          p.activeFormattingElements.clearToLastMarker();
        }
      }
      function brEndTagInBody(p) {
        p._reconstructActiveFormattingElements();
        p._insertFakeElement($.BR);
        p.openElements.pop();
        p.framesetOk = false;
      }
      function genericEndTagInBody(p, token) {
        const tn = token.tagName;
        for (let i = p.openElements.stackTop; i > 0; i--) {
          const element4 = p.openElements.items[i];
          if (p.treeAdapter.getTagName(element4) === tn) {
            p.openElements.generateImpliedEndTagsWithExclusion(tn);
            p.openElements.popUntilElementPopped(element4);
            break;
          }
          if (p._isSpecialElement(element4)) {
            break;
          }
        }
      }
      function endTagInBody(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 1:
            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
              callAdoptionAgency(p, token);
            } else if (tn === $.P) {
              pEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 2:
            if (tn === $.DL || tn === $.UL || tn === $.OL) {
              addressEndTagInBody(p, token);
            } else if (tn === $.LI) {
              liEndTagInBody(p, token);
            } else if (tn === $.DD || tn === $.DT) {
              ddEndTagInBody(p, token);
            } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
              numberedHeaderEndTagInBody(p, token);
            } else if (tn === $.BR) {
              brEndTagInBody(p, token);
            } else if (tn === $.EM || tn === $.TT) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 3:
            if (tn === $.BIG) {
              callAdoptionAgency(p, token);
            } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 4:
            if (tn === $.BODY) {
              bodyEndTagInBody(p, token);
            } else if (tn === $.HTML) {
              htmlEndTagInBody(p, token);
            } else if (tn === $.FORM) {
              formEndTagInBody(p, token);
            } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
              callAdoptionAgency(p, token);
            } else if (tn === $.MAIN || tn === $.MENU) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 5:
            if (tn === $.ASIDE) {
              addressEndTagInBody(p, token);
            } else if (tn === $.SMALL) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 6:
            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP || tn === $.DIALOG) {
              addressEndTagInBody(p, token);
            } else if (tn === $.APPLET || tn === $.OBJECT) {
              appletEndTagInBody(p, token);
            } else if (tn === $.STRIKE || tn === $.STRONG) {
              callAdoptionAgency(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 7:
            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY || tn === $.LISTING) {
              addressEndTagInBody(p, token);
            } else if (tn === $.MARQUEE) {
              appletEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 8:
            if (tn === $.FIELDSET) {
              addressEndTagInBody(p, token);
            } else if (tn === $.TEMPLATE) {
              endTagInHead(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          case 10:
            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
              addressEndTagInBody(p, token);
            } else {
              genericEndTagInBody(p, token);
            }
            break;
          default:
            genericEndTagInBody(p, token);
        }
      }
      function eofInBody(p, token) {
        if (p.tmplInsertionModeStackTop > -1) {
          eofInTemplate(p, token);
        } else {
          p.stopped = true;
        }
      }
      function endTagInText(p, token) {
        if (token.tagName === $.SCRIPT) {
          p.pendingScript = p.openElements.current;
        }
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
      }
      function eofInText(p, token) {
        p._err(ERR.eofInElementThatCanContainOnlyText);
        p.openElements.pop();
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
      }
      function characterInTable(p, token) {
        const curTn = p.openElements.currentTagName;
        if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
          p.pendingCharacterTokens = [];
          p.hasNonWhitespacePendingCharacterToken = false;
          p.originalInsertionMode = p.insertionMode;
          p.insertionMode = IN_TABLE_TEXT_MODE;
          p._processToken(token);
        } else {
          tokenInTable(p, token);
        }
      }
      function captionStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p.activeFormattingElements.insertMarker();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_CAPTION_MODE;
      }
      function colgroupStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
      }
      function colStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.COLGROUP);
        p.insertionMode = IN_COLUMN_GROUP_MODE;
        p._processToken(token);
      }
      function tbodyStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertElement(token, NS.HTML);
        p.insertionMode = IN_TABLE_BODY_MODE;
      }
      function tdStartTagInTable(p, token) {
        p.openElements.clearBackToTableContext();
        p._insertFakeElement($.TBODY);
        p.insertionMode = IN_TABLE_BODY_MODE;
        p._processToken(token);
      }
      function tableStartTagInTable(p, token) {
        if (p.openElements.hasInTableScope($.TABLE)) {
          p.openElements.popUntilTagNamePopped($.TABLE);
          p._resetInsertionMode();
          p._processToken(token);
        }
      }
      function inputStartTagInTable(p, token) {
        const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
        if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
          p._appendElement(token, NS.HTML);
        } else {
          tokenInTable(p, token);
        }
        token.ackSelfClosing = true;
      }
      function formStartTagInTable(p, token) {
        if (!p.formElement && p.openElements.tmplCount === 0) {
          p._insertElement(token, NS.HTML);
          p.formElement = p.openElements.current;
          p.openElements.pop();
        }
      }
      function startTagInTable(p, token) {
        const tn = token.tagName;
        switch (tn.length) {
          case 2:
            if (tn === $.TD || tn === $.TH || tn === $.TR) {
              tdStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 3:
            if (tn === $.COL) {
              colStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 4:
            if (tn === $.FORM) {
              formStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 5:
            if (tn === $.TABLE) {
              tableStartTagInTable(p, token);
            } else if (tn === $.STYLE) {
              startTagInHead(p, token);
            } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
              tbodyStartTagInTable(p, token);
            } else if (tn === $.INPUT) {
              inputStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 6:
            if (tn === $.SCRIPT) {
              startTagInHead(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 7:
            if (tn === $.CAPTION) {
              captionStartTagInTable(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          case 8:
            if (tn === $.COLGROUP) {
              colgroupStartTagInTable(p, token);
            } else if (tn === $.TEMPLATE) {
              startTagInHead(p, token);
            } else {
              tokenInTable(p, token);
            }
            break;
          default:
            tokenInTable(p, token);
        }
      }
      function endTagInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TABLE)) {
            p.openElements.popUntilTagNamePopped($.TABLE);
            p._resetInsertionMode();
          }
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
          tokenInTable(p, token);
        }
      }
      function tokenInTable(p, token) {
        const savedFosterParentingState = p.fosterParentingEnabled;
        p.fosterParentingEnabled = true;
        p._processTokenInBodyMode(token);
        p.fosterParentingEnabled = savedFosterParentingState;
      }
      function whitespaceCharacterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
      }
      function characterInTableText(p, token) {
        p.pendingCharacterTokens.push(token);
        p.hasNonWhitespacePendingCharacterToken = true;
      }
      function tokenInTableText(p, token) {
        let i = 0;
        if (p.hasNonWhitespacePendingCharacterToken) {
          for (; i < p.pendingCharacterTokens.length; i++) {
            tokenInTable(p, p.pendingCharacterTokens[i]);
          }
        } else {
          for (; i < p.pendingCharacterTokens.length; i++) {
            p._insertCharacters(p.pendingCharacterTokens[i]);
          }
        }
        p.insertionMode = p.originalInsertionMode;
        p._processToken(token);
      }
      function startTagInCaption(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else {
          startTagInBody(p, token);
        }
      }
      function endTagInCaption(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped($.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_TABLE_MODE;
            if (tn === $.TABLE) {
              p._processToken(token);
            }
          }
        } else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
          endTagInBody(p, token);
        }
      }
      function startTagInColumnGroup(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.COL) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.TEMPLATE) {
          startTagInHead(p, token);
        } else {
          tokenInColumnGroup(p, token);
        }
      }
      function endTagInColumnGroup(p, token) {
        const tn = token.tagName;
        if (tn === $.COLGROUP) {
          if (p.openElements.currentTagName === $.COLGROUP) {
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
          }
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        } else if (tn !== $.COL) {
          tokenInColumnGroup(p, token);
        }
      }
      function tokenInColumnGroup(p, token) {
        if (p.openElements.currentTagName === $.COLGROUP) {
          p.openElements.pop();
          p.insertionMode = IN_TABLE_MODE;
          p._processToken(token);
        }
      }
      function startTagInTableBody(p, token) {
        const tn = token.tagName;
        if (tn === $.TR) {
          p.openElements.clearBackToTableBodyContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_ROW_MODE;
        } else if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableBodyContext();
          p._insertFakeElement($.TR);
          p.insertionMode = IN_ROW_MODE;
          p._processToken(token);
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else {
          startTagInTable(p, token);
        }
      }
      function endTagInTableBody(p, token) {
        const tn = token.tagName;
        if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
          }
        } else if (tn === $.TABLE) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
            p.openElements.clearBackToTableBodyContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_MODE;
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
          endTagInTable(p, token);
        }
      }
      function startTagInRow(p, token) {
        const tn = token.tagName;
        if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableRowContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_CELL_MODE;
          p.activeFormattingElements.insertMarker();
        } else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else {
          startTagInTable(p, token);
        }
      }
      function endTagInRow(p, token) {
        const tn = token.tagName;
        if (tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
          }
        } else if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
            p.openElements.clearBackToTableRowContext();
            p.openElements.pop();
            p.insertionMode = IN_TABLE_BODY_MODE;
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP || tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
          endTagInTable(p, token);
        }
      }
      function startTagInCell(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY || tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
            p._closeTableCell();
            p._processToken(token);
          }
        } else {
          startTagInBody(p, token);
        }
      }
      function endTagInCell(p, token) {
        const tn = token.tagName;
        if (tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(tn);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = IN_ROW_MODE;
          }
        } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope(tn)) {
            p._closeTableCell();
            p._processToken(token);
          }
        } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
          endTagInBody(p, token);
        }
      }
      function startTagInSelect(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
          p._insertElement(token, NS.HTML);
        } else if (tn === $.OPTGROUP) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
          if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
          }
          p._insertElement(token, NS.HTML);
        } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
          if (p.openElements.hasInSelectScope($.SELECT)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            if (tn !== $.SELECT) {
              p._processToken(token);
            }
          }
        } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
          startTagInHead(p, token);
        }
      }
      function endTagInSelect(p, token) {
        const tn = token.tagName;
        if (tn === $.OPTGROUP) {
          const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
          const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);
          if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
            p.openElements.pop();
          }
          if (p.openElements.currentTagName === $.OPTGROUP) {
            p.openElements.pop();
          }
        } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
            p.openElements.pop();
          }
        } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
        } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
        }
      }
      function startTagInSelectInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
          p._processToken(token);
        } else {
          startTagInSelect(p, token);
        }
      }
      function endTagInSelectInTable(p, token) {
        const tn = token.tagName;
        if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
            p.openElements.popUntilTagNamePopped($.SELECT);
            p._resetInsertionMode();
            p._processToken(token);
          }
        } else {
          endTagInSelect(p, token);
        }
      }
      function startTagInTemplate(p, token) {
        const tn = token.tagName;
        if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META || tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
          startTagInHead(p, token);
        } else {
          const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
          p._popTmplInsertionMode();
          p._pushTmplInsertionMode(newInsertionMode);
          p.insertionMode = newInsertionMode;
          p._processToken(token);
        }
      }
      function endTagInTemplate(p, token) {
        if (token.tagName === $.TEMPLATE) {
          endTagInHead(p, token);
        }
      }
      function eofInTemplate(p, token) {
        if (p.openElements.tmplCount > 0) {
          p.openElements.popUntilTagNamePopped($.TEMPLATE);
          p.activeFormattingElements.clearToLastMarker();
          p._popTmplInsertionMode();
          p._resetInsertionMode();
          p._processToken(token);
        } else {
          p.stopped = true;
        }
      }
      function startTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          startTagInBody(p, token);
        } else {
          tokenAfterBody(p, token);
        }
      }
      function endTagAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          if (!p.fragmentContext) {
            p.insertionMode = AFTER_AFTER_BODY_MODE;
          }
        } else {
          tokenAfterBody(p, token);
        }
      }
      function tokenAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function startTagInFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
        } else if (tn === $.FRAME) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function endTagInFrameset(p, token) {
        if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
          p.openElements.pop();
          if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
            p.insertionMode = AFTER_FRAMESET_MODE;
          }
        }
      }
      function startTagAfterFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function endTagAfterFrameset(p, token) {
        if (token.tagName === $.HTML) {
          p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
        }
      }
      function startTagAfterAfterBody(p, token) {
        if (token.tagName === $.HTML) {
          startTagInBody(p, token);
        } else {
          tokenAfterAfterBody(p, token);
        }
      }
      function tokenAfterAfterBody(p, token) {
        p.insertionMode = IN_BODY_MODE;
        p._processToken(token);
      }
      function startTagAfterAfterFrameset(p, token) {
        const tn = token.tagName;
        if (tn === $.HTML) {
          startTagInBody(p, token);
        } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
        }
      }
      function nullCharacterInForeignContent(p, token) {
        token.chars = unicode.REPLACEMENT_CHARACTER;
        p._insertCharacters(token);
      }
      function characterInForeignContent(p, token) {
        p._insertCharacters(token);
        p.framesetOk = false;
      }
      function startTagInForeignContent(p, token) {
        if (foreignContent.causesExit(token) && !p.fragmentContext) {
          while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML && !p._isIntegrationPoint(p.openElements.current)) {
            p.openElements.pop();
          }
          p._processToken(token);
        } else {
          const current = p._getAdjustedCurrentElement();
          const currentNs = p.treeAdapter.getNamespaceURI(current);
          if (currentNs === NS.MATHML) {
            foreignContent.adjustTokenMathMLAttrs(token);
          } else if (currentNs === NS.SVG) {
            foreignContent.adjustTokenSVGTagName(token);
            foreignContent.adjustTokenSVGAttrs(token);
          }
          foreignContent.adjustTokenXMLAttrs(token);
          if (token.selfClosing) {
            p._appendElement(token, currentNs);
          } else {
            p._insertElement(token, currentNs);
          }
          token.ackSelfClosing = true;
        }
      }
      function endTagInForeignContent(p, token) {
        for (let i = p.openElements.stackTop; i > 0; i--) {
          const element4 = p.openElements.items[i];
          if (p.treeAdapter.getNamespaceURI(element4) === NS.HTML) {
            p._processToken(token);
            break;
          }
          if (p.treeAdapter.getTagName(element4).toLowerCase() === token.tagName) {
            p.openElements.popUntilElementPopped(element4);
            break;
          }
        }
      }
    }
  });

  // ../ecopan_bot/node_modules/is-buffer/index.js
  var require_is_buffer = __commonJS({
    "../ecopan_bot/node_modules/is-buffer/index.js"(exports, module) {
      module.exports = function isBuffer2(obj) {
        return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      };
    }
  });

  // ../ecopan_bot/node_modules/extend/index.js
  var require_extend = __commonJS({
    "../ecopan_bot/node_modules/extend/index.js"(exports, module) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject2 = function isPlainObject3(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      var setProperty = function setProperty2(target, options) {
        if (defineProperty && options.name === "__proto__") {
          defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
          });
        } else {
          target[options.name] = options.newValue;
        }
      };
      var getProperty = function getProperty2(obj, name) {
        if (name === "__proto__") {
          if (!hasOwn.call(obj, name)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name).value;
          }
        }
        return obj[name];
      };
      module.exports = function extend2() {
        var options, name, src, copy, copyIsArray, clone;
        var target = arguments[0];
        var i = 1;
        var length = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i = 2;
        }
        if (target == null || typeof target !== "object" && typeof target !== "function") {
          target = {};
        }
        for (; i < length; ++i) {
          options = arguments[i];
          if (options != null) {
            for (name in options) {
              src = getProperty(target, name);
              copy = getProperty(options, name);
              if (target !== copy) {
                if (deep && copy && (isPlainObject2(copy) || (copyIsArray = isArray(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject2(src) ? src : {};
                  }
                  setProperty(target, { name, newValue: extend2(deep, clone, copy) });
                } else if (typeof copy !== "undefined") {
                  setProperty(target, { name, newValue: copy });
                }
              }
            }
          }
        }
        return target;
      };
    }
  });

  // ../ecopan_bot/node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "../ecopan_bot/node_modules/react-markdown/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment4 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment4;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../ecopan_bot/node_modules/react-markdown/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "../ecopan_bot/node_modules/react-markdown/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // ../ecopan_bot/node_modules/inline-style-parser/index.js
  var require_inline_style_parser = __commonJS({
    "../ecopan_bot/node_modules/inline-style-parser/index.js"(exports, module) {
      var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
      var NEWLINE_REGEX = /\n/g;
      var WHITESPACE_REGEX = /^\s*/;
      var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
      var COLON_REGEX = /^:\s*/;
      var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
      var SEMICOLON_REGEX = /^[;\s]*/;
      var TRIM_REGEX = /^\s+|\s+$/g;
      var NEWLINE = "\n";
      var FORWARD_SLASH = "/";
      var ASTERISK = "*";
      var EMPTY_STRING = "";
      var TYPE_COMMENT = "comment";
      var TYPE_DECLARATION = "declaration";
      module.exports = function(style2, options) {
        if (typeof style2 !== "string") {
          throw new TypeError("First argument must be a string");
        }
        if (!style2)
          return [];
        options = options || {};
        var lineno = 1;
        var column = 1;
        function updatePosition(str) {
          var lines = str.match(NEWLINE_REGEX);
          if (lines)
            lineno += lines.length;
          var i = str.lastIndexOf(NEWLINE);
          column = ~i ? str.length - i : column + str.length;
        }
        function position5() {
          var start = { line: lineno, column };
          return function(node2) {
            node2.position = new Position(start);
            whitespace2();
            return node2;
          };
        }
        function Position(start) {
          this.start = start;
          this.end = { line: lineno, column };
          this.source = options.source;
        }
        Position.prototype.content = style2;
        var errorsList = [];
        function error2(msg) {
          var err = new Error(
            options.source + ":" + lineno + ":" + column + ": " + msg
          );
          err.reason = msg;
          err.filename = options.source;
          err.line = lineno;
          err.column = column;
          err.source = style2;
          if (options.silent) {
            errorsList.push(err);
          } else {
            throw err;
          }
        }
        function match(re) {
          var m = re.exec(style2);
          if (!m)
            return;
          var str = m[0];
          updatePosition(str);
          style2 = style2.slice(str.length);
          return m;
        }
        function whitespace2() {
          match(WHITESPACE_REGEX);
        }
        function comments(rules) {
          var c;
          rules = rules || [];
          while (c = comment2()) {
            if (c !== false) {
              rules.push(c);
            }
          }
          return rules;
        }
        function comment2() {
          var pos = position5();
          if (FORWARD_SLASH != style2.charAt(0) || ASTERISK != style2.charAt(1))
            return;
          var i = 2;
          while (EMPTY_STRING != style2.charAt(i) && (ASTERISK != style2.charAt(i) || FORWARD_SLASH != style2.charAt(i + 1))) {
            ++i;
          }
          i += 2;
          if (EMPTY_STRING === style2.charAt(i - 1)) {
            return error2("End of comment missing");
          }
          var str = style2.slice(2, i - 2);
          column += 2;
          updatePosition(str);
          style2 = style2.slice(i);
          column += 2;
          return pos({
            type: TYPE_COMMENT,
            comment: str
          });
        }
        function declaration() {
          var pos = position5();
          var prop = match(PROPERTY_REGEX);
          if (!prop)
            return;
          comment2();
          if (!match(COLON_REGEX))
            return error2("property missing ':'");
          var val = match(VALUE_REGEX);
          var ret = pos({
            type: TYPE_DECLARATION,
            property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
          });
          match(SEMICOLON_REGEX);
          return ret;
        }
        function declarations() {
          var decls = [];
          comments(decls);
          var decl;
          while (decl = declaration()) {
            if (decl !== false) {
              decls.push(decl);
              comments(decls);
            }
          }
          return decls;
        }
        whitespace2();
        return declarations();
      };
      function trim(str) {
        return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
      }
    }
  });

  // ../ecopan_bot/node_modules/style-to-object/index.js
  var require_style_to_object = __commonJS({
    "../ecopan_bot/node_modules/style-to-object/index.js"(exports, module) {
      var parse5 = require_inline_style_parser();
      function StyleToObject2(style2, iterator) {
        var output = null;
        if (!style2 || typeof style2 !== "string") {
          return output;
        }
        var declaration;
        var declarations = parse5(style2);
        var hasIterator = typeof iterator === "function";
        var property;
        var value;
        for (var i = 0, len = declarations.length; i < len; i++) {
          declaration = declarations[i];
          property = declaration.property;
          value = declaration.value;
          if (hasIterator) {
            iterator(property, value, declaration);
          } else if (value) {
            output || (output = {});
            output[property] = value;
          }
        }
        return output;
      }
      module.exports = StyleToObject2;
      module.exports.default = StyleToObject2;
    }
  });

  // ../ecopan_bot/node_modules/xtend/immutable.js
  var require_immutable = __commonJS({
    "../ecopan_bot/node_modules/xtend/immutable.js"(exports, module) {
      module.exports = extend2;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      function extend2() {
        var target = {};
        for (var i = 0; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (hasOwnProperty2.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/schema.js
  var require_schema = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/schema.js"(exports, module) {
      "use strict";
      module.exports = Schema2;
      var proto2 = Schema2.prototype;
      proto2.space = null;
      proto2.normal = {};
      proto2.property = {};
      function Schema2(property, normal, space3) {
        this.property = property;
        this.normal = normal;
        if (space3) {
          this.space = space3;
        }
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/merge.js
  var require_merge = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/merge.js"(exports, module) {
      "use strict";
      var xtend = require_immutable();
      var Schema2 = require_schema();
      module.exports = merge3;
      function merge3(definitions2) {
        var length = definitions2.length;
        var property = [];
        var normal = [];
        var index2 = -1;
        var info;
        var space3;
        while (++index2 < length) {
          info = definitions2[index2];
          property.push(info.property);
          normal.push(info.normal);
          space3 = info.space;
        }
        return new Schema2(
          xtend.apply(null, property),
          xtend.apply(null, normal),
          space3
        );
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/normalize.js
  var require_normalize = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/normalize.js"(exports, module) {
      "use strict";
      module.exports = normalize5;
      function normalize5(value) {
        return value.toLowerCase();
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/info.js
  var require_info = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/info.js"(exports, module) {
      "use strict";
      module.exports = Info2;
      var proto2 = Info2.prototype;
      proto2.space = null;
      proto2.attribute = null;
      proto2.property = null;
      proto2.boolean = false;
      proto2.booleanish = false;
      proto2.overloadedBoolean = false;
      proto2.number = false;
      proto2.commaSeparated = false;
      proto2.spaceSeparated = false;
      proto2.commaOrSpaceSeparated = false;
      proto2.mustUseProperty = false;
      proto2.defined = false;
      function Info2(property, attribute) {
        this.property = property;
        this.attribute = attribute;
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/types.js
  var require_types = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/types.js"(exports) {
      "use strict";
      var powers2 = 0;
      exports.boolean = increment2();
      exports.booleanish = increment2();
      exports.overloadedBoolean = increment2();
      exports.number = increment2();
      exports.spaceSeparated = increment2();
      exports.commaSeparated = increment2();
      exports.commaOrSpaceSeparated = increment2();
      function increment2() {
        return Math.pow(2, ++powers2);
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/defined-info.js
  var require_defined_info = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/defined-info.js"(exports, module) {
      "use strict";
      var Info2 = require_info();
      var types2 = require_types();
      module.exports = DefinedInfo2;
      DefinedInfo2.prototype = new Info2();
      DefinedInfo2.prototype.defined = true;
      var checks2 = [
        "boolean",
        "booleanish",
        "overloadedBoolean",
        "number",
        "commaSeparated",
        "spaceSeparated",
        "commaOrSpaceSeparated"
      ];
      var checksLength = checks2.length;
      function DefinedInfo2(property, attribute, mask, space3) {
        var index2 = -1;
        var check;
        mark2(this, "space", space3);
        Info2.call(this, property, attribute);
        while (++index2 < checksLength) {
          check = checks2[index2];
          mark2(this, check, (mask & types2[check]) === types2[check]);
        }
      }
      function mark2(values, key, value) {
        if (value) {
          values[key] = value;
        }
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/create.js
  var require_create = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/create.js"(exports, module) {
      "use strict";
      var normalize5 = require_normalize();
      var Schema2 = require_schema();
      var DefinedInfo2 = require_defined_info();
      module.exports = create2;
      function create2(definition2) {
        var space3 = definition2.space;
        var mustUseProperty = definition2.mustUseProperty || [];
        var attributes2 = definition2.attributes || {};
        var props = definition2.properties;
        var transform2 = definition2.transform;
        var property = {};
        var normal = {};
        var prop;
        var info;
        for (prop in props) {
          info = new DefinedInfo2(
            prop,
            transform2(attributes2, prop),
            props[prop],
            space3
          );
          if (mustUseProperty.indexOf(prop) !== -1) {
            info.mustUseProperty = true;
          }
          property[prop] = info;
          normal[normalize5(prop)] = prop;
          normal[normalize5(info.attribute)] = prop;
        }
        return new Schema2(property, normal, space3);
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/xlink.js
  var require_xlink = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/xlink.js"(exports, module) {
      "use strict";
      var create2 = require_create();
      module.exports = create2({
        space: "xlink",
        transform: xlinkTransform,
        properties: {
          xLinkActuate: null,
          xLinkArcRole: null,
          xLinkHref: null,
          xLinkRole: null,
          xLinkShow: null,
          xLinkTitle: null,
          xLinkType: null
        }
      });
      function xlinkTransform(_, prop) {
        return "xlink:" + prop.slice(5).toLowerCase();
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/xml.js
  var require_xml = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/xml.js"(exports, module) {
      "use strict";
      var create2 = require_create();
      module.exports = create2({
        space: "xml",
        transform: xmlTransform,
        properties: {
          xmlLang: null,
          xmlBase: null,
          xmlSpace: null
        }
      });
      function xmlTransform(_, prop) {
        return "xml:" + prop.slice(3).toLowerCase();
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/case-sensitive-transform.js
  var require_case_sensitive_transform = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/case-sensitive-transform.js"(exports, module) {
      "use strict";
      module.exports = caseSensitiveTransform2;
      function caseSensitiveTransform2(attributes2, attribute) {
        return attribute in attributes2 ? attributes2[attribute] : attribute;
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/case-insensitive-transform.js
  var require_case_insensitive_transform = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/util/case-insensitive-transform.js"(exports, module) {
      "use strict";
      var caseSensitiveTransform2 = require_case_sensitive_transform();
      module.exports = caseInsensitiveTransform2;
      function caseInsensitiveTransform2(attributes2, property) {
        return caseSensitiveTransform2(attributes2, property.toLowerCase());
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/xmlns.js
  var require_xmlns = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/xmlns.js"(exports, module) {
      "use strict";
      var create2 = require_create();
      var caseInsensitiveTransform2 = require_case_insensitive_transform();
      module.exports = create2({
        space: "xmlns",
        attributes: {
          xmlnsxlink: "xmlns:xlink"
        },
        transform: caseInsensitiveTransform2,
        properties: {
          xmlns: null,
          xmlnsXLink: null
        }
      });
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/aria.js
  var require_aria = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/aria.js"(exports, module) {
      "use strict";
      var types2 = require_types();
      var create2 = require_create();
      var booleanish2 = types2.booleanish;
      var number3 = types2.number;
      var spaceSeparated2 = types2.spaceSeparated;
      module.exports = create2({
        transform: ariaTransform,
        properties: {
          ariaActiveDescendant: null,
          ariaAtomic: booleanish2,
          ariaAutoComplete: null,
          ariaBusy: booleanish2,
          ariaChecked: booleanish2,
          ariaColCount: number3,
          ariaColIndex: number3,
          ariaColSpan: number3,
          ariaControls: spaceSeparated2,
          ariaCurrent: null,
          ariaDescribedBy: spaceSeparated2,
          ariaDetails: null,
          ariaDisabled: booleanish2,
          ariaDropEffect: spaceSeparated2,
          ariaErrorMessage: null,
          ariaExpanded: booleanish2,
          ariaFlowTo: spaceSeparated2,
          ariaGrabbed: booleanish2,
          ariaHasPopup: null,
          ariaHidden: booleanish2,
          ariaInvalid: null,
          ariaKeyShortcuts: null,
          ariaLabel: null,
          ariaLabelledBy: spaceSeparated2,
          ariaLevel: number3,
          ariaLive: null,
          ariaModal: booleanish2,
          ariaMultiLine: booleanish2,
          ariaMultiSelectable: booleanish2,
          ariaOrientation: null,
          ariaOwns: spaceSeparated2,
          ariaPlaceholder: null,
          ariaPosInSet: number3,
          ariaPressed: booleanish2,
          ariaReadOnly: booleanish2,
          ariaRelevant: null,
          ariaRequired: booleanish2,
          ariaRoleDescription: spaceSeparated2,
          ariaRowCount: number3,
          ariaRowIndex: number3,
          ariaRowSpan: number3,
          ariaSelected: booleanish2,
          ariaSetSize: number3,
          ariaSort: null,
          ariaValueMax: number3,
          ariaValueMin: number3,
          ariaValueNow: number3,
          ariaValueText: null,
          role: null
        }
      });
      function ariaTransform(_, prop) {
        return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/html.js
  var require_html2 = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/lib/html.js"(exports, module) {
      "use strict";
      var types2 = require_types();
      var create2 = require_create();
      var caseInsensitiveTransform2 = require_case_insensitive_transform();
      var boolean2 = types2.boolean;
      var overloadedBoolean2 = types2.overloadedBoolean;
      var booleanish2 = types2.booleanish;
      var number3 = types2.number;
      var spaceSeparated2 = types2.spaceSeparated;
      var commaSeparated2 = types2.commaSeparated;
      module.exports = create2({
        space: "html",
        attributes: {
          acceptcharset: "accept-charset",
          classname: "class",
          htmlfor: "for",
          httpequiv: "http-equiv"
        },
        transform: caseInsensitiveTransform2,
        mustUseProperty: ["checked", "multiple", "muted", "selected"],
        properties: {
          abbr: null,
          accept: commaSeparated2,
          acceptCharset: spaceSeparated2,
          accessKey: spaceSeparated2,
          action: null,
          allow: null,
          allowFullScreen: boolean2,
          allowPaymentRequest: boolean2,
          allowUserMedia: boolean2,
          alt: null,
          as: null,
          async: boolean2,
          autoCapitalize: null,
          autoComplete: spaceSeparated2,
          autoFocus: boolean2,
          autoPlay: boolean2,
          capture: boolean2,
          charSet: null,
          checked: boolean2,
          cite: null,
          className: spaceSeparated2,
          cols: number3,
          colSpan: null,
          content: null,
          contentEditable: booleanish2,
          controls: boolean2,
          controlsList: spaceSeparated2,
          coords: number3 | commaSeparated2,
          crossOrigin: null,
          data: null,
          dateTime: null,
          decoding: null,
          default: boolean2,
          defer: boolean2,
          dir: null,
          dirName: null,
          disabled: boolean2,
          download: overloadedBoolean2,
          draggable: booleanish2,
          encType: null,
          enterKeyHint: null,
          form: null,
          formAction: null,
          formEncType: null,
          formMethod: null,
          formNoValidate: boolean2,
          formTarget: null,
          headers: spaceSeparated2,
          height: number3,
          hidden: boolean2,
          high: number3,
          href: null,
          hrefLang: null,
          htmlFor: spaceSeparated2,
          httpEquiv: spaceSeparated2,
          id: null,
          imageSizes: null,
          imageSrcSet: commaSeparated2,
          inputMode: null,
          integrity: null,
          is: null,
          isMap: boolean2,
          itemId: null,
          itemProp: spaceSeparated2,
          itemRef: spaceSeparated2,
          itemScope: boolean2,
          itemType: spaceSeparated2,
          kind: null,
          label: null,
          lang: null,
          language: null,
          list: null,
          loading: null,
          loop: boolean2,
          low: number3,
          manifest: null,
          max: null,
          maxLength: number3,
          media: null,
          method: null,
          min: null,
          minLength: number3,
          multiple: boolean2,
          muted: boolean2,
          name: null,
          nonce: null,
          noModule: boolean2,
          noValidate: boolean2,
          onAbort: null,
          onAfterPrint: null,
          onAuxClick: null,
          onBeforePrint: null,
          onBeforeUnload: null,
          onBlur: null,
          onCancel: null,
          onCanPlay: null,
          onCanPlayThrough: null,
          onChange: null,
          onClick: null,
          onClose: null,
          onContextMenu: null,
          onCopy: null,
          onCueChange: null,
          onCut: null,
          onDblClick: null,
          onDrag: null,
          onDragEnd: null,
          onDragEnter: null,
          onDragExit: null,
          onDragLeave: null,
          onDragOver: null,
          onDragStart: null,
          onDrop: null,
          onDurationChange: null,
          onEmptied: null,
          onEnded: null,
          onError: null,
          onFocus: null,
          onFormData: null,
          onHashChange: null,
          onInput: null,
          onInvalid: null,
          onKeyDown: null,
          onKeyPress: null,
          onKeyUp: null,
          onLanguageChange: null,
          onLoad: null,
          onLoadedData: null,
          onLoadedMetadata: null,
          onLoadEnd: null,
          onLoadStart: null,
          onMessage: null,
          onMessageError: null,
          onMouseDown: null,
          onMouseEnter: null,
          onMouseLeave: null,
          onMouseMove: null,
          onMouseOut: null,
          onMouseOver: null,
          onMouseUp: null,
          onOffline: null,
          onOnline: null,
          onPageHide: null,
          onPageShow: null,
          onPaste: null,
          onPause: null,
          onPlay: null,
          onPlaying: null,
          onPopState: null,
          onProgress: null,
          onRateChange: null,
          onRejectionHandled: null,
          onReset: null,
          onResize: null,
          onScroll: null,
          onSecurityPolicyViolation: null,
          onSeeked: null,
          onSeeking: null,
          onSelect: null,
          onSlotChange: null,
          onStalled: null,
          onStorage: null,
          onSubmit: null,
          onSuspend: null,
          onTimeUpdate: null,
          onToggle: null,
          onUnhandledRejection: null,
          onUnload: null,
          onVolumeChange: null,
          onWaiting: null,
          onWheel: null,
          open: boolean2,
          optimum: number3,
          pattern: null,
          ping: spaceSeparated2,
          placeholder: null,
          playsInline: boolean2,
          poster: null,
          preload: null,
          readOnly: boolean2,
          referrerPolicy: null,
          rel: spaceSeparated2,
          required: boolean2,
          reversed: boolean2,
          rows: number3,
          rowSpan: number3,
          sandbox: spaceSeparated2,
          scope: null,
          scoped: boolean2,
          seamless: boolean2,
          selected: boolean2,
          shape: null,
          size: number3,
          sizes: null,
          slot: null,
          span: number3,
          spellCheck: booleanish2,
          src: null,
          srcDoc: null,
          srcLang: null,
          srcSet: commaSeparated2,
          start: number3,
          step: null,
          style: null,
          tabIndex: number3,
          target: null,
          title: null,
          translate: null,
          type: null,
          typeMustMatch: boolean2,
          useMap: null,
          value: booleanish2,
          width: number3,
          wrap: null,
          align: null,
          aLink: null,
          archive: spaceSeparated2,
          axis: null,
          background: null,
          bgColor: null,
          border: number3,
          borderColor: null,
          bottomMargin: number3,
          cellPadding: null,
          cellSpacing: null,
          char: null,
          charOff: null,
          classId: null,
          clear: null,
          code: null,
          codeBase: null,
          codeType: null,
          color: null,
          compact: boolean2,
          declare: boolean2,
          event: null,
          face: null,
          frame: null,
          frameBorder: null,
          hSpace: number3,
          leftMargin: number3,
          link: null,
          longDesc: null,
          lowSrc: null,
          marginHeight: number3,
          marginWidth: number3,
          noResize: boolean2,
          noHref: boolean2,
          noShade: boolean2,
          noWrap: boolean2,
          object: null,
          profile: null,
          prompt: null,
          rev: null,
          rightMargin: number3,
          rules: null,
          scheme: null,
          scrolling: booleanish2,
          standby: null,
          summary: null,
          text: null,
          topMargin: number3,
          valueType: null,
          version: null,
          vAlign: null,
          vLink: null,
          vSpace: number3,
          allowTransparency: null,
          autoCorrect: null,
          autoSave: null,
          disablePictureInPicture: boolean2,
          disableRemotePlayback: boolean2,
          prefix: null,
          property: null,
          results: number3,
          security: null,
          unselectable: null
        }
      });
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/html.js
  var require_html3 = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/html.js"(exports, module) {
      "use strict";
      var merge3 = require_merge();
      var xlink2 = require_xlink();
      var xml2 = require_xml();
      var xmlns2 = require_xmlns();
      var aria2 = require_aria();
      var html4 = require_html2();
      module.exports = merge3([xml2, xlink2, xmlns2, aria2, html4]);
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/property-information/find.js
  var require_find = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/property-information/find.js"(exports, module) {
      "use strict";
      var normalize5 = require_normalize();
      var DefinedInfo2 = require_defined_info();
      var Info2 = require_info();
      var data = "data";
      module.exports = find2;
      var valid2 = /^data[-\w.:]+$/i;
      var dash2 = /-[a-z]/g;
      var cap2 = /[A-Z]/g;
      function find2(schema, value) {
        var normal = normalize5(value);
        var prop = value;
        var Type = Info2;
        if (normal in schema.normal) {
          return schema.property[schema.normal[normal]];
        }
        if (normal.length > 4 && normal.slice(0, 4) === data && valid2.test(value)) {
          if (value.charAt(4) === "-") {
            prop = datasetToProperty(value);
          } else {
            value = datasetToAttribute(value);
          }
          Type = DefinedInfo2;
        }
        return new Type(prop, value);
      }
      function datasetToProperty(attribute) {
        var value = attribute.slice(5).replace(dash2, camelcase2);
        return data + value.charAt(0).toUpperCase() + value.slice(1);
      }
      function datasetToAttribute(property) {
        var value = property.slice(4);
        if (dash2.test(value)) {
          return property;
        }
        value = value.replace(cap2, kebab2);
        if (value.charAt(0) !== "-") {
          value = "-" + value;
        }
        return data + value;
      }
      function kebab2($0) {
        return "-" + $0.toLowerCase();
      }
      function camelcase2($0) {
        return $0.charAt(1).toUpperCase();
      }
    }
  });

  // ../ecopan_bot/node_modules/hast-util-parse-selector/index.js
  var require_hast_util_parse_selector = __commonJS({
    "../ecopan_bot/node_modules/hast-util-parse-selector/index.js"(exports, module) {
      "use strict";
      module.exports = parse5;
      var search3 = /[#.]/g;
      function parse5(selector2, defaultTagName) {
        var value = selector2 || "";
        var name = defaultTagName || "div";
        var props = {};
        var start = 0;
        var subvalue;
        var previous3;
        var match;
        while (start < value.length) {
          search3.lastIndex = start;
          match = search3.exec(value);
          subvalue = value.slice(start, match ? match.index : value.length);
          if (subvalue) {
            if (!previous3) {
              name = subvalue;
            } else if (previous3 === "#") {
              props.id = subvalue;
            } else if (props.className) {
              props.className.push(subvalue);
            } else {
              props.className = [subvalue];
            }
            start += subvalue.length;
          }
          if (match) {
            previous3 = match[0];
            start++;
          }
        }
        return { type: "element", tagName: name, properties: props, children: [] };
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/space-separated-tokens/index.js
  var require_space_separated_tokens = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/space-separated-tokens/index.js"(exports) {
      "use strict";
      exports.parse = parse5;
      exports.stringify = stringify3;
      var empty = "";
      var space3 = " ";
      var whiteSpace = /[ \t\n\r\f]+/g;
      function parse5(value) {
        var input = String(value || empty).trim();
        return input === empty ? [] : input.split(whiteSpace);
      }
      function stringify3(values) {
        return values.join(space3).trim();
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/node_modules/comma-separated-tokens/index.js
  var require_comma_separated_tokens = __commonJS({
    "../ecopan_bot/node_modules/hastscript/node_modules/comma-separated-tokens/index.js"(exports) {
      "use strict";
      exports.parse = parse5;
      exports.stringify = stringify3;
      var comma = ",";
      var space3 = " ";
      var empty = "";
      function parse5(value) {
        var values = [];
        var input = String(value || empty);
        var index2 = input.indexOf(comma);
        var lastIndex = 0;
        var end = false;
        var val;
        while (!end) {
          if (index2 === -1) {
            index2 = input.length;
            end = true;
          }
          val = input.slice(lastIndex, index2).trim();
          if (val || !end) {
            values.push(val);
          }
          lastIndex = index2 + 1;
          index2 = input.indexOf(comma, lastIndex);
        }
        return values;
      }
      function stringify3(values, options) {
        var settings = options || {};
        var left = settings.padLeft === false ? empty : space3;
        var right = settings.padRight ? space3 : empty;
        if (values[values.length - 1] === empty) {
          values = values.concat(empty);
        }
        return values.join(right + comma + left).trim();
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/factory.js
  var require_factory = __commonJS({
    "../ecopan_bot/node_modules/hastscript/factory.js"(exports, module) {
      "use strict";
      var find2 = require_find();
      var normalize5 = require_normalize();
      var parseSelector2 = require_hast_util_parse_selector();
      var spaces = require_space_separated_tokens().parse;
      var commas = require_comma_separated_tokens().parse;
      module.exports = factory2;
      var own13 = {}.hasOwnProperty;
      function factory2(schema, defaultTagName, caseSensitive) {
        var adjust = caseSensitive ? createAdjustMap2(caseSensitive) : null;
        return h2;
        function h2(selector2, properties) {
          var node2 = parseSelector2(selector2, defaultTagName);
          var children = Array.prototype.slice.call(arguments, 2);
          var name = node2.tagName.toLowerCase();
          var property;
          node2.tagName = adjust && own13.call(adjust, name) ? adjust[name] : name;
          if (properties && isChildren(properties, node2)) {
            children.unshift(properties);
            properties = null;
          }
          if (properties) {
            for (property in properties) {
              addProperty3(node2.properties, property, properties[property]);
            }
          }
          addChild2(node2.children, children);
          if (node2.tagName === "template") {
            node2.content = { type: "root", children: node2.children };
            node2.children = [];
          }
          return node2;
        }
        function addProperty3(properties, key, value) {
          var info;
          var property;
          var result;
          if (value === null || value === void 0 || value !== value) {
            return;
          }
          info = find2(schema, key);
          property = info.property;
          result = value;
          if (typeof result === "string") {
            if (info.spaceSeparated) {
              result = spaces(result);
            } else if (info.commaSeparated) {
              result = commas(result);
            } else if (info.commaOrSpaceSeparated) {
              result = spaces(commas(result).join(" "));
            }
          }
          if (property === "style" && typeof value !== "string") {
            result = style2(result);
          }
          if (property === "className" && properties.className) {
            result = properties.className.concat(result);
          }
          properties[property] = parsePrimitives(info, property, result);
        }
      }
      function isChildren(value, node2) {
        return typeof value === "string" || "length" in value || isNode(node2.tagName, value);
      }
      function isNode(tagName, value) {
        var type = value.type;
        if (tagName === "input" || !type || typeof type !== "string") {
          return false;
        }
        if (typeof value.children === "object" && "length" in value.children) {
          return true;
        }
        type = type.toLowerCase();
        if (tagName === "button") {
          return type !== "menu" && type !== "submit" && type !== "reset" && type !== "button";
        }
        return "value" in value;
      }
      function addChild2(nodes, value) {
        var index2;
        var length;
        if (typeof value === "string" || typeof value === "number") {
          nodes.push({ type: "text", value: String(value) });
          return;
        }
        if (typeof value === "object" && "length" in value) {
          index2 = -1;
          length = value.length;
          while (++index2 < length) {
            addChild2(nodes, value[index2]);
          }
          return;
        }
        if (typeof value !== "object" || !("type" in value)) {
          throw new Error("Expected node, nodes, or string, got `" + value + "`");
        }
        nodes.push(value);
      }
      function parsePrimitives(info, name, value) {
        var index2;
        var length;
        var result;
        if (typeof value !== "object" || !("length" in value)) {
          return parsePrimitive2(info, name, value);
        }
        length = value.length;
        index2 = -1;
        result = [];
        while (++index2 < length) {
          result[index2] = parsePrimitive2(info, name, value[index2]);
        }
        return result;
      }
      function parsePrimitive2(info, name, value) {
        var result = value;
        if (info.number || info.positiveNumber) {
          if (!isNaN(result) && result !== "") {
            result = Number(result);
          }
        } else if (info.boolean || info.overloadedBoolean) {
          if (typeof result === "string" && (result === "" || normalize5(value) === normalize5(name))) {
            result = true;
          }
        }
        return result;
      }
      function style2(value) {
        var result = [];
        var key;
        for (key in value) {
          result.push([key, value[key]].join(": "));
        }
        return result.join("; ");
      }
      function createAdjustMap2(values) {
        var length = values.length;
        var index2 = -1;
        var result = {};
        var value;
        while (++index2 < length) {
          value = values[index2];
          result[value.toLowerCase()] = value;
        }
        return result;
      }
    }
  });

  // ../ecopan_bot/node_modules/hastscript/html.js
  var require_html4 = __commonJS({
    "../ecopan_bot/node_modules/hastscript/html.js"(exports, module) {
      "use strict";
      var schema = require_html3();
      var factory2 = require_factory();
      var html4 = factory2(schema, "div");
      html4.displayName = "html";
      module.exports = html4;
    }
  });

  // ../ecopan_bot/node_modules/hastscript/index.js
  var require_hastscript = __commonJS({
    "../ecopan_bot/node_modules/hastscript/index.js"(exports, module) {
      "use strict";
      module.exports = require_html4();
    }
  });

  // ../ecopan_bot/node_modules/character-entities-legacy/index.json
  var require_character_entities_legacy = __commonJS({
    "../ecopan_bot/node_modules/character-entities-legacy/index.json"(exports, module) {
      module.exports = {
        AElig: "\xC6",
        AMP: "&",
        Aacute: "\xC1",
        Acirc: "\xC2",
        Agrave: "\xC0",
        Aring: "\xC5",
        Atilde: "\xC3",
        Auml: "\xC4",
        COPY: "\xA9",
        Ccedil: "\xC7",
        ETH: "\xD0",
        Eacute: "\xC9",
        Ecirc: "\xCA",
        Egrave: "\xC8",
        Euml: "\xCB",
        GT: ">",
        Iacute: "\xCD",
        Icirc: "\xCE",
        Igrave: "\xCC",
        Iuml: "\xCF",
        LT: "<",
        Ntilde: "\xD1",
        Oacute: "\xD3",
        Ocirc: "\xD4",
        Ograve: "\xD2",
        Oslash: "\xD8",
        Otilde: "\xD5",
        Ouml: "\xD6",
        QUOT: '"',
        REG: "\xAE",
        THORN: "\xDE",
        Uacute: "\xDA",
        Ucirc: "\xDB",
        Ugrave: "\xD9",
        Uuml: "\xDC",
        Yacute: "\xDD",
        aacute: "\xE1",
        acirc: "\xE2",
        acute: "\xB4",
        aelig: "\xE6",
        agrave: "\xE0",
        amp: "&",
        aring: "\xE5",
        atilde: "\xE3",
        auml: "\xE4",
        brvbar: "\xA6",
        ccedil: "\xE7",
        cedil: "\xB8",
        cent: "\xA2",
        copy: "\xA9",
        curren: "\xA4",
        deg: "\xB0",
        divide: "\xF7",
        eacute: "\xE9",
        ecirc: "\xEA",
        egrave: "\xE8",
        eth: "\xF0",
        euml: "\xEB",
        frac12: "\xBD",
        frac14: "\xBC",
        frac34: "\xBE",
        gt: ">",
        iacute: "\xED",
        icirc: "\xEE",
        iexcl: "\xA1",
        igrave: "\xEC",
        iquest: "\xBF",
        iuml: "\xEF",
        laquo: "\xAB",
        lt: "<",
        macr: "\xAF",
        micro: "\xB5",
        middot: "\xB7",
        nbsp: "\xA0",
        not: "\xAC",
        ntilde: "\xF1",
        oacute: "\xF3",
        ocirc: "\xF4",
        ograve: "\xF2",
        ordf: "\xAA",
        ordm: "\xBA",
        oslash: "\xF8",
        otilde: "\xF5",
        ouml: "\xF6",
        para: "\xB6",
        plusmn: "\xB1",
        pound: "\xA3",
        quot: '"',
        raquo: "\xBB",
        reg: "\xAE",
        sect: "\xA7",
        shy: "\xAD",
        sup1: "\xB9",
        sup2: "\xB2",
        sup3: "\xB3",
        szlig: "\xDF",
        thorn: "\xFE",
        times: "\xD7",
        uacute: "\xFA",
        ucirc: "\xFB",
        ugrave: "\xF9",
        uml: "\xA8",
        uuml: "\xFC",
        yacute: "\xFD",
        yen: "\xA5",
        yuml: "\xFF"
      };
    }
  });

  // ../ecopan_bot/node_modules/character-reference-invalid/index.json
  var require_character_reference_invalid = __commonJS({
    "../ecopan_bot/node_modules/character-reference-invalid/index.json"(exports, module) {
      module.exports = {
        "0": "\uFFFD",
        "128": "\u20AC",
        "130": "\u201A",
        "131": "\u0192",
        "132": "\u201E",
        "133": "\u2026",
        "134": "\u2020",
        "135": "\u2021",
        "136": "\u02C6",
        "137": "\u2030",
        "138": "\u0160",
        "139": "\u2039",
        "140": "\u0152",
        "142": "\u017D",
        "145": "\u2018",
        "146": "\u2019",
        "147": "\u201C",
        "148": "\u201D",
        "149": "\u2022",
        "150": "\u2013",
        "151": "\u2014",
        "152": "\u02DC",
        "153": "\u2122",
        "154": "\u0161",
        "155": "\u203A",
        "156": "\u0153",
        "158": "\u017E",
        "159": "\u0178"
      };
    }
  });

  // ../ecopan_bot/node_modules/is-decimal/index.js
  var require_is_decimal = __commonJS({
    "../ecopan_bot/node_modules/is-decimal/index.js"(exports, module) {
      "use strict";
      module.exports = decimal;
      function decimal(character) {
        var code3 = typeof character === "string" ? character.charCodeAt(0) : character;
        return code3 >= 48 && code3 <= 57;
      }
    }
  });

  // ../ecopan_bot/node_modules/is-hexadecimal/index.js
  var require_is_hexadecimal = __commonJS({
    "../ecopan_bot/node_modules/is-hexadecimal/index.js"(exports, module) {
      "use strict";
      module.exports = hexadecimal;
      function hexadecimal(character) {
        var code3 = typeof character === "string" ? character.charCodeAt(0) : character;
        return code3 >= 97 && code3 <= 102 || code3 >= 65 && code3 <= 70 || code3 >= 48 && code3 <= 57;
      }
    }
  });

  // ../ecopan_bot/node_modules/is-alphabetical/index.js
  var require_is_alphabetical = __commonJS({
    "../ecopan_bot/node_modules/is-alphabetical/index.js"(exports, module) {
      "use strict";
      module.exports = alphabetical;
      function alphabetical(character) {
        var code3 = typeof character === "string" ? character.charCodeAt(0) : character;
        return code3 >= 97 && code3 <= 122 || code3 >= 65 && code3 <= 90;
      }
    }
  });

  // ../ecopan_bot/node_modules/is-alphanumerical/index.js
  var require_is_alphanumerical = __commonJS({
    "../ecopan_bot/node_modules/is-alphanumerical/index.js"(exports, module) {
      "use strict";
      var alphabetical = require_is_alphabetical();
      var decimal = require_is_decimal();
      module.exports = alphanumerical;
      function alphanumerical(character) {
        return alphabetical(character) || decimal(character);
      }
    }
  });

  // ../ecopan_bot/node_modules/parse-entities/decode-entity.browser.js
  var require_decode_entity_browser = __commonJS({
    "../ecopan_bot/node_modules/parse-entities/decode-entity.browser.js"(exports, module) {
      "use strict";
      var el;
      var semicolon = 59;
      module.exports = decodeEntity;
      function decodeEntity(characters) {
        var entity = "&" + characters + ";";
        var char;
        el = el || document.createElement("i");
        el.innerHTML = entity;
        char = el.textContent;
        if (char.charCodeAt(char.length - 1) === semicolon && characters !== "semi") {
          return false;
        }
        return char === entity ? false : char;
      }
    }
  });

  // ../ecopan_bot/node_modules/parse-entities/index.js
  var require_parse_entities = __commonJS({
    "../ecopan_bot/node_modules/parse-entities/index.js"(exports, module) {
      "use strict";
      var legacy = require_character_entities_legacy();
      var invalid = require_character_reference_invalid();
      var decimal = require_is_decimal();
      var hexadecimal = require_is_hexadecimal();
      var alphanumerical = require_is_alphanumerical();
      var decodeEntity = require_decode_entity_browser();
      module.exports = parseEntities;
      var own13 = {}.hasOwnProperty;
      var fromCharCode = String.fromCharCode;
      var noop4 = Function.prototype;
      var defaults = {
        warning: null,
        reference: null,
        text: null,
        warningContext: null,
        referenceContext: null,
        textContext: null,
        position: {},
        additional: null,
        attribute: false,
        nonTerminated: true
      };
      var tab2 = 9;
      var lineFeed = 10;
      var formFeed = 12;
      var space3 = 32;
      var ampersand = 38;
      var semicolon = 59;
      var lessThan = 60;
      var equalsTo = 61;
      var numberSign = 35;
      var uppercaseX = 88;
      var lowercaseX = 120;
      var replacementCharacter = 65533;
      var name = "named";
      var hexa = "hexadecimal";
      var deci = "decimal";
      var bases = {};
      bases[hexa] = 16;
      bases[deci] = 10;
      var tests = {};
      tests[name] = alphanumerical;
      tests[deci] = decimal;
      tests[hexa] = hexadecimal;
      var namedNotTerminated = 1;
      var numericNotTerminated = 2;
      var namedEmpty = 3;
      var numericEmpty = 4;
      var namedUnknown = 5;
      var numericDisallowed = 6;
      var numericProhibited = 7;
      var messages = {};
      messages[namedNotTerminated] = "Named character references must be terminated by a semicolon";
      messages[numericNotTerminated] = "Numeric character references must be terminated by a semicolon";
      messages[namedEmpty] = "Named character references cannot be empty";
      messages[numericEmpty] = "Numeric character references cannot be empty";
      messages[namedUnknown] = "Named character references must be known";
      messages[numericDisallowed] = "Numeric character references cannot be disallowed";
      messages[numericProhibited] = "Numeric character references cannot be outside the permissible Unicode range";
      function parseEntities(value, options) {
        var settings = {};
        var option;
        var key;
        if (!options) {
          options = {};
        }
        for (key in defaults) {
          option = options[key];
          settings[key] = option === null || option === void 0 ? defaults[key] : option;
        }
        if (settings.position.indent || settings.position.start) {
          settings.indent = settings.position.indent || [];
          settings.position = settings.position.start;
        }
        return parse5(value, settings);
      }
      function parse5(value, settings) {
        var additional = settings.additional;
        var nonTerminated = settings.nonTerminated;
        var handleText = settings.text;
        var handleReference = settings.reference;
        var handleWarning = settings.warning;
        var textContext = settings.textContext;
        var referenceContext = settings.referenceContext;
        var warningContext = settings.warningContext;
        var pos = settings.position;
        var indent2 = settings.indent || [];
        var length = value.length;
        var index2 = 0;
        var lines = -1;
        var column = pos.column || 1;
        var line = pos.line || 1;
        var queue = "";
        var result = [];
        var entityCharacters;
        var namedEntity;
        var terminated;
        var characters;
        var character;
        var reference;
        var following;
        var warning2;
        var reason;
        var output;
        var entity;
        var begin;
        var start;
        var type;
        var test2;
        var prev;
        var next;
        var diff;
        var end;
        if (typeof additional === "string") {
          additional = additional.charCodeAt(0);
        }
        prev = now();
        warning2 = handleWarning ? parseError : noop4;
        index2--;
        length++;
        while (++index2 < length) {
          if (character === lineFeed) {
            column = indent2[lines] || 1;
          }
          character = value.charCodeAt(index2);
          if (character === ampersand) {
            following = value.charCodeAt(index2 + 1);
            if (following === tab2 || following === lineFeed || following === formFeed || following === space3 || following === ampersand || following === lessThan || following !== following || additional && following === additional) {
              queue += fromCharCode(character);
              column++;
              continue;
            }
            start = index2 + 1;
            begin = start;
            end = start;
            if (following === numberSign) {
              end = ++begin;
              following = value.charCodeAt(end);
              if (following === uppercaseX || following === lowercaseX) {
                type = hexa;
                end = ++begin;
              } else {
                type = deci;
              }
            } else {
              type = name;
            }
            entityCharacters = "";
            entity = "";
            characters = "";
            test2 = tests[type];
            end--;
            while (++end < length) {
              following = value.charCodeAt(end);
              if (!test2(following)) {
                break;
              }
              characters += fromCharCode(following);
              if (type === name && own13.call(legacy, characters)) {
                entityCharacters = characters;
                entity = legacy[characters];
              }
            }
            terminated = value.charCodeAt(end) === semicolon;
            if (terminated) {
              end++;
              namedEntity = type === name ? decodeEntity(characters) : false;
              if (namedEntity) {
                entityCharacters = characters;
                entity = namedEntity;
              }
            }
            diff = 1 + end - start;
            if (!terminated && !nonTerminated) {
            } else if (!characters) {
              if (type !== name) {
                warning2(numericEmpty, diff);
              }
            } else if (type === name) {
              if (terminated && !entity) {
                warning2(namedUnknown, 1);
              } else {
                if (entityCharacters !== characters) {
                  end = begin + entityCharacters.length;
                  diff = 1 + end - begin;
                  terminated = false;
                }
                if (!terminated) {
                  reason = entityCharacters ? namedNotTerminated : namedEmpty;
                  if (settings.attribute) {
                    following = value.charCodeAt(end);
                    if (following === equalsTo) {
                      warning2(reason, diff);
                      entity = null;
                    } else if (alphanumerical(following)) {
                      entity = null;
                    } else {
                      warning2(reason, diff);
                    }
                  } else {
                    warning2(reason, diff);
                  }
                }
              }
              reference = entity;
            } else {
              if (!terminated) {
                warning2(numericNotTerminated, diff);
              }
              reference = parseInt(characters, bases[type]);
              if (prohibited(reference)) {
                warning2(numericProhibited, diff);
                reference = fromCharCode(replacementCharacter);
              } else if (reference in invalid) {
                warning2(numericDisallowed, diff);
                reference = invalid[reference];
              } else {
                output = "";
                if (disallowed(reference)) {
                  warning2(numericDisallowed, diff);
                }
                if (reference > 65535) {
                  reference -= 65536;
                  output += fromCharCode(reference >>> (10 & 1023) | 55296);
                  reference = 56320 | reference & 1023;
                }
                reference = output + fromCharCode(reference);
              }
            }
            if (reference) {
              flush();
              prev = now();
              index2 = end - 1;
              column += end - start + 1;
              result.push(reference);
              next = now();
              next.offset++;
              if (handleReference) {
                handleReference.call(
                  referenceContext,
                  reference,
                  { start: prev, end: next },
                  value.slice(start - 1, end)
                );
              }
              prev = next;
            } else {
              characters = value.slice(start - 1, end);
              queue += characters;
              column += characters.length;
              index2 = end - 1;
            }
          } else {
            if (character === 10) {
              line++;
              lines++;
              column = 0;
            }
            if (character === character) {
              queue += fromCharCode(character);
              column++;
            } else {
              flush();
            }
          }
        }
        return result.join("");
        function now() {
          return {
            line,
            column,
            offset: index2 + (pos.offset || 0)
          };
        }
        function parseError(code3, offset) {
          var position5 = now();
          position5.column += offset;
          position5.offset += offset;
          handleWarning.call(warningContext, messages[code3], position5, code3);
        }
        function flush() {
          if (queue) {
            result.push(queue);
            if (handleText) {
              handleText.call(textContext, queue, { start: prev, end: now() });
            }
            queue = "";
          }
        }
      }
      function prohibited(code3) {
        return code3 >= 55296 && code3 <= 57343 || code3 > 1114111;
      }
      function disallowed(code3) {
        return code3 >= 1 && code3 <= 8 || code3 === 11 || code3 >= 13 && code3 <= 31 || code3 >= 127 && code3 <= 159 || code3 >= 64976 && code3 <= 65007 || (code3 & 65535) === 65535 || (code3 & 65535) === 65534;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/node_modules/prismjs/components/prism-core.js
  var require_prism_core = __commonJS({
    "../ecopan_bot/node_modules/refractor/node_modules/prismjs/components/prism-core.js"(exports, module) {
      var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
      var Prism = function(_self2) {
        var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
        var uniqueId = 0;
        var plainTextGrammar = {};
        var _ = {
          manual: _self2.Prism && _self2.Prism.manual,
          disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
          util: {
            encode: function encode(tokens2) {
              if (tokens2 instanceof Token) {
                return new Token(tokens2.type, encode(tokens2.content), tokens2.alias);
              } else if (Array.isArray(tokens2)) {
                return tokens2.map(encode);
              } else {
                return tokens2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
              }
            },
            type: function(o) {
              return Object.prototype.toString.call(o).slice(8, -1);
            },
            objId: function(obj) {
              if (!obj["__id"]) {
                Object.defineProperty(obj, "__id", { value: ++uniqueId });
              }
              return obj["__id"];
            },
            clone: function deepClone(o, visited) {
              visited = visited || {};
              var clone;
              var id4;
              switch (_.util.type(o)) {
                case "Object":
                  id4 = _.util.objId(o);
                  if (visited[id4]) {
                    return visited[id4];
                  }
                  clone = {};
                  visited[id4] = clone;
                  for (var key in o) {
                    if (o.hasOwnProperty(key)) {
                      clone[key] = deepClone(o[key], visited);
                    }
                  }
                  return clone;
                case "Array":
                  id4 = _.util.objId(o);
                  if (visited[id4]) {
                    return visited[id4];
                  }
                  clone = [];
                  visited[id4] = clone;
                  o.forEach(function(v, i) {
                    clone[i] = deepClone(v, visited);
                  });
                  return clone;
                default:
                  return o;
              }
            },
            getLanguage: function(element4) {
              while (element4) {
                var m = lang.exec(element4.className);
                if (m) {
                  return m[1].toLowerCase();
                }
                element4 = element4.parentElement;
              }
              return "none";
            },
            setLanguage: function(element4, language) {
              element4.className = element4.className.replace(RegExp(lang, "gi"), "");
              element4.classList.add("language-" + language);
            },
            currentScript: function() {
              if (typeof document === "undefined") {
                return null;
              }
              if ("currentScript" in document && 1 < 2) {
                return document.currentScript;
              }
              try {
                throw new Error();
              } catch (err) {
                var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err.stack) || [])[1];
                if (src) {
                  var scripts = document.getElementsByTagName("script");
                  for (var i in scripts) {
                    if (scripts[i].src == src) {
                      return scripts[i];
                    }
                  }
                }
                return null;
              }
            },
            isActive: function(element4, className, defaultActivation) {
              var no = "no-" + className;
              while (element4) {
                var classList = element4.classList;
                if (classList.contains(className)) {
                  return true;
                }
                if (classList.contains(no)) {
                  return false;
                }
                element4 = element4.parentElement;
              }
              return !!defaultActivation;
            }
          },
          languages: {
            plain: plainTextGrammar,
            plaintext: plainTextGrammar,
            text: plainTextGrammar,
            txt: plainTextGrammar,
            extend: function(id4, redef) {
              var lang2 = _.util.clone(_.languages[id4]);
              for (var key in redef) {
                lang2[key] = redef[key];
              }
              return lang2;
            },
            insertBefore: function(inside, before, insert, root3) {
              root3 = root3 || _.languages;
              var grammar = root3[inside];
              var ret = {};
              for (var token in grammar) {
                if (grammar.hasOwnProperty(token)) {
                  if (token == before) {
                    for (var newToken in insert) {
                      if (insert.hasOwnProperty(newToken)) {
                        ret[newToken] = insert[newToken];
                      }
                    }
                  }
                  if (!insert.hasOwnProperty(token)) {
                    ret[token] = grammar[token];
                  }
                }
              }
              var old = root3[inside];
              root3[inside] = ret;
              _.languages.DFS(_.languages, function(key, value) {
                if (value === old && key != inside) {
                  this[key] = ret;
                }
              });
              return ret;
            },
            DFS: function DFS(o, callback, type, visited) {
              visited = visited || {};
              var objId = _.util.objId;
              for (var i in o) {
                if (o.hasOwnProperty(i)) {
                  callback.call(o, i, o[i], type || i);
                  var property = o[i];
                  var propertyType = _.util.type(property);
                  if (propertyType === "Object" && !visited[objId(property)]) {
                    visited[objId(property)] = true;
                    DFS(property, callback, null, visited);
                  } else if (propertyType === "Array" && !visited[objId(property)]) {
                    visited[objId(property)] = true;
                    DFS(property, callback, i, visited);
                  }
                }
              }
            }
          },
          plugins: {},
          highlightAll: function(async, callback) {
            _.highlightAllUnder(document, async, callback);
          },
          highlightAllUnder: function(container2, async, callback) {
            var env = {
              callback,
              container: container2,
              selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
            };
            _.hooks.run("before-highlightall", env);
            env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
            _.hooks.run("before-all-elements-highlight", env);
            for (var i = 0, element4; element4 = env.elements[i++]; ) {
              _.highlightElement(element4, async === true, env.callback);
            }
          },
          highlightElement: function(element4, async, callback) {
            var language = _.util.getLanguage(element4);
            var grammar = _.languages[language];
            _.util.setLanguage(element4, language);
            var parent = element4.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre") {
              _.util.setLanguage(parent, language);
            }
            var code3 = element4.textContent;
            var env = {
              element: element4,
              language,
              grammar,
              code: code3
            };
            function insertHighlightedCode(highlightedCode) {
              env.highlightedCode = highlightedCode;
              _.hooks.run("before-insert", env);
              env.element.innerHTML = env.highlightedCode;
              _.hooks.run("after-highlight", env);
              _.hooks.run("complete", env);
              callback && callback.call(env.element);
            }
            _.hooks.run("before-sanity-check", env);
            parent = env.element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre" && !parent.hasAttribute("tabindex")) {
              parent.setAttribute("tabindex", "0");
            }
            if (!env.code) {
              _.hooks.run("complete", env);
              callback && callback.call(env.element);
              return;
            }
            _.hooks.run("before-highlight", env);
            if (!env.grammar) {
              insertHighlightedCode(_.util.encode(env.code));
              return;
            }
            if (async && _self2.Worker) {
              var worker = new Worker(_.filename);
              worker.onmessage = function(evt) {
                insertHighlightedCode(evt.data);
              };
              worker.postMessage(JSON.stringify({
                language: env.language,
                code: env.code,
                immediateClose: true
              }));
            } else {
              insertHighlightedCode(_.highlight(env.code, env.grammar, env.language));
            }
          },
          highlight: function(text6, grammar, language) {
            var env = {
              code: text6,
              grammar,
              language
            };
            _.hooks.run("before-tokenize", env);
            if (!env.grammar) {
              throw new Error('The language "' + env.language + '" has no grammar.');
            }
            env.tokens = _.tokenize(env.code, env.grammar);
            _.hooks.run("after-tokenize", env);
            return Token.stringify(_.util.encode(env.tokens), env.language);
          },
          tokenize: function(text6, grammar) {
            var rest = grammar.rest;
            if (rest) {
              for (var token in rest) {
                grammar[token] = rest[token];
              }
              delete grammar.rest;
            }
            var tokenList = new LinkedList();
            addAfter(tokenList, tokenList.head, text6);
            matchGrammar(text6, tokenList, grammar, tokenList.head, 0);
            return toArray(tokenList);
          },
          hooks: {
            all: {},
            add: function(name, callback) {
              var hooks = _.hooks.all;
              hooks[name] = hooks[name] || [];
              hooks[name].push(callback);
            },
            run: function(name, env) {
              var callbacks = _.hooks.all[name];
              if (!callbacks || !callbacks.length) {
                return;
              }
              for (var i = 0, callback; callback = callbacks[i++]; ) {
                callback(env);
              }
            }
          },
          Token
        };
        _self2.Prism = _;
        function Token(type, content3, alias, matchedStr) {
          this.type = type;
          this.content = content3;
          this.alias = alias;
          this.length = (matchedStr || "").length | 0;
        }
        Token.stringify = function stringify3(o, language) {
          if (typeof o == "string") {
            return o;
          }
          if (Array.isArray(o)) {
            var s2 = "";
            o.forEach(function(e) {
              s2 += stringify3(e, language);
            });
            return s2;
          }
          var env = {
            type: o.type,
            content: stringify3(o.content, language),
            tag: "span",
            classes: ["token", o.type],
            attributes: {},
            language
          };
          var aliases = o.alias;
          if (aliases) {
            if (Array.isArray(aliases)) {
              Array.prototype.push.apply(env.classes, aliases);
            } else {
              env.classes.push(aliases);
            }
          }
          _.hooks.run("wrap", env);
          var attributes2 = "";
          for (var name in env.attributes) {
            attributes2 += " " + name + '="' + (env.attributes[name] || "").replace(/"/g, "&quot;") + '"';
          }
          return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes2 + ">" + env.content + "</" + env.tag + ">";
        };
        function matchPattern(pattern, pos, text6, lookbehind) {
          pattern.lastIndex = pos;
          var match = pattern.exec(text6);
          if (match && lookbehind && match[1]) {
            var lookbehindLength = match[1].length;
            match.index += lookbehindLength;
            match[0] = match[0].slice(lookbehindLength);
          }
          return match;
        }
        function matchGrammar(text6, tokenList, grammar, startNode, startPos, rematch) {
          for (var token in grammar) {
            if (!grammar.hasOwnProperty(token) || !grammar[token]) {
              continue;
            }
            var patterns = grammar[token];
            patterns = Array.isArray(patterns) ? patterns : [patterns];
            for (var j = 0; j < patterns.length; ++j) {
              if (rematch && rematch.cause == token + "," + j) {
                return;
              }
              var patternObj = patterns[j];
              var inside = patternObj.inside;
              var lookbehind = !!patternObj.lookbehind;
              var greedy = !!patternObj.greedy;
              var alias = patternObj.alias;
              if (greedy && !patternObj.pattern.global) {
                var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
                patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
              }
              var pattern = patternObj.pattern || patternObj;
              for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
                if (rematch && pos >= rematch.reach) {
                  break;
                }
                var str = currentNode.value;
                if (tokenList.length > text6.length) {
                  return;
                }
                if (str instanceof Token) {
                  continue;
                }
                var removeCount = 1;
                var match;
                if (greedy) {
                  match = matchPattern(pattern, pos, text6, lookbehind);
                  if (!match || match.index >= text6.length) {
                    break;
                  }
                  var from = match.index;
                  var to = match.index + match[0].length;
                  var p = pos;
                  p += currentNode.value.length;
                  while (from >= p) {
                    currentNode = currentNode.next;
                    p += currentNode.value.length;
                  }
                  p -= currentNode.value.length;
                  pos = p;
                  if (currentNode.value instanceof Token) {
                    continue;
                  }
                  for (var k = currentNode; k !== tokenList.tail && (p < to || typeof k.value === "string"); k = k.next) {
                    removeCount++;
                    p += k.value.length;
                  }
                  removeCount--;
                  str = text6.slice(pos, p);
                  match.index -= pos;
                } else {
                  match = matchPattern(pattern, 0, str, lookbehind);
                  if (!match) {
                    continue;
                  }
                }
                var from = match.index;
                var matchStr = match[0];
                var before = str.slice(0, from);
                var after = str.slice(from + matchStr.length);
                var reach = pos + str.length;
                if (rematch && reach > rematch.reach) {
                  rematch.reach = reach;
                }
                var removeFrom = currentNode.prev;
                if (before) {
                  removeFrom = addAfter(tokenList, removeFrom, before);
                  pos += before.length;
                }
                removeRange(tokenList, removeFrom, removeCount);
                var wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);
                currentNode = addAfter(tokenList, removeFrom, wrapped);
                if (after) {
                  addAfter(tokenList, currentNode, after);
                }
                if (removeCount > 1) {
                  var nestedRematch = {
                    cause: token + "," + j,
                    reach
                  };
                  matchGrammar(text6, tokenList, grammar, currentNode.prev, pos, nestedRematch);
                  if (rematch && nestedRematch.reach > rematch.reach) {
                    rematch.reach = nestedRematch.reach;
                  }
                }
              }
            }
          }
        }
        function LinkedList() {
          var head = { value: null, prev: null, next: null };
          var tail = { value: null, prev: head, next: null };
          head.next = tail;
          this.head = head;
          this.tail = tail;
          this.length = 0;
        }
        function addAfter(list4, node2, value) {
          var next = node2.next;
          var newNode = { value, prev: node2, next };
          node2.next = newNode;
          next.prev = newNode;
          list4.length++;
          return newNode;
        }
        function removeRange(list4, node2, count) {
          var next = node2.next;
          for (var i = 0; i < count && next !== list4.tail; i++) {
            next = next.next;
          }
          node2.next = next;
          next.prev = node2;
          list4.length -= i;
        }
        function toArray(list4) {
          var array = [];
          var node2 = list4.head.next;
          while (node2 !== list4.tail) {
            array.push(node2.value);
            node2 = node2.next;
          }
          return array;
        }
        if (!_self2.document) {
          if (!_self2.addEventListener) {
            return _;
          }
          if (!_.disableWorkerMessageHandler) {
            _self2.addEventListener("message", function(evt) {
              var message = JSON.parse(evt.data);
              var lang2 = message.language;
              var code3 = message.code;
              var immediateClose = message.immediateClose;
              _self2.postMessage(_.highlight(code3, _.languages[lang2], lang2));
              if (immediateClose) {
                _self2.close();
              }
            }, false);
          }
          return _;
        }
        var script = _.util.currentScript();
        if (script) {
          _.filename = script.src;
          if (script.hasAttribute("data-manual")) {
            _.manual = true;
          }
        }
        function highlightAutomaticallyCallback() {
          if (!_.manual) {
            _.highlightAll();
          }
        }
        if (!_.manual) {
          var readyState = document.readyState;
          if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
            document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
          } else {
            if (window.requestAnimationFrame) {
              window.requestAnimationFrame(highlightAutomaticallyCallback);
            } else {
              window.setTimeout(highlightAutomaticallyCallback, 16);
            }
          }
        }
        return _;
      }(_self);
      if (typeof module !== "undefined" && module.exports) {
        module.exports = Prism;
      }
      if (typeof global !== "undefined") {
        global.Prism = Prism;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/markup.js
  var require_markup = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/markup.js"(exports, module) {
      "use strict";
      module.exports = markup;
      markup.displayName = "markup";
      markup.aliases = ["html", "mathml", "svg", "xml", "ssml", "atom", "rss"];
      function markup(Prism) {
        Prism.languages.markup = {
          comment: {
            pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
            greedy: true
          },
          prolog: {
            pattern: /<\?[\s\S]+?\?>/,
            greedy: true
          },
          doctype: {
            pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
            greedy: true,
            inside: {
              "internal-subset": {
                pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
                lookbehind: true,
                greedy: true,
                inside: null
              },
              string: {
                pattern: /"[^"]*"|'[^']*'/,
                greedy: true
              },
              punctuation: /^<!|>$|[[\]]/,
              "doctype-tag": /^DOCTYPE/i,
              name: /[^\s<>'"]+/
            }
          },
          cdata: {
            pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
            greedy: true
          },
          tag: {
            pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
            greedy: true,
            inside: {
              tag: {
                pattern: /^<\/?[^\s>\/]+/,
                inside: {
                  punctuation: /^<\/?/,
                  namespace: /^[^\s>\/:]+:/
                }
              },
              "special-attr": [],
              "attr-value": {
                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
                inside: {
                  punctuation: [
                    {
                      pattern: /^=/,
                      alias: "attr-equals"
                    },
                    /"|'/
                  ]
                }
              },
              punctuation: /\/?>/,
              "attr-name": {
                pattern: /[^\s>\/]+/,
                inside: {
                  namespace: /^[^\s>\/:]+:/
                }
              }
            }
          },
          entity: [
            {
              pattern: /&[\da-z]{1,8};/i,
              alias: "named-entity"
            },
            /&#x?[\da-f]{1,8};/i
          ]
        };
        Prism.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism.languages.markup["entity"];
        Prism.languages.markup["doctype"].inside["internal-subset"].inside = Prism.languages.markup;
        Prism.hooks.add("wrap", function(env) {
          if (env.type === "entity") {
            env.attributes["title"] = env.content.value.replace(/&amp;/, "&");
          }
        });
        Object.defineProperty(Prism.languages.markup.tag, "addInlined", {
          value: function addInlined(tagName, lang) {
            var includedCdataInside = {};
            includedCdataInside["language-" + lang] = {
              pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
              lookbehind: true,
              inside: Prism.languages[lang]
            };
            includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
            var inside = {
              "included-cdata": {
                pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
                inside: includedCdataInside
              }
            };
            inside["language-" + lang] = {
              pattern: /[\s\S]+/,
              inside: Prism.languages[lang]
            };
            var def = {};
            def[tagName] = {
              pattern: RegExp(
                /(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(
                  /__/g,
                  function() {
                    return tagName;
                  }
                ),
                "i"
              ),
              lookbehind: true,
              greedy: true,
              inside
            };
            Prism.languages.insertBefore("markup", "cdata", def);
          }
        });
        Object.defineProperty(Prism.languages.markup.tag, "addAttribute", {
          value: function(attrName, lang) {
            Prism.languages.markup.tag.inside["special-attr"].push({
              pattern: RegExp(
                /(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
                "i"
              ),
              lookbehind: true,
              inside: {
                "attr-name": /^[^\s=]+/,
                "attr-value": {
                  pattern: /=[\s\S]+/,
                  inside: {
                    value: {
                      pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                      lookbehind: true,
                      alias: [lang, "language-" + lang],
                      inside: Prism.languages[lang]
                    },
                    punctuation: [
                      {
                        pattern: /^=/,
                        alias: "attr-equals"
                      },
                      /"|'/
                    ]
                  }
                }
              }
            });
          }
        });
        Prism.languages.html = Prism.languages.markup;
        Prism.languages.mathml = Prism.languages.markup;
        Prism.languages.svg = Prism.languages.markup;
        Prism.languages.xml = Prism.languages.extend("markup", {});
        Prism.languages.ssml = Prism.languages.xml;
        Prism.languages.atom = Prism.languages.xml;
        Prism.languages.rss = Prism.languages.xml;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/css.js
  var require_css = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/css.js"(exports, module) {
      "use strict";
      module.exports = css3;
      css3.displayName = "css";
      css3.aliases = [];
      function css3(Prism) {
        ;
        (function(Prism2) {
          var string3 = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
          Prism2.languages.css = {
            comment: /\/\*[\s\S]*?\*\//,
            atrule: {
              pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
              inside: {
                rule: /^@[\w-]+/,
                "selector-function-argument": {
                  pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                  lookbehind: true,
                  alias: "selector"
                },
                keyword: {
                  pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                  lookbehind: true
                }
              }
            },
            url: {
              pattern: RegExp(
                "\\burl\\((?:" + string3.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)",
                "i"
              ),
              greedy: true,
              inside: {
                function: /^url/i,
                punctuation: /^\(|\)$/,
                string: {
                  pattern: RegExp("^" + string3.source + "$"),
                  alias: "url"
                }
              }
            },
            selector: {
              pattern: RegExp(
                `(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string3.source + ")*(?=\\s*\\{)"
              ),
              lookbehind: true
            },
            string: {
              pattern: string3,
              greedy: true
            },
            property: {
              pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
              lookbehind: true
            },
            important: /!important\b/i,
            function: {
              pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
              lookbehind: true
            },
            punctuation: /[(){};:,]/
          };
          Prism2.languages.css["atrule"].inside.rest = Prism2.languages.css;
          var markup = Prism2.languages.markup;
          if (markup) {
            markup.tag.addInlined("style", "css");
            markup.tag.addAttribute("style", "css");
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/clike.js
  var require_clike = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/clike.js"(exports, module) {
      "use strict";
      module.exports = clike;
      clike.displayName = "clike";
      clike.aliases = [];
      function clike(Prism) {
        Prism.languages.clike = {
          comment: [
            {
              pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          string: {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
            lookbehind: true,
            inside: {
              punctuation: /[.\\]/
            }
          },
          keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
          boolean: /\b(?:false|true)\b/,
          function: /\b\w+(?=\()/,
          number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
          operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
          punctuation: /[{}[\];(),.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/javascript.js
  var require_javascript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/javascript.js"(exports, module) {
      "use strict";
      module.exports = javascript;
      javascript.displayName = "javascript";
      javascript.aliases = ["js"];
      function javascript(Prism) {
        Prism.languages.javascript = Prism.languages.extend("clike", {
          "class-name": [
            Prism.languages.clike["class-name"],
            {
              pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
              lookbehind: true
            }
          ],
          keyword: [
            {
              pattern: /((?:^|\})\s*)catch\b/,
              lookbehind: true
            },
            {
              pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
              lookbehind: true
            }
          ],
          function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
          number: {
            pattern: RegExp(
              /(^|[^\w$])/.source + "(?:" + (/NaN|Infinity/.source + "|" + /0[bB][01]+(?:_[01]+)*n?/.source + "|" + /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + /\d+(?:_\d+)*n/.source + "|" + /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source
            ),
            lookbehind: true
          },
          operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
        });
        Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
        Prism.languages.insertBefore("javascript", "keyword", {
          regex: {
            pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
            lookbehind: true,
            greedy: true,
            inside: {
              "regex-source": {
                pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
                lookbehind: true,
                alias: "language-regex",
                inside: Prism.languages.regex
              },
              "regex-delimiter": /^\/|\/$/,
              "regex-flags": /^[a-z]+$/
            }
          },
          "function-variable": {
            pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
            alias: "function"
          },
          parameter: [
            {
              pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
              lookbehind: true,
              inside: Prism.languages.javascript
            },
            {
              pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
              lookbehind: true,
              inside: Prism.languages.javascript
            },
            {
              pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
              lookbehind: true,
              inside: Prism.languages.javascript
            },
            {
              pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
              lookbehind: true,
              inside: Prism.languages.javascript
            }
          ],
          constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
        });
        Prism.languages.insertBefore("javascript", "string", {
          hashbang: {
            pattern: /^#!.*/,
            greedy: true,
            alias: "comment"
          },
          "template-string": {
            pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
            greedy: true,
            inside: {
              "template-punctuation": {
                pattern: /^`|`$/,
                alias: "string"
              },
              interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
                lookbehind: true,
                inside: {
                  "interpolation-punctuation": {
                    pattern: /^\$\{|\}$/,
                    alias: "punctuation"
                  },
                  rest: Prism.languages.javascript
                }
              },
              string: /[\s\S]+/
            }
          },
          "string-property": {
            pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
            lookbehind: true,
            greedy: true,
            alias: "property"
          }
        });
        Prism.languages.insertBefore("javascript", "operator", {
          "literal-property": {
            pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
            lookbehind: true,
            alias: "property"
          }
        });
        if (Prism.languages.markup) {
          Prism.languages.markup.tag.addInlined("script", "javascript");
          Prism.languages.markup.tag.addAttribute(
            /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
            "javascript"
          );
        }
        Prism.languages.js = Prism.languages.javascript;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/core.js
  var require_core = __commonJS({
    "../ecopan_bot/node_modules/refractor/core.js"(exports, module) {
      "use strict";
      var ctx = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof window === "object" ? window : typeof global === "object" ? global : {};
      var restore = capture();
      ctx.Prism = { manual: true, disableWorkerMessageHandler: true };
      var h2 = require_hastscript();
      var decode2 = require_parse_entities();
      var Prism = require_prism_core();
      var markup = require_markup();
      var css3 = require_css();
      var clike = require_clike();
      var js = require_javascript();
      restore();
      var own13 = {}.hasOwnProperty;
      function Refractor() {
      }
      Refractor.prototype = Prism;
      var refract = new Refractor();
      module.exports = refract;
      refract.highlight = highlight;
      refract.register = register;
      refract.alias = alias;
      refract.registered = registered;
      refract.listLanguages = listLanguages;
      register(markup);
      register(css3);
      register(clike);
      register(js);
      refract.util.encode = encode;
      refract.Token.stringify = stringify3;
      function register(grammar) {
        if (typeof grammar !== "function" || !grammar.displayName) {
          throw new Error("Expected `function` for `grammar`, got `" + grammar + "`");
        }
        if (refract.languages[grammar.displayName] === void 0) {
          grammar(refract);
        }
      }
      function alias(name, alias2) {
        var languages = refract.languages;
        var map2 = name;
        var key;
        var list4;
        var length;
        var index2;
        if (alias2) {
          map2 = {};
          map2[name] = alias2;
        }
        for (key in map2) {
          list4 = map2[key];
          list4 = typeof list4 === "string" ? [list4] : list4;
          length = list4.length;
          index2 = -1;
          while (++index2 < length) {
            languages[list4[index2]] = languages[key];
          }
        }
      }
      function highlight(value, name) {
        var sup = Prism.highlight;
        var grammar;
        if (typeof value !== "string") {
          throw new Error("Expected `string` for `value`, got `" + value + "`");
        }
        if (refract.util.type(name) === "Object") {
          grammar = name;
          name = null;
        } else {
          if (typeof name !== "string") {
            throw new Error("Expected `string` for `name`, got `" + name + "`");
          }
          if (own13.call(refract.languages, name)) {
            grammar = refract.languages[name];
          } else {
            throw new Error("Unknown language: `" + name + "` is not registered");
          }
        }
        return sup.call(this, value, grammar, name);
      }
      function registered(language) {
        if (typeof language !== "string") {
          throw new Error("Expected `string` for `language`, got `" + language + "`");
        }
        return own13.call(refract.languages, language);
      }
      function listLanguages() {
        var languages = refract.languages;
        var list4 = [];
        var language;
        for (language in languages) {
          if (own13.call(languages, language) && typeof languages[language] === "object") {
            list4.push(language);
          }
        }
        return list4;
      }
      function stringify3(value, language, parent) {
        var env;
        if (typeof value === "string") {
          return { type: "text", value };
        }
        if (refract.util.type(value) === "Array") {
          return stringifyAll(value, language);
        }
        env = {
          type: value.type,
          content: refract.Token.stringify(value.content, language, parent),
          tag: "span",
          classes: ["token", value.type],
          attributes: {},
          language,
          parent
        };
        if (value.alias) {
          env.classes = env.classes.concat(value.alias);
        }
        refract.hooks.run("wrap", env);
        return h2(
          env.tag + "." + env.classes.join("."),
          attributes2(env.attributes),
          env.content
        );
      }
      function stringifyAll(values, language) {
        var result = [];
        var length = values.length;
        var index2 = -1;
        var value;
        while (++index2 < length) {
          value = values[index2];
          if (value !== "" && value !== null && value !== void 0) {
            result.push(value);
          }
        }
        index2 = -1;
        length = result.length;
        while (++index2 < length) {
          value = result[index2];
          result[index2] = refract.Token.stringify(value, language, result);
        }
        return result;
      }
      function encode(tokens2) {
        return tokens2;
      }
      function attributes2(attrs) {
        var key;
        for (key in attrs) {
          attrs[key] = decode2(attrs[key]);
        }
        return attrs;
      }
      function capture() {
        var defined = "Prism" in ctx;
        var current = defined ? ctx.Prism : void 0;
        return restore2;
        function restore2() {
          if (defined) {
            ctx.Prism = current;
          } else {
            delete ctx.Prism;
          }
          defined = void 0;
          current = void 0;
        }
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/abap.js
  var require_abap = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/abap.js"(exports, module) {
      "use strict";
      module.exports = abap;
      abap.displayName = "abap";
      abap.aliases = [];
      function abap(Prism) {
        Prism.languages.abap = {
          comment: /^\*.*/m,
          string: /(`|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
          "string-template": {
            pattern: /([|}])(?:\\.|[^\\|{\r\n])*(?=[|{])/,
            lookbehind: true,
            alias: "string"
          },
          "eol-comment": {
            pattern: /(^|\s)".*/m,
            lookbehind: true,
            alias: "comment"
          },
          keyword: {
            pattern: /(\s|\.|^)(?:SCIENTIFIC_WITH_LEADING_ZERO|SCALE_PRESERVING_SCIENTIFIC|RMC_COMMUNICATION_FAILURE|END-ENHANCEMENT-SECTION|MULTIPLY-CORRESPONDING|SUBTRACT-CORRESPONDING|VERIFICATION-MESSAGE|DIVIDE-CORRESPONDING|ENHANCEMENT-SECTION|CURRENCY_CONVERSION|RMC_SYSTEM_FAILURE|START-OF-SELECTION|MOVE-CORRESPONDING|RMC_INVALID_STATUS|CUSTOMER-FUNCTION|END-OF-DEFINITION|ENHANCEMENT-POINT|SYSTEM-EXCEPTIONS|ADD-CORRESPONDING|SCALE_PRESERVING|SELECTION-SCREEN|CURSOR-SELECTION|END-OF-SELECTION|LOAD-OF-PROGRAM|SCROLL-BOUNDARY|SELECTION-TABLE|EXCEPTION-TABLE|IMPLEMENTATIONS|PARAMETER-TABLE|RIGHT-JUSTIFIED|UNIT_CONVERSION|AUTHORITY-CHECK|LIST-PROCESSING|SIGN_AS_POSTFIX|COL_BACKGROUND|IMPLEMENTATION|INTERFACE-POOL|TRANSFORMATION|IDENTIFICATION|ENDENHANCEMENT|LINE-SELECTION|INITIALIZATION|LEFT-JUSTIFIED|SELECT-OPTIONS|SELECTION-SETS|COMMUNICATION|CORRESPONDING|DECIMAL_SHIFT|PRINT-CONTROL|VALUE-REQUEST|CHAIN-REQUEST|FUNCTION-POOL|FIELD-SYMBOLS|FUNCTIONALITY|INVERTED-DATE|SELECTION-SET|CLASS-METHODS|OUTPUT-LENGTH|CLASS-CODING|COL_NEGATIVE|ERRORMESSAGE|FIELD-GROUPS|HELP-REQUEST|NO-EXTENSION|NO-TOPOFPAGE|REDEFINITION|DISPLAY-MODE|ENDINTERFACE|EXIT-COMMAND|FIELD-SYMBOL|NO-SCROLLING|SHORTDUMP-ID|ACCESSPOLICY|CLASS-EVENTS|COL_POSITIVE|DECLARATIONS|ENHANCEMENTS|FILTER-TABLE|SWITCHSTATES|SYNTAX-CHECK|TRANSPORTING|ASYNCHRONOUS|SYNTAX-TRACE|TOKENIZATION|USER-COMMAND|WITH-HEADING|ABAP-SOURCE|BREAK-POINT|CHAIN-INPUT|COMPRESSION|FIXED-POINT|NEW-SECTION|NON-UNICODE|OCCURRENCES|RESPONSIBLE|SYSTEM-CALL|TRACE-TABLE|ABBREVIATED|CHAR-TO-HEX|END-OF-FILE|ENDFUNCTION|ENVIRONMENT|ASSOCIATION|COL_HEADING|EDITOR-CALL|END-OF-PAGE|ENGINEERING|IMPLEMENTED|INTENSIFIED|RADIOBUTTON|SYSTEM-EXIT|TOP-OF-PAGE|TRANSACTION|APPLICATION|CONCATENATE|DESTINATION|ENHANCEMENT|IMMEDIATELY|NO-GROUPING|PRECOMPILED|REPLACEMENT|TITLE-LINES|ACTIVATION|BYTE-ORDER|CLASS-POOL|CONNECTION|CONVERSION|DEFINITION|DEPARTMENT|EXPIRATION|INHERITING|MESSAGE-ID|NO-HEADING|PERFORMING|QUEUE-ONLY|RIGHTSPACE|SCIENTIFIC|STATUSINFO|STRUCTURES|SYNCPOINTS|WITH-TITLE|ATTRIBUTES|BOUNDARIES|CLASS-DATA|COL_NORMAL|DD\/MM\/YYYY|DESCENDING|INTERFACES|LINE-COUNT|MM\/DD\/YYYY|NON-UNIQUE|PRESERVING|SELECTIONS|STATEMENTS|SUBROUTINE|TRUNCATION|TYPE-POOLS|ARITHMETIC|BACKGROUND|ENDPROVIDE|EXCEPTIONS|IDENTIFIER|INDEX-LINE|OBLIGATORY|PARAMETERS|PERCENTAGE|PUSHBUTTON|RESOLUTION|COMPONENTS|DEALLOCATE|DISCONNECT|DUPLICATES|FIRST-LINE|HEAD-LINES|NO-DISPLAY|OCCURRENCE|RESPECTING|RETURNCODE|SUBMATCHES|TRACE-FILE|ASCENDING|BYPASSING|ENDMODULE|EXCEPTION|EXCLUDING|EXPORTING|INCREMENT|MATCHCODE|PARAMETER|PARTIALLY|PREFERRED|REFERENCE|REPLACING|RETURNING|SELECTION|SEPARATED|SPECIFIED|STATEMENT|TIMESTAMP|TYPE-POOL|ACCEPTING|APPENDAGE|ASSIGNING|COL_GROUP|COMPARING|CONSTANTS|DANGEROUS|IMPORTING|INSTANCES|LEFTSPACE|LOG-POINT|QUICKINFO|READ-ONLY|SCROLLING|SQLSCRIPT|STEP-LOOP|TOP-LINES|TRANSLATE|APPENDING|AUTHORITY|CHARACTER|COMPONENT|CONDITION|DIRECTORY|DUPLICATE|MESSAGING|RECEIVING|SUBSCREEN|ACCORDING|COL_TOTAL|END-LINES|ENDMETHOD|ENDSELECT|EXPANDING|EXTENSION|INCLUDING|INFOTYPES|INTERFACE|INTERVALS|LINE-SIZE|PF-STATUS|PROCEDURE|PROTECTED|REQUESTED|RESUMABLE|RIGHTPLUS|SAP-SPOOL|SECONDARY|STRUCTURE|SUBSTRING|TABLEVIEW|NUMOFCHAR|ADJACENT|ANALYSIS|ASSIGNED|BACKWARD|CHANNELS|CHECKBOX|CONTINUE|CRITICAL|DATAINFO|DD\/MM\/YY|DURATION|ENCODING|ENDCLASS|FUNCTION|LEFTPLUS|LINEFEED|MM\/DD\/YY|OVERFLOW|RECEIVED|SKIPPING|SORTABLE|STANDARD|SUBTRACT|SUPPRESS|TABSTRIP|TITLEBAR|TRUNCATE|UNASSIGN|WHENEVER|ANALYZER|COALESCE|COMMENTS|CONDENSE|DECIMALS|DEFERRED|ENDWHILE|EXPLICIT|KEYWORDS|MESSAGES|POSITION|PRIORITY|RECEIVER|RENAMING|TIMEZONE|TRAILING|ALLOCATE|CENTERED|CIRCULAR|CONTROLS|CURRENCY|DELETING|DESCRIBE|DISTANCE|ENDCATCH|EXPONENT|EXTENDED|GENERATE|IGNORING|INCLUDES|INTERNAL|MAJOR-ID|MODIFIER|NEW-LINE|OPTIONAL|PROPERTY|ROLLBACK|STARTING|SUPPLIED|ABSTRACT|CHANGING|CONTEXTS|CREATING|CUSTOMER|DATABASE|DAYLIGHT|DEFINING|DISTINCT|DIVISION|ENABLING|ENDCHAIN|ESCAPING|HARMLESS|IMPLICIT|INACTIVE|LANGUAGE|MINOR-ID|MULTIPLY|NEW-PAGE|NO-TITLE|POS_HIGH|SEPARATE|TEXTPOOL|TRANSFER|SELECTOR|DBMAXLEN|ITERATOR|ARCHIVE|BIT-XOR|BYTE-CO|COLLECT|COMMENT|CURRENT|DEFAULT|DISPLAY|ENDFORM|EXTRACT|LEADING|LISTBOX|LOCATOR|MEMBERS|METHODS|NESTING|POS_LOW|PROCESS|PROVIDE|RAISING|RESERVE|SECONDS|SUMMARY|VISIBLE|BETWEEN|BIT-AND|BYTE-CS|CLEANUP|COMPUTE|CONTROL|CONVERT|DATASET|ENDCASE|FORWARD|HEADERS|HOTSPOT|INCLUDE|INVERSE|KEEPING|NO-ZERO|OBJECTS|OVERLAY|PADDING|PATTERN|PROGRAM|REFRESH|SECTION|SUMMING|TESTING|VERSION|WINDOWS|WITHOUT|BIT-NOT|BYTE-CA|BYTE-NA|CASTING|CONTEXT|COUNTRY|DYNAMIC|ENABLED|ENDLOOP|EXECUTE|FRIENDS|HANDLER|HEADING|INITIAL|\*-INPUT|LOGFILE|MAXIMUM|MINIMUM|NO-GAPS|NO-SIGN|PRAGMAS|PRIMARY|PRIVATE|REDUCED|REPLACE|REQUEST|RESULTS|UNICODE|WARNING|ALIASES|BYTE-CN|BYTE-NS|CALLING|COL_KEY|COLUMNS|CONNECT|ENDEXEC|ENTRIES|EXCLUDE|FILTERS|FURTHER|HELP-ID|LOGICAL|MAPPING|MESSAGE|NAMETAB|OPTIONS|PACKAGE|PERFORM|RECEIVE|STATICS|VARYING|BINDING|CHARLEN|GREATER|XSTRLEN|ACCEPT|APPEND|DETAIL|ELSEIF|ENDING|ENDTRY|FORMAT|FRAMES|GIVING|HASHED|HEADER|IMPORT|INSERT|MARGIN|MODULE|NATIVE|OBJECT|OFFSET|REMOTE|RESUME|SAVING|SIMPLE|SUBMIT|TABBED|TOKENS|UNIQUE|UNPACK|UPDATE|WINDOW|YELLOW|ACTUAL|ASPECT|CENTER|CURSOR|DELETE|DIALOG|DIVIDE|DURING|ERRORS|EVENTS|EXTEND|FILTER|HANDLE|HAVING|IGNORE|LITTLE|MEMORY|NO-GAP|OCCURS|OPTION|PERSON|PLACES|PUBLIC|REDUCE|REPORT|RESULT|SINGLE|SORTED|SWITCH|SYNTAX|TARGET|VALUES|WRITER|ASSERT|BLOCKS|BOUNDS|BUFFER|CHANGE|COLUMN|COMMIT|CONCAT|COPIES|CREATE|DDMMYY|DEFINE|ENDIAN|ESCAPE|EXPAND|KERNEL|LAYOUT|LEGACY|LEVELS|MMDDYY|NUMBER|OUTPUT|RANGES|READER|RETURN|SCREEN|SEARCH|SELECT|SHARED|SOURCE|STABLE|STATIC|SUBKEY|SUFFIX|TABLES|UNWIND|YYMMDD|ASSIGN|BACKUP|BEFORE|BINARY|BIT-OR|BLANKS|CLIENT|CODING|COMMON|DEMAND|DYNPRO|EXCEPT|EXISTS|EXPORT|FIELDS|GLOBAL|GROUPS|LENGTH|LOCALE|MEDIUM|METHOD|MODIFY|NESTED|OTHERS|REJECT|SCROLL|SUPPLY|SYMBOL|ENDFOR|STRLEN|ALIGN|BEGIN|BOUND|ENDAT|ENTRY|EVENT|FINAL|FLUSH|GRANT|INNER|SHORT|USING|WRITE|AFTER|BLACK|BLOCK|CLOCK|COLOR|COUNT|DUMMY|EMPTY|ENDDO|ENDON|GREEN|INDEX|INOUT|LEAVE|LEVEL|LINES|MODIF|ORDER|OUTER|RANGE|RESET|RETRY|RIGHT|SMART|SPLIT|STYLE|TABLE|THROW|UNDER|UNTIL|UPPER|UTF-8|WHERE|ALIAS|BLANK|CLEAR|CLOSE|EXACT|FETCH|FIRST|FOUND|GROUP|LLANG|LOCAL|OTHER|REGEX|SPOOL|TITLE|TYPES|VALID|WHILE|ALPHA|BOXED|CATCH|CHAIN|CHECK|CLASS|COVER|ENDIF|EQUIV|FIELD|FLOOR|FRAME|INPUT|LOWER|MATCH|NODES|PAGES|PRINT|RAISE|ROUND|SHIFT|SPACE|SPOTS|STAMP|STATE|TASKS|TIMES|TRMAC|ULINE|UNION|VALUE|WIDTH|EQUAL|LOG10|TRUNC|BLOB|CASE|CEIL|CLOB|COND|EXIT|FILE|GAPS|HOLD|INCL|INTO|KEEP|KEYS|LAST|LINE|LONG|LPAD|MAIL|MODE|OPEN|PINK|READ|ROWS|TEST|THEN|ZERO|AREA|BACK|BADI|BYTE|CAST|EDIT|EXEC|FAIL|FIND|FKEQ|FONT|FREE|GKEQ|HIDE|INIT|ITNO|LATE|LOOP|MAIN|MARK|MOVE|NEXT|NULL|RISK|ROLE|UNIT|WAIT|ZONE|BASE|CALL|CODE|DATA|DATE|FKGE|GKGE|HIGH|KIND|LEFT|LIST|MASK|MESH|NAME|NODE|PACK|PAGE|POOL|SEND|SIGN|SIZE|SOME|STOP|TASK|TEXT|TIME|USER|VARY|WITH|WORD|BLUE|CONV|COPY|DEEP|ELSE|FORM|FROM|HINT|ICON|JOIN|LIKE|LOAD|ONLY|PART|SCAN|SKIP|SORT|TYPE|UNIX|VIEW|WHEN|WORK|ACOS|ASIN|ATAN|COSH|EACH|FRAC|LESS|RTTI|SINH|SQRT|TANH|AVG|BIT|DIV|ISO|LET|OUT|PAD|SQL|ALL|CI_|CPI|END|LOB|LPI|MAX|MIN|NEW|OLE|RUN|SET|\?TO|YES|ABS|ADD|AND|BIG|FOR|HDB|JOB|LOW|NOT|SAP|TRY|VIA|XML|ANY|GET|IDS|KEY|MOD|OFF|PUT|RAW|RED|REF|SUM|TAB|XSD|CNT|COS|EXP|LOG|SIN|TAN|XOR|AT|CO|CP|DO|GT|ID|IF|NS|OR|BT|CA|CS|GE|NA|NB|EQ|IN|LT|NE|NO|OF|ON|PF|TO|AS|BY|CN|IS|LE|NP|UP|E|I|M|O|Z|C|X)\b/i,
            lookbehind: true
          },
          number: /\b\d+\b/,
          operator: {
            pattern: /(\s)(?:\*\*?|<[=>]?|>=?|\?=|[-+\/=])(?=\s)/,
            lookbehind: true
          },
          "string-operator": {
            pattern: /(\s)&&?(?=\s)/,
            lookbehind: true,
            alias: "keyword"
          },
          "token-operator": [
            {
              pattern: /(\w)(?:->?|=>|[~|{}])(?=\w)/,
              lookbehind: true,
              alias: "punctuation"
            },
            {
              pattern: /[|{}]/,
              alias: "punctuation"
            }
          ],
          punctuation: /[,.:()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/abnf.js
  var require_abnf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/abnf.js"(exports, module) {
      "use strict";
      module.exports = abnf;
      abnf.displayName = "abnf";
      abnf.aliases = [];
      function abnf(Prism) {
        ;
        (function(Prism2) {
          var coreRules = "(?:ALPHA|BIT|CHAR|CR|CRLF|CTL|DIGIT|DQUOTE|HEXDIG|HTAB|LF|LWSP|OCTET|SP|VCHAR|WSP)";
          Prism2.languages.abnf = {
            comment: /;.*/,
            string: {
              pattern: /(?:%[is])?"[^"\n\r]*"/,
              greedy: true,
              inside: {
                punctuation: /^%[is]/
              }
            },
            range: {
              pattern: /%(?:b[01]+-[01]+|d\d+-\d+|x[A-F\d]+-[A-F\d]+)/i,
              alias: "number"
            },
            terminal: {
              pattern: /%(?:b[01]+(?:\.[01]+)*|d\d+(?:\.\d+)*|x[A-F\d]+(?:\.[A-F\d]+)*)/i,
              alias: "number"
            },
            repetition: {
              pattern: /(^|[^\w-])(?:\d*\*\d*|\d+)/,
              lookbehind: true,
              alias: "operator"
            },
            definition: {
              pattern: /(^[ \t]*)(?:[a-z][\w-]*|<[^<>\r\n]*>)(?=\s*=)/m,
              lookbehind: true,
              alias: "keyword",
              inside: {
                punctuation: /<|>/
              }
            },
            "core-rule": {
              pattern: RegExp(
                "(?:(^|[^<\\w-])" + coreRules + "|<" + coreRules + ">)(?![\\w-])",
                "i"
              ),
              lookbehind: true,
              alias: ["rule", "constant"],
              inside: {
                punctuation: /<|>/
              }
            },
            rule: {
              pattern: /(^|[^<\w-])[a-z][\w-]*|<[^<>\r\n]*>/i,
              lookbehind: true,
              inside: {
                punctuation: /<|>/
              }
            },
            operator: /=\/?|\//,
            punctuation: /[()\[\]]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/actionscript.js
  var require_actionscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/actionscript.js"(exports, module) {
      "use strict";
      module.exports = actionscript;
      actionscript.displayName = "actionscript";
      actionscript.aliases = [];
      function actionscript(Prism) {
        Prism.languages.actionscript = Prism.languages.extend("javascript", {
          keyword: /\b(?:as|break|case|catch|class|const|default|delete|do|dynamic|each|else|extends|final|finally|for|function|get|if|implements|import|in|include|instanceof|interface|internal|is|namespace|native|new|null|override|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|use|var|void|while|with)\b/,
          operator: /\+\+|--|(?:[+\-*\/%^]|&&?|\|\|?|<<?|>>?>?|[!=]=?)=?|[~?@]/
        });
        Prism.languages.actionscript["class-name"].alias = "function";
        delete Prism.languages.actionscript["parameter"];
        delete Prism.languages.actionscript["literal-property"];
        if (Prism.languages.markup) {
          Prism.languages.insertBefore("actionscript", "string", {
            xml: {
              pattern: /(^|[^.])<\/?\w+(?:\s+[^\s>\/=]+=("|')(?:\\[\s\S]|(?!\2)[^\\])*\2)*\s*\/?>/,
              lookbehind: true,
              inside: Prism.languages.markup
            }
          });
        }
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ada.js
  var require_ada = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ada.js"(exports, module) {
      "use strict";
      module.exports = ada;
      ada.displayName = "ada";
      ada.aliases = [];
      function ada(Prism) {
        Prism.languages.ada = {
          comment: /--.*/,
          string: /"(?:""|[^"\r\f\n])*"/,
          number: [
            {
              pattern: /\b\d(?:_?\d)*#[\dA-F](?:_?[\dA-F])*(?:\.[\dA-F](?:_?[\dA-F])*)?#(?:E[+-]?\d(?:_?\d)*)?/i
            },
            {
              pattern: /\b\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:E[+-]?\d(?:_?\d)*)?\b/i
            }
          ],
          "attr-name": /\b'\w+/,
          keyword: /\b(?:abort|abs|abstract|accept|access|aliased|all|and|array|at|begin|body|case|constant|declare|delay|delta|digits|do|else|elsif|end|entry|exception|exit|for|function|generic|goto|if|in|interface|is|limited|loop|mod|new|not|null|of|others|out|overriding|package|pragma|private|procedure|protected|raise|range|record|rem|renames|requeue|return|reverse|select|separate|some|subtype|synchronized|tagged|task|terminate|then|type|until|use|when|while|with|xor)\b/i,
          boolean: /\b(?:false|true)\b/i,
          operator: /<[=>]?|>=?|=>?|:=|\/=?|\*\*?|[&+-]/,
          punctuation: /\.\.?|[,;():]/,
          char: /'.'/,
          variable: /\b[a-z](?:\w)*\b/i
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/agda.js
  var require_agda = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/agda.js"(exports, module) {
      "use strict";
      module.exports = agda;
      agda.displayName = "agda";
      agda.aliases = [];
      function agda(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.agda = {
            comment: /\{-[\s\S]*?(?:-\}|$)|--.*/,
            string: {
              pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
              greedy: true
            },
            punctuation: /[(){}⦃⦄.;@]/,
            "class-name": {
              pattern: /((?:data|record) +)\S+/,
              lookbehind: true
            },
            function: {
              pattern: /(^[ \t]*)(?!\s)[^:\r\n]+(?=:)/m,
              lookbehind: true
            },
            operator: {
              pattern: /(^\s*|\s)(?:[=|:∀→λ\\?_]|->)(?=\s)/,
              lookbehind: true
            },
            keyword: /\b(?:Set|abstract|constructor|data|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\b/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/al.js
  var require_al = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/al.js"(exports, module) {
      "use strict";
      module.exports = al;
      al.displayName = "al";
      al.aliases = [];
      function al(Prism) {
        Prism.languages.al = {
          comment: /\/\/.*|\/\*[\s\S]*?\*\//,
          string: {
            pattern: /'(?:''|[^'\r\n])*'(?!')|"(?:""|[^"\r\n])*"(?!")/,
            greedy: true
          },
          function: {
            pattern: /(\b(?:event|procedure|trigger)\s+|(?:^|[^.])\.\s*)[a-z_]\w*(?=\s*\()/i,
            lookbehind: true
          },
          keyword: [
            /\b(?:array|asserterror|begin|break|case|do|downto|else|end|event|exit|for|foreach|function|if|implements|in|indataset|interface|internal|local|of|procedure|program|protected|repeat|runonclient|securityfiltering|suppressdispose|temporary|then|to|trigger|until|var|while|with|withevents)\b/i,
            /\b(?:action|actions|addafter|addbefore|addfirst|addlast|area|assembly|chartpart|codeunit|column|controladdin|cuegroup|customizes|dataitem|dataset|dotnet|elements|enum|enumextension|extends|field|fieldattribute|fieldelement|fieldgroup|fieldgroups|fields|filter|fixed|grid|group|key|keys|label|labels|layout|modify|moveafter|movebefore|movefirst|movelast|page|pagecustomization|pageextension|part|profile|query|repeater|report|requestpage|schema|separator|systempart|table|tableelement|tableextension|textattribute|textelement|type|usercontrol|value|xmlport)\b/i
          ],
          number: /\b(?:0x[\da-f]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?)(?:F|LL?|U(?:LL?)?)?\b/i,
          boolean: /\b(?:false|true)\b/i,
          variable: /\b(?:Curr(?:FieldNo|Page|Report)|x?Rec|RequestOptionsPage)\b/,
          "class-name": /\b(?:automation|biginteger|bigtext|blob|boolean|byte|char|clienttype|code|completiontriggererrorlevel|connectiontype|database|dataclassification|datascope|date|dateformula|datetime|decimal|defaultlayout|dialog|dictionary|dotnetassembly|dotnettypedeclaration|duration|errorinfo|errortype|executioncontext|executionmode|fieldclass|fieldref|fieldtype|file|filterpagebuilder|guid|httpclient|httpcontent|httpheaders|httprequestmessage|httpresponsemessage|instream|integer|joker|jsonarray|jsonobject|jsontoken|jsonvalue|keyref|list|moduledependencyinfo|moduleinfo|none|notification|notificationscope|objecttype|option|outstream|pageresult|record|recordid|recordref|reportformat|securityfilter|sessionsettings|tableconnectiontype|tablefilter|testaction|testfield|testfilterfield|testpage|testpermissions|testrequestpage|text|textbuilder|textconst|textencoding|time|transactionmodel|transactiontype|variant|verbosity|version|view|views|webserviceactioncontext|webserviceactionresultcode|xmlattribute|xmlattributecollection|xmlcdata|xmlcomment|xmldeclaration|xmldocument|xmldocumenttype|xmlelement|xmlnamespacemanager|xmlnametable|xmlnode|xmlnodelist|xmlprocessinginstruction|xmlreadoptions|xmltext|xmlwriteoptions)\b/i,
          operator: /\.\.|:[=:]|[-+*/]=?|<>|[<>]=?|=|\b(?:and|div|mod|not|or|xor)\b/i,
          punctuation: /[()\[\]{}:.;,]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/antlr4.js
  var require_antlr4 = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/antlr4.js"(exports, module) {
      "use strict";
      module.exports = antlr4;
      antlr4.displayName = "antlr4";
      antlr4.aliases = ["g4"];
      function antlr4(Prism) {
        Prism.languages.antlr4 = {
          comment: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
          string: {
            pattern: /'(?:\\.|[^\\'\r\n])*'/,
            greedy: true
          },
          "character-class": {
            pattern: /\[(?:\\.|[^\\\]\r\n])*\]/,
            greedy: true,
            alias: "regex",
            inside: {
              range: {
                pattern: /([^[]|(?:^|[^\\])(?:\\\\)*\\\[)-(?!\])/,
                lookbehind: true,
                alias: "punctuation"
              },
              escape: /\\(?:u(?:[a-fA-F\d]{4}|\{[a-fA-F\d]+\})|[pP]\{[=\w-]+\}|[^\r\nupP])/,
              punctuation: /[\[\]]/
            }
          },
          action: {
            pattern: /\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\}/,
            greedy: true,
            inside: {
              content: {
                pattern: /(\{)[\s\S]+(?=\})/,
                lookbehind: true
              },
              punctuation: /[{}]/
            }
          },
          command: {
            pattern: /(->\s*(?!\s))(?:\s*(?:,\s*)?\b[a-z]\w*(?:\s*\([^()\r\n]*\))?)+(?=\s*;)/i,
            lookbehind: true,
            inside: {
              function: /\b\w+(?=\s*(?:[,(]|$))/,
              punctuation: /[,()]/
            }
          },
          annotation: {
            pattern: /@\w+(?:::\w+)*/,
            alias: "keyword"
          },
          label: {
            pattern: /#[ \t]*\w+/,
            alias: "punctuation"
          },
          keyword: /\b(?:catch|channels|finally|fragment|grammar|import|lexer|locals|mode|options|parser|returns|throws|tokens)\b/,
          definition: [
            {
              pattern: /\b[a-z]\w*(?=\s*:)/,
              alias: ["rule", "class-name"]
            },
            {
              pattern: /\b[A-Z]\w*(?=\s*:)/,
              alias: ["token", "constant"]
            }
          ],
          constant: /\b[A-Z][A-Z_]*\b/,
          operator: /\.\.|->|[|~]|[*+?]\??/,
          punctuation: /[;:()=]/
        };
        Prism.languages.g4 = Prism.languages.antlr4;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/apacheconf.js
  var require_apacheconf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/apacheconf.js"(exports, module) {
      "use strict";
      module.exports = apacheconf;
      apacheconf.displayName = "apacheconf";
      apacheconf.aliases = [];
      function apacheconf(Prism) {
        Prism.languages.apacheconf = {
          comment: /#.*/,
          "directive-inline": {
            pattern: /(^[\t ]*)\b(?:AcceptFilter|AcceptPathInfo|AccessFileName|Action|Add(?:Alt|AltByEncoding|AltByType|Charset|DefaultCharset|Description|Encoding|Handler|Icon|IconByEncoding|IconByType|InputFilter|Language|ModuleInfo|OutputFilter|OutputFilterByType|Type)|Alias|AliasMatch|Allow(?:CONNECT|EncodedSlashes|Methods|Override|OverrideList)?|Anonymous(?:_LogEmail|_MustGiveEmail|_NoUserID|_VerifyEmail)?|AsyncRequestWorkerFactor|Auth(?:BasicAuthoritative|BasicFake|BasicProvider|BasicUseDigestAlgorithm|DBDUserPWQuery|DBDUserRealmQuery|DBMGroupFile|DBMType|DBMUserFile|Digest(?:Algorithm|Domain|NonceLifetime|Provider|Qop|ShmemSize)|Form(?:Authoritative|Body|DisableNoStore|FakeBasicAuth|Location|LoginRequiredLocation|LoginSuccessLocation|LogoutLocation|Method|Mimetype|Password|Provider|SitePassphrase|Size|Username)|GroupFile|LDAP(?:AuthorizePrefix|BindAuthoritative|BindDN|BindPassword|CharsetConfig|CompareAsUser|CompareDNOnServer|DereferenceAliases|GroupAttribute|GroupAttributeIsDN|InitialBindAsUser|InitialBindPattern|MaxSubGroupDepth|RemoteUserAttribute|RemoteUserIsDN|SearchAsUser|SubGroupAttribute|SubGroupClass|Url)|Merging|Name|nCache(?:Context|Enable|ProvideFor|SOCache|Timeout)|nzFcgiCheckAuthnProvider|nzFcgiDefineProvider|Type|UserFile|zDBDLoginToReferer|zDBDQuery|zDBDRedirectQuery|zDBMType|zSendForbiddenOnFailure)|BalancerGrowth|BalancerInherit|BalancerMember|BalancerPersist|BrowserMatch|BrowserMatchNoCase|BufferedLogs|BufferSize|Cache(?:DefaultExpire|DetailHeader|DirLength|DirLevels|Disable|Enable|File|Header|IgnoreCacheControl|IgnoreHeaders|IgnoreNoLastMod|IgnoreQueryString|IgnoreURLSessionIdentifiers|KeyBaseURL|LastModifiedFactor|Lock|LockMaxAge|LockPath|MaxExpire|MaxFileSize|MinExpire|MinFileSize|NegotiatedDocs|QuickHandler|ReadSize|ReadTime|Root|Socache(?:MaxSize|MaxTime|MinTime|ReadSize|ReadTime)?|StaleOnError|StoreExpired|StoreNoStore|StorePrivate)|CGIDScriptTimeout|CGIMapExtension|CharsetDefault|CharsetOptions|CharsetSourceEnc|CheckCaseOnly|CheckSpelling|ChrootDir|ContentDigest|CookieDomain|CookieExpires|CookieName|CookieStyle|CookieTracking|CoreDumpDirectory|CustomLog|Dav|DavDepthInfinity|DavGenericLockDB|DavLockDB|DavMinTimeout|DBDExptime|DBDInitSQL|DBDKeep|DBDMax|DBDMin|DBDParams|DBDPersist|DBDPrepareSQL|DBDriver|DefaultIcon|DefaultLanguage|DefaultRuntimeDir|DefaultType|Define|Deflate(?:BufferSize|CompressionLevel|FilterNote|InflateLimitRequestBody|InflateRatio(?:Burst|Limit)|MemLevel|WindowSize)|Deny|DirectoryCheckHandler|DirectoryIndex|DirectoryIndexRedirect|DirectorySlash|DocumentRoot|DTracePrivileges|DumpIOInput|DumpIOOutput|EnableExceptionHook|EnableMMAP|EnableSendfile|Error|ErrorDocument|ErrorLog|ErrorLogFormat|Example|ExpiresActive|ExpiresByType|ExpiresDefault|ExtendedStatus|ExtFilterDefine|ExtFilterOptions|FallbackResource|FileETag|FilterChain|FilterDeclare|FilterProtocol|FilterProvider|FilterTrace|ForceLanguagePriority|ForceType|ForensicLog|GprofDir|GracefulShutdownTimeout|Group|Header|HeaderName|Heartbeat(?:Address|Listen|MaxServers|Storage)|HostnameLookups|IdentityCheck|IdentityCheckTimeout|ImapBase|ImapDefault|ImapMenu|Include|IncludeOptional|Index(?:HeadInsert|Ignore|IgnoreReset|Options|OrderDefault|StyleSheet)|InputSed|ISAPI(?:AppendLogToErrors|AppendLogToQuery|CacheFile|FakeAsync|LogNotSupported|ReadAheadBuffer)|KeepAlive|KeepAliveTimeout|KeptBodySize|LanguagePriority|LDAP(?:CacheEntries|CacheTTL|ConnectionPoolTTL|ConnectionTimeout|LibraryDebug|OpCacheEntries|OpCacheTTL|ReferralHopLimit|Referrals|Retries|RetryDelay|SharedCacheFile|SharedCacheSize|Timeout|TrustedClientCert|TrustedGlobalCert|TrustedMode|VerifyServerCert)|Limit(?:InternalRecursion|Request(?:Body|Fields|FieldSize|Line)|XMLRequestBody)|Listen|ListenBackLog|LoadFile|LoadModule|LogFormat|LogLevel|LogMessage|LuaAuthzProvider|LuaCodeCache|Lua(?:Hook(?:AccessChecker|AuthChecker|CheckUserID|Fixups|InsertFilter|Log|MapToStorage|TranslateName|TypeChecker)|Inherit|InputFilter|MapHandler|OutputFilter|PackageCPath|PackagePath|QuickHandler|Root|Scope)|Max(?:ConnectionsPerChild|KeepAliveRequests|MemFree|RangeOverlaps|RangeReversals|Ranges|RequestWorkers|SpareServers|SpareThreads|Threads)|MergeTrailers|MetaDir|MetaFiles|MetaSuffix|MimeMagicFile|MinSpareServers|MinSpareThreads|MMapFile|ModemStandard|ModMimeUsePathInfo|MultiviewsMatch|Mutex|NameVirtualHost|NoProxy|NWSSLTrustedCerts|NWSSLUpgradeable|Options|Order|OutputSed|PassEnv|PidFile|PrivilegesMode|Protocol|ProtocolEcho|Proxy(?:AddHeaders|BadHeader|Block|Domain|ErrorOverride|ExpressDBMFile|ExpressDBMType|ExpressEnable|FtpDirCharset|FtpEscapeWildcards|FtpListOnWildcard|HTML(?:BufSize|CharsetOut|DocType|Enable|Events|Extended|Fixups|Interp|Links|Meta|StripComments|URLMap)|IOBufferSize|MaxForwards|Pass(?:Inherit|InterpolateEnv|Match|Reverse|ReverseCookieDomain|ReverseCookiePath)?|PreserveHost|ReceiveBufferSize|Remote|RemoteMatch|Requests|SCGIInternalRedirect|SCGISendfile|Set|SourceAddress|Status|Timeout|Via)|ReadmeName|ReceiveBufferSize|Redirect|RedirectMatch|RedirectPermanent|RedirectTemp|ReflectorHeader|RemoteIP(?:Header|InternalProxy|InternalProxyList|ProxiesHeader|TrustedProxy|TrustedProxyList)|RemoveCharset|RemoveEncoding|RemoveHandler|RemoveInputFilter|RemoveLanguage|RemoveOutputFilter|RemoveType|RequestHeader|RequestReadTimeout|Require|Rewrite(?:Base|Cond|Engine|Map|Options|Rule)|RLimitCPU|RLimitMEM|RLimitNPROC|Satisfy|ScoreBoardFile|Script(?:Alias|AliasMatch|InterpreterSource|Log|LogBuffer|LogLength|Sock)?|SecureListen|SeeRequestTail|SendBufferSize|Server(?:Admin|Alias|Limit|Name|Path|Root|Signature|Tokens)|Session(?:Cookie(?:Name|Name2|Remove)|Crypto(?:Cipher|Driver|Passphrase|PassphraseFile)|DBD(?:CookieName|CookieName2|CookieRemove|DeleteLabel|InsertLabel|PerUser|SelectLabel|UpdateLabel)|Env|Exclude|Header|Include|MaxAge)?|SetEnv|SetEnvIf|SetEnvIfExpr|SetEnvIfNoCase|SetHandler|SetInputFilter|SetOutputFilter|SSIEndTag|SSIErrorMsg|SSIETag|SSILastModified|SSILegacyExprParser|SSIStartTag|SSITimeFormat|SSIUndefinedEcho|SSL(?:CACertificateFile|CACertificatePath|CADNRequestFile|CADNRequestPath|CARevocationCheck|CARevocationFile|CARevocationPath|CertificateChainFile|CertificateFile|CertificateKeyFile|CipherSuite|Compression|CryptoDevice|Engine|FIPS|HonorCipherOrder|InsecureRenegotiation|OCSP(?:DefaultResponder|Enable|OverrideResponder|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|UseRequestNonce)|OpenSSLConfCmd|Options|PassPhraseDialog|Protocol|Proxy(?:CACertificateFile|CACertificatePath|CARevocation(?:Check|File|Path)|CheckPeer(?:CN|Expire|Name)|CipherSuite|Engine|MachineCertificate(?:ChainFile|File|Path)|Protocol|Verify|VerifyDepth)|RandomSeed|RenegBufferSize|Require|RequireSSL|Session(?:Cache|CacheTimeout|TicketKeyFile|Tickets)|SRPUnknownUserSeed|SRPVerifierFile|Stapling(?:Cache|ErrorCacheTimeout|FakeTryLater|ForceURL|ResponderTimeout|ResponseMaxAge|ResponseTimeSkew|ReturnResponderErrors|StandardCacheTimeout)|StrictSNIVHostCheck|UserName|UseStapling|VerifyClient|VerifyDepth)|StartServers|StartThreads|Substitute|Suexec|SuexecUserGroup|ThreadLimit|ThreadsPerChild|ThreadStackSize|TimeOut|TraceEnable|TransferLog|TypesConfig|UnDefine|UndefMacro|UnsetEnv|Use|UseCanonicalName|UseCanonicalPhysicalPort|User|UserDir|VHostCGIMode|VHostCGIPrivs|VHostGroup|VHostPrivs|VHostSecure|VHostUser|Virtual(?:DocumentRoot|ScriptAlias)(?:IP)?|WatchdogInterval|XBitHack|xml2EncAlias|xml2EncDefault|xml2StartParse)\b/im,
            lookbehind: true,
            alias: "property"
          },
          "directive-block": {
            pattern: /<\/?\b(?:Auth[nz]ProviderAlias|Directory|DirectoryMatch|Else|ElseIf|Files|FilesMatch|If|IfDefine|IfModule|IfVersion|Limit|LimitExcept|Location|LocationMatch|Macro|Proxy|Require(?:All|Any|None)|VirtualHost)\b.*>/i,
            inside: {
              "directive-block": {
                pattern: /^<\/?\w+/,
                inside: {
                  punctuation: /^<\/?/
                },
                alias: "tag"
              },
              "directive-block-parameter": {
                pattern: /.*[^>]/,
                inside: {
                  punctuation: /:/,
                  string: {
                    pattern: /("|').*\1/,
                    inside: {
                      variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/
                    }
                  }
                },
                alias: "attr-value"
              },
              punctuation: />/
            },
            alias: "tag"
          },
          "directive-flags": {
            pattern: /\[(?:[\w=],?)+\]/,
            alias: "keyword"
          },
          string: {
            pattern: /("|').*\1/,
            inside: {
              variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/
            }
          },
          variable: /[$%]\{?(?:\w\.?[-+:]?)+\}?/,
          regex: /\^?.*\$|\^.*\$?/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/sql.js
  var require_sql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/sql.js"(exports, module) {
      "use strict";
      module.exports = sql;
      sql.displayName = "sql";
      sql.aliases = [];
      function sql(Prism) {
        Prism.languages.sql = {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
            lookbehind: true
          },
          variable: [
            {
              pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
              greedy: true
            },
            /@[\w.$]+/
          ],
          string: {
            pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
            greedy: true,
            lookbehind: true
          },
          identifier: {
            pattern: /(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,
            greedy: true,
            lookbehind: true,
            inside: {
              punctuation: /^`|`$/
            }
          },
          function: /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
          keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
          boolean: /\b(?:FALSE|NULL|TRUE)\b/i,
          number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
          operator: /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
          punctuation: /[;[\]()`,.]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/apex.js
  var require_apex = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/apex.js"(exports, module) {
      "use strict";
      var refractorSql = require_sql();
      module.exports = apex;
      apex.displayName = "apex";
      apex.aliases = [];
      function apex(Prism) {
        Prism.register(refractorSql);
        (function(Prism2) {
          var keywords = /\b(?:(?:after|before)(?=\s+[a-z])|abstract|activate|and|any|array|as|asc|autonomous|begin|bigdecimal|blob|boolean|break|bulk|by|byte|case|cast|catch|char|class|collect|commit|const|continue|currency|date|datetime|decimal|default|delete|desc|do|double|else|end|enum|exception|exit|export|extends|final|finally|float|for|from|get(?=\s*[{};])|global|goto|group|having|hint|if|implements|import|in|inner|insert|instanceof|int|integer|interface|into|join|like|limit|list|long|loop|map|merge|new|not|null|nulls|number|object|of|on|or|outer|override|package|parallel|pragma|private|protected|public|retrieve|return|rollback|select|set|short|sObject|sort|static|string|super|switch|synchronized|system|testmethod|then|this|throw|time|transaction|transient|trigger|try|undelete|update|upsert|using|virtual|void|webservice|when|where|while|(?:inherited|with|without)\s+sharing)\b/i;
          var className = /\b(?:(?=[a-z_]\w*\s*[<\[])|(?!<keyword>))[A-Z_]\w*(?:\s*\.\s*[A-Z_]\w*)*\b(?:\s*(?:\[\s*\]|<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>))*/.source.replace(
            /<keyword>/g,
            function() {
              return keywords.source;
            }
          );
          function insertClassName(pattern) {
            return RegExp(
              pattern.replace(/<CLASS-NAME>/g, function() {
                return className;
              }),
              "i"
            );
          }
          var classNameInside = {
            keyword: keywords,
            punctuation: /[()\[\]{};,:.<>]/
          };
          Prism2.languages.apex = {
            comment: Prism2.languages.clike.comment,
            string: Prism2.languages.clike.string,
            sql: {
              pattern: /((?:[=,({:]|\breturn)\s*)\[[^\[\]]*\]/i,
              lookbehind: true,
              greedy: true,
              alias: "language-sql",
              inside: Prism2.languages.sql
            },
            annotation: {
              pattern: /@\w+\b/,
              alias: "punctuation"
            },
            "class-name": [
              {
                pattern: insertClassName(
                  /(\b(?:class|enum|extends|implements|instanceof|interface|new|trigger\s+\w+\s+on)\s+)<CLASS-NAME>/.source
                ),
                lookbehind: true,
                inside: classNameInside
              },
              {
                pattern: insertClassName(
                  /(\(\s*)<CLASS-NAME>(?=\s*\)\s*[\w(])/.source
                ),
                lookbehind: true,
                inside: classNameInside
              },
              {
                pattern: insertClassName(/<CLASS-NAME>(?=\s*\w+\s*[;=,(){:])/.source),
                inside: classNameInside
              }
            ],
            trigger: {
              pattern: /(\btrigger\s+)\w+\b/i,
              lookbehind: true,
              alias: "class-name"
            },
            keyword: keywords,
            function: /\b[a-z_]\w*(?=\s*\()/i,
            boolean: /\b(?:false|true)\b/i,
            number: /(?:\B\.\d+|\b\d+(?:\.\d+|L)?)\b/i,
            operator: /[!=](?:==?)?|\?\.?|&&|\|\||--|\+\+|[-+*/^&|]=?|:|<<?=?|>{1,3}=?/,
            punctuation: /[()\[\]{};,.]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/apl.js
  var require_apl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/apl.js"(exports, module) {
      "use strict";
      module.exports = apl;
      apl.displayName = "apl";
      apl.aliases = [];
      function apl(Prism) {
        Prism.languages.apl = {
          comment: /(?:⍝|#[! ]).*$/m,
          string: {
            pattern: /'(?:[^'\r\n]|'')*'/,
            greedy: true
          },
          number: /¯?(?:\d*\.?\b\d+(?:e[+¯]?\d+)?|¯|∞)(?:j¯?(?:(?:\d+(?:\.\d+)?|\.\d+)(?:e[+¯]?\d+)?|¯|∞))?/i,
          statement: /:[A-Z][a-z][A-Za-z]*\b/,
          "system-function": {
            pattern: /⎕[A-Z]+/i,
            alias: "function"
          },
          constant: /[⍬⌾#⎕⍞]/,
          function: /[-+×÷⌈⌊∣|⍳⍸?*⍟○!⌹<≤=>≥≠≡≢∊⍷∪∩~∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⊆⊇⌷⍋⍒⊤⊥⍕⍎⊣⊢⍁⍂≈⍯↗¤→]/,
          "monadic-operator": {
            pattern: /[\\\/⌿⍀¨⍨⌶&∥]/,
            alias: "operator"
          },
          "dyadic-operator": {
            pattern: /[.⍣⍠⍤∘⌸@⌺⍥]/,
            alias: "operator"
          },
          assignment: {
            pattern: /←/,
            alias: "keyword"
          },
          punctuation: /[\[;\]()◇⋄]/,
          dfn: {
            pattern: /[{}⍺⍵⍶⍹∇⍫:]/,
            alias: "builtin"
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/applescript.js
  var require_applescript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/applescript.js"(exports, module) {
      "use strict";
      module.exports = applescript;
      applescript.displayName = "applescript";
      applescript.aliases = [];
      function applescript(Prism) {
        Prism.languages.applescript = {
          comment: [
            /\(\*(?:\(\*(?:[^*]|\*(?!\)))*\*\)|(?!\(\*)[\s\S])*?\*\)/,
            /--.+/,
            /#.+/
          ],
          string: /"(?:\\.|[^"\\\r\n])*"/,
          number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e-?\d+)?\b/i,
          operator: [
            /[&=≠≤≥*+\-\/÷^]|[<>]=?/,
            /\b(?:(?:begin|end|start)s? with|(?:contains?|(?:does not|doesn't) contain)|(?:is|isn't|is not) (?:contained by|in)|(?:(?:is|isn't|is not) )?(?:greater|less) than(?: or equal)?(?: to)?|(?:comes|(?:does not|doesn't) come) (?:after|before)|(?:is|isn't|is not) equal(?: to)?|(?:(?:does not|doesn't) equal|equal to|equals|is not|isn't)|(?:a )?(?:ref(?: to)?|reference to)|(?:and|as|div|mod|not|or))\b/
          ],
          keyword: /\b(?:about|above|after|against|apart from|around|aside from|at|back|before|beginning|behind|below|beneath|beside|between|but|by|considering|continue|copy|does|eighth|else|end|equal|error|every|exit|false|fifth|first|for|fourth|from|front|get|given|global|if|ignoring|in|instead of|into|is|it|its|last|local|me|middle|my|ninth|of|on|onto|out of|over|prop|property|put|repeat|return|returning|second|set|seventh|since|sixth|some|tell|tenth|that|the|then|third|through|thru|timeout|times|to|transaction|true|try|until|where|while|whose|with|without)\b/,
          "class-name": /\b(?:POSIX file|RGB color|alias|application|boolean|centimeters|centimetres|class|constant|cubic centimeters|cubic centimetres|cubic feet|cubic inches|cubic meters|cubic metres|cubic yards|date|degrees Celsius|degrees Fahrenheit|degrees Kelvin|feet|file|gallons|grams|inches|integer|kilograms|kilometers|kilometres|list|liters|litres|meters|metres|miles|number|ounces|pounds|quarts|real|record|reference|script|square feet|square kilometers|square kilometres|square meters|square metres|square miles|square yards|text|yards)\b/,
          punctuation: /[{}():,¬«»《》]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/aql.js
  var require_aql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/aql.js"(exports, module) {
      "use strict";
      module.exports = aql;
      aql.displayName = "aql";
      aql.aliases = [];
      function aql(Prism) {
        Prism.languages.aql = {
          comment: /\/\/.*|\/\*[\s\S]*?\*\//,
          property: {
            pattern: /([{,]\s*)(?:(?!\d)\w+|(["'´`])(?:(?!\2)[^\\\r\n]|\\.)*\2)(?=\s*:)/,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\.)*\1/,
            greedy: true
          },
          identifier: {
            pattern: /([´`])(?:(?!\1)[^\\\r\n]|\\.)*\1/,
            greedy: true
          },
          variable: /@@?\w+/,
          keyword: [
            {
              pattern: /(\bWITH\s+)COUNT(?=\s+INTO\b)/i,
              lookbehind: true
            },
            /\b(?:AGGREGATE|ALL|AND|ANY|ASC|COLLECT|DESC|DISTINCT|FILTER|FOR|GRAPH|IN|INBOUND|INSERT|INTO|K_PATHS|K_SHORTEST_PATHS|LET|LIKE|LIMIT|NONE|NOT|NULL|OR|OUTBOUND|REMOVE|REPLACE|RETURN|SHORTEST_PATH|SORT|UPDATE|UPSERT|WINDOW|WITH)\b/i,
            {
              pattern: /(^|[^\w.[])(?:KEEP|PRUNE|SEARCH|TO)\b/i,
              lookbehind: true
            },
            {
              pattern: /(^|[^\w.[])(?:CURRENT|NEW|OLD)\b/,
              lookbehind: true
            },
            {
              pattern: /\bOPTIONS(?=\s*\{)/i
            }
          ],
          function: /\b(?!\d)\w+(?=\s*\()/,
          boolean: /\b(?:false|true)\b/i,
          range: {
            pattern: /\.\./,
            alias: "operator"
          },
          number: [
            /\b0b[01]+/i,
            /\b0x[0-9a-f]+/i,
            /(?:\B\.\d+|\b(?:0|[1-9]\d*)(?:\.\d+)?)(?:e[+-]?\d+)?/i
          ],
          operator: /\*{2,}|[=!]~|[!=<>]=?|&&|\|\||[-+*/%]/,
          punctuation: /::|[?.:,;()[\]{}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/c.js
  var require_c = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/c.js"(exports, module) {
      "use strict";
      module.exports = c;
      c.displayName = "c";
      c.aliases = [];
      function c(Prism) {
        Prism.languages.c = Prism.languages.extend("clike", {
          comment: {
            pattern: /\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,
            greedy: true
          },
          string: {
            pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,
            lookbehind: true
          },
          keyword: /\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          number: /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,
          operator: />>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/
        });
        Prism.languages.insertBefore("c", "string", {
          char: {
            pattern: /'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,
            greedy: true
          }
        });
        Prism.languages.insertBefore("c", "string", {
          macro: {
            pattern: /(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,
            lookbehind: true,
            greedy: true,
            alias: "property",
            inside: {
              string: [
                {
                  pattern: /^(#\s*include\s*)<[^>]+>/,
                  lookbehind: true
                },
                Prism.languages.c["string"]
              ],
              char: Prism.languages.c["char"],
              comment: Prism.languages.c["comment"],
              "macro-name": [
                {
                  pattern: /(^#\s*define\s+)\w+\b(?!\()/i,
                  lookbehind: true
                },
                {
                  pattern: /(^#\s*define\s+)\w+\b(?=\()/i,
                  lookbehind: true,
                  alias: "function"
                }
              ],
              directive: {
                pattern: /^(#\s*)[a-z]+/,
                lookbehind: true,
                alias: "keyword"
              },
              "directive-hash": /^#/,
              punctuation: /##|\\(?=[\r\n])/,
              expression: {
                pattern: /\S[\s\S]*/,
                inside: Prism.languages.c
              }
            }
          }
        });
        Prism.languages.insertBefore("c", "function", {
          constant: /\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/
        });
        delete Prism.languages.c["boolean"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cpp.js
  var require_cpp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cpp.js"(exports, module) {
      "use strict";
      var refractorC = require_c();
      module.exports = cpp;
      cpp.displayName = "cpp";
      cpp.aliases = [];
      function cpp(Prism) {
        Prism.register(refractorC);
        (function(Prism2) {
          var keyword = /\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/;
          var modName = /\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(
            /<keyword>/g,
            function() {
              return keyword.source;
            }
          );
          Prism2.languages.cpp = Prism2.languages.extend("c", {
            "class-name": [
              {
                pattern: RegExp(
                  /(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(
                    /<keyword>/g,
                    function() {
                      return keyword.source;
                    }
                  )
                ),
                lookbehind: true
              },
              /\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,
              /\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,
              /\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/
            ],
            keyword,
            number: {
              pattern: /(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,
              greedy: true
            },
            operator: />>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,
            boolean: /\b(?:false|true)\b/
          });
          Prism2.languages.insertBefore("cpp", "string", {
            module: {
              pattern: RegExp(
                /(\b(?:import|module)\s+)/.source + "(?:" + /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source + "|" + /<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(
                  /<mod-name>/g,
                  function() {
                    return modName;
                  }
                ) + ")"
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                string: /^[<"][\s\S]+/,
                operator: /:/,
                punctuation: /\./
              }
            },
            "raw-string": {
              pattern: /R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,
              alias: "string",
              greedy: true
            }
          });
          Prism2.languages.insertBefore("cpp", "keyword", {
            "generic-function": {
              pattern: /\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,
              inside: {
                function: /^\w+/,
                generic: {
                  pattern: /<[\s\S]+/,
                  alias: "class-name",
                  inside: Prism2.languages.cpp
                }
              }
            }
          });
          Prism2.languages.insertBefore("cpp", "operator", {
            "double-colon": {
              pattern: /::/,
              alias: "punctuation"
            }
          });
          Prism2.languages.insertBefore("cpp", "class-name", {
            "base-clause": {
              pattern: /(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,
              lookbehind: true,
              greedy: true,
              inside: Prism2.languages.extend("cpp", {})
            }
          });
          Prism2.languages.insertBefore(
            "inside",
            "double-colon",
            {
              "class-name": /\b[a-z_]\w*\b(?!\s*::)/i
            },
            Prism2.languages.cpp["base-clause"]
          );
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/arduino.js
  var require_arduino = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/arduino.js"(exports, module) {
      "use strict";
      var refractorCpp = require_cpp();
      module.exports = arduino;
      arduino.displayName = "arduino";
      arduino.aliases = ["ino"];
      function arduino(Prism) {
        Prism.register(refractorCpp);
        Prism.languages.arduino = Prism.languages.extend("cpp", {
          keyword: /\b(?:String|array|bool|boolean|break|byte|case|catch|continue|default|do|double|else|finally|for|function|goto|if|in|instanceof|int|integer|long|loop|new|null|return|setup|string|switch|throw|try|void|while|word)\b/,
          constant: /\b(?:ANALOG_MESSAGE|DEFAULT|DIGITAL_MESSAGE|EXTERNAL|FIRMATA_STRING|HIGH|INPUT|INPUT_PULLUP|INTERNAL|INTERNAL1V1|INTERNAL2V56|LED_BUILTIN|LOW|OUTPUT|REPORT_ANALOG|REPORT_DIGITAL|SET_PIN_MODE|SYSEX_START|SYSTEM_RESET)\b/,
          builtin: /\b(?:Audio|BSSID|Bridge|Client|Console|EEPROM|Esplora|EsploraTFT|Ethernet|EthernetClient|EthernetServer|EthernetUDP|File|FileIO|FileSystem|Firmata|GPRS|GSM|GSMBand|GSMClient|GSMModem|GSMPIN|GSMScanner|GSMServer|GSMVoiceCall|GSM_SMS|HttpClient|IPAddress|IRread|Keyboard|KeyboardController|LiquidCrystal|LiquidCrystal_I2C|Mailbox|Mouse|MouseController|PImage|Process|RSSI|RobotControl|RobotMotor|SD|SPI|SSID|Scheduler|Serial|Server|Servo|SoftwareSerial|Stepper|Stream|TFT|Task|USBHost|WiFi|WiFiClient|WiFiServer|WiFiUDP|Wire|YunClient|YunServer|abs|addParameter|analogRead|analogReadResolution|analogReference|analogWrite|analogWriteResolution|answerCall|attach|attachGPRS|attachInterrupt|attached|autoscroll|available|background|beep|begin|beginPacket|beginSD|beginSMS|beginSpeaker|beginTFT|beginTransmission|beginWrite|bit|bitClear|bitRead|bitSet|bitWrite|blink|blinkVersion|buffer|changePIN|checkPIN|checkPUK|checkReg|circle|cityNameRead|cityNameWrite|clear|clearScreen|click|close|compassRead|config|connect|connected|constrain|cos|countryNameRead|countryNameWrite|createChar|cursor|debugPrint|delay|delayMicroseconds|detach|detachInterrupt|digitalRead|digitalWrite|disconnect|display|displayLogos|drawBMP|drawCompass|encryptionType|end|endPacket|endSMS|endTransmission|endWrite|exists|exitValue|fill|find|findUntil|flush|gatewayIP|get|getAsynchronously|getBand|getButton|getCurrentCarrier|getIMEI|getKey|getModifiers|getOemKey|getPINUsed|getResult|getSignalStrength|getSocket|getVoiceCallStatus|getXChange|getYChange|hangCall|height|highByte|home|image|interrupts|isActionDone|isDirectory|isListening|isPIN|isPressed|isValid|keyPressed|keyReleased|keyboardRead|knobRead|leftToRight|line|lineFollowConfig|listen|listenOnLocalhost|loadImage|localIP|lowByte|macAddress|maintain|map|max|messageAvailable|micros|millis|min|mkdir|motorsStop|motorsWrite|mouseDragged|mouseMoved|mousePressed|mouseReleased|move|noAutoscroll|noBlink|noBuffer|noCursor|noDisplay|noFill|noInterrupts|noListenOnLocalhost|noStroke|noTone|onReceive|onRequest|open|openNextFile|overflow|parseCommand|parseFloat|parseInt|parsePacket|pauseMode|peek|pinMode|playFile|playMelody|point|pointTo|position|pow|prepare|press|print|printFirmwareVersion|printVersion|println|process|processInput|pulseIn|put|random|randomSeed|read|readAccelerometer|readBlue|readButton|readBytes|readBytesUntil|readGreen|readJoystickButton|readJoystickSwitch|readJoystickX|readJoystickY|readLightSensor|readMessage|readMicrophone|readNetworks|readRed|readSlider|readString|readStringUntil|readTemperature|ready|rect|release|releaseAll|remoteIP|remoteNumber|remotePort|remove|requestFrom|retrieveCallingNumber|rewindDirectory|rightToLeft|rmdir|robotNameRead|robotNameWrite|run|runAsynchronously|runShellCommand|runShellCommandAsynchronously|running|scanNetworks|scrollDisplayLeft|scrollDisplayRight|seek|sendAnalog|sendDigitalPortPair|sendDigitalPorts|sendString|sendSysex|serialEvent|setBand|setBitOrder|setClockDivider|setCursor|setDNS|setDataMode|setFirmwareVersion|setMode|setPINUsed|setSpeed|setTextSize|setTimeout|shiftIn|shiftOut|shutdown|sin|size|sqrt|startLoop|step|stop|stroke|subnetMask|switchPIN|tan|tempoWrite|text|tone|transfer|tuneWrite|turn|updateIR|userNameRead|userNameWrite|voiceCall|waitContinue|width|write|writeBlue|writeGreen|writeJSON|writeMessage|writeMicroseconds|writeRGB|writeRed|yield)\b/
        });
        Prism.languages.ino = Prism.languages.arduino;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/arff.js
  var require_arff = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/arff.js"(exports, module) {
      "use strict";
      module.exports = arff;
      arff.displayName = "arff";
      arff.aliases = [];
      function arff(Prism) {
        Prism.languages.arff = {
          comment: /%.*/,
          string: {
            pattern: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          keyword: /@(?:attribute|data|end|relation)\b/i,
          number: /\b\d+(?:\.\d+)?\b/,
          punctuation: /[{},]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/asciidoc.js
  var require_asciidoc = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/asciidoc.js"(exports, module) {
      "use strict";
      module.exports = asciidoc;
      asciidoc.displayName = "asciidoc";
      asciidoc.aliases = ["adoc"];
      function asciidoc(Prism) {
        ;
        (function(Prism2) {
          var attributes2 = {
            pattern: /(^[ \t]*)\[(?!\[)(?:(["'$`])(?:(?!\2)[^\\]|\\.)*\2|\[(?:[^\[\]\\]|\\.)*\]|[^\[\]\\"'$`]|\\.)*\]/m,
            lookbehind: true,
            inside: {
              quoted: {
                pattern: /([$`])(?:(?!\1)[^\\]|\\.)*\1/,
                inside: {
                  punctuation: /^[$`]|[$`]$/
                }
              },
              interpreted: {
                pattern: /'(?:[^'\\]|\\.)*'/,
                inside: {
                  punctuation: /^'|'$/
                }
              },
              string: /"(?:[^"\\]|\\.)*"/,
              variable: /\w+(?==)/,
              punctuation: /^\[|\]$|,/,
              operator: /=/,
              "attr-value": /(?!^\s+$).+/
            }
          };
          var asciidoc2 = Prism2.languages.asciidoc = {
            "comment-block": {
              pattern: /^(\/{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1/m,
              alias: "comment"
            },
            table: {
              pattern: /^\|={3,}(?:(?:\r?\n|\r(?!\n)).*)*?(?:\r?\n|\r)\|={3,}$/m,
              inside: {
                specifiers: {
                  pattern: /(?:(?:(?:\d+(?:\.\d+)?|\.\d+)[+*](?:[<^>](?:\.[<^>])?|\.[<^>])?|[<^>](?:\.[<^>])?|\.[<^>])[a-z]*|[a-z]+)(?=\|)/,
                  alias: "attr-value"
                },
                punctuation: {
                  pattern: /(^|[^\\])[|!]=*/,
                  lookbehind: true
                }
              }
            },
            "passthrough-block": {
              pattern: /^(\+{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,
              inside: {
                punctuation: /^\++|\++$/
              }
            },
            "literal-block": {
              pattern: /^(-{4,}|\.{4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,
              inside: {
                punctuation: /^(?:-+|\.+)|(?:-+|\.+)$/
              }
            },
            "other-block": {
              pattern: /^(--|\*{4,}|_{4,}|={4,})(?:\r?\n|\r)(?:[\s\S]*(?:\r?\n|\r))??\1$/m,
              inside: {
                punctuation: /^(?:-+|\*+|_+|=+)|(?:-+|\*+|_+|=+)$/
              }
            },
            "list-punctuation": {
              pattern: /(^[ \t]*)(?:-|\*{1,5}|\.{1,5}|(?:[a-z]|\d+)\.|[xvi]+\))(?= )/im,
              lookbehind: true,
              alias: "punctuation"
            },
            "list-label": {
              pattern: /(^[ \t]*)[a-z\d].+(?::{2,4}|;;)(?=\s)/im,
              lookbehind: true,
              alias: "symbol"
            },
            "indented-block": {
              pattern: /((\r?\n|\r)\2)([ \t]+)\S.*(?:(?:\r?\n|\r)\3.+)*(?=\2{2}|$)/,
              lookbehind: true
            },
            comment: /^\/\/.*/m,
            title: {
              pattern: /^.+(?:\r?\n|\r)(?:={3,}|-{3,}|~{3,}|\^{3,}|\+{3,})$|^={1,5} .+|^\.(?![\s.]).*/m,
              alias: "important",
              inside: {
                punctuation: /^(?:\.|=+)|(?:=+|-+|~+|\^+|\++)$/
              }
            },
            "attribute-entry": {
              pattern: /^:[^:\r\n]+:(?: .*?(?: \+(?:\r?\n|\r).*?)*)?$/m,
              alias: "tag"
            },
            attributes: attributes2,
            hr: {
              pattern: /^'{3,}$/m,
              alias: "punctuation"
            },
            "page-break": {
              pattern: /^<{3,}$/m,
              alias: "punctuation"
            },
            admonition: {
              pattern: /^(?:CAUTION|IMPORTANT|NOTE|TIP|WARNING):/m,
              alias: "keyword"
            },
            callout: [
              {
                pattern: /(^[ \t]*)<?\d*>/m,
                lookbehind: true,
                alias: "symbol"
              },
              {
                pattern: /<\d+>/,
                alias: "symbol"
              }
            ],
            macro: {
              pattern: /\b[a-z\d][a-z\d-]*::?(?:[^\s\[\]]*\[(?:[^\]\\"']|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,
              inside: {
                function: /^[a-z\d-]+(?=:)/,
                punctuation: /^::?/,
                attributes: {
                  pattern: /(?:\[(?:[^\]\\"']|(["'])(?:(?!\1)[^\\]|\\.)*\1|\\.)*\])/,
                  inside: attributes2.inside
                }
              }
            },
            inline: {
              pattern: /(^|[^\\])(?:(?:\B\[(?:[^\]\\"']|(["'])(?:(?!\2)[^\\]|\\.)*\2|\\.)*\])?(?:\b_(?!\s)(?: _|[^_\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: _|[^_\\\r\n]|\\.)+)*_\b|\B``(?!\s).+?(?:(?:\r?\n|\r).+?)*''\B|\B`(?!\s)(?:[^`'\s]|\s+\S)+['`]\B|\B(['*+#])(?!\s)(?: \3|(?!\3)[^\\\r\n]|\\.)+(?:(?:\r?\n|\r)(?: \3|(?!\3)[^\\\r\n]|\\.)+)*\3\B)|(?:\[(?:[^\]\\"']|(["'])(?:(?!\4)[^\\]|\\.)*\4|\\.)*\])?(?:(__|\*\*|\+\+\+?|##|\$\$|[~^]).+?(?:(?:\r?\n|\r).+?)*\5|\{[^}\r\n]+\}|\[\[\[?.+?(?:(?:\r?\n|\r).+?)*\]?\]\]|<<.+?(?:(?:\r?\n|\r).+?)*>>|\(\(\(?.+?(?:(?:\r?\n|\r).+?)*\)?\)\)))/m,
              lookbehind: true,
              inside: {
                attributes: attributes2,
                url: {
                  pattern: /^(?:\[\[\[?.+?\]?\]\]|<<.+?>>)$/,
                  inside: {
                    punctuation: /^(?:\[\[\[?|<<)|(?:\]\]\]?|>>)$/
                  }
                },
                "attribute-ref": {
                  pattern: /^\{.+\}$/,
                  inside: {
                    variable: {
                      pattern: /(^\{)[a-z\d,+_-]+/,
                      lookbehind: true
                    },
                    operator: /^[=?!#%@$]|!(?=[:}])/,
                    punctuation: /^\{|\}$|::?/
                  }
                },
                italic: {
                  pattern: /^(['_])[\s\S]+\1$/,
                  inside: {
                    punctuation: /^(?:''?|__?)|(?:''?|__?)$/
                  }
                },
                bold: {
                  pattern: /^\*[\s\S]+\*$/,
                  inside: {
                    punctuation: /^\*\*?|\*\*?$/
                  }
                },
                punctuation: /^(?:``?|\+{1,3}|##?|\$\$|[~^]|\(\(\(?)|(?:''?|\+{1,3}|##?|\$\$|[~^`]|\)?\)\))$/
              }
            },
            replacement: {
              pattern: /\((?:C|R|TM)\)/,
              alias: "builtin"
            },
            entity: /&#?[\da-z]{1,8};/i,
            "line-continuation": {
              pattern: /(^| )\+$/m,
              lookbehind: true,
              alias: "punctuation"
            }
          };
          function copyFromAsciiDoc(keys3) {
            keys3 = keys3.split(" ");
            var o = {};
            for (var i = 0, l = keys3.length; i < l; i++) {
              o[keys3[i]] = asciidoc2[keys3[i]];
            }
            return o;
          }
          attributes2.inside["interpreted"].inside.rest = copyFromAsciiDoc(
            "macro inline replacement entity"
          );
          asciidoc2["passthrough-block"].inside.rest = copyFromAsciiDoc("macro");
          asciidoc2["literal-block"].inside.rest = copyFromAsciiDoc("callout");
          asciidoc2["table"].inside.rest = copyFromAsciiDoc(
            "comment-block passthrough-block literal-block other-block list-punctuation indented-block comment title attribute-entry attributes hr page-break admonition list-label callout macro inline replacement entity line-continuation"
          );
          asciidoc2["other-block"].inside.rest = copyFromAsciiDoc(
            "table list-punctuation indented-block comment attribute-entry attributes hr page-break admonition list-label macro inline replacement entity line-continuation"
          );
          asciidoc2["title"].inside.rest = copyFromAsciiDoc(
            "macro inline replacement entity"
          );
          Prism2.hooks.add("wrap", function(env) {
            if (env.type === "entity") {
              env.attributes["title"] = env.content.value.replace(/&amp;/, "&");
            }
          });
          Prism2.languages.adoc = Prism2.languages.asciidoc;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/asm6502.js
  var require_asm6502 = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/asm6502.js"(exports, module) {
      "use strict";
      module.exports = asm6502;
      asm6502.displayName = "asm6502";
      asm6502.aliases = [];
      function asm6502(Prism) {
        Prism.languages.asm6502 = {
          comment: /;.*/,
          directive: {
            pattern: /\.\w+(?= )/,
            alias: "property"
          },
          string: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
          "op-code": {
            pattern: /\b(?:ADC|AND|ASL|BCC|BCS|BEQ|BIT|BMI|BNE|BPL|BRK|BVC|BVS|CLC|CLD|CLI|CLV|CMP|CPX|CPY|DEC|DEX|DEY|EOR|INC|INX|INY|JMP|JSR|LDA|LDX|LDY|LSR|NOP|ORA|PHA|PHP|PLA|PLP|ROL|ROR|RTI|RTS|SBC|SEC|SED|SEI|STA|STX|STY|TAX|TAY|TSX|TXA|TXS|TYA|adc|and|asl|bcc|bcs|beq|bit|bmi|bne|bpl|brk|bvc|bvs|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|jmp|jsr|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|rti|rts|sbc|sec|sed|sei|sta|stx|sty|tax|tay|tsx|txa|txs|tya)\b/,
            alias: "keyword"
          },
          "hex-number": {
            pattern: /#?\$[\da-f]{1,4}\b/i,
            alias: "number"
          },
          "binary-number": {
            pattern: /#?%[01]+\b/,
            alias: "number"
          },
          "decimal-number": {
            pattern: /#?\b\d+\b/,
            alias: "number"
          },
          register: {
            pattern: /\b[xya]\b/i,
            alias: "variable"
          },
          punctuation: /[(),:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/asmatmel.js
  var require_asmatmel = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/asmatmel.js"(exports, module) {
      "use strict";
      module.exports = asmatmel;
      asmatmel.displayName = "asmatmel";
      asmatmel.aliases = [];
      function asmatmel(Prism) {
        Prism.languages.asmatmel = {
          comment: {
            pattern: /;.*/,
            greedy: true
          },
          string: {
            pattern: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          constant: /\b(?:PORT[A-Z]|DDR[A-Z]|(?:DD|P)[A-Z](?:\d|[0-2]\d|3[01]))\b/,
          directive: {
            pattern: /\.\w+(?= )/,
            alias: "property"
          },
          "r-register": {
            pattern: /\br(?:\d|[12]\d|3[01])\b/,
            alias: "variable"
          },
          "op-code": {
            pattern: /\b(?:ADC|ADD|ADIW|AND|ANDI|ASR|BCLR|BLD|BRBC|BRBS|BRCC|BRCS|BREAK|BREQ|BRGE|BRHC|BRHS|BRID|BRIE|BRLO|BRLT|BRMI|BRNE|BRPL|BRSH|BRTC|BRTS|BRVC|BRVS|BSET|BST|CALL|CBI|CBR|CLC|CLH|CLI|CLN|CLR|CLS|CLT|CLV|CLZ|COM|CP|CPC|CPI|CPSE|DEC|DES|EICALL|EIJMP|ELPM|EOR|FMUL|FMULS|FMULSU|ICALL|IJMP|IN|INC|JMP|LAC|LAS|LAT|LD|LD[A-Za-z0-9]|LPM|LSL|LSR|MOV|MOVW|MUL|MULS|MULSU|NEG|NOP|OR|ORI|OUT|POP|PUSH|RCALL|RET|RETI|RJMP|ROL|ROR|SBC|SBCI|SBI|SBIC|SBIS|SBIW|SBR|SBRC|SBRS|SEC|SEH|SEI|SEN|SER|SES|SET|SEV|SEZ|SLEEP|SPM|ST|ST[A-Z0-9]|SUB|SUBI|SWAP|TST|WDR|XCH|adc|add|adiw|and|andi|asr|bclr|bld|brbc|brbs|brcc|brcs|break|breq|brge|brhc|brhs|brid|brie|brlo|brlt|brmi|brne|brpl|brsh|brtc|brts|brvc|brvs|bset|bst|call|cbi|cbr|clc|clh|cli|cln|clr|cls|clt|clv|clz|com|cp|cpc|cpi|cpse|dec|des|eicall|eijmp|elpm|eor|fmul|fmuls|fmulsu|icall|ijmp|in|inc|jmp|lac|las|lat|ld|ld[a-z0-9]|lpm|lsl|lsr|mov|movw|mul|muls|mulsu|neg|nop|or|ori|out|pop|push|rcall|ret|reti|rjmp|rol|ror|sbc|sbci|sbi|sbic|sbis|sbiw|sbr|sbrc|sbrs|sec|seh|sei|sen|ser|ses|set|sev|sez|sleep|spm|st|st[a-zA-Z0-9]|sub|subi|swap|tst|wdr|xch)\b/,
            alias: "keyword"
          },
          "hex-number": {
            pattern: /#?\$[\da-f]{2,4}\b/i,
            alias: "number"
          },
          "binary-number": {
            pattern: /#?%[01]+\b/,
            alias: "number"
          },
          "decimal-number": {
            pattern: /#?\b\d+\b/,
            alias: "number"
          },
          register: {
            pattern: /\b[acznvshtixy]\b/i,
            alias: "variable"
          },
          operator: />>=?|<<=?|&&?|\|\|?|[-+*/%&|^!=<>?]=?/,
          punctuation: /[(),:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/csharp.js
  var require_csharp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/csharp.js"(exports, module) {
      "use strict";
      module.exports = csharp;
      csharp.displayName = "csharp";
      csharp.aliases = ["dotnet", "cs"];
      function csharp(Prism) {
        ;
        (function(Prism2) {
          function replace2(pattern, replacements) {
            return pattern.replace(/<<(\d+)>>/g, function(m, index2) {
              return "(?:" + replacements[+index2] + ")";
            });
          }
          function re(pattern, replacements, flags) {
            return RegExp(replace2(pattern, replacements), flags || "");
          }
          function nested(pattern, depthLog2) {
            for (var i = 0; i < depthLog2; i++) {
              pattern = pattern.replace(/<<self>>/g, function() {
                return "(?:" + pattern + ")";
              });
            }
            return pattern.replace(/<<self>>/g, "[^\\s\\S]");
          }
          var keywordKinds = {
            type: "bool byte char decimal double dynamic float int long object sbyte short string uint ulong ushort var void",
            typeDeclaration: "class enum interface record struct",
            contextual: "add alias and ascending async await by descending from(?=\\s*(?:\\w|$)) get global group into init(?=\\s*;) join let nameof not notnull on or orderby partial remove select set unmanaged value when where with(?=\\s*{)",
            other: "abstract as base break case catch checked const continue default delegate do else event explicit extern finally fixed for foreach goto if implicit in internal is lock namespace new null operator out override params private protected public readonly ref return sealed sizeof stackalloc static switch this throw try typeof unchecked unsafe using virtual volatile while yield"
          };
          function keywordsToPattern(words) {
            return "\\b(?:" + words.trim().replace(/ /g, "|") + ")\\b";
          }
          var typeDeclarationKeywords = keywordsToPattern(
            keywordKinds.typeDeclaration
          );
          var keywords = RegExp(
            keywordsToPattern(
              keywordKinds.type + " " + keywordKinds.typeDeclaration + " " + keywordKinds.contextual + " " + keywordKinds.other
            )
          );
          var nonTypeKeywords = keywordsToPattern(
            keywordKinds.typeDeclaration + " " + keywordKinds.contextual + " " + keywordKinds.other
          );
          var nonContextualKeywords = keywordsToPattern(
            keywordKinds.type + " " + keywordKinds.typeDeclaration + " " + keywordKinds.other
          );
          var generic = nested(/<(?:[^<>;=+\-*/%&|^]|<<self>>)*>/.source, 2);
          var nestedRound = nested(/\((?:[^()]|<<self>>)*\)/.source, 2);
          var name = /@?\b[A-Za-z_]\w*\b/.source;
          var genericName = replace2(/<<0>>(?:\s*<<1>>)?/.source, [name, generic]);
          var identifier = replace2(/(?!<<0>>)<<1>>(?:\s*\.\s*<<1>>)*/.source, [
            nonTypeKeywords,
            genericName
          ]);
          var array = /\[\s*(?:,\s*)*\]/.source;
          var typeExpressionWithoutTuple = replace2(
            /<<0>>(?:\s*(?:\?\s*)?<<1>>)*(?:\s*\?)?/.source,
            [identifier, array]
          );
          var tupleElement = replace2(
            /[^,()<>[\];=+\-*/%&|^]|<<0>>|<<1>>|<<2>>/.source,
            [generic, nestedRound, array]
          );
          var tuple = replace2(/\(<<0>>+(?:,<<0>>+)+\)/.source, [tupleElement]);
          var typeExpression = replace2(
            /(?:<<0>>|<<1>>)(?:\s*(?:\?\s*)?<<2>>)*(?:\s*\?)?/.source,
            [tuple, identifier, array]
          );
          var typeInside = {
            keyword: keywords,
            punctuation: /[<>()?,.:[\]]/
          };
          var character = /'(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'/.source;
          var regularString = /"(?:\\.|[^\\"\r\n])*"/.source;
          var verbatimString = /@"(?:""|\\[\s\S]|[^\\"])*"(?!")/.source;
          Prism2.languages.csharp = Prism2.languages.extend("clike", {
            string: [
              {
                pattern: re(/(^|[^$\\])<<0>>/.source, [verbatimString]),
                lookbehind: true,
                greedy: true
              },
              {
                pattern: re(/(^|[^@$\\])<<0>>/.source, [regularString]),
                lookbehind: true,
                greedy: true
              }
            ],
            "class-name": [
              {
                pattern: re(/(\busing\s+static\s+)<<0>>(?=\s*;)/.source, [
                  identifier
                ]),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: re(/(\busing\s+<<0>>\s*=\s*)<<1>>(?=\s*;)/.source, [
                  name,
                  typeExpression
                ]),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: re(/(\busing\s+)<<0>>(?=\s*=)/.source, [name]),
                lookbehind: true
              },
              {
                pattern: re(/(\b<<0>>\s+)<<1>>/.source, [
                  typeDeclarationKeywords,
                  genericName
                ]),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: re(/(\bcatch\s*\(\s*)<<0>>/.source, [identifier]),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: re(/(\bwhere\s+)<<0>>/.source, [name]),
                lookbehind: true
              },
              {
                pattern: re(/(\b(?:is(?:\s+not)?|as)\s+)<<0>>/.source, [
                  typeExpressionWithoutTuple
                ]),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: re(
                  /\b<<0>>(?=\s+(?!<<1>>|with\s*\{)<<2>>(?:\s*[=,;:{)\]]|\s+(?:in|when)\b))/.source,
                  [typeExpression, nonContextualKeywords, name]
                ),
                inside: typeInside
              }
            ],
            keyword: keywords,
            number: /(?:\b0(?:x[\da-f_]*[\da-f]|b[01_]*[01])|(?:\B\.\d+(?:_+\d+)*|\b\d+(?:_+\d+)*(?:\.\d+(?:_+\d+)*)?)(?:e[-+]?\d+(?:_+\d+)*)?)(?:[dflmu]|lu|ul)?\b/i,
            operator: />>=?|<<=?|[-=]>|([-+&|])\1|~|\?\?=?|[-+*/%&|^!=<>]=?/,
            punctuation: /\?\.?|::|[{}[\];(),.:]/
          });
          Prism2.languages.insertBefore("csharp", "number", {
            range: {
              pattern: /\.\./,
              alias: "operator"
            }
          });
          Prism2.languages.insertBefore("csharp", "punctuation", {
            "named-parameter": {
              pattern: re(/([(,]\s*)<<0>>(?=\s*:)/.source, [name]),
              lookbehind: true,
              alias: "punctuation"
            }
          });
          Prism2.languages.insertBefore("csharp", "class-name", {
            namespace: {
              pattern: re(
                /(\b(?:namespace|using)\s+)<<0>>(?:\s*\.\s*<<0>>)*(?=\s*[;{])/.source,
                [name]
              ),
              lookbehind: true,
              inside: {
                punctuation: /\./
              }
            },
            "type-expression": {
              pattern: re(
                /(\b(?:default|sizeof|typeof)\s*\(\s*(?!\s))(?:[^()\s]|\s(?!\s)|<<0>>)*(?=\s*\))/.source,
                [nestedRound]
              ),
              lookbehind: true,
              alias: "class-name",
              inside: typeInside
            },
            "return-type": {
              pattern: re(
                /<<0>>(?=\s+(?:<<1>>\s*(?:=>|[({]|\.\s*this\s*\[)|this\s*\[))/.source,
                [typeExpression, identifier]
              ),
              inside: typeInside,
              alias: "class-name"
            },
            "constructor-invocation": {
              pattern: re(/(\bnew\s+)<<0>>(?=\s*[[({])/.source, [typeExpression]),
              lookbehind: true,
              inside: typeInside,
              alias: "class-name"
            },
            "generic-method": {
              pattern: re(/<<0>>\s*<<1>>(?=\s*\()/.source, [name, generic]),
              inside: {
                function: re(/^<<0>>/.source, [name]),
                generic: {
                  pattern: RegExp(generic),
                  alias: "class-name",
                  inside: typeInside
                }
              }
            },
            "type-list": {
              pattern: re(
                /\b((?:<<0>>\s+<<1>>|record\s+<<1>>\s*<<5>>|where\s+<<2>>)\s*:\s*)(?:<<3>>|<<4>>|<<1>>\s*<<5>>|<<6>>)(?:\s*,\s*(?:<<3>>|<<4>>|<<6>>))*(?=\s*(?:where|[{;]|=>|$))/.source,
                [
                  typeDeclarationKeywords,
                  genericName,
                  name,
                  typeExpression,
                  keywords.source,
                  nestedRound,
                  /\bnew\s*\(\s*\)/.source
                ]
              ),
              lookbehind: true,
              inside: {
                "record-arguments": {
                  pattern: re(/(^(?!new\s*\()<<0>>\s*)<<1>>/.source, [
                    genericName,
                    nestedRound
                  ]),
                  lookbehind: true,
                  greedy: true,
                  inside: Prism2.languages.csharp
                },
                keyword: keywords,
                "class-name": {
                  pattern: RegExp(typeExpression),
                  greedy: true,
                  inside: typeInside
                },
                punctuation: /[,()]/
              }
            },
            preprocessor: {
              pattern: /(^[\t ]*)#.*/m,
              lookbehind: true,
              alias: "property",
              inside: {
                directive: {
                  pattern: /(#)\b(?:define|elif|else|endif|endregion|error|if|line|nullable|pragma|region|undef|warning)\b/,
                  lookbehind: true,
                  alias: "keyword"
                }
              }
            }
          });
          var regularStringOrCharacter = regularString + "|" + character;
          var regularStringCharacterOrComment = replace2(
            /\/(?![*/])|\/\/[^\r\n]*[\r\n]|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>/.source,
            [regularStringOrCharacter]
          );
          var roundExpression = nested(
            replace2(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [
              regularStringCharacterOrComment
            ]),
            2
          );
          var attrTarget = /\b(?:assembly|event|field|method|module|param|property|return|type)\b/.source;
          var attr = replace2(/<<0>>(?:\s*\(<<1>>*\))?/.source, [
            identifier,
            roundExpression
          ]);
          Prism2.languages.insertBefore("csharp", "class-name", {
            attribute: {
              pattern: re(
                /((?:^|[^\s\w>)?])\s*\[\s*)(?:<<0>>\s*:\s*)?<<1>>(?:\s*,\s*<<1>>)*(?=\s*\])/.source,
                [attrTarget, attr]
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                target: {
                  pattern: re(/^<<0>>(?=\s*:)/.source, [attrTarget]),
                  alias: "keyword"
                },
                "attribute-arguments": {
                  pattern: re(/\(<<0>>*\)/.source, [roundExpression]),
                  inside: Prism2.languages.csharp
                },
                "class-name": {
                  pattern: RegExp(identifier),
                  inside: {
                    punctuation: /\./
                  }
                },
                punctuation: /[:,]/
              }
            }
          });
          var formatString = /:[^}\r\n]+/.source;
          var mInterpolationRound = nested(
            replace2(/[^"'/()]|<<0>>|\(<<self>>*\)/.source, [
              regularStringCharacterOrComment
            ]),
            2
          );
          var mInterpolation = replace2(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [
            mInterpolationRound,
            formatString
          ]);
          var sInterpolationRound = nested(
            replace2(
              /[^"'/()]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|<<0>>|\(<<self>>*\)/.source,
              [regularStringOrCharacter]
            ),
            2
          );
          var sInterpolation = replace2(/\{(?!\{)(?:(?![}:])<<0>>)*<<1>>?\}/.source, [
            sInterpolationRound,
            formatString
          ]);
          function createInterpolationInside(interpolation, interpolationRound) {
            return {
              interpolation: {
                pattern: re(/((?:^|[^{])(?:\{\{)*)<<0>>/.source, [interpolation]),
                lookbehind: true,
                inside: {
                  "format-string": {
                    pattern: re(/(^\{(?:(?![}:])<<0>>)*)<<1>>(?=\}$)/.source, [
                      interpolationRound,
                      formatString
                    ]),
                    lookbehind: true,
                    inside: {
                      punctuation: /^:/
                    }
                  },
                  punctuation: /^\{|\}$/,
                  expression: {
                    pattern: /[\s\S]+/,
                    alias: "language-csharp",
                    inside: Prism2.languages.csharp
                  }
                }
              },
              string: /[\s\S]+/
            };
          }
          Prism2.languages.insertBefore("csharp", "string", {
            "interpolation-string": [
              {
                pattern: re(
                  /(^|[^\\])(?:\$@|@\$)"(?:""|\\[\s\S]|\{\{|<<0>>|[^\\{"])*"/.source,
                  [mInterpolation]
                ),
                lookbehind: true,
                greedy: true,
                inside: createInterpolationInside(mInterpolation, mInterpolationRound)
              },
              {
                pattern: re(/(^|[^@\\])\$"(?:\\.|\{\{|<<0>>|[^\\"{])*"/.source, [
                  sInterpolation
                ]),
                lookbehind: true,
                greedy: true,
                inside: createInterpolationInside(sInterpolation, sInterpolationRound)
              }
            ],
            char: {
              pattern: RegExp(character),
              greedy: true
            }
          });
          Prism2.languages.dotnet = Prism2.languages.cs = Prism2.languages.csharp;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/aspnet.js
  var require_aspnet = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/aspnet.js"(exports, module) {
      "use strict";
      var refractorCsharp = require_csharp();
      module.exports = aspnet;
      aspnet.displayName = "aspnet";
      aspnet.aliases = [];
      function aspnet(Prism) {
        Prism.register(refractorCsharp);
        Prism.languages.aspnet = Prism.languages.extend("markup", {
          "page-directive": {
            pattern: /<%\s*@.*%>/,
            alias: "tag",
            inside: {
              "page-directive": {
                pattern: /<%\s*@\s*(?:Assembly|Control|Implements|Import|Master(?:Type)?|OutputCache|Page|PreviousPageType|Reference|Register)?|%>/i,
                alias: "tag"
              },
              rest: Prism.languages.markup.tag.inside
            }
          },
          directive: {
            pattern: /<%.*%>/,
            alias: "tag",
            inside: {
              directive: {
                pattern: /<%\s*?[$=%#:]{0,2}|%>/,
                alias: "tag"
              },
              rest: Prism.languages.csharp
            }
          }
        });
        Prism.languages.aspnet.tag.pattern = /<(?!%)\/?[^\s>\/]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/;
        Prism.languages.insertBefore(
          "inside",
          "punctuation",
          {
            directive: Prism.languages.aspnet["directive"]
          },
          Prism.languages.aspnet.tag.inside["attr-value"]
        );
        Prism.languages.insertBefore("aspnet", "comment", {
          "asp-comment": {
            pattern: /<%--[\s\S]*?--%>/,
            alias: ["asp", "comment"]
          }
        });
        Prism.languages.insertBefore(
          "aspnet",
          Prism.languages.javascript ? "script" : "tag",
          {
            "asp-script": {
              pattern: /(<script(?=.*runat=['"]?server\b)[^>]*>)[\s\S]*?(?=<\/script>)/i,
              lookbehind: true,
              alias: ["asp", "script"],
              inside: Prism.languages.csharp || {}
            }
          }
        );
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/autohotkey.js
  var require_autohotkey = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/autohotkey.js"(exports, module) {
      "use strict";
      module.exports = autohotkey;
      autohotkey.displayName = "autohotkey";
      autohotkey.aliases = [];
      function autohotkey(Prism) {
        Prism.languages.autohotkey = {
          comment: [
            {
              pattern: /(^|\s);.*/,
              lookbehind: true
            },
            {
              pattern: /(^[\t ]*)\/\*(?:[\r\n](?![ \t]*\*\/)|[^\r\n])*(?:[\r\n][ \t]*\*\/)?/m,
              lookbehind: true,
              greedy: true
            }
          ],
          tag: {
            pattern: /^([ \t]*)[^\s,`":]+(?=:[ \t]*$)/m,
            lookbehind: true
          },
          string: /"(?:[^"\n\r]|"")*"/,
          variable: /%\w+%/,
          number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
          operator: /\?|\/\/?=?|:=|\|[=|]?|&[=&]?|\+[=+]?|-[=-]?|\*[=*]?|<(?:<=?|>|=)?|>>?=?|[.^!=~]=?|\b(?:AND|NOT|OR)\b/,
          boolean: /\b(?:false|true)\b/,
          selector: /\b(?:AutoTrim|BlockInput|Break|Click|ClipWait|Continue|Control|ControlClick|ControlFocus|ControlGet|ControlGetFocus|ControlGetPos|ControlGetText|ControlMove|ControlSend|ControlSendRaw|ControlSetText|CoordMode|Critical|DetectHiddenText|DetectHiddenWindows|Drive|DriveGet|DriveSpaceFree|EnvAdd|EnvDiv|EnvGet|EnvMult|EnvSet|EnvSub|EnvUpdate|Exit|ExitApp|FileAppend|FileCopy|FileCopyDir|FileCreateDir|FileCreateShortcut|FileDelete|FileEncoding|FileGetAttrib|FileGetShortcut|FileGetSize|FileGetTime|FileGetVersion|FileInstall|FileMove|FileMoveDir|FileRead|FileReadLine|FileRecycle|FileRecycleEmpty|FileRemoveDir|FileSelectFile|FileSelectFolder|FileSetAttrib|FileSetTime|FormatTime|GetKeyState|Gosub|Goto|GroupActivate|GroupAdd|GroupClose|GroupDeactivate|Gui|GuiControl|GuiControlGet|Hotkey|ImageSearch|IniDelete|IniRead|IniWrite|Input|InputBox|KeyWait|ListHotkeys|ListLines|ListVars|Loop|Menu|MouseClick|MouseClickDrag|MouseGetPos|MouseMove|MsgBox|OnExit|OutputDebug|Pause|PixelGetColor|PixelSearch|PostMessage|Process|Progress|Random|RegDelete|RegRead|RegWrite|Reload|Repeat|Return|Run|RunAs|RunWait|Send|SendEvent|SendInput|SendMessage|SendMode|SendPlay|SendRaw|SetBatchLines|SetCapslockState|SetControlDelay|SetDefaultMouseSpeed|SetEnv|SetFormat|SetKeyDelay|SetMouseDelay|SetNumlockState|SetRegView|SetScrollLockState|SetStoreCapslockMode|SetTimer|SetTitleMatchMode|SetWinDelay|SetWorkingDir|Shutdown|Sleep|Sort|SoundBeep|SoundGet|SoundGetWaveVolume|SoundPlay|SoundSet|SoundSetWaveVolume|SplashImage|SplashTextOff|SplashTextOn|SplitPath|StatusBarGetText|StatusBarWait|StringCaseSense|StringGetPos|StringLeft|StringLen|StringLower|StringMid|StringReplace|StringRight|StringSplit|StringTrimLeft|StringTrimRight|StringUpper|Suspend|SysGet|Thread|ToolTip|Transform|TrayTip|URLDownloadToFile|WinActivate|WinActivateBottom|WinClose|WinGet|WinGetActiveStats|WinGetActiveTitle|WinGetClass|WinGetPos|WinGetText|WinGetTitle|WinHide|WinKill|WinMaximize|WinMenuSelectItem|WinMinimize|WinMinimizeAll|WinMinimizeAllUndo|WinMove|WinRestore|WinSet|WinSetTitle|WinShow|WinWait|WinWaitActive|WinWaitClose|WinWaitNotActive)\b/i,
          constant: /\b(?:a_ahkpath|a_ahkversion|a_appdata|a_appdatacommon|a_autotrim|a_batchlines|a_caretx|a_carety|a_computername|a_controldelay|a_cursor|a_dd|a_ddd|a_dddd|a_defaultmousespeed|a_desktop|a_desktopcommon|a_detecthiddentext|a_detecthiddenwindows|a_endchar|a_eventinfo|a_exitreason|a_fileencoding|a_formatfloat|a_formatinteger|a_gui|a_guicontrol|a_guicontrolevent|a_guievent|a_guiheight|a_guiwidth|a_guix|a_guiy|a_hour|a_iconfile|a_iconhidden|a_iconnumber|a_icontip|a_index|a_ipaddress1|a_ipaddress2|a_ipaddress3|a_ipaddress4|a_is64bitos|a_isadmin|a_iscompiled|a_iscritical|a_ispaused|a_issuspended|a_isunicode|a_keydelay|a_language|a_lasterror|a_linefile|a_linenumber|a_loopfield|a_loopfileattrib|a_loopfiledir|a_loopfileext|a_loopfilefullpath|a_loopfilelongpath|a_loopfilename|a_loopfileshortname|a_loopfileshortpath|a_loopfilesize|a_loopfilesizekb|a_loopfilesizemb|a_loopfiletimeaccessed|a_loopfiletimecreated|a_loopfiletimemodified|a_loopreadline|a_loopregkey|a_loopregname|a_loopregsubkey|a_loopregtimemodified|a_loopregtype|a_mday|a_min|a_mm|a_mmm|a_mmmm|a_mon|a_mousedelay|a_msec|a_mydocuments|a_now|a_nowutc|a_numbatchlines|a_ostype|a_osversion|a_priorhotkey|a_priorkey|a_programfiles|a_programs|a_programscommon|a_ptrsize|a_regview|a_screendpi|a_screenheight|a_screenwidth|a_scriptdir|a_scriptfullpath|a_scripthwnd|a_scriptname|a_sec|a_space|a_startmenu|a_startmenucommon|a_startup|a_startupcommon|a_stringcasesense|a_tab|a_temp|a_thisfunc|a_thishotkey|a_thislabel|a_thismenu|a_thismenuitem|a_thismenuitempos|a_tickcount|a_timeidle|a_timeidlephysical|a_timesincepriorhotkey|a_timesincethishotkey|a_titlematchmode|a_titlematchmodespeed|a_username|a_wday|a_windelay|a_windir|a_workingdir|a_yday|a_year|a_yweek|a_yyyy|clipboard|clipboardall|comspec|errorlevel|programfiles)\b/i,
          builtin: /\b(?:abs|acos|asc|asin|atan|ceil|chr|class|comobjactive|comobjarray|comobjconnect|comobjcreate|comobjerror|comobjflags|comobjget|comobjquery|comobjtype|comobjvalue|cos|dllcall|exp|fileexist|Fileopen|floor|format|il_add|il_create|il_destroy|instr|isfunc|islabel|IsObject|ln|log|ltrim|lv_add|lv_delete|lv_deletecol|lv_getcount|lv_getnext|lv_gettext|lv_insert|lv_insertcol|lv_modify|lv_modifycol|lv_setimagelist|mod|numget|numput|onmessage|regexmatch|regexreplace|registercallback|round|rtrim|sb_seticon|sb_setparts|sb_settext|sin|sqrt|strlen|strreplace|strsplit|substr|tan|tv_add|tv_delete|tv_get|tv_getchild|tv_getcount|tv_getnext|tv_getparent|tv_getprev|tv_getselection|tv_gettext|tv_modify|varsetcapacity|winactive|winexist|__Call|__Get|__New|__Set)\b/i,
          symbol: /\b(?:alt|altdown|altup|appskey|backspace|browser_back|browser_favorites|browser_forward|browser_home|browser_refresh|browser_search|browser_stop|bs|capslock|ctrl|ctrlbreak|ctrldown|ctrlup|del|delete|down|end|enter|esc|escape|f1|f10|f11|f12|f13|f14|f15|f16|f17|f18|f19|f2|f20|f21|f22|f23|f24|f3|f4|f5|f6|f7|f8|f9|home|ins|insert|joy1|joy10|joy11|joy12|joy13|joy14|joy15|joy16|joy17|joy18|joy19|joy2|joy20|joy21|joy22|joy23|joy24|joy25|joy26|joy27|joy28|joy29|joy3|joy30|joy31|joy32|joy4|joy5|joy6|joy7|joy8|joy9|joyaxes|joybuttons|joyinfo|joyname|joypov|joyr|joyu|joyv|joyx|joyy|joyz|lalt|launch_app1|launch_app2|launch_mail|launch_media|lbutton|lcontrol|lctrl|left|lshift|lwin|lwindown|lwinup|mbutton|media_next|media_play_pause|media_prev|media_stop|numlock|numpad0|numpad1|numpad2|numpad3|numpad4|numpad5|numpad6|numpad7|numpad8|numpad9|numpadadd|numpadclear|numpaddel|numpaddiv|numpaddot|numpaddown|numpadend|numpadenter|numpadhome|numpadins|numpadleft|numpadmult|numpadpgdn|numpadpgup|numpadright|numpadsub|numpadup|pgdn|pgup|printscreen|ralt|rbutton|rcontrol|rctrl|right|rshift|rwin|rwindown|rwinup|scrolllock|shift|shiftdown|shiftup|space|tab|up|volume_down|volume_mute|volume_up|wheeldown|wheelleft|wheelright|wheelup|xbutton1|xbutton2)\b/i,
          important: /#\b(?:AllowSameLineComments|ClipboardTimeout|CommentFlag|DerefChar|ErrorStdOut|EscapeChar|HotkeyInterval|HotkeyModifierTimeout|Hotstring|If|IfTimeout|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Include|IncludeAgain|InputLevel|InstallKeybdHook|InstallMouseHook|KeyHistory|MaxHotkeysPerInterval|MaxMem|MaxThreads|MaxThreadsBuffer|MaxThreadsPerHotkey|MenuMaskKey|NoEnv|NoTrayIcon|Persistent|SingleInstance|UseHook|Warn|WinActivateForce)\b/i,
          keyword: /\b(?:Abort|AboveNormal|Add|ahk_class|ahk_exe|ahk_group|ahk_id|ahk_pid|All|Alnum|Alpha|AltSubmit|AltTab|AltTabAndMenu|AltTabMenu|AltTabMenuDismiss|AlwaysOnTop|AutoSize|Background|BackgroundTrans|BelowNormal|between|BitAnd|BitNot|BitOr|BitShiftLeft|BitShiftRight|BitXOr|Bold|Border|Button|ByRef|Catch|Checkbox|Checked|CheckedGray|Choose|ChooseString|Close|Color|ComboBox|Contains|ControlList|Count|Date|DateTime|Days|DDL|Default|DeleteAll|Delimiter|Deref|Destroy|Digit|Disable|Disabled|DropDownList|Edit|Eject|Else|Enable|Enabled|Error|Exist|Expand|ExStyle|FileSystem|Finally|First|Flash|Float|FloatFast|Focus|Font|for|global|Grid|Group|GroupBox|GuiClose|GuiContextMenu|GuiDropFiles|GuiEscape|GuiSize|Hdr|Hidden|Hide|High|HKCC|HKCR|HKCU|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_LOCAL_MACHINE|HKEY_USERS|HKLM|HKU|Hours|HScroll|Icon|IconSmall|ID|IDLast|If|IfEqual|IfExist|IfGreater|IfGreaterOrEqual|IfInString|IfLess|IfLessOrEqual|IfMsgBox|IfNotEqual|IfNotExist|IfNotInString|IfWinActive|IfWinExist|IfWinNotActive|IfWinNotExist|Ignore|ImageList|in|Integer|IntegerFast|Interrupt|is|italic|Join|Label|LastFound|LastFoundExist|Limit|Lines|List|ListBox|ListView|local|Lock|Logoff|Low|Lower|Lowercase|MainWindow|Margin|Maximize|MaximizeBox|MaxSize|Minimize|MinimizeBox|MinMax|MinSize|Minutes|MonthCal|Mouse|Move|Multi|NA|No|NoActivate|NoDefault|NoHide|NoIcon|NoMainWindow|norm|Normal|NoSort|NoSortHdr|NoStandard|Not|NoTab|NoTimers|Number|Off|Ok|On|OwnDialogs|Owner|Parse|Password|Picture|Pixel|Pos|Pow|Priority|ProcessName|Radio|Range|Read|ReadOnly|Realtime|Redraw|Region|REG_BINARY|REG_DWORD|REG_EXPAND_SZ|REG_MULTI_SZ|REG_SZ|Relative|Rename|Report|Resize|Restore|Retry|RGB|Screen|Seconds|Section|Serial|SetLabel|ShiftAltTab|Show|Single|Slider|SortDesc|Standard|static|Status|StatusBar|StatusCD|strike|Style|Submit|SysMenu|Tab2|TabStop|Text|Theme|Throw|Tile|ToggleCheck|ToggleEnable|ToolWindow|Top|Topmost|TransColor|Transparent|Tray|TreeView|Try|TryAgain|Type|UnCheck|underline|Unicode|Unlock|Until|UpDown|Upper|Uppercase|UseErrorLevel|Vis|VisFirst|Visible|VScroll|Wait|WaitClose|WantCtrlA|WantF2|WantReturn|While|Wrap|Xdigit|xm|xp|xs|Yes|ym|yp|ys)\b/i,
          function: /[^(); \t,\n+*\-=?>:\\\/<&%\[\]]+(?=\()/,
          punctuation: /[{}[\]():,]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/autoit.js
  var require_autoit = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/autoit.js"(exports, module) {
      "use strict";
      module.exports = autoit;
      autoit.displayName = "autoit";
      autoit.aliases = [];
      function autoit(Prism) {
        Prism.languages.autoit = {
          comment: [
            /;.*/,
            {
              pattern: /(^[\t ]*)#(?:comments-start|cs)[\s\S]*?^[ \t]*#(?:ce|comments-end)/m,
              lookbehind: true
            }
          ],
          url: {
            pattern: /(^[\t ]*#include\s+)(?:<[^\r\n>]+>|"[^\r\n"]+")/m,
            lookbehind: true
          },
          string: {
            pattern: /(["'])(?:\1\1|(?!\1)[^\r\n])*\1/,
            greedy: true,
            inside: {
              variable: /([%$@])\w+\1/
            }
          },
          directive: {
            pattern: /(^[\t ]*)#[\w-]+/m,
            lookbehind: true,
            alias: "keyword"
          },
          function: /\b\w+(?=\()/,
          variable: /[$@]\w+/,
          keyword: /\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\b/i,
          number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,
          boolean: /\b(?:False|True)\b/i,
          operator: /<[=>]?|[-+*\/=&>]=?|[?^]|\b(?:And|Not|Or)\b/i,
          punctuation: /[\[\]().,:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/avisynth.js
  var require_avisynth = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/avisynth.js"(exports, module) {
      "use strict";
      module.exports = avisynth;
      avisynth.displayName = "avisynth";
      avisynth.aliases = ["avs"];
      function avisynth(Prism) {
        ;
        (function(Prism2) {
          function replace2(pattern, replacements) {
            return pattern.replace(/<<(\d+)>>/g, function(m, index2) {
              return replacements[+index2];
            });
          }
          function re(pattern, replacements, flags) {
            return RegExp(replace2(pattern, replacements), flags || "");
          }
          var types2 = /bool|clip|float|int|string|val/.source;
          var internals = [
            /is(?:bool|clip|float|int|string)|defined|(?:(?:internal)?function|var)?exists?/.source,
            /apply|assert|default|eval|import|nop|select|undefined/.source,
            /opt_(?:allowfloataudio|avipadscanlines|dwchannelmask|enable_(?:b64a|planartopackedrgb|v210|y3_10_10|y3_10_16)|usewaveextensible|vdubplanarhack)|set(?:cachemode|maxcpu|memorymax|planarlegacyalignment|workingdir)/.source,
            /hex(?:value)?|value/.source,
            /abs|ceil|continued(?:denominator|numerator)?|exp|floor|fmod|frac|log(?:10)?|max|min|muldiv|pi|pow|rand|round|sign|spline|sqrt/.source,
            /a?sinh?|a?cosh?|a?tan[2h]?/.source,
            /(?:bit(?:and|not|x?or|[lr]?shift[aslu]?|sh[lr]|sa[lr]|[lr]rotatel?|ro[rl]|te?st|set(?:count)?|cl(?:ea)?r|ch(?:an)?ge?))/.source,
            /average(?:[bgr]|chroma[uv]|luma)|(?:[rgb]|chroma[uv]|luma|rgb|[yuv](?=difference(?:fromprevious|tonext)))difference(?:fromprevious|tonext)?|[yuvrgb]plane(?:median|min|max|minmaxdifference)/.source,
            /getprocessinfo|logmsg|script(?:dir(?:utf8)?|file(?:utf8)?|name(?:utf8)?)|setlogparams/.source,
            /chr|(?:fill|find|left|mid|replace|rev|right)str|format|[lu]case|ord|str(?:cmpi?|fromutf8|len|toutf8)|time|trim(?:all|left|right)/.source,
            /isversionorgreater|version(?:number|string)/.source,
            /buildpixeltype|colorspacenametopixeltype/.source,
            /addautoloaddir|on(?:cpu|cuda)|prefetch|setfiltermtmode/.source
          ].join("|");
          var properties = [
            /has(?:audio|video)/.source,
            /height|width/.source,
            /frame(?:count|rate)|framerate(?:denominator|numerator)/.source,
            /getparity|is(?:field|frame)based/.source,
            /bitspercomponent|componentsize|hasalpha|is(?:planar(?:rgba?)?|interleaved|rgb(?:24|32|48|64)?|y(?:8|u(?:va?|y2))?|yv(?:12|16|24|411)|420|422|444|packedrgb)|numcomponents|pixeltype/.source,
            /audio(?:bits|channels|duration|length(?:[fs]|hi|lo)?|rate)|isaudio(?:float|int)/.source
          ].join("|");
          var filters = [
            /avi(?:file)?source|directshowsource|image(?:reader|source|sourceanim)|opendmlsource|segmented(?:avisource|directshowsource)|wavsource/.source,
            /coloryuv|convertbacktoyuy2|convertto(?:RGB(?:24|32|48|64)|(?:planar)?RGBA?|Y8?|YV(?:12|16|24|411)|YUVA?(?:411|420|422|444)|YUY2)|fixluminance|gr[ae]yscale|invert|levels|limiter|mergea?rgb|merge(?:chroma|luma)|rgbadjust|show(?:alpha|blue|green|red)|swapuv|tweak|[uv]toy8?|ytouv/.source,
            /(?:colorkey|reset)mask|layer|mask(?:hs)?|merge|overlay|subtract/.source,
            /addborders|(?:bicubic|bilinear|blackman|gauss|lanczos4|lanczos|point|sinc|spline(?:16|36|64))resize|crop(?:bottom)?|flip(?:horizontal|vertical)|(?:horizontal|vertical)?reduceby2|letterbox|skewrows|turn(?:180|left|right)/.source,
            /blur|fixbrokenchromaupsampling|generalconvolution|(?:spatial|temporal)soften|sharpen/.source,
            /trim|(?:un)?alignedsplice|(?:assume|assumescaled|change|convert)FPS|(?:delete|duplicate)frame|dissolve|fade(?:in|io|out)[02]?|freezeframe|interleave|loop|reverse|select(?:even|odd|(?:range)?every)/.source,
            /assume[bt]ff|assume(?:field|frame)based|bob|complementparity|doubleweave|peculiarblend|pulldown|separate(?:columns|fields|rows)|swapfields|weave(?:columns|rows)?/.source,
            /amplify(?:db)?|assumesamplerate|audiodub(?:ex)?|audiotrim|convertaudioto(?:(?:8|16|24|32)bit|float)|converttomono|delayaudio|ensurevbrmp3sync|get(?:left|right)?channel|kill(?:audio|video)|mergechannels|mixaudio|monotostereo|normalize|resampleaudio|ssrc|supereq|timestretch/.source,
            /animate|applyrange|conditional(?:filter|reader|select)|frameevaluate|scriptclip|tcp(?:server|source)|writefile(?:end|if|start)?/.source,
            /imagewriter/.source,
            /blackness|blankclip|colorbars(?:hd)?|compare|dumpfiltergraph|echo|histogram|info|messageclip|preroll|setgraphanalysis|show(?:framenumber|smpte|time)|showfiveversions|stack(?:horizontal|vertical)|subtitle|tone|version/.source
          ].join("|");
          var allinternals = [internals, properties, filters].join("|");
          Prism2.languages.avisynth = {
            comment: [
              {
                pattern: /(^|[^\\])\[\*(?:[^\[*]|\[(?!\*)|\*(?!\])|\[\*(?:[^\[*]|\[(?!\*)|\*(?!\]))*\*\])*\*\]/,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /(^|[^\\$])#.*/,
                lookbehind: true,
                greedy: true
              }
            ],
            argument: {
              pattern: re(/\b(?:<<0>>)\s+("?)\w+\1/.source, [types2], "i"),
              inside: {
                keyword: /^\w+/
              }
            },
            "argument-label": {
              pattern: /([,(][\s\\]*)\w+\s*=(?!=)/,
              lookbehind: true,
              inside: {
                "argument-name": {
                  pattern: /^\w+/,
                  alias: "punctuation"
                },
                punctuation: /=$/
              }
            },
            string: [
              {
                pattern: /"""[\s\S]*?"""/,
                greedy: true
              },
              {
                pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
                greedy: true,
                inside: {
                  constant: {
                    pattern: /\b(?:DEFAULT_MT_MODE|(?:MAINSCRIPT|PROGRAM|SCRIPT)DIR|(?:MACHINE|USER)_(?:CLASSIC|PLUS)_PLUGINS)\b/
                  }
                }
              }
            ],
            variable: /\b(?:last)\b/i,
            boolean: /\b(?:false|no|true|yes)\b/i,
            keyword: /\b(?:catch|else|for|function|global|if|return|try|while|__END__)\b/i,
            constant: /\bMT_(?:MULTI_INSTANCE|NICE_FILTER|SERIALIZED|SPECIAL_MT)\b/,
            "builtin-function": {
              pattern: re(/\b(?:<<0>>)\b/.source, [allinternals], "i"),
              alias: "function"
            },
            "type-cast": {
              pattern: re(/\b(?:<<0>>)(?=\s*\()/.source, [types2], "i"),
              alias: "keyword"
            },
            function: {
              pattern: /\b[a-z_]\w*(?=\s*\()|(\.)[a-z_]\w*\b/i,
              lookbehind: true
            },
            "line-continuation": {
              pattern: /(^[ \t]*)\\|\\(?=[ \t]*$)/m,
              lookbehind: true,
              alias: "punctuation"
            },
            number: /\B\$(?:[\da-f]{6}|[\da-f]{8})\b|(?:(?:\b|\B-)\d+(?:\.\d*)?\b|\B\.\d+\b)/i,
            operator: /\+\+?|[!=<>]=?|&&|\|\||[?:*/%-]/,
            punctuation: /[{}\[\]();,.]/
          };
          Prism2.languages.avs = Prism2.languages.avisynth;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/avro-idl.js
  var require_avro_idl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/avro-idl.js"(exports, module) {
      "use strict";
      module.exports = avroIdl;
      avroIdl.displayName = "avroIdl";
      avroIdl.aliases = [];
      function avroIdl(Prism) {
        Prism.languages["avro-idl"] = {
          comment: {
            pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
            greedy: true
          },
          string: {
            pattern: /(^|[^\\])"(?:[^\r\n"\\]|\\.)*"/,
            lookbehind: true,
            greedy: true
          },
          annotation: {
            pattern: /@(?:[$\w.-]|`[^\r\n`]+`)+/,
            greedy: true,
            alias: "function"
          },
          "function-identifier": {
            pattern: /`[^\r\n`]+`(?=\s*\()/,
            greedy: true,
            alias: "function"
          },
          identifier: {
            pattern: /`[^\r\n`]+`/,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:enum|error|protocol|record|throws)\b\s+)[$\w]+/,
            lookbehind: true,
            greedy: true
          },
          keyword: /\b(?:array|boolean|bytes|date|decimal|double|enum|error|false|fixed|float|idl|import|int|local_timestamp_ms|long|map|null|oneway|protocol|record|schema|string|throws|time_ms|timestamp_ms|true|union|uuid|void)\b/,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          number: [
            {
              pattern: /(^|[^\w.])-?(?:(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|0x(?:[a-f0-9]+(?:\.[a-f0-9]*)?|\.[a-f0-9]+)(?:p[+-]?\d+)?)[dfl]?(?![\w.])/i,
              lookbehind: true
            },
            /-?\b(?:Infinity|NaN)\b/
          ],
          operator: /=/,
          punctuation: /[()\[\]{}<>.:,;-]/
        };
        Prism.languages.avdl = Prism.languages["avro-idl"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bash.js
  var require_bash = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bash.js"(exports, module) {
      "use strict";
      module.exports = bash;
      bash.displayName = "bash";
      bash.aliases = ["shell"];
      function bash(Prism) {
        ;
        (function(Prism2) {
          var envVars = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b";
          var commandAfterHeredoc = {
            pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
            lookbehind: true,
            alias: "punctuation",
            inside: null
          };
          var insideString = {
            bash: commandAfterHeredoc,
            environment: {
              pattern: RegExp("\\$" + envVars),
              alias: "constant"
            },
            variable: [
              {
                pattern: /\$?\(\([\s\S]+?\)\)/,
                greedy: true,
                inside: {
                  variable: [
                    {
                      pattern: /(^\$\(\([\s\S]+)\)\)/,
                      lookbehind: true
                    },
                    /^\$\(\(/
                  ],
                  number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
                  operator: /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
                  punctuation: /\(\(?|\)\)?|,|;/
                }
              },
              {
                pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
                greedy: true,
                inside: {
                  variable: /^\$\(|^`|\)$|`$/
                }
              },
              {
                pattern: /\$\{[^}]+\}/,
                greedy: true,
                inside: {
                  operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
                  punctuation: /[\[\]]/,
                  environment: {
                    pattern: RegExp("(\\{)" + envVars),
                    lookbehind: true,
                    alias: "constant"
                  }
                }
              },
              /\$(?:\w+|[#?*!@$])/
            ],
            entity: /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
          };
          Prism2.languages.bash = {
            shebang: {
              pattern: /^#!\s*\/.*/,
              alias: "important"
            },
            comment: {
              pattern: /(^|[^"{\\$])#.*/,
              lookbehind: true
            },
            "function-name": [
              {
                pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
                lookbehind: true,
                alias: "function"
              },
              {
                pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
                alias: "function"
              }
            ],
            "for-or-select": {
              pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
              alias: "variable",
              lookbehind: true
            },
            "assign-left": {
              pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
              inside: {
                environment: {
                  pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + envVars),
                  lookbehind: true,
                  alias: "constant"
                }
              },
              alias: "variable",
              lookbehind: true
            },
            string: [
              {
                pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
                lookbehind: true,
                greedy: true,
                inside: insideString
              },
              {
                pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
                lookbehind: true,
                greedy: true,
                inside: {
                  bash: commandAfterHeredoc
                }
              },
              {
                pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
                lookbehind: true,
                greedy: true,
                inside: insideString
              },
              {
                pattern: /(^|[^$\\])'[^']*'/,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
                greedy: true,
                inside: {
                  entity: insideString.entity
                }
              }
            ],
            environment: {
              pattern: RegExp("\\$?" + envVars),
              alias: "constant"
            },
            variable: insideString.variable,
            function: {
              pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
              lookbehind: true
            },
            keyword: {
              pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
              lookbehind: true
            },
            builtin: {
              pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
              lookbehind: true,
              alias: "class-name"
            },
            boolean: {
              pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
              lookbehind: true
            },
            "file-descriptor": {
              pattern: /\B&\d\b/,
              alias: "important"
            },
            operator: {
              pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
              inside: {
                "file-descriptor": {
                  pattern: /^\d/,
                  alias: "important"
                }
              }
            },
            punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
            number: {
              pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
              lookbehind: true
            }
          };
          commandAfterHeredoc.inside = Prism2.languages.bash;
          var toBeCopied = [
            "comment",
            "function-name",
            "for-or-select",
            "assign-left",
            "string",
            "environment",
            "function",
            "keyword",
            "builtin",
            "boolean",
            "file-descriptor",
            "operator",
            "punctuation",
            "number"
          ];
          var inside = insideString.variable[1].inside;
          for (var i = 0; i < toBeCopied.length; i++) {
            inside[toBeCopied[i]] = Prism2.languages.bash[toBeCopied[i]];
          }
          Prism2.languages.shell = Prism2.languages.bash;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/basic.js
  var require_basic = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/basic.js"(exports, module) {
      "use strict";
      module.exports = basic;
      basic.displayName = "basic";
      basic.aliases = [];
      function basic(Prism) {
        Prism.languages.basic = {
          comment: {
            pattern: /(?:!|REM\b).+/i,
            inside: {
              keyword: /^REM/i
            }
          },
          string: {
            pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/,
            greedy: true
          },
          number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
          keyword: /\b(?:AS|BEEP|BLOAD|BSAVE|CALL(?: ABSOLUTE)?|CASE|CHAIN|CHDIR|CLEAR|CLOSE|CLS|COM|COMMON|CONST|DATA|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DIM|DO|DOUBLE|ELSE|ELSEIF|END|ENVIRON|ERASE|ERROR|EXIT|FIELD|FILES|FOR|FUNCTION|GET|GOSUB|GOTO|IF|INPUT|INTEGER|IOCTL|KEY|KILL|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|MKDIR|NAME|NEXT|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPTION BASE|OUT|POKE|PUT|READ|REDIM|REM|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SELECT CASE|SHARED|SHELL|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|SUB|SWAP|SYSTEM|THEN|TIMER|TO|TROFF|TRON|TYPE|UNLOCK|UNTIL|USING|VIEW PRINT|WAIT|WEND|WHILE|WRITE)(?:\$|\b)/i,
          function: /\b(?:ABS|ACCESS|ACOS|ANGLE|AREA|ARITHMETIC|ARRAY|ASIN|ASK|AT|ATN|BASE|BEGIN|BREAK|CAUSE|CEIL|CHR|CLIP|COLLATE|COLOR|CON|COS|COSH|COT|CSC|DATE|DATUM|DEBUG|DECIMAL|DEF|DEG|DEGREES|DELETE|DET|DEVICE|DISPLAY|DOT|ELAPSED|EPS|ERASABLE|EXLINE|EXP|EXTERNAL|EXTYPE|FILETYPE|FIXED|FP|GO|GRAPH|HANDLER|IDN|IMAGE|IN|INT|INTERNAL|IP|IS|KEYED|LBOUND|LCASE|LEFT|LEN|LENGTH|LET|LINE|LINES|LOG|LOG10|LOG2|LTRIM|MARGIN|MAT|MAX|MAXNUM|MID|MIN|MISSING|MOD|NATIVE|NUL|NUMERIC|OF|OPTION|ORD|ORGANIZATION|OUTIN|OUTPUT|PI|POINT|POINTER|POINTS|POS|PRINT|PROGRAM|PROMPT|RAD|RADIANS|RANDOMIZE|RECORD|RECSIZE|RECTYPE|RELATIVE|REMAINDER|REPEAT|REST|RETRY|REWRITE|RIGHT|RND|ROUND|RTRIM|SAME|SEC|SELECT|SEQUENTIAL|SET|SETTER|SGN|SIN|SINH|SIZE|SKIP|SQR|STANDARD|STATUS|STR|STREAM|STYLE|TAB|TAN|TANH|TEMPLATE|TEXT|THERE|TIME|TIMEOUT|TRACE|TRANSFORM|TRUNCATE|UBOUND|UCASE|USE|VAL|VARIABLE|VIEWPORT|WHEN|WINDOW|WITH|ZER|ZONEWIDTH)(?:\$|\b)/i,
          operator: /<[=>]?|>=?|[+\-*\/^=&]|\b(?:AND|EQV|IMP|NOT|OR|XOR)\b/i,
          punctuation: /[,;:()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/batch.js
  var require_batch = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/batch.js"(exports, module) {
      "use strict";
      module.exports = batch;
      batch.displayName = "batch";
      batch.aliases = [];
      function batch(Prism) {
        ;
        (function(Prism2) {
          var variable = /%%?[~:\w]+%?|!\S+!/;
          var parameter = {
            pattern: /\/[a-z?]+(?=[ :]|$):?|-[a-z]\b|--[a-z-]+\b/im,
            alias: "attr-name",
            inside: {
              punctuation: /:/
            }
          };
          var string3 = /"(?:[\\"]"|[^"])*"(?!")/;
          var number3 = /(?:\b|-)\d+\b/;
          Prism2.languages.batch = {
            comment: [
              /^::.*/m,
              {
                pattern: /((?:^|[&(])[ \t]*)rem\b(?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
                lookbehind: true
              }
            ],
            label: {
              pattern: /^:.*/m,
              alias: "property"
            },
            command: [
              {
                pattern: /((?:^|[&(])[ \t]*)for(?: \/[a-z?](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* \S+ in \([^)]+\) do/im,
                lookbehind: true,
                inside: {
                  keyword: /\b(?:do|in)\b|^for\b/i,
                  string: string3,
                  parameter,
                  variable,
                  number: number3,
                  punctuation: /[()',]/
                }
              },
              {
                pattern: /((?:^|[&(])[ \t]*)if(?: \/[a-z?](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* (?:not )?(?:cmdextversion \d+|defined \w+|errorlevel \d+|exist \S+|(?:"[^"]*"|(?!")(?:(?!==)\S)+)?(?:==| (?:equ|geq|gtr|leq|lss|neq) )(?:"[^"]*"|[^\s"]\S*))/im,
                lookbehind: true,
                inside: {
                  keyword: /\b(?:cmdextversion|defined|errorlevel|exist|not)\b|^if\b/i,
                  string: string3,
                  parameter,
                  variable,
                  number: number3,
                  operator: /\^|==|\b(?:equ|geq|gtr|leq|lss|neq)\b/i
                }
              },
              {
                pattern: /((?:^|[&()])[ \t]*)else\b/im,
                lookbehind: true,
                inside: {
                  keyword: /^else\b/i
                }
              },
              {
                pattern: /((?:^|[&(])[ \t]*)set(?: \/[a-z](?:[ :](?:"[^"]*"|[^\s"/]\S*))?)* (?:[^^&)\r\n]|\^(?:\r\n|[\s\S]))*/im,
                lookbehind: true,
                inside: {
                  keyword: /^set\b/i,
                  string: string3,
                  parameter,
                  variable: [variable, /\w+(?=(?:[*\/%+\-&^|]|<<|>>)?=)/],
                  number: number3,
                  operator: /[*\/%+\-&^|]=?|<<=?|>>=?|[!~_=]/,
                  punctuation: /[()',]/
                }
              },
              {
                pattern: /((?:^|[&(])[ \t]*@?)\w+\b(?:"(?:[\\"]"|[^"])*"(?!")|[^"^&)\r\n]|\^(?:\r\n|[\s\S]))*/m,
                lookbehind: true,
                inside: {
                  keyword: /^\w+\b/,
                  string: string3,
                  parameter,
                  label: {
                    pattern: /(^\s*):\S+/m,
                    lookbehind: true,
                    alias: "property"
                  },
                  variable,
                  number: number3,
                  operator: /\^/
                }
              }
            ],
            operator: /[&@]/,
            punctuation: /[()']/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bbcode.js
  var require_bbcode = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bbcode.js"(exports, module) {
      "use strict";
      module.exports = bbcode;
      bbcode.displayName = "bbcode";
      bbcode.aliases = ["shortcode"];
      function bbcode(Prism) {
        Prism.languages.bbcode = {
          tag: {
            pattern: /\[\/?[^\s=\]]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+))?(?:\s+[^\s=\]]+\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+))*\s*\]/,
            inside: {
              tag: {
                pattern: /^\[\/?[^\s=\]]+/,
                inside: {
                  punctuation: /^\[\/?/
                }
              },
              "attr-value": {
                pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'"\]=]+)/,
                inside: {
                  punctuation: [
                    /^=/,
                    {
                      pattern: /^(\s*)["']|["']$/,
                      lookbehind: true
                    }
                  ]
                }
              },
              punctuation: /\]/,
              "attr-name": /[^\s=\]]+/
            }
          }
        };
        Prism.languages.shortcode = Prism.languages.bbcode;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bicep.js
  var require_bicep = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bicep.js"(exports, module) {
      "use strict";
      module.exports = bicep;
      bicep.displayName = "bicep";
      bicep.aliases = [];
      function bicep(Prism) {
        Prism.languages.bicep = {
          comment: [
            {
              pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          property: [
            {
              pattern: /([\r\n][ \t]*)[a-z_]\w*(?=[ \t]*:)/i,
              lookbehind: true
            },
            {
              pattern: /([\r\n][ \t]*)'(?:\\.|\$(?!\{)|[^'\\\r\n$])*'(?=[ \t]*:)/,
              lookbehind: true,
              greedy: true
            }
          ],
          string: [
            {
              pattern: /'''[^'][\s\S]*?'''/,
              greedy: true
            },
            {
              pattern: /(^|[^\\'])'(?:\\.|\$(?!\{)|[^'\\\r\n$])*'/,
              lookbehind: true,
              greedy: true
            }
          ],
          "interpolated-string": {
            pattern: /(^|[^\\'])'(?:\\.|\$(?:(?!\{)|\{[^{}\r\n]*\})|[^'\\\r\n$])*'/,
            lookbehind: true,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /\$\{[^{}\r\n]*\}/,
                inside: {
                  expression: {
                    pattern: /(^\$\{)[\s\S]+(?=\}$)/,
                    lookbehind: true
                  },
                  punctuation: /^\$\{|\}$/
                }
              },
              string: /[\s\S]+/
            }
          },
          datatype: {
            pattern: /(\b(?:output|param)\b[ \t]+\w+[ \t]+)\w+\b/,
            lookbehind: true,
            alias: "class-name"
          },
          boolean: /\b(?:false|true)\b/,
          keyword: /\b(?:existing|for|if|in|module|null|output|param|resource|targetScope|var)\b/,
          decorator: /@\w+\b/,
          function: /\b[a-z_]\w*(?=[ \t]*\()/i,
          number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
          operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/,
          punctuation: /[{}[\];(),.:]/
        };
        Prism.languages.bicep["interpolated-string"].inside["interpolation"].inside["expression"].inside = Prism.languages.bicep;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/birb.js
  var require_birb = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/birb.js"(exports, module) {
      "use strict";
      module.exports = birb;
      birb.displayName = "birb";
      birb.aliases = [];
      function birb(Prism) {
        Prism.languages.birb = Prism.languages.extend("clike", {
          string: {
            pattern: /r?("|')(?:\\.|(?!\1)[^\\])*\1/,
            greedy: true
          },
          "class-name": [
            /\b[A-Z](?:[\d_]*[a-zA-Z]\w*)?\b/,
            /\b(?:[A-Z]\w*|(?!(?:var|void)\b)[a-z]\w*)(?=\s+\w+\s*[;,=()])/
          ],
          keyword: /\b(?:assert|break|case|class|const|default|else|enum|final|follows|for|grab|if|nest|new|next|noSeeb|return|static|switch|throw|var|void|while)\b/,
          operator: /\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?|:/,
          variable: /\b[a-z_]\w*\b/
        });
        Prism.languages.insertBefore("birb", "function", {
          metadata: {
            pattern: /<\w+>/,
            greedy: true,
            alias: "symbol"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bison.js
  var require_bison = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bison.js"(exports, module) {
      "use strict";
      var refractorC = require_c();
      module.exports = bison;
      bison.displayName = "bison";
      bison.aliases = [];
      function bison(Prism) {
        Prism.register(refractorC);
        Prism.languages.bison = Prism.languages.extend("c", {});
        Prism.languages.insertBefore("bison", "comment", {
          bison: {
            pattern: /^(?:[^%]|%(?!%))*%%[\s\S]*?%%/,
            inside: {
              c: {
                pattern: /%\{[\s\S]*?%\}|\{(?:\{[^}]*\}|[^{}])*\}/,
                inside: {
                  delimiter: {
                    pattern: /^%?\{|%?\}$/,
                    alias: "punctuation"
                  },
                  "bison-variable": {
                    pattern: /[$@](?:<[^\s>]+>)?[\w$]+/,
                    alias: "variable",
                    inside: {
                      punctuation: /<|>/
                    }
                  },
                  rest: Prism.languages.c
                }
              },
              comment: Prism.languages.c.comment,
              string: Prism.languages.c.string,
              property: /\S+(?=:)/,
              keyword: /%\w+/,
              number: {
                pattern: /(^|[^@])\b(?:0x[\da-f]+|\d+)/i,
                lookbehind: true
              },
              punctuation: /%[%?]|[|:;\[\]<>]/
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bnf.js
  var require_bnf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bnf.js"(exports, module) {
      "use strict";
      module.exports = bnf;
      bnf.displayName = "bnf";
      bnf.aliases = ["rbnf"];
      function bnf(Prism) {
        Prism.languages.bnf = {
          string: {
            pattern: /"[^\r\n"]*"|'[^\r\n']*'/
          },
          definition: {
            pattern: /<[^<>\r\n\t]+>(?=\s*::=)/,
            alias: ["rule", "keyword"],
            inside: {
              punctuation: /^<|>$/
            }
          },
          rule: {
            pattern: /<[^<>\r\n\t]+>/,
            inside: {
              punctuation: /^<|>$/
            }
          },
          operator: /::=|[|()[\]{}*+?]|\.{3}/
        };
        Prism.languages.rbnf = Prism.languages.bnf;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/brainfuck.js
  var require_brainfuck = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/brainfuck.js"(exports, module) {
      "use strict";
      module.exports = brainfuck;
      brainfuck.displayName = "brainfuck";
      brainfuck.aliases = [];
      function brainfuck(Prism) {
        Prism.languages.brainfuck = {
          pointer: {
            pattern: /<|>/,
            alias: "keyword"
          },
          increment: {
            pattern: /\+/,
            alias: "inserted"
          },
          decrement: {
            pattern: /-/,
            alias: "deleted"
          },
          branching: {
            pattern: /\[|\]/,
            alias: "important"
          },
          operator: /[.,]/,
          comment: /\S+/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/brightscript.js
  var require_brightscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/brightscript.js"(exports, module) {
      "use strict";
      module.exports = brightscript;
      brightscript.displayName = "brightscript";
      brightscript.aliases = [];
      function brightscript(Prism) {
        Prism.languages.brightscript = {
          comment: /(?:\brem|').*/i,
          "directive-statement": {
            pattern: /(^[\t ]*)#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if).*/im,
            lookbehind: true,
            alias: "property",
            inside: {
              "error-message": {
                pattern: /(^#error).+/,
                lookbehind: true
              },
              directive: {
                pattern: /^#(?:const|else(?:[\t ]+if)?|end[\t ]+if|error|if)/,
                alias: "keyword"
              },
              expression: {
                pattern: /[\s\S]+/,
                inside: null
              }
            }
          },
          property: {
            pattern: /([\r\n{,][\t ]*)(?:(?!\d)\w+|"(?:[^"\r\n]|"")*"(?!"))(?=[ \t]*:)/,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /"(?:[^"\r\n]|"")*"(?!")/,
            greedy: true
          },
          "class-name": {
            pattern: /(\bAs[\t ]+)\w+/i,
            lookbehind: true
          },
          keyword: /\b(?:As|Dim|Each|Else|Elseif|End|Exit|For|Function|Goto|If|In|Print|Return|Step|Stop|Sub|Then|To|While)\b/i,
          boolean: /\b(?:false|true)\b/i,
          function: /\b(?!\d)\w+(?=[\t ]*\()/,
          number: /(?:\b\d+(?:\.\d+)?(?:[ed][+-]\d+)?|&h[a-f\d]+)\b[%&!#]?/i,
          operator: /--|\+\+|>>=?|<<=?|<>|[-+*/\\<>]=?|[:^=?]|\b(?:and|mod|not|or)\b/i,
          punctuation: /[.,;()[\]{}]/,
          constant: /\b(?:LINE_NUM)\b/i
        };
        Prism.languages.brightscript["directive-statement"].inside.expression.inside = Prism.languages.brightscript;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bro.js
  var require_bro = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bro.js"(exports, module) {
      "use strict";
      module.exports = bro;
      bro.displayName = "bro";
      bro.aliases = [];
      function bro(Prism) {
        Prism.languages.bro = {
          comment: {
            pattern: /(^|[^\\$])#.*/,
            lookbehind: true,
            inside: {
              italic: /\b(?:FIXME|TODO|XXX)\b/
            }
          },
          string: {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          boolean: /\b[TF]\b/,
          function: {
            pattern: /(\b(?:event|function|hook)[ \t]+)\w+(?:::\w+)?/,
            lookbehind: true
          },
          builtin: /(?:@(?:load(?:-(?:plugin|sigs))?|unload|prefixes|ifn?def|else|(?:end)?if|DIR|FILENAME))|(?:&?(?:add_func|create_expire|default|delete_func|encrypt|error_handler|expire_func|group|log|mergeable|optional|persistent|priority|raw_output|read_expire|redef|rotate_interval|rotate_size|synchronized|type_column|write_expire))/,
          constant: {
            pattern: /(\bconst[ \t]+)\w+/i,
            lookbehind: true
          },
          keyword: /\b(?:add|addr|alarm|any|bool|break|const|continue|count|delete|double|else|enum|event|export|file|for|function|global|hook|if|in|int|interval|local|module|next|of|opaque|pattern|port|print|record|return|schedule|set|string|subnet|table|time|timeout|using|vector|when)\b/,
          operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&|\|\|?|\?|\*|\/|~|\^|%/,
          number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
          punctuation: /[{}[\];(),.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/bsl.js
  var require_bsl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/bsl.js"(exports, module) {
      "use strict";
      module.exports = bsl;
      bsl.displayName = "bsl";
      bsl.aliases = [];
      function bsl(Prism) {
        Prism.languages.bsl = {
          comment: /\/\/.*/,
          string: [
            {
              pattern: /"(?:[^"]|"")*"(?!")/,
              greedy: true
            },
            {
              pattern: /'(?:[^'\r\n\\]|\\.)*'/
            }
          ],
          keyword: [
            {
              pattern: /(^|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:пока|для|новый|прервать|попытка|исключение|вызватьисключение|иначе|конецпопытки|неопределено|функция|перем|возврат|конецфункции|если|иначеесли|процедура|конецпроцедуры|тогда|знач|экспорт|конецесли|из|каждого|истина|ложь|по|цикл|конеццикла|выполнить)(?![\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])/i,
              lookbehind: true
            },
            {
              pattern: /\b(?:break|do|each|else|elseif|enddo|endfunction|endif|endprocedure|endtry|except|execute|export|false|for|function|if|in|new|null|procedure|raise|return|then|to|true|try|undefined|val|var|while)\b/i
            }
          ],
          number: {
            pattern: /(^(?=\d)|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:\d+(?:\.\d*)?|\.\d+)(?:E[+-]?\d+)?/i,
            lookbehind: true
          },
          operator: [
            /[<>+\-*/]=?|[%=]/,
            {
              pattern: /(^|[^\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])(?:и|или|не)(?![\w\u0400-\u0484\u0487-\u052f\u1d2b\u1d78\u2de0-\u2dff\ua640-\ua69f\ufe2e\ufe2f])/i,
              lookbehind: true
            },
            {
              pattern: /\b(?:and|not|or)\b/i
            }
          ],
          punctuation: /\(\.|\.\)|[()\[\]:;,.]/,
          directive: [
            {
              pattern: /^([ \t]*)&.*/m,
              lookbehind: true,
              greedy: true,
              alias: "important"
            },
            {
              pattern: /^([ \t]*)#.*/gm,
              lookbehind: true,
              greedy: true,
              alias: "important"
            }
          ]
        };
        Prism.languages.oscript = Prism.languages["bsl"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cfscript.js
  var require_cfscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cfscript.js"(exports, module) {
      "use strict";
      module.exports = cfscript;
      cfscript.displayName = "cfscript";
      cfscript.aliases = [];
      function cfscript(Prism) {
        Prism.languages.cfscript = Prism.languages.extend("clike", {
          comment: [
            {
              pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
              lookbehind: true,
              inside: {
                annotation: {
                  pattern: /(?:^|[^.])@[\w\.]+/,
                  alias: "punctuation"
                }
              }
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          keyword: /\b(?:abstract|break|catch|component|continue|default|do|else|extends|final|finally|for|function|if|in|include|package|private|property|public|remote|required|rethrow|return|static|switch|throw|try|var|while|xml)\b(?!\s*=)/,
          operator: [
            /\+\+|--|&&|\|\||::|=>|[!=]==|<=?|>=?|[-+*/%&|^!=<>]=?|\?(?:\.|:)?|[?:]/,
            /\b(?:and|contains|eq|equal|eqv|gt|gte|imp|is|lt|lte|mod|not|or|xor)\b/
          ],
          scope: {
            pattern: /\b(?:application|arguments|cgi|client|cookie|local|session|super|this|variables)\b/,
            alias: "global"
          },
          type: {
            pattern: /\b(?:any|array|binary|boolean|date|guid|numeric|query|string|struct|uuid|void|xml)\b/,
            alias: "builtin"
          }
        });
        Prism.languages.insertBefore("cfscript", "keyword", {
          "function-variable": {
            pattern: /[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
            alias: "function"
          }
        });
        delete Prism.languages.cfscript["class-name"];
        Prism.languages.cfc = Prism.languages["cfscript"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/chaiscript.js
  var require_chaiscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/chaiscript.js"(exports, module) {
      "use strict";
      var refractorCpp = require_cpp();
      module.exports = chaiscript;
      chaiscript.displayName = "chaiscript";
      chaiscript.aliases = [];
      function chaiscript(Prism) {
        Prism.register(refractorCpp);
        Prism.languages.chaiscript = Prism.languages.extend("clike", {
          string: {
            pattern: /(^|[^\\])'(?:[^'\\]|\\[\s\S])*'/,
            lookbehind: true,
            greedy: true
          },
          "class-name": [
            {
              pattern: /(\bclass\s+)\w+/,
              lookbehind: true
            },
            {
              pattern: /(\b(?:attr|def)\s+)\w+(?=\s*::)/,
              lookbehind: true
            }
          ],
          keyword: /\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\b/,
          number: [Prism.languages.cpp.number, /\b(?:Infinity|NaN)\b/],
          operator: />>=?|<<=?|\|\||&&|:[:=]?|--|\+\+|[=!<>+\-*/%|&^]=?|[?~]|`[^`\r\n]{1,4}`/
        });
        Prism.languages.insertBefore("chaiscript", "operator", {
          "parameter-type": {
            pattern: /([,(]\s*)\w+(?=\s+\w)/,
            lookbehind: true,
            alias: "class-name"
          }
        });
        Prism.languages.insertBefore("chaiscript", "string", {
          "string-interpolation": {
            pattern: /(^|[^\\])"(?:[^"$\\]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*"/,
            lookbehind: true,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\}/,
                lookbehind: true,
                inside: {
                  "interpolation-expression": {
                    pattern: /(^\$\{)[\s\S]+(?=\}$)/,
                    lookbehind: true,
                    inside: Prism.languages.chaiscript
                  },
                  "interpolation-punctuation": {
                    pattern: /^\$\{|\}$/,
                    alias: "punctuation"
                  }
                }
              },
              string: /[\s\S]+/
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cil.js
  var require_cil = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cil.js"(exports, module) {
      "use strict";
      module.exports = cil;
      cil.displayName = "cil";
      cil.aliases = [];
      function cil(Prism) {
        Prism.languages.cil = {
          comment: /\/\/.*/,
          string: {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          directive: {
            pattern: /(^|\W)\.[a-z]+(?=\s)/,
            lookbehind: true,
            alias: "class-name"
          },
          variable: /\[[\w\.]+\]/,
          keyword: /\b(?:abstract|ansi|assembly|auto|autochar|beforefieldinit|bool|bstr|byvalstr|catch|char|cil|class|currency|date|decimal|default|enum|error|explicit|extends|extern|famandassem|family|famorassem|final(?:ly)?|float32|float64|hidebysig|u?int(?:8|16|32|64)?|iant|idispatch|implements|import|initonly|instance|interface|iunknown|literal|lpstr|lpstruct|lptstr|lpwstr|managed|method|native(?:Type)?|nested|newslot|object(?:ref)?|pinvokeimpl|private|privatescope|public|reqsecobj|rtspecialname|runtime|sealed|sequential|serializable|specialname|static|string|struct|syschar|tbstr|unicode|unmanagedexp|unsigned|value(?:type)?|variant|virtual|void)\b/,
          function: /\b(?:(?:constrained|no|readonly|tail|unaligned|volatile)\.)?(?:conv\.(?:[iu][1248]?|ovf\.[iu][1248]?(?:\.un)?|r\.un|r4|r8)|ldc\.(?:i4(?:\.\d+|\.[mM]1|\.s)?|i8|r4|r8)|ldelem(?:\.[iu][1248]?|\.r[48]|\.ref|a)?|ldind\.(?:[iu][1248]?|r[48]|ref)|stelem\.?(?:i[1248]?|r[48]|ref)?|stind\.(?:i[1248]?|r[48]|ref)?|end(?:fault|filter|finally)|ldarg(?:\.[0-3s]|a(?:\.s)?)?|ldloc(?:\.\d+|\.s)?|sub(?:\.ovf(?:\.un)?)?|mul(?:\.ovf(?:\.un)?)?|add(?:\.ovf(?:\.un)?)?|stloc(?:\.[0-3s])?|refany(?:type|val)|blt(?:\.un)?(?:\.s)?|ble(?:\.un)?(?:\.s)?|bgt(?:\.un)?(?:\.s)?|bge(?:\.un)?(?:\.s)?|unbox(?:\.any)?|init(?:blk|obj)|call(?:i|virt)?|brfalse(?:\.s)?|bne\.un(?:\.s)?|ldloca(?:\.s)?|brzero(?:\.s)?|brtrue(?:\.s)?|brnull(?:\.s)?|brinst(?:\.s)?|starg(?:\.s)?|leave(?:\.s)?|shr(?:\.un)?|rem(?:\.un)?|div(?:\.un)?|clt(?:\.un)?|alignment|castclass|ldvirtftn|beq(?:\.s)?|ckfinite|ldsflda|ldtoken|localloc|mkrefany|rethrow|cgt\.un|arglist|switch|stsfld|sizeof|newobj|newarr|ldsfld|ldnull|ldflda|isinst|throw|stobj|stfld|ldstr|ldobj|ldlen|ldftn|ldfld|cpobj|cpblk|break|br\.s|xor|shl|ret|pop|not|nop|neg|jmp|dup|cgt|ceq|box|and|or|br)\b/,
          boolean: /\b(?:false|true)\b/,
          number: /\b-?(?:0x[0-9a-f]+|\d+)(?:\.[0-9a-f]+)?\b/i,
          punctuation: /[{}[\];(),:=]|IL_[0-9A-Za-z]+/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/clojure.js
  var require_clojure = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/clojure.js"(exports, module) {
      "use strict";
      module.exports = clojure;
      clojure.displayName = "clojure";
      clojure.aliases = [];
      function clojure(Prism) {
        Prism.languages.clojure = {
          comment: {
            pattern: /;.*/,
            greedy: true
          },
          string: {
            pattern: /"(?:[^"\\]|\\.)*"/,
            greedy: true
          },
          char: /\\\w+/,
          symbol: {
            pattern: /(^|[\s()\[\]{},])::?[\w*+!?'<>=/.-]+/,
            lookbehind: true
          },
          keyword: {
            pattern: /(\()(?:-|->|->>|\.|\.\.|\*|\/|\+|<|<=|=|==|>|>=|accessor|agent|agent-errors|aget|alength|all-ns|alter|and|append-child|apply|array-map|aset|aset-boolean|aset-byte|aset-char|aset-double|aset-float|aset-int|aset-long|aset-short|assert|assoc|await|await-for|bean|binding|bit-and|bit-not|bit-or|bit-shift-left|bit-shift-right|bit-xor|boolean|branch\?|butlast|byte|cast|char|children|class|clear-agent-errors|comment|commute|comp|comparator|complement|concat|cond|conj|cons|constantly|construct-proxy|contains\?|count|create-ns|create-struct|cycle|dec|declare|def|def-|definline|definterface|defmacro|defmethod|defmulti|defn|defn-|defonce|defproject|defprotocol|defrecord|defstruct|deftype|deref|difference|disj|dissoc|distinct|do|doall|doc|dorun|doseq|dosync|dotimes|doto|double|down|drop|drop-while|edit|end\?|ensure|eval|every\?|false\?|ffirst|file-seq|filter|find|find-doc|find-ns|find-var|first|float|flush|fn|fnseq|for|frest|gensym|get|get-proxy-class|hash-map|hash-set|identical\?|identity|if|if-let|if-not|import|in-ns|inc|index|insert-child|insert-left|insert-right|inspect-table|inspect-tree|instance\?|int|interleave|intersection|into|into-array|iterate|join|key|keys|keyword|keyword\?|last|lazy-cat|lazy-cons|left|lefts|let|line-seq|list|list\*|load|load-file|locking|long|loop|macroexpand|macroexpand-1|make-array|make-node|map|map-invert|map\?|mapcat|max|max-key|memfn|merge|merge-with|meta|min|min-key|monitor-enter|name|namespace|neg\?|new|newline|next|nil\?|node|not|not-any\?|not-every\?|not=|ns|ns-imports|ns-interns|ns-map|ns-name|ns-publics|ns-refers|ns-resolve|ns-unmap|nth|nthrest|or|parse|partial|path|peek|pop|pos\?|pr|pr-str|print|print-str|println|println-str|prn|prn-str|project|proxy|proxy-mappings|quot|quote|rand|rand-int|range|re-find|re-groups|re-matcher|re-matches|re-pattern|re-seq|read|read-line|recur|reduce|ref|ref-set|refer|rem|remove|remove-method|remove-ns|rename|rename-keys|repeat|replace|replicate|resolve|rest|resultset-seq|reverse|rfirst|right|rights|root|rrest|rseq|second|select|select-keys|send|send-off|seq|seq-zip|seq\?|set|set!|short|slurp|some|sort|sort-by|sorted-map|sorted-map-by|sorted-set|special-symbol\?|split-at|split-with|str|string\?|struct|struct-map|subs|subvec|symbol|symbol\?|sync|take|take-nth|take-while|test|throw|time|to-array|to-array-2d|tree-seq|true\?|try|union|up|update-proxy|val|vals|var|var-get|var-set|var\?|vector|vector-zip|vector\?|when|when-first|when-let|when-not|with-local-vars|with-meta|with-open|with-out-str|xml-seq|xml-zip|zero\?|zipmap|zipper)(?=[\s)]|$)/,
            lookbehind: true
          },
          boolean: /\b(?:false|nil|true)\b/,
          number: {
            pattern: /(^|[^\w$@])(?:\d+(?:[/.]\d+)?(?:e[+-]?\d+)?|0x[a-f0-9]+|[1-9]\d?r[a-z0-9]+)[lmn]?(?![\w$@])/i,
            lookbehind: true
          },
          function: {
            pattern: /((?:^|[^'])\()[\w*+!?'<>=/.-]+(?=[\s)]|$)/,
            lookbehind: true
          },
          operator: /[#@^`~]/,
          punctuation: /[{}\[\](),]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cmake.js
  var require_cmake = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cmake.js"(exports, module) {
      "use strict";
      module.exports = cmake;
      cmake.displayName = "cmake";
      cmake.aliases = [];
      function cmake(Prism) {
        Prism.languages.cmake = {
          comment: /#.*/,
          string: {
            pattern: /"(?:[^\\"]|\\.)*"/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /\$\{(?:[^{}$]|\$\{[^{}$]*\})*\}/,
                inside: {
                  punctuation: /\$\{|\}/,
                  variable: /\w+/
                }
              }
            }
          },
          variable: /\b(?:CMAKE_\w+|\w+_(?:(?:BINARY|SOURCE)_DIR|DESCRIPTION|HOMEPAGE_URL|ROOT|VERSION(?:_MAJOR|_MINOR|_PATCH|_TWEAK)?)|(?:ANDROID|APPLE|BORLAND|BUILD_SHARED_LIBS|CACHE|CPACK_(?:ABSOLUTE_DESTINATION_FILES|COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY|ERROR_ON_ABSOLUTE_INSTALL_DESTINATION|INCLUDE_TOPLEVEL_DIRECTORY|INSTALL_DEFAULT_DIRECTORY_PERMISSIONS|INSTALL_SCRIPT|PACKAGING_INSTALL_PREFIX|SET_DESTDIR|WARN_ON_ABSOLUTE_INSTALL_DESTINATION)|CTEST_(?:BINARY_DIRECTORY|BUILD_COMMAND|BUILD_NAME|BZR_COMMAND|BZR_UPDATE_OPTIONS|CHANGE_ID|CHECKOUT_COMMAND|CONFIGURATION_TYPE|CONFIGURE_COMMAND|COVERAGE_COMMAND|COVERAGE_EXTRA_FLAGS|CURL_OPTIONS|CUSTOM_(?:COVERAGE_EXCLUDE|ERROR_EXCEPTION|ERROR_MATCH|ERROR_POST_CONTEXT|ERROR_PRE_CONTEXT|MAXIMUM_FAILED_TEST_OUTPUT_SIZE|MAXIMUM_NUMBER_OF_(?:ERRORS|WARNINGS)|MAXIMUM_PASSED_TEST_OUTPUT_SIZE|MEMCHECK_IGNORE|POST_MEMCHECK|POST_TEST|PRE_MEMCHECK|PRE_TEST|TESTS_IGNORE|WARNING_EXCEPTION|WARNING_MATCH)|CVS_CHECKOUT|CVS_COMMAND|CVS_UPDATE_OPTIONS|DROP_LOCATION|DROP_METHOD|DROP_SITE|DROP_SITE_CDASH|DROP_SITE_PASSWORD|DROP_SITE_USER|EXTRA_COVERAGE_GLOB|GIT_COMMAND|GIT_INIT_SUBMODULES|GIT_UPDATE_CUSTOM|GIT_UPDATE_OPTIONS|HG_COMMAND|HG_UPDATE_OPTIONS|LABELS_FOR_SUBPROJECTS|MEMORYCHECK_(?:COMMAND|COMMAND_OPTIONS|SANITIZER_OPTIONS|SUPPRESSIONS_FILE|TYPE)|NIGHTLY_START_TIME|P4_CLIENT|P4_COMMAND|P4_OPTIONS|P4_UPDATE_OPTIONS|RUN_CURRENT_SCRIPT|SCP_COMMAND|SITE|SOURCE_DIRECTORY|SUBMIT_URL|SVN_COMMAND|SVN_OPTIONS|SVN_UPDATE_OPTIONS|TEST_LOAD|TEST_TIMEOUT|TRIGGER_SITE|UPDATE_COMMAND|UPDATE_OPTIONS|UPDATE_VERSION_ONLY|USE_LAUNCHERS)|CYGWIN|ENV|EXECUTABLE_OUTPUT_PATH|GHS-MULTI|IOS|LIBRARY_OUTPUT_PATH|MINGW|MSVC(?:10|11|12|14|60|70|71|80|90|_IDE|_TOOLSET_VERSION|_VERSION)?|MSYS|PROJECT_(?:BINARY_DIR|DESCRIPTION|HOMEPAGE_URL|NAME|SOURCE_DIR|VERSION|VERSION_(?:MAJOR|MINOR|PATCH|TWEAK))|UNIX|WIN32|WINCE|WINDOWS_PHONE|WINDOWS_STORE|XCODE|XCODE_VERSION))\b/,
          property: /\b(?:cxx_\w+|(?:ARCHIVE_OUTPUT_(?:DIRECTORY|NAME)|COMPILE_DEFINITIONS|COMPILE_PDB_NAME|COMPILE_PDB_OUTPUT_DIRECTORY|EXCLUDE_FROM_DEFAULT_BUILD|IMPORTED_(?:IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_LANGUAGES|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|NO_SONAME|OBJECTS|SONAME)|INTERPROCEDURAL_OPTIMIZATION|LIBRARY_OUTPUT_DIRECTORY|LIBRARY_OUTPUT_NAME|LINK_FLAGS|LINK_INTERFACE_LIBRARIES|LINK_INTERFACE_MULTIPLICITY|LOCATION|MAP_IMPORTED_CONFIG|OSX_ARCHITECTURES|OUTPUT_NAME|PDB_NAME|PDB_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_DIRECTORY|RUNTIME_OUTPUT_NAME|STATIC_LIBRARY_FLAGS|VS_CSHARP|VS_DOTNET_REFERENCEPROP|VS_DOTNET_REFERENCE|VS_GLOBAL_SECTION_POST|VS_GLOBAL_SECTION_PRE|VS_GLOBAL|XCODE_ATTRIBUTE)_\w+|\w+_(?:CLANG_TIDY|COMPILER_LAUNCHER|CPPCHECK|CPPLINT|INCLUDE_WHAT_YOU_USE|OUTPUT_NAME|POSTFIX|VISIBILITY_PRESET)|ABSTRACT|ADDITIONAL_MAKE_CLEAN_FILES|ADVANCED|ALIASED_TARGET|ALLOW_DUPLICATE_CUSTOM_TARGETS|ANDROID_(?:ANT_ADDITIONAL_OPTIONS|API|API_MIN|ARCH|ASSETS_DIRECTORIES|GUI|JAR_DEPENDENCIES|NATIVE_LIB_DEPENDENCIES|NATIVE_LIB_DIRECTORIES|PROCESS_MAX|PROGUARD|PROGUARD_CONFIG_PATH|SECURE_PROPS_PATH|SKIP_ANT_STEP|STL_TYPE)|ARCHIVE_OUTPUT_DIRECTORY|ATTACHED_FILES|ATTACHED_FILES_ON_FAIL|AUTOGEN_(?:BUILD_DIR|ORIGIN_DEPENDS|PARALLEL|SOURCE_GROUP|TARGETS_FOLDER|TARGET_DEPENDS)|AUTOMOC|AUTOMOC_(?:COMPILER_PREDEFINES|DEPEND_FILTERS|EXECUTABLE|MACRO_NAMES|MOC_OPTIONS|SOURCE_GROUP|TARGETS_FOLDER)|AUTORCC|AUTORCC_EXECUTABLE|AUTORCC_OPTIONS|AUTORCC_SOURCE_GROUP|AUTOUIC|AUTOUIC_EXECUTABLE|AUTOUIC_OPTIONS|AUTOUIC_SEARCH_PATHS|BINARY_DIR|BUILDSYSTEM_TARGETS|BUILD_RPATH|BUILD_RPATH_USE_ORIGIN|BUILD_WITH_INSTALL_NAME_DIR|BUILD_WITH_INSTALL_RPATH|BUNDLE|BUNDLE_EXTENSION|CACHE_VARIABLES|CLEAN_NO_CUSTOM|COMMON_LANGUAGE_RUNTIME|COMPATIBLE_INTERFACE_(?:BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|COMPILE_(?:DEFINITIONS|FEATURES|FLAGS|OPTIONS|PDB_NAME|PDB_OUTPUT_DIRECTORY)|COST|CPACK_DESKTOP_SHORTCUTS|CPACK_NEVER_OVERWRITE|CPACK_PERMANENT|CPACK_STARTUP_SHORTCUTS|CPACK_START_MENU_SHORTCUTS|CPACK_WIX_ACL|CROSSCOMPILING_EMULATOR|CUDA_EXTENSIONS|CUDA_PTX_COMPILATION|CUDA_RESOLVE_DEVICE_SYMBOLS|CUDA_SEPARABLE_COMPILATION|CUDA_STANDARD|CUDA_STANDARD_REQUIRED|CXX_EXTENSIONS|CXX_STANDARD|CXX_STANDARD_REQUIRED|C_EXTENSIONS|C_STANDARD|C_STANDARD_REQUIRED|DEBUG_CONFIGURATIONS|DEFINE_SYMBOL|DEFINITIONS|DEPENDS|DEPLOYMENT_ADDITIONAL_FILES|DEPLOYMENT_REMOTE_DIRECTORY|DISABLED|DISABLED_FEATURES|ECLIPSE_EXTRA_CPROJECT_CONTENTS|ECLIPSE_EXTRA_NATURES|ENABLED_FEATURES|ENABLED_LANGUAGES|ENABLE_EXPORTS|ENVIRONMENT|EXCLUDE_FROM_ALL|EXCLUDE_FROM_DEFAULT_BUILD|EXPORT_NAME|EXPORT_PROPERTIES|EXTERNAL_OBJECT|EchoString|FAIL_REGULAR_EXPRESSION|FIND_LIBRARY_USE_LIB32_PATHS|FIND_LIBRARY_USE_LIB64_PATHS|FIND_LIBRARY_USE_LIBX32_PATHS|FIND_LIBRARY_USE_OPENBSD_VERSIONING|FIXTURES_CLEANUP|FIXTURES_REQUIRED|FIXTURES_SETUP|FOLDER|FRAMEWORK|Fortran_FORMAT|Fortran_MODULE_DIRECTORY|GENERATED|GENERATOR_FILE_NAME|GENERATOR_IS_MULTI_CONFIG|GHS_INTEGRITY_APP|GHS_NO_SOURCE_GROUP_FILE|GLOBAL_DEPENDS_DEBUG_MODE|GLOBAL_DEPENDS_NO_CYCLES|GNUtoMS|HAS_CXX|HEADER_FILE_ONLY|HELPSTRING|IMPLICIT_DEPENDS_INCLUDE_TRANSFORM|IMPORTED|IMPORTED_(?:COMMON_LANGUAGE_RUNTIME|CONFIGURATIONS|GLOBAL|IMPLIB|LIBNAME|LINK_DEPENDENT_LIBRARIES|LINK_INTERFACE_(?:LANGUAGES|LIBRARIES|MULTIPLICITY)|LOCATION|NO_SONAME|OBJECTS|SONAME)|IMPORT_PREFIX|IMPORT_SUFFIX|INCLUDE_DIRECTORIES|INCLUDE_REGULAR_EXPRESSION|INSTALL_NAME_DIR|INSTALL_RPATH|INSTALL_RPATH_USE_LINK_PATH|INTERFACE_(?:AUTOUIC_OPTIONS|COMPILE_DEFINITIONS|COMPILE_FEATURES|COMPILE_OPTIONS|INCLUDE_DIRECTORIES|LINK_DEPENDS|LINK_DIRECTORIES|LINK_LIBRARIES|LINK_OPTIONS|POSITION_INDEPENDENT_CODE|SOURCES|SYSTEM_INCLUDE_DIRECTORIES)|INTERPROCEDURAL_OPTIMIZATION|IN_TRY_COMPILE|IOS_INSTALL_COMBINED|JOB_POOLS|JOB_POOL_COMPILE|JOB_POOL_LINK|KEEP_EXTENSION|LABELS|LANGUAGE|LIBRARY_OUTPUT_DIRECTORY|LINKER_LANGUAGE|LINK_(?:DEPENDS|DEPENDS_NO_SHARED|DIRECTORIES|FLAGS|INTERFACE_LIBRARIES|INTERFACE_MULTIPLICITY|LIBRARIES|OPTIONS|SEARCH_END_STATIC|SEARCH_START_STATIC|WHAT_YOU_USE)|LISTFILE_STACK|LOCATION|MACOSX_BUNDLE|MACOSX_BUNDLE_INFO_PLIST|MACOSX_FRAMEWORK_INFO_PLIST|MACOSX_PACKAGE_LOCATION|MACOSX_RPATH|MACROS|MANUALLY_ADDED_DEPENDENCIES|MEASUREMENT|MODIFIED|NAME|NO_SONAME|NO_SYSTEM_FROM_IMPORTED|OBJECT_DEPENDS|OBJECT_OUTPUTS|OSX_ARCHITECTURES|OUTPUT_NAME|PACKAGES_FOUND|PACKAGES_NOT_FOUND|PARENT_DIRECTORY|PASS_REGULAR_EXPRESSION|PDB_NAME|PDB_OUTPUT_DIRECTORY|POSITION_INDEPENDENT_CODE|POST_INSTALL_SCRIPT|PREDEFINED_TARGETS_FOLDER|PREFIX|PRE_INSTALL_SCRIPT|PRIVATE_HEADER|PROCESSORS|PROCESSOR_AFFINITY|PROJECT_LABEL|PUBLIC_HEADER|REPORT_UNDEFINED_PROPERTIES|REQUIRED_FILES|RESOURCE|RESOURCE_LOCK|RULE_LAUNCH_COMPILE|RULE_LAUNCH_CUSTOM|RULE_LAUNCH_LINK|RULE_MESSAGES|RUNTIME_OUTPUT_DIRECTORY|RUN_SERIAL|SKIP_AUTOGEN|SKIP_AUTOMOC|SKIP_AUTORCC|SKIP_AUTOUIC|SKIP_BUILD_RPATH|SKIP_RETURN_CODE|SOURCES|SOURCE_DIR|SOVERSION|STATIC_LIBRARY_FLAGS|STATIC_LIBRARY_OPTIONS|STRINGS|SUBDIRECTORIES|SUFFIX|SYMBOLIC|TARGET_ARCHIVES_MAY_BE_SHARED_LIBS|TARGET_MESSAGES|TARGET_SUPPORTS_SHARED_LIBS|TESTS|TEST_INCLUDE_FILE|TEST_INCLUDE_FILES|TIMEOUT|TIMEOUT_AFTER_MATCH|TYPE|USE_FOLDERS|VALUE|VARIABLES|VERSION|VISIBILITY_INLINES_HIDDEN|VS_(?:CONFIGURATION_TYPE|COPY_TO_OUT_DIR|DEBUGGER_(?:COMMAND|COMMAND_ARGUMENTS|ENVIRONMENT|WORKING_DIRECTORY)|DEPLOYMENT_CONTENT|DEPLOYMENT_LOCATION|DOTNET_REFERENCES|DOTNET_REFERENCES_COPY_LOCAL|GLOBAL_KEYWORD|GLOBAL_PROJECT_TYPES|GLOBAL_ROOTNAMESPACE|INCLUDE_IN_VSIX|IOT_STARTUP_TASK|KEYWORD|RESOURCE_GENERATOR|SCC_AUXPATH|SCC_LOCALPATH|SCC_PROJECTNAME|SCC_PROVIDER|SDK_REFERENCES|SHADER_(?:DISABLE_OPTIMIZATIONS|ENABLE_DEBUG|ENTRYPOINT|FLAGS|MODEL|OBJECT_FILE_NAME|OUTPUT_HEADER_FILE|TYPE|VARIABLE_NAME)|STARTUP_PROJECT|TOOL_OVERRIDE|USER_PROPS|WINRT_COMPONENT|WINRT_EXTENSIONS|WINRT_REFERENCES|XAML_TYPE)|WILL_FAIL|WIN32_EXECUTABLE|WINDOWS_EXPORT_ALL_SYMBOLS|WORKING_DIRECTORY|WRAP_EXCLUDE|XCODE_(?:EMIT_EFFECTIVE_PLATFORM_NAME|EXPLICIT_FILE_TYPE|FILE_ATTRIBUTES|LAST_KNOWN_FILE_TYPE|PRODUCT_TYPE|SCHEME_(?:ADDRESS_SANITIZER|ADDRESS_SANITIZER_USE_AFTER_RETURN|ARGUMENTS|DISABLE_MAIN_THREAD_CHECKER|DYNAMIC_LIBRARY_LOADS|DYNAMIC_LINKER_API_USAGE|ENVIRONMENT|EXECUTABLE|GUARD_MALLOC|MAIN_THREAD_CHECKER_STOP|MALLOC_GUARD_EDGES|MALLOC_SCRIBBLE|MALLOC_STACK|THREAD_SANITIZER(?:_STOP)?|UNDEFINED_BEHAVIOUR_SANITIZER(?:_STOP)?|ZOMBIE_OBJECTS))|XCTEST)\b/,
          keyword: /\b(?:add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|break|build_command|build_name|cmake_host_system_information|cmake_minimum_required|cmake_parse_arguments|cmake_policy|configure_file|continue|create_test_sourcelist|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload|define_property|else|elseif|enable_language|enable_testing|endforeach|endfunction|endif|endmacro|endwhile|exec_program|execute_process|export|export_library_dependencies|file|find_file|find_library|find_package|find_path|find_program|fltk_wrap_ui|foreach|function|get_cmake_property|get_directory_property|get_filename_component|get_property|get_source_file_property|get_target_property|get_test_property|if|include|include_directories|include_external_msproject|include_guard|include_regular_expression|install|install_files|install_programs|install_targets|link_directories|link_libraries|list|load_cache|load_command|macro|make_directory|mark_as_advanced|math|message|option|output_required_files|project|qt_wrap_cpp|qt_wrap_ui|remove|remove_definitions|return|separate_arguments|set|set_directory_properties|set_property|set_source_files_properties|set_target_properties|set_tests_properties|site_name|source_group|string|subdir_depends|subdirs|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_sources|try_compile|try_run|unset|use_mangled_mesa|utility_source|variable_requires|variable_watch|while|write_file)(?=\s*\()\b/,
          boolean: /\b(?:FALSE|OFF|ON|TRUE)\b/,
          namespace: /\b(?:INTERFACE|PRIVATE|PROPERTIES|PUBLIC|SHARED|STATIC|TARGET_OBJECTS)\b/,
          operator: /\b(?:AND|DEFINED|EQUAL|GREATER|LESS|MATCHES|NOT|OR|STREQUAL|STRGREATER|STRLESS|VERSION_EQUAL|VERSION_GREATER|VERSION_LESS)\b/,
          inserted: {
            pattern: /\b\w+::\w+\b/,
            alias: "class-name"
          },
          number: /\b\d+(?:\.\d+)*\b/,
          function: /\b[a-z_]\w*(?=\s*\()\b/i,
          punctuation: /[()>}]|\$[<{]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cobol.js
  var require_cobol = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cobol.js"(exports, module) {
      "use strict";
      module.exports = cobol;
      cobol.displayName = "cobol";
      cobol.aliases = [];
      function cobol(Prism) {
        Prism.languages.cobol = {
          comment: {
            pattern: /\*>.*|(^[ \t]*)\*.*/m,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /[xzgn]?(?:"(?:[^\r\n"]|"")*"(?!")|'(?:[^\r\n']|'')*'(?!'))/i,
            greedy: true
          },
          level: {
            pattern: /(^[ \t]*)\d+\b/m,
            lookbehind: true,
            greedy: true,
            alias: "number"
          },
          "class-name": {
            pattern: /(\bpic(?:ture)?\s+)(?:(?:[-\w$/,:*+<>]|\.(?!\s|$))(?:\(\d+\))?)+/i,
            lookbehind: true,
            inside: {
              number: {
                pattern: /(\()\d+/,
                lookbehind: true
              },
              punctuation: /[()]/
            }
          },
          keyword: {
            pattern: /(^|[^\w-])(?:ABORT|ACCEPT|ACCESS|ADD|ADDRESS|ADVANCING|AFTER|ALIGNED|ALL|ALPHABET|ALPHABETIC|ALPHABETIC-LOWER|ALPHABETIC-UPPER|ALPHANUMERIC|ALPHANUMERIC-EDITED|ALSO|ALTER|ALTERNATE|ANY|ARE|AREA|AREAS|AS|ASCENDING|ASCII|ASSIGN|ASSOCIATED-DATA|ASSOCIATED-DATA-LENGTH|AT|ATTRIBUTE|AUTHOR|AUTO|AUTO-SKIP|BACKGROUND-COLOR|BACKGROUND-COLOUR|BASIS|BEEP|BEFORE|BEGINNING|BELL|BINARY|BIT|BLANK|BLINK|BLOCK|BOTTOM|BOUNDS|BY|BYFUNCTION|BYTITLE|CALL|CANCEL|CAPABLE|CCSVERSION|CD|CF|CH|CHAINING|CHANGED|CHANNEL|CHARACTER|CHARACTERS|CLASS|CLASS-ID|CLOCK-UNITS|CLOSE|CLOSE-DISPOSITION|COBOL|CODE|CODE-SET|COL|COLLATING|COLUMN|COM-REG|COMMA|COMMITMENT|COMMON|COMMUNICATION|COMP|COMP-1|COMP-2|COMP-3|COMP-4|COMP-5|COMPUTATIONAL|COMPUTATIONAL-1|COMPUTATIONAL-2|COMPUTATIONAL-3|COMPUTATIONAL-4|COMPUTATIONAL-5|COMPUTE|CONFIGURATION|CONTAINS|CONTENT|CONTINUE|CONTROL|CONTROL-POINT|CONTROLS|CONVENTION|CONVERTING|COPY|CORR|CORRESPONDING|COUNT|CRUNCH|CURRENCY|CURSOR|DATA|DATA-BASE|DATE|DATE-COMPILED|DATE-WRITTEN|DAY|DAY-OF-WEEK|DBCS|DE|DEBUG-CONTENTS|DEBUG-ITEM|DEBUG-LINE|DEBUG-NAME|DEBUG-SUB-1|DEBUG-SUB-2|DEBUG-SUB-3|DEBUGGING|DECIMAL-POINT|DECLARATIVES|DEFAULT|DEFAULT-DISPLAY|DEFINITION|DELETE|DELIMITED|DELIMITER|DEPENDING|DESCENDING|DESTINATION|DETAIL|DFHRESP|DFHVALUE|DISABLE|DISK|DISPLAY|DISPLAY-1|DIVIDE|DIVISION|DONTCARE|DOUBLE|DOWN|DUPLICATES|DYNAMIC|EBCDIC|EGCS|EGI|ELSE|EMI|EMPTY-CHECK|ENABLE|END|END-ACCEPT|END-ADD|END-CALL|END-COMPUTE|END-DELETE|END-DIVIDE|END-EVALUATE|END-IF|END-MULTIPLY|END-OF-PAGE|END-PERFORM|END-READ|END-RECEIVE|END-RETURN|END-REWRITE|END-SEARCH|END-START|END-STRING|END-SUBTRACT|END-UNSTRING|END-WRITE|ENDING|ENTER|ENTRY|ENTRY-PROCEDURE|ENVIRONMENT|EOL|EOP|EOS|ERASE|ERROR|ESCAPE|ESI|EVALUATE|EVENT|EVERY|EXCEPTION|EXCLUSIVE|EXHIBIT|EXIT|EXPORT|EXTEND|EXTENDED|EXTERNAL|FD|FILE|FILE-CONTROL|FILLER|FINAL|FIRST|FOOTING|FOR|FOREGROUND-COLOR|FOREGROUND-COLOUR|FROM|FULL|FUNCTION|FUNCTION-POINTER|FUNCTIONNAME|GENERATE|GIVING|GLOBAL|GO|GOBACK|GRID|GROUP|HEADING|HIGH-VALUE|HIGH-VALUES|HIGHLIGHT|I-O|I-O-CONTROL|ID|IDENTIFICATION|IF|IMPLICIT|IMPORT|IN|INDEX|INDEXED|INDICATE|INITIAL|INITIALIZE|INITIATE|INPUT|INPUT-OUTPUT|INSPECT|INSTALLATION|INTEGER|INTO|INVALID|INVOKE|IS|JUST|JUSTIFIED|KANJI|KEPT|KEY|KEYBOARD|LABEL|LANGUAGE|LAST|LB|LD|LEADING|LEFT|LEFTLINE|LENGTH|LENGTH-CHECK|LIBACCESS|LIBPARAMETER|LIBRARY|LIMIT|LIMITS|LINAGE|LINAGE-COUNTER|LINE|LINE-COUNTER|LINES|LINKAGE|LIST|LOCAL|LOCAL-STORAGE|LOCK|LONG-DATE|LONG-TIME|LOW-VALUE|LOW-VALUES|LOWER|LOWLIGHT|MEMORY|MERGE|MESSAGE|MMDDYYYY|MODE|MODULES|MORE-LABELS|MOVE|MULTIPLE|MULTIPLY|NAMED|NATIONAL|NATIONAL-EDITED|NATIVE|NEGATIVE|NETWORK|NEXT|NO|NO-ECHO|NULL|NULLS|NUMBER|NUMERIC|NUMERIC-DATE|NUMERIC-EDITED|NUMERIC-TIME|OBJECT-COMPUTER|OCCURS|ODT|OF|OFF|OMITTED|ON|OPEN|OPTIONAL|ORDER|ORDERLY|ORGANIZATION|OTHER|OUTPUT|OVERFLOW|OVERLINE|OWN|PACKED-DECIMAL|PADDING|PAGE|PAGE-COUNTER|PASSWORD|PERFORM|PF|PH|PIC|PICTURE|PLUS|POINTER|PORT|POSITION|POSITIVE|PRINTER|PRINTING|PRIVATE|PROCEDURE|PROCEDURE-POINTER|PROCEDURES|PROCEED|PROCESS|PROGRAM|PROGRAM-ID|PROGRAM-LIBRARY|PROMPT|PURGE|QUEUE|QUOTE|QUOTES|RANDOM|RD|READ|READER|REAL|RECEIVE|RECEIVED|RECORD|RECORDING|RECORDS|RECURSIVE|REDEFINES|REEL|REF|REFERENCE|REFERENCES|RELATIVE|RELEASE|REMAINDER|REMARKS|REMOTE|REMOVAL|REMOVE|RENAMES|REPLACE|REPLACING|REPORT|REPORTING|REPORTS|REQUIRED|RERUN|RESERVE|RESET|RETURN|RETURN-CODE|RETURNING|REVERSE-VIDEO|REVERSED|REWIND|REWRITE|RF|RH|RIGHT|ROUNDED|RUN|SAME|SAVE|SCREEN|SD|SEARCH|SECTION|SECURE|SECURITY|SEGMENT|SEGMENT-LIMIT|SELECT|SEND|SENTENCE|SEPARATE|SEQUENCE|SEQUENTIAL|SET|SHARED|SHAREDBYALL|SHAREDBYRUNUNIT|SHARING|SHIFT-IN|SHIFT-OUT|SHORT-DATE|SIGN|SIZE|SORT|SORT-CONTROL|SORT-CORE-SIZE|SORT-FILE-SIZE|SORT-MERGE|SORT-MESSAGE|SORT-MODE-SIZE|SORT-RETURN|SOURCE|SOURCE-COMPUTER|SPACE|SPACES|SPECIAL-NAMES|STANDARD|STANDARD-1|STANDARD-2|START|STATUS|STOP|STRING|SUB-QUEUE-1|SUB-QUEUE-2|SUB-QUEUE-3|SUBTRACT|SUM|SUPPRESS|SYMBOL|SYMBOLIC|SYNC|SYNCHRONIZED|TABLE|TALLY|TALLYING|TAPE|TASK|TERMINAL|TERMINATE|TEST|TEXT|THEN|THREAD|THREAD-LOCAL|THROUGH|THRU|TIME|TIMER|TIMES|TITLE|TO|TODAYS-DATE|TODAYS-NAME|TOP|TRAILING|TRUNCATED|TYPE|TYPEDEF|UNDERLINE|UNIT|UNSTRING|UNTIL|UP|UPON|USAGE|USE|USING|VALUE|VALUES|VARYING|VIRTUAL|WAIT|WHEN|WHEN-COMPILED|WITH|WORDS|WORKING-STORAGE|WRITE|YEAR|YYYYDDD|YYYYMMDD|ZERO-FILL|ZEROES|ZEROS)(?![\w-])/i,
            lookbehind: true
          },
          boolean: {
            pattern: /(^|[^\w-])(?:false|true)(?![\w-])/i,
            lookbehind: true
          },
          number: {
            pattern: /(^|[^\w-])(?:[+-]?(?:(?:\d+(?:[.,]\d+)?|[.,]\d+)(?:e[+-]?\d+)?|zero))(?![\w-])/i,
            lookbehind: true
          },
          operator: [
            /<>|[<>]=?|[=+*/&]/,
            {
              pattern: /(^|[^\w-])(?:-|and|equal|greater|less|not|or|than)(?![\w-])/i,
              lookbehind: true
            }
          ],
          punctuation: /[.:,()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/coffeescript.js
  var require_coffeescript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/coffeescript.js"(exports, module) {
      "use strict";
      module.exports = coffeescript;
      coffeescript.displayName = "coffeescript";
      coffeescript.aliases = ["coffee"];
      function coffeescript(Prism) {
        ;
        (function(Prism2) {
          var comment2 = /#(?!\{).+/;
          var interpolation = {
            pattern: /#\{[^}]+\}/,
            alias: "variable"
          };
          Prism2.languages.coffeescript = Prism2.languages.extend("javascript", {
            comment: comment2,
            string: [
              {
                pattern: /'(?:\\[\s\S]|[^\\'])*'/,
                greedy: true
              },
              {
                pattern: /"(?:\\[\s\S]|[^\\"])*"/,
                greedy: true,
                inside: {
                  interpolation
                }
              }
            ],
            keyword: /\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,
            "class-member": {
              pattern: /@(?!\d)\w+/,
              alias: "variable"
            }
          });
          Prism2.languages.insertBefore("coffeescript", "comment", {
            "multiline-comment": {
              pattern: /###[\s\S]+?###/,
              alias: "comment"
            },
            "block-regex": {
              pattern: /\/{3}[\s\S]*?\/{3}/,
              alias: "regex",
              inside: {
                comment: comment2,
                interpolation
              }
            }
          });
          Prism2.languages.insertBefore("coffeescript", "string", {
            "inline-javascript": {
              pattern: /`(?:\\[\s\S]|[^\\`])*`/,
              inside: {
                delimiter: {
                  pattern: /^`|`$/,
                  alias: "punctuation"
                },
                script: {
                  pattern: /[\s\S]+/,
                  alias: "language-javascript",
                  inside: Prism2.languages.javascript
                }
              }
            },
            "multiline-string": [
              {
                pattern: /'''[\s\S]*?'''/,
                greedy: true,
                alias: "string"
              },
              {
                pattern: /"""[\s\S]*?"""/,
                greedy: true,
                alias: "string",
                inside: {
                  interpolation
                }
              }
            ]
          });
          Prism2.languages.insertBefore("coffeescript", "keyword", {
            property: /(?!\d)\w+(?=\s*:(?!:))/
          });
          delete Prism2.languages.coffeescript["template-string"];
          Prism2.languages.coffee = Prism2.languages.coffeescript;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/concurnas.js
  var require_concurnas = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/concurnas.js"(exports, module) {
      "use strict";
      module.exports = concurnas;
      concurnas.displayName = "concurnas";
      concurnas.aliases = ["conc"];
      function concurnas(Prism) {
        Prism.languages.concurnas = {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\/\/.*)/,
            lookbehind: true,
            greedy: true
          },
          langext: {
            pattern: /\b\w+\s*\|\|[\s\S]+?\|\|/,
            greedy: true,
            inside: {
              "class-name": /^\w+/,
              string: {
                pattern: /(^\s*\|\|)[\s\S]+(?=\|\|$)/,
                lookbehind: true
              },
              punctuation: /\|\|/
            }
          },
          function: {
            pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/,
            lookbehind: true
          },
          keyword: /\b(?:abstract|actor|also|annotation|assert|async|await|bool|boolean|break|byte|case|catch|changed|char|class|closed|constant|continue|def|default|del|double|elif|else|enum|every|extends|false|finally|float|for|from|global|gpudef|gpukernel|if|import|in|init|inject|int|lambda|local|long|loop|match|new|nodefault|null|of|onchange|open|out|override|package|parfor|parforsync|post|pre|private|protected|provide|provider|public|return|shared|short|single|size_t|sizeof|super|sync|this|throw|trait|trans|transient|true|try|typedef|unchecked|using|val|var|void|while|with)\b/,
          boolean: /\b(?:false|true)\b/,
          number: /\b0b[01][01_]*L?\b|\b0x(?:[\da-f_]*\.)?[\da-f_p+-]+\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfls]?/i,
          punctuation: /[{}[\];(),.:]/,
          operator: /<==|>==|=>|->|<-|<>|&==|&<>|\?:?|\.\?|\+\+|--|[-+*/=<>]=?|[!^~]|\b(?:and|as|band|bor|bxor|comp|is|isnot|mod|or)\b=?/,
          annotation: {
            pattern: /@(?:\w+:)?(?:\w+|\[[^\]]+\])?/,
            alias: "builtin"
          }
        };
        Prism.languages.insertBefore("concurnas", "langext", {
          "regex-literal": {
            pattern: /\br("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
                lookbehind: true,
                inside: Prism.languages.concurnas
              },
              regex: /[\s\S]+/
            }
          },
          "string-literal": {
            pattern: /(?:\B|\bs)("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
                lookbehind: true,
                inside: Prism.languages.concurnas
              },
              string: /[\s\S]+/
            }
          }
        });
        Prism.languages.conc = Prism.languages.concurnas;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/coq.js
  var require_coq = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/coq.js"(exports, module) {
      "use strict";
      module.exports = coq;
      coq.displayName = "coq";
      coq.aliases = [];
      function coq(Prism) {
        ;
        (function(Prism2) {
          var commentSource = /\(\*(?:[^(*]|\((?!\*)|\*(?!\))|<self>)*\*\)/.source;
          for (var i = 0; i < 2; i++) {
            commentSource = commentSource.replace(/<self>/g, function() {
              return commentSource;
            });
          }
          commentSource = commentSource.replace(/<self>/g, "[]");
          Prism2.languages.coq = {
            comment: RegExp(commentSource),
            string: {
              pattern: /"(?:[^"]|"")*"(?!")/,
              greedy: true
            },
            attribute: [
              {
                pattern: RegExp(
                  /#\[(?:[^\[\]("]|"(?:[^"]|"")*"(?!")|\((?!\*)|<comment>)*\]/.source.replace(
                    /<comment>/g,
                    function() {
                      return commentSource;
                    }
                  )
                ),
                greedy: true,
                alias: "attr-name",
                inside: {
                  comment: RegExp(commentSource),
                  string: {
                    pattern: /"(?:[^"]|"")*"(?!")/,
                    greedy: true
                  },
                  operator: /=/,
                  punctuation: /^#\[|\]$|[,()]/
                }
              },
              {
                pattern: /\b(?:Cumulative|Global|Local|Monomorphic|NonCumulative|Polymorphic|Private|Program)\b/,
                alias: "attr-name"
              }
            ],
            keyword: /\b(?:Abort|About|Add|Admit|Admitted|All|Arguments|As|Assumptions|Axiom|Axioms|Back|BackTo|Backtrace|BinOp|BinOpSpec|BinRel|Bind|Blacklist|Canonical|Case|Cd|Check|Class|Classes|Close|CoFixpoint|CoInductive|Coercion|Coercions|Collection|Combined|Compute|Conjecture|Conjectures|Constant|Constants|Constraint|Constructors|Context|Corollary|Create|CstOp|Custom|Cut|Debug|Declare|Defined|Definition|Delimit|Dependencies|Dependent|Derive|Diffs|Drop|Elimination|End|Entry|Equality|Eval|Example|Existential|Existentials|Existing|Export|Extern|Extraction|Fact|Fail|Field|File|Firstorder|Fixpoint|Flags|Focus|From|Funclass|Function|Functional|GC|Generalizable|Goal|Grab|Grammar|Graph|Guarded|Haskell|Heap|Hide|Hint|HintDb|Hints|Hypotheses|Hypothesis|IF|Identity|Immediate|Implicit|Implicits|Import|Include|Induction|Inductive|Infix|Info|Initial|InjTyp|Inline|Inspect|Instance|Instances|Intro|Intros|Inversion|Inversion_clear|JSON|Language|Left|Lemma|Let|Lia|Libraries|Library|Load|LoadPath|Locate|Ltac|Ltac2|ML|Match|Method|Minimality|Module|Modules|Morphism|Next|NoInline|Notation|Number|OCaml|Obligation|Obligations|Opaque|Open|Optimize|Parameter|Parameters|Parametric|Path|Paths|Prenex|Preterm|Primitive|Print|Profile|Projections|Proof|Prop|PropBinOp|PropOp|PropUOp|Property|Proposition|Pwd|Qed|Quit|Rec|Record|Recursive|Redirect|Reduction|Register|Relation|Remark|Remove|Require|Reserved|Reset|Resolve|Restart|Rewrite|Right|Ring|Rings|SProp|Saturate|Save|Scheme|Scope|Scopes|Search|SearchHead|SearchPattern|SearchRewrite|Section|Separate|Set|Setoid|Show|Signatures|Solve|Solver|Sort|Sortclass|Sorted|Spec|Step|Strategies|Strategy|String|Structure|SubClass|Subgraph|SuchThat|Tactic|Term|TestCompile|Theorem|Time|Timeout|To|Transparent|Type|Typeclasses|Types|Typing|UnOp|UnOpSpec|Undelimit|Undo|Unfocus|Unfocused|Unfold|Universe|Universes|Unshelve|Variable|Variables|Variant|Verbose|View|Visibility|Zify|_|apply|as|at|by|cofix|else|end|exists|exists2|fix|for|forall|fun|if|in|let|match|measure|move|removed|return|struct|then|using|wf|where|with)\b/,
            number: /\b(?:0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]+)?(?:p[+-]?\d[\d_]*)?|\d[\d_]*(?:\.[\d_]+)?(?:e[+-]?\d[\d_]*)?)\b/i,
            punct: {
              pattern: /@\{|\{\||\[=|:>/,
              alias: "punctuation"
            },
            operator: /\/\\|\\\/|\.{2,3}|:{1,2}=|\*\*|[-=]>|<(?:->?|[+:=>]|<:)|>(?:=|->)|\|[-|]?|[-!%&*+/<=>?@^~']/,
            punctuation: /\.\(|`\(|@\{|`\{|\{\||\[=|:>|[:.,;(){}\[\]]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ruby.js
  var require_ruby = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ruby.js"(exports, module) {
      "use strict";
      module.exports = ruby;
      ruby.displayName = "ruby";
      ruby.aliases = ["rb"];
      function ruby(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.ruby = Prism2.languages.extend("clike", {
            comment: {
              pattern: /#.*|^=begin\s[\s\S]*?^=end/m,
              greedy: true
            },
            "class-name": {
              pattern: /(\b(?:class|module)\s+|\bcatch\s+\()[\w.\\]+|\b[A-Z_]\w*(?=\s*\.\s*new\b)/,
              lookbehind: true,
              inside: {
                punctuation: /[.\\]/
              }
            },
            keyword: /\b(?:BEGIN|END|alias|and|begin|break|case|class|def|define_method|defined|do|each|else|elsif|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|private|protected|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\b/,
            operator: /\.{2,3}|&\.|===|<?=>|[!=]?~|(?:&&|\|\||<<|>>|\*\*|[+\-*/%<>!^&|=])=?|[?:]/,
            punctuation: /[(){}[\].,;]/
          });
          Prism2.languages.insertBefore("ruby", "operator", {
            "double-colon": {
              pattern: /::/,
              alias: "punctuation"
            }
          });
          var interpolation = {
            pattern: /((?:^|[^\\])(?:\\{2})*)#\{(?:[^{}]|\{[^{}]*\})*\}/,
            lookbehind: true,
            inside: {
              content: {
                pattern: /^(#\{)[\s\S]+(?=\}$)/,
                lookbehind: true,
                inside: Prism2.languages.ruby
              },
              delimiter: {
                pattern: /^#\{|\}$/,
                alias: "punctuation"
              }
            }
          };
          delete Prism2.languages.ruby.function;
          var percentExpression = "(?:" + [
            /([^a-zA-Z0-9\s{(\[<=])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
            /\((?:[^()\\]|\\[\s\S]|\((?:[^()\\]|\\[\s\S])*\))*\)/.source,
            /\{(?:[^{}\\]|\\[\s\S]|\{(?:[^{}\\]|\\[\s\S])*\})*\}/.source,
            /\[(?:[^\[\]\\]|\\[\s\S]|\[(?:[^\[\]\\]|\\[\s\S])*\])*\]/.source,
            /<(?:[^<>\\]|\\[\s\S]|<(?:[^<>\\]|\\[\s\S])*>)*>/.source
          ].join("|") + ")";
          var symbolName = /(?:"(?:\\.|[^"\\\r\n])*"|(?:\b[a-zA-Z_]\w*|[^\s\0-\x7F]+)[?!]?|\$.)/.source;
          Prism2.languages.insertBefore("ruby", "keyword", {
            "regex-literal": [
              {
                pattern: RegExp(
                  /%r/.source + percentExpression + /[egimnosux]{0,6}/.source
                ),
                greedy: true,
                inside: {
                  interpolation,
                  regex: /[\s\S]+/
                }
              },
              {
                pattern: /(^|[^/])\/(?!\/)(?:\[[^\r\n\]]+\]|\\.|[^[/\\\r\n])+\/[egimnosux]{0,6}(?=\s*(?:$|[\r\n,.;})#]))/,
                lookbehind: true,
                greedy: true,
                inside: {
                  interpolation,
                  regex: /[\s\S]+/
                }
              }
            ],
            variable: /[@$]+[a-zA-Z_]\w*(?:[?!]|\b)/,
            symbol: [
              {
                pattern: RegExp(/(^|[^:]):/.source + symbolName),
                lookbehind: true,
                greedy: true
              },
              {
                pattern: RegExp(
                  /([\r\n{(,][ \t]*)/.source + symbolName + /(?=:(?!:))/.source
                ),
                lookbehind: true,
                greedy: true
              }
            ],
            "method-definition": {
              pattern: /(\bdef\s+)\w+(?:\s*\.\s*\w+)?/,
              lookbehind: true,
              inside: {
                function: /\b\w+$/,
                keyword: /^self\b/,
                "class-name": /^\w+/,
                punctuation: /\./
              }
            }
          });
          Prism2.languages.insertBefore("ruby", "string", {
            "string-literal": [
              {
                pattern: RegExp(/%[qQiIwWs]?/.source + percentExpression),
                greedy: true,
                inside: {
                  interpolation,
                  string: /[\s\S]+/
                }
              },
              {
                pattern: /("|')(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|(?!\1)[^\\#\r\n])*\1/,
                greedy: true,
                inside: {
                  interpolation,
                  string: /[\s\S]+/
                }
              },
              {
                pattern: /<<[-~]?([a-z_]\w*)[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
                alias: "heredoc-string",
                greedy: true,
                inside: {
                  delimiter: {
                    pattern: /^<<[-~]?[a-z_]\w*|\b[a-z_]\w*$/i,
                    inside: {
                      symbol: /\b\w+/,
                      punctuation: /^<<[-~]?/
                    }
                  },
                  interpolation,
                  string: /[\s\S]+/
                }
              },
              {
                pattern: /<<[-~]?'([a-z_]\w*)'[\r\n](?:.*[\r\n])*?[\t ]*\1/i,
                alias: "heredoc-string",
                greedy: true,
                inside: {
                  delimiter: {
                    pattern: /^<<[-~]?'[a-z_]\w*'|\b[a-z_]\w*$/i,
                    inside: {
                      symbol: /\b\w+/,
                      punctuation: /^<<[-~]?'|'$/
                    }
                  },
                  string: /[\s\S]+/
                }
              }
            ],
            "command-literal": [
              {
                pattern: RegExp(/%x/.source + percentExpression),
                greedy: true,
                inside: {
                  interpolation,
                  command: {
                    pattern: /[\s\S]+/,
                    alias: "string"
                  }
                }
              },
              {
                pattern: /`(?:#\{[^}]+\}|#(?!\{)|\\(?:\r\n|[\s\S])|[^\\`#\r\n])*`/,
                greedy: true,
                inside: {
                  interpolation,
                  command: {
                    pattern: /[\s\S]+/,
                    alias: "string"
                  }
                }
              }
            ]
          });
          delete Prism2.languages.ruby.string;
          Prism2.languages.insertBefore("ruby", "number", {
            builtin: /\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Fixnum|Float|Hash|IO|Integer|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|Stat|String|Struct|Symbol|TMS|Thread|ThreadGroup|Time|TrueClass)\b/,
            constant: /\b[A-Z][A-Z0-9_]*(?:[?!]|\b)/
          });
          Prism2.languages.rb = Prism2.languages.ruby;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/crystal.js
  var require_crystal = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/crystal.js"(exports, module) {
      "use strict";
      var refractorRuby = require_ruby();
      module.exports = crystal;
      crystal.displayName = "crystal";
      crystal.aliases = [];
      function crystal(Prism) {
        Prism.register(refractorRuby);
        (function(Prism2) {
          Prism2.languages.crystal = Prism2.languages.extend("ruby", {
            keyword: [
              /\b(?:__DIR__|__END_LINE__|__FILE__|__LINE__|abstract|alias|annotation|as|asm|begin|break|case|class|def|do|else|elsif|end|ensure|enum|extend|for|fun|if|ifdef|include|instance_sizeof|lib|macro|module|next|of|out|pointerof|private|protected|ptr|require|rescue|return|select|self|sizeof|struct|super|then|type|typeof|undef|uninitialized|union|unless|until|when|while|with|yield)\b/,
              {
                pattern: /(\.\s*)(?:is_a|responds_to)\?/,
                lookbehind: true
              }
            ],
            number: /\b(?:0b[01_]*[01]|0o[0-7_]*[0-7]|0x[\da-fA-F_]*[\da-fA-F]|(?:\d(?:[\d_]*\d)?)(?:\.[\d_]*\d)?(?:[eE][+-]?[\d_]*\d)?)(?:_(?:[uif](?:8|16|32|64))?)?\b/,
            operator: [/->/, Prism2.languages.ruby.operator],
            punctuation: /[(){}[\].,;\\]/
          });
          Prism2.languages.insertBefore("crystal", "string-literal", {
            attribute: {
              pattern: /@\[.*?\]/,
              inside: {
                delimiter: {
                  pattern: /^@\[|\]$/,
                  alias: "punctuation"
                },
                attribute: {
                  pattern: /^(\s*)\w+/,
                  lookbehind: true,
                  alias: "class-name"
                },
                args: {
                  pattern: /\S(?:[\s\S]*\S)?/,
                  inside: Prism2.languages.crystal
                }
              }
            },
            expansion: {
              pattern: /\{(?:\{.*?\}|%.*?%)\}/,
              inside: {
                content: {
                  pattern: /^(\{.)[\s\S]+(?=.\}$)/,
                  lookbehind: true,
                  inside: Prism2.languages.crystal
                },
                delimiter: {
                  pattern: /^\{[\{%]|[\}%]\}$/,
                  alias: "operator"
                }
              }
            },
            char: {
              pattern: /'(?:[^\\\r\n]{1,2}|\\(?:.|u(?:[A-Fa-f0-9]{1,4}|\{[A-Fa-f0-9]{1,6}\})))'/,
              greedy: true
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cshtml.js
  var require_cshtml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cshtml.js"(exports, module) {
      "use strict";
      var refractorCsharp = require_csharp();
      module.exports = cshtml;
      cshtml.displayName = "cshtml";
      cshtml.aliases = ["razor"];
      function cshtml(Prism) {
        Prism.register(refractorCsharp);
        (function(Prism2) {
          var commentLike = /\/(?![/*])|\/\/.*[\r\n]|\/\*[^*]*(?:\*(?!\/)[^*]*)*\*\//.source;
          var stringLike = /@(?!")|"(?:[^\r\n\\"]|\\.)*"|@"(?:[^\\"]|""|\\[\s\S])*"(?!")/.source + "|" + /'(?:(?:[^\r\n'\\]|\\.|\\[Uux][\da-fA-F]{1,8})'|(?=[^\\](?!')))/.source;
          function nested(pattern, depthLog2) {
            for (var i = 0; i < depthLog2; i++) {
              pattern = pattern.replace(/<self>/g, function() {
                return "(?:" + pattern + ")";
              });
            }
            return pattern.replace(/<self>/g, "[^\\s\\S]").replace(/<str>/g, "(?:" + stringLike + ")").replace(/<comment>/g, "(?:" + commentLike + ")");
          }
          var round = nested(/\((?:[^()'"@/]|<str>|<comment>|<self>)*\)/.source, 2);
          var square = nested(/\[(?:[^\[\]'"@/]|<str>|<comment>|<self>)*\]/.source, 2);
          var curly = nested(/\{(?:[^{}'"@/]|<str>|<comment>|<self>)*\}/.source, 2);
          var angle = nested(/<(?:[^<>'"@/]|<str>|<comment>|<self>)*>/.source, 2);
          var tagAttrs = /(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?/.source;
          var tagContent = /(?!\d)[^\s>\/=$<%]+/.source + tagAttrs + /\s*\/?>/.source;
          var tagRegion = /\B@?/.source + "(?:" + /<([a-zA-Z][\w:]*)/.source + tagAttrs + /\s*>/.source + "(?:" + (/[^<]/.source + "|" + /<\/?(?!\1\b)/.source + tagContent + "|" + nested(
            /<\1/.source + tagAttrs + /\s*>/.source + "(?:" + (/[^<]/.source + "|" + /<\/?(?!\1\b)/.source + tagContent + "|<self>") + ")*" + /<\/\1\s*>/.source,
            2
          )) + ")*" + /<\/\1\s*>/.source + "|" + /</.source + tagContent + ")";
          Prism2.languages.cshtml = Prism2.languages.extend("markup", {});
          var csharpWithHtml = Prism2.languages.insertBefore(
            "csharp",
            "string",
            {
              html: {
                pattern: RegExp(tagRegion),
                greedy: true,
                inside: Prism2.languages.cshtml
              }
            },
            {
              csharp: Prism2.languages.extend("csharp", {})
            }
          );
          var cs = {
            pattern: /\S[\s\S]*/,
            alias: "language-csharp",
            inside: csharpWithHtml
          };
          Prism2.languages.insertBefore("cshtml", "prolog", {
            "razor-comment": {
              pattern: /@\*[\s\S]*?\*@/,
              greedy: true,
              alias: "comment"
            },
            block: {
              pattern: RegExp(
                /(^|[^@])@/.source + "(?:" + [
                  curly,
                  /(?:code|functions)\s*/.source + curly,
                  /(?:for|foreach|lock|switch|using|while)\s*/.source + round + /\s*/.source + curly,
                  /do\s*/.source + curly + /\s*while\s*/.source + round + /(?:\s*;)?/.source,
                  /try\s*/.source + curly + /\s*catch\s*/.source + round + /\s*/.source + curly + /\s*finally\s*/.source + curly,
                  /if\s*/.source + round + /\s*/.source + curly + "(?:" + /\s*else/.source + "(?:" + /\s+if\s*/.source + round + ")?" + /\s*/.source + curly + ")*"
                ].join("|") + ")"
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                keyword: /^@\w*/,
                csharp: cs
              }
            },
            directive: {
              pattern: /^([ \t]*)@(?:addTagHelper|attribute|implements|inherits|inject|layout|model|namespace|page|preservewhitespace|removeTagHelper|section|tagHelperPrefix|using)(?=\s).*/m,
              lookbehind: true,
              greedy: true,
              inside: {
                keyword: /^@\w+/,
                csharp: cs
              }
            },
            value: {
              pattern: RegExp(
                /(^|[^@])@/.source + /(?:await\b\s*)?/.source + "(?:" + /\w+\b/.source + "|" + round + ")(?:" + /[?!]?\.\w+\b/.source + "|" + round + "|" + square + "|" + angle + round + ")*"
              ),
              lookbehind: true,
              greedy: true,
              alias: "variable",
              inside: {
                keyword: /^@/,
                csharp: cs
              }
            },
            "delegate-operator": {
              pattern: /(^|[^@])@(?=<)/,
              lookbehind: true,
              alias: "operator"
            }
          });
          Prism2.languages.razor = Prism2.languages.cshtml;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/csp.js
  var require_csp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/csp.js"(exports, module) {
      "use strict";
      module.exports = csp;
      csp.displayName = "csp";
      csp.aliases = [];
      function csp(Prism) {
        ;
        (function(Prism2) {
          function value(source) {
            return RegExp(
              /([ \t])/.source + "(?:" + source + ")" + /(?=[\s;]|$)/.source,
              "i"
            );
          }
          Prism2.languages.csp = {
            directive: {
              pattern: /(^|[\s;])(?:base-uri|block-all-mixed-content|(?:child|connect|default|font|frame|img|manifest|media|object|prefetch|script|style|worker)-src|disown-opener|form-action|frame-(?:ancestors|options)|input-protection(?:-(?:clip|selectors))?|navigate-to|plugin-types|policy-uri|referrer|reflected-xss|report-(?:to|uri)|require-sri-for|sandbox|(?:script|style)-src-(?:attr|elem)|upgrade-insecure-requests)(?=[\s;]|$)/i,
              lookbehind: true,
              alias: "property"
            },
            scheme: {
              pattern: value(/[a-z][a-z0-9.+-]*:/.source),
              lookbehind: true
            },
            none: {
              pattern: value(/'none'/.source),
              lookbehind: true,
              alias: "keyword"
            },
            nonce: {
              pattern: value(/'nonce-[-+/\w=]+'/.source),
              lookbehind: true,
              alias: "number"
            },
            hash: {
              pattern: value(/'sha(?:256|384|512)-[-+/\w=]+'/.source),
              lookbehind: true,
              alias: "number"
            },
            host: {
              pattern: value(
                /[a-z][a-z0-9.+-]*:\/\/[^\s;,']*/.source + "|" + /\*[^\s;,']*/.source + "|" + /[a-z0-9-]+(?:\.[a-z0-9-]+)+(?::[\d*]+)?(?:\/[^\s;,']*)?/.source
              ),
              lookbehind: true,
              alias: "url",
              inside: {
                important: /\*/
              }
            },
            keyword: [
              {
                pattern: value(/'unsafe-[a-z-]+'/.source),
                lookbehind: true,
                alias: "unsafe"
              },
              {
                pattern: value(/'[a-z-]+'/.source),
                lookbehind: true,
                alias: "safe"
              }
            ],
            punctuation: /;/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/css-extras.js
  var require_css_extras = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/css-extras.js"(exports, module) {
      "use strict";
      module.exports = cssExtras;
      cssExtras.displayName = "cssExtras";
      cssExtras.aliases = [];
      function cssExtras(Prism) {
        ;
        (function(Prism2) {
          var string3 = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
          var selectorInside;
          Prism2.languages.css.selector = {
            pattern: Prism2.languages.css.selector.pattern,
            lookbehind: true,
            inside: selectorInside = {
              "pseudo-element": /:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,
              "pseudo-class": /:[-\w]+/,
              class: /\.[-\w]+/,
              id: /#[-\w]+/,
              attribute: {
                pattern: RegExp(`\\[(?:[^[\\]"']|` + string3.source + ")*\\]"),
                greedy: true,
                inside: {
                  punctuation: /^\[|\]$/,
                  "case-sensitivity": {
                    pattern: /(\s)[si]$/i,
                    lookbehind: true,
                    alias: "keyword"
                  },
                  namespace: {
                    pattern: /^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,
                    lookbehind: true,
                    inside: {
                      punctuation: /\|$/
                    }
                  },
                  "attr-name": {
                    pattern: /^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,
                    lookbehind: true
                  },
                  "attr-value": [
                    string3,
                    {
                      pattern: /(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,
                      lookbehind: true
                    }
                  ],
                  operator: /[|~*^$]?=/
                }
              },
              "n-th": [
                {
                  pattern: /(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,
                  lookbehind: true,
                  inside: {
                    number: /[\dn]+/,
                    operator: /[+-]/
                  }
                },
                {
                  pattern: /(\(\s*)(?:even|odd)(?=\s*\))/i,
                  lookbehind: true
                }
              ],
              combinator: />|\+|~|\|\|/,
              punctuation: /[(),]/
            }
          };
          Prism2.languages.css["atrule"].inside["selector-function-argument"].inside = selectorInside;
          Prism2.languages.insertBefore("css", "property", {
            variable: {
              pattern: /(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,
              lookbehind: true
            }
          });
          var unit = {
            pattern: /(\b\d+)(?:%|[a-z]+(?![\w-]))/,
            lookbehind: true
          };
          var number3 = {
            pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
            lookbehind: true
          };
          Prism2.languages.insertBefore("css", "function", {
            operator: {
              pattern: /(\s)[+\-*\/](?=\s)/,
              lookbehind: true
            },
            hexcode: {
              pattern: /\B#[\da-f]{3,8}\b/i,
              alias: "color"
            },
            color: [
              {
                pattern: /(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,
                lookbehind: true
              },
              {
                pattern: /\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
                inside: {
                  unit,
                  number: number3,
                  function: /[\w-]+(?=\()/,
                  punctuation: /[(),]/
                }
              }
            ],
            entity: /\\[\da-f]{1,8}/i,
            unit,
            number: number3
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/csv.js
  var require_csv = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/csv.js"(exports, module) {
      "use strict";
      module.exports = csv;
      csv.displayName = "csv";
      csv.aliases = [];
      function csv(Prism) {
        Prism.languages.csv = {
          value: /[^\r\n,"]+|"(?:[^"]|"")*"(?!")/,
          punctuation: /,/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/cypher.js
  var require_cypher = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/cypher.js"(exports, module) {
      "use strict";
      module.exports = cypher;
      cypher.displayName = "cypher";
      cypher.aliases = [];
      function cypher(Prism) {
        Prism.languages.cypher = {
          comment: /\/\/.*/,
          string: {
            pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/,
            greedy: true
          },
          "class-name": {
            pattern: /(:\s*)(?:\w+|`(?:[^`\\\r\n])*`)(?=\s*[{):])/,
            lookbehind: true,
            greedy: true
          },
          relationship: {
            pattern: /(-\[\s*(?:\w+\s*|`(?:[^`\\\r\n])*`\s*)?:\s*|\|\s*:\s*)(?:\w+|`(?:[^`\\\r\n])*`)/,
            lookbehind: true,
            greedy: true,
            alias: "property"
          },
          identifier: {
            pattern: /`(?:[^`\\\r\n])*`/,
            greedy: true
          },
          variable: /\$\w+/,
          keyword: /\b(?:ADD|ALL|AND|AS|ASC|ASCENDING|ASSERT|BY|CALL|CASE|COMMIT|CONSTRAINT|CONTAINS|CREATE|CSV|DELETE|DESC|DESCENDING|DETACH|DISTINCT|DO|DROP|ELSE|END|ENDS|EXISTS|FOR|FOREACH|IN|INDEX|IS|JOIN|KEY|LIMIT|LOAD|MANDATORY|MATCH|MERGE|NODE|NOT|OF|ON|OPTIONAL|OR|ORDER(?=\s+BY)|PERIODIC|REMOVE|REQUIRE|RETURN|SCALAR|SCAN|SET|SKIP|START|STARTS|THEN|UNION|UNIQUE|UNWIND|USING|WHEN|WHERE|WITH|XOR|YIELD)\b/i,
          function: /\b\w+\b(?=\s*\()/,
          boolean: /\b(?:false|null|true)\b/i,
          number: /\b(?:0x[\da-fA-F]+|\d+(?:\.\d+)?(?:[eE][+-]?\d+)?)\b/,
          operator: /:|<--?|--?>?|<>|=~?|[<>]=?|[+*/%^|]|\.\.\.?/,
          punctuation: /[()[\]{},;.]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/d.js
  var require_d = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/d.js"(exports, module) {
      "use strict";
      module.exports = d;
      d.displayName = "d";
      d.aliases = [];
      function d(Prism) {
        Prism.languages.d = Prism.languages.extend("clike", {
          comment: [
            {
              pattern: /^\s*#!.+/,
              greedy: true
            },
            {
              pattern: RegExp(
                /(^|[^\\])/.source + "(?:" + [
                  /\/\+(?:\/\+(?:[^+]|\+(?!\/))*\+\/|(?!\/\+)[\s\S])*?\+\//.source,
                  /\/\/.*/.source,
                  /\/\*[\s\S]*?\*\//.source
                ].join("|") + ")"
              ),
              lookbehind: true,
              greedy: true
            }
          ],
          string: [
            {
              pattern: RegExp(
                [
                  /\b[rx]"(?:\\[\s\S]|[^\\"])*"[cwd]?/.source,
                  /\bq"(?:\[[\s\S]*?\]|\([\s\S]*?\)|<[\s\S]*?>|\{[\s\S]*?\})"/.source,
                  /\bq"((?!\d)\w+)$[\s\S]*?^\1"/.source,
                  /\bq"(.)[\s\S]*?\2"/.source,
                  /(["`])(?:\\[\s\S]|(?!\3)[^\\])*\3[cwd]?/.source
                ].join("|"),
                "m"
              ),
              greedy: true
            },
            {
              pattern: /\bq\{(?:\{[^{}]*\}|[^{}])*\}/,
              greedy: true,
              alias: "token-string"
            }
          ],
          keyword: /\$|\b(?:__(?:(?:DATE|EOF|FILE|FUNCTION|LINE|MODULE|PRETTY_FUNCTION|TIMESTAMP|TIME|VENDOR|VERSION)__|gshared|parameters|traits|vector)|abstract|alias|align|asm|assert|auto|body|bool|break|byte|case|cast|catch|cdouble|cent|cfloat|char|class|const|continue|creal|dchar|debug|default|delegate|delete|deprecated|do|double|dstring|else|enum|export|extern|false|final|finally|float|for|foreach|foreach_reverse|function|goto|idouble|if|ifloat|immutable|import|inout|int|interface|invariant|ireal|lazy|long|macro|mixin|module|new|nothrow|null|out|override|package|pragma|private|protected|ptrdiff_t|public|pure|real|ref|return|scope|shared|short|size_t|static|string|struct|super|switch|synchronized|template|this|throw|true|try|typedef|typeid|typeof|ubyte|ucent|uint|ulong|union|unittest|ushort|version|void|volatile|wchar|while|with|wstring)\b/,
          number: [
            /\b0x\.?[a-f\d_]+(?:(?!\.\.)\.[a-f\d_]*)?(?:p[+-]?[a-f\d_]+)?[ulfi]{0,4}/i,
            {
              pattern: /((?:\.\.)?)(?:\b0b\.?|\b|\.)\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:e[+-]?\d[\d_]*)?[ulfi]{0,4}/i,
              lookbehind: true
            }
          ],
          operator: /\|[|=]?|&[&=]?|\+[+=]?|-[-=]?|\.?\.\.|=[>=]?|!(?:i[ns]\b|<>?=?|>=?|=)?|\bi[ns]\b|(?:<[<>]?|>>?>?|\^\^|[*\/%^~])=?/
        });
        Prism.languages.insertBefore("d", "string", {
          char: /'(?:\\(?:\W|\w+)|[^\\])'/
        });
        Prism.languages.insertBefore("d", "keyword", {
          property: /\B@\w*/
        });
        Prism.languages.insertBefore("d", "function", {
          register: {
            pattern: /\b(?:[ABCD][LHX]|E?(?:BP|DI|SI|SP)|[BS]PL|[ECSDGF]S|CR[0234]|[DS]IL|DR[012367]|E[ABCD]X|X?MM[0-7]|R(?:1[0-5]|[89])[BWD]?|R[ABCD]X|R[BS]P|R[DS]I|TR[3-7]|XMM(?:1[0-5]|[89])|YMM(?:1[0-5]|\d))\b|\bST(?:\([0-7]\)|\b)/,
            alias: "variable"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/dart.js
  var require_dart = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/dart.js"(exports, module) {
      "use strict";
      module.exports = dart;
      dart.displayName = "dart";
      dart.aliases = [];
      function dart(Prism) {
        ;
        (function(Prism2) {
          var keywords = [
            /\b(?:async|sync|yield)\*/,
            /\b(?:abstract|assert|async|await|break|case|catch|class|const|continue|covariant|default|deferred|do|dynamic|else|enum|export|extends|extension|external|factory|final|finally|for|get|hide|if|implements|import|in|interface|library|mixin|new|null|on|operator|part|rethrow|return|set|show|static|super|switch|sync|this|throw|try|typedef|var|void|while|with|yield)\b/
          ];
          var packagePrefix = /(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;
          var className = {
            pattern: RegExp(packagePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
            lookbehind: true,
            inside: {
              namespace: {
                pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
                inside: {
                  punctuation: /\./
                }
              }
            }
          };
          Prism2.languages.dart = Prism2.languages.extend("clike", {
            "class-name": [
              className,
              {
                pattern: RegExp(
                  packagePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source
                ),
                lookbehind: true,
                inside: className.inside
              }
            ],
            keyword: keywords,
            operator: /\bis!|\b(?:as|is)\b|\+\+|--|&&|\|\||<<=?|>>=?|~(?:\/=?)?|[+\-*\/%&^|=!<>]=?|\?/
          });
          Prism2.languages.insertBefore("dart", "string", {
            "string-literal": {
              pattern: /r?(?:("""|''')[\s\S]*?\1|(["'])(?:\\.|(?!\2)[^\\\r\n])*\2(?!\2))/,
              greedy: true,
              inside: {
                interpolation: {
                  pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\w+|\{(?:[^{}]|\{[^{}]*\})*\})/,
                  lookbehind: true,
                  inside: {
                    punctuation: /^\$\{?|\}$/,
                    expression: {
                      pattern: /[\s\S]+/,
                      inside: Prism2.languages.dart
                    }
                  }
                },
                string: /[\s\S]+/
              }
            },
            string: void 0
          });
          Prism2.languages.insertBefore("dart", "class-name", {
            metadata: {
              pattern: /@\w+/,
              alias: "function"
            }
          });
          Prism2.languages.insertBefore("dart", "class-name", {
            generics: {
              pattern: /<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<(?:[\w\s,.&?]|<[\w\s,.&?]*>)*>)*>)*>/,
              inside: {
                "class-name": className,
                keyword: keywords,
                punctuation: /[<>(),.:]/,
                operator: /[?&|]/
              }
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/dataweave.js
  var require_dataweave = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/dataweave.js"(exports, module) {
      "use strict";
      module.exports = dataweave;
      dataweave.displayName = "dataweave";
      dataweave.aliases = [];
      function dataweave(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.dataweave = {
            url: /\b[A-Za-z]+:\/\/[\w/:.?=&-]+|\burn:[\w:.?=&-]+/,
            property: {
              pattern: /(?:\b\w+#)?(?:"(?:\\.|[^\\"\r\n])*"|\b\w+)(?=\s*[:@])/,
              greedy: true
            },
            string: {
              pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
              greedy: true
            },
            "mime-type": /\b(?:application|audio|image|multipart|text|video)\/[\w+-]+/,
            date: {
              pattern: /\|[\w:+-]+\|/,
              greedy: true
            },
            comment: [
              {
                pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /(^|[^\\:])\/\/.*/,
                lookbehind: true,
                greedy: true
              }
            ],
            regex: {
              pattern: /\/(?:[^\\\/\r\n]|\\[^\r\n])+\//,
              greedy: true
            },
            keyword: /\b(?:and|as|at|case|do|else|fun|if|input|is|match|not|ns|null|or|output|type|unless|update|using|var)\b/,
            function: /\b[A-Z_]\w*(?=\s*\()/i,
            number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
            punctuation: /[{}[\];(),.:@]/,
            operator: /<<|>>|->|[<>~=]=?|!=|--?-?|\+\+?|!|\?/,
            boolean: /\b(?:false|true)\b/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/dax.js
  var require_dax = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/dax.js"(exports, module) {
      "use strict";
      module.exports = dax;
      dax.displayName = "dax";
      dax.aliases = [];
      function dax(Prism) {
        Prism.languages.dax = {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/).*)/,
            lookbehind: true
          },
          "data-field": {
            pattern: /'(?:[^']|'')*'(?!')(?:\[[ \w\xA0-\uFFFF]+\])?|\w+\[[ \w\xA0-\uFFFF]+\]/,
            alias: "symbol"
          },
          measure: {
            pattern: /\[[ \w\xA0-\uFFFF]+\]/,
            alias: "constant"
          },
          string: {
            pattern: /"(?:[^"]|"")*"(?!")/,
            greedy: true
          },
          function: /\b(?:ABS|ACOS|ACOSH|ACOT|ACOTH|ADDCOLUMNS|ADDMISSINGITEMS|ALL|ALLCROSSFILTERED|ALLEXCEPT|ALLNOBLANKROW|ALLSELECTED|AND|APPROXIMATEDISTINCTCOUNT|ASIN|ASINH|ATAN|ATANH|AVERAGE|AVERAGEA|AVERAGEX|BETA\.DIST|BETA\.INV|BLANK|CALCULATE|CALCULATETABLE|CALENDAR|CALENDARAUTO|CEILING|CHISQ\.DIST|CHISQ\.DIST\.RT|CHISQ\.INV|CHISQ\.INV\.RT|CLOSINGBALANCEMONTH|CLOSINGBALANCEQUARTER|CLOSINGBALANCEYEAR|COALESCE|COMBIN|COMBINA|COMBINEVALUES|CONCATENATE|CONCATENATEX|CONFIDENCE\.NORM|CONFIDENCE\.T|CONTAINS|CONTAINSROW|CONTAINSSTRING|CONTAINSSTRINGEXACT|CONVERT|COS|COSH|COT|COTH|COUNT|COUNTA|COUNTAX|COUNTBLANK|COUNTROWS|COUNTX|CROSSFILTER|CROSSJOIN|CURRENCY|CURRENTGROUP|CUSTOMDATA|DATATABLE|DATE|DATEADD|DATEDIFF|DATESBETWEEN|DATESINPERIOD|DATESMTD|DATESQTD|DATESYTD|DATEVALUE|DAY|DEGREES|DETAILROWS|DISTINCT|DISTINCTCOUNT|DISTINCTCOUNTNOBLANK|DIVIDE|EARLIER|EARLIEST|EDATE|ENDOFMONTH|ENDOFQUARTER|ENDOFYEAR|EOMONTH|ERROR|EVEN|EXACT|EXCEPT|EXP|EXPON\.DIST|FACT|FALSE|FILTER|FILTERS|FIND|FIRSTDATE|FIRSTNONBLANK|FIRSTNONBLANKVALUE|FIXED|FLOOR|FORMAT|GCD|GENERATE|GENERATEALL|GENERATESERIES|GEOMEAN|GEOMEANX|GROUPBY|HASONEFILTER|HASONEVALUE|HOUR|IF|IF\.EAGER|IFERROR|IGNORE|INT|INTERSECT|ISBLANK|ISCROSSFILTERED|ISEMPTY|ISERROR|ISEVEN|ISFILTERED|ISINSCOPE|ISLOGICAL|ISNONTEXT|ISNUMBER|ISO\.CEILING|ISODD|ISONORAFTER|ISSELECTEDMEASURE|ISSUBTOTAL|ISTEXT|KEEPFILTERS|KEYWORDMATCH|LASTDATE|LASTNONBLANK|LASTNONBLANKVALUE|LCM|LEFT|LEN|LN|LOG|LOG10|LOOKUPVALUE|LOWER|MAX|MAXA|MAXX|MEDIAN|MEDIANX|MID|MIN|MINA|MINUTE|MINX|MOD|MONTH|MROUND|NATURALINNERJOIN|NATURALLEFTOUTERJOIN|NEXTDAY|NEXTMONTH|NEXTQUARTER|NEXTYEAR|NONVISUAL|NORM\.DIST|NORM\.INV|NORM\.S\.DIST|NORM\.S\.INV|NOT|NOW|ODD|OPENINGBALANCEMONTH|OPENINGBALANCEQUARTER|OPENINGBALANCEYEAR|OR|PARALLELPERIOD|PATH|PATHCONTAINS|PATHITEM|PATHITEMREVERSE|PATHLENGTH|PERCENTILE\.EXC|PERCENTILE\.INC|PERCENTILEX\.EXC|PERCENTILEX\.INC|PERMUT|PI|POISSON\.DIST|POWER|PREVIOUSDAY|PREVIOUSMONTH|PREVIOUSQUARTER|PREVIOUSYEAR|PRODUCT|PRODUCTX|QUARTER|QUOTIENT|RADIANS|RAND|RANDBETWEEN|RANK\.EQ|RANKX|RELATED|RELATEDTABLE|REMOVEFILTERS|REPLACE|REPT|RIGHT|ROLLUP|ROLLUPADDISSUBTOTAL|ROLLUPGROUP|ROLLUPISSUBTOTAL|ROUND|ROUNDDOWN|ROUNDUP|ROW|SAMEPERIODLASTYEAR|SAMPLE|SEARCH|SECOND|SELECTCOLUMNS|SELECTEDMEASURE|SELECTEDMEASUREFORMATSTRING|SELECTEDMEASURENAME|SELECTEDVALUE|SIGN|SIN|SINH|SQRT|SQRTPI|STARTOFMONTH|STARTOFQUARTER|STARTOFYEAR|STDEV\.P|STDEV\.S|STDEVX\.P|STDEVX\.S|SUBSTITUTE|SUBSTITUTEWITHINDEX|SUM|SUMMARIZE|SUMMARIZECOLUMNS|SUMX|SWITCH|T\.DIST|T\.DIST\.2T|T\.DIST\.RT|T\.INV|T\.INV\.2T|TAN|TANH|TIME|TIMEVALUE|TODAY|TOPN|TOPNPERLEVEL|TOPNSKIP|TOTALMTD|TOTALQTD|TOTALYTD|TREATAS|TRIM|TRUE|TRUNC|UNICHAR|UNICODE|UNION|UPPER|USERELATIONSHIP|USERNAME|USEROBJECTID|USERPRINCIPALNAME|UTCNOW|UTCTODAY|VALUE|VALUES|VAR\.P|VAR\.S|VARX\.P|VARX\.S|WEEKDAY|WEEKNUM|XIRR|XNPV|YEAR|YEARFRAC)(?=\s*\()/i,
          keyword: /\b(?:DEFINE|EVALUATE|MEASURE|ORDER\s+BY|RETURN|VAR|START\s+AT|ASC|DESC)\b/i,
          boolean: {
            pattern: /\b(?:FALSE|NULL|TRUE)\b/i,
            alias: "constant"
          },
          number: /\b\d+(?:\.\d*)?|\B\.\d+\b/,
          operator: /:=|[-+*\/=^]|&&?|\|\||<(?:=>?|<|>)?|>[>=]?|\b(?:IN|NOT)\b/i,
          punctuation: /[;\[\](){}`,.]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/dhall.js
  var require_dhall = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/dhall.js"(exports, module) {
      "use strict";
      module.exports = dhall;
      dhall.displayName = "dhall";
      dhall.aliases = [];
      function dhall(Prism) {
        Prism.languages.dhall = {
          comment: /--.*|\{-(?:[^-{]|-(?!\})|\{(?!-)|\{-(?:[^-{]|-(?!\})|\{(?!-))*-\})*-\}/,
          string: {
            pattern: /"(?:[^"\\]|\\.)*"|''(?:[^']|'(?!')|'''|''\$\{)*''(?!'|\$)/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /\$\{[^{}]*\}/,
                inside: {
                  expression: {
                    pattern: /(^\$\{)[\s\S]+(?=\}$)/,
                    lookbehind: true,
                    alias: "language-dhall",
                    inside: null
                  },
                  punctuation: /\$\{|\}/
                }
              }
            }
          },
          label: {
            pattern: /`[^`]*`/,
            greedy: true
          },
          url: {
            pattern: /\bhttps?:\/\/[\w.:%!$&'*+;=@~-]+(?:\/[\w.:%!$&'*+;=@~-]*)*(?:\?[/?\w.:%!$&'*+;=@~-]*)?/,
            greedy: true
          },
          env: {
            pattern: /\benv:(?:(?!\d)\w+|"(?:[^"\\=]|\\.)*")/,
            greedy: true,
            inside: {
              function: /^env/,
              operator: /^:/,
              variable: /[\s\S]+/
            }
          },
          hash: {
            pattern: /\bsha256:[\da-fA-F]{64}\b/,
            inside: {
              function: /sha256/,
              operator: /:/,
              number: /[\da-fA-F]{64}/
            }
          },
          keyword: /\b(?:as|assert|else|forall|if|in|let|merge|missing|then|toMap|using|with)\b|\u2200/,
          builtin: /\b(?:None|Some)\b/,
          boolean: /\b(?:False|True)\b/,
          number: /\bNaN\b|-?\bInfinity\b|[+-]?\b(?:0x[\da-fA-F]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/,
          operator: /\/\\|\/\/\\\\|&&|\|\||===|[!=]=|\/\/|->|\+\+|::|[+*#@=:?<>|\\\u2227\u2a53\u2261\u2afd\u03bb\u2192]/,
          punctuation: /\.\.|[{}\[\](),./]/,
          "class-name": /\b[A-Z]\w*\b/
        };
        Prism.languages.dhall.string.inside.interpolation.inside.expression.inside = Prism.languages.dhall;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/diff.js
  var require_diff = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/diff.js"(exports, module) {
      "use strict";
      module.exports = diff;
      diff.displayName = "diff";
      diff.aliases = [];
      function diff(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.diff = {
            coord: [
              /^(?:\*{3}|-{3}|\+{3}).*$/m,
              /^@@.*@@$/m,
              /^\d.*$/m
            ]
          };
          var PREFIXES = {
            "deleted-sign": "-",
            "deleted-arrow": "<",
            "inserted-sign": "+",
            "inserted-arrow": ">",
            unchanged: " ",
            diff: "!"
          };
          Object.keys(PREFIXES).forEach(function(name) {
            var prefix = PREFIXES[name];
            var alias = [];
            if (!/^\w+$/.test(name)) {
              alias.push(/\w+/.exec(name)[0]);
            }
            if (name === "diff") {
              alias.push("bold");
            }
            Prism2.languages.diff[name] = {
              pattern: RegExp(
                "^(?:[" + prefix + "].*(?:\r\n?|\n|(?![\\s\\S])))+",
                "m"
              ),
              alias,
              inside: {
                line: {
                  pattern: /(.)(?=[\s\S]).*(?:\r\n?|\n)?/,
                  lookbehind: true
                },
                prefix: {
                  pattern: /[\s\S]/,
                  alias: /\w+/.exec(name)[0]
                }
              }
            };
          });
          Object.defineProperty(Prism2.languages.diff, "PREFIXES", {
            value: PREFIXES
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/markup-templating.js
  var require_markup_templating = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/markup-templating.js"(exports, module) {
      "use strict";
      module.exports = markupTemplating;
      markupTemplating.displayName = "markupTemplating";
      markupTemplating.aliases = [];
      function markupTemplating(Prism) {
        ;
        (function(Prism2) {
          function getPlaceholder(language, index2) {
            return "___" + language.toUpperCase() + index2 + "___";
          }
          Object.defineProperties(Prism2.languages["markup-templating"] = {}, {
            buildPlaceholders: {
              value: function(env, language, placeholderPattern, replaceFilter) {
                if (env.language !== language) {
                  return;
                }
                var tokenStack = env.tokenStack = [];
                env.code = env.code.replace(placeholderPattern, function(match) {
                  if (typeof replaceFilter === "function" && !replaceFilter(match)) {
                    return match;
                  }
                  var i = tokenStack.length;
                  var placeholder;
                  while (env.code.indexOf(placeholder = getPlaceholder(language, i)) !== -1) {
                    ++i;
                  }
                  tokenStack[i] = match;
                  return placeholder;
                });
                env.grammar = Prism2.languages.markup;
              }
            },
            tokenizePlaceholders: {
              value: function(env, language) {
                if (env.language !== language || !env.tokenStack) {
                  return;
                }
                env.grammar = Prism2.languages[language];
                var j = 0;
                var keys3 = Object.keys(env.tokenStack);
                function walkTokens(tokens2) {
                  for (var i = 0; i < tokens2.length; i++) {
                    if (j >= keys3.length) {
                      break;
                    }
                    var token = tokens2[i];
                    if (typeof token === "string" || token.content && typeof token.content === "string") {
                      var k = keys3[j];
                      var t2 = env.tokenStack[k];
                      var s2 = typeof token === "string" ? token : token.content;
                      var placeholder = getPlaceholder(language, k);
                      var index2 = s2.indexOf(placeholder);
                      if (index2 > -1) {
                        ++j;
                        var before = s2.substring(0, index2);
                        var middle = new Prism2.Token(
                          language,
                          Prism2.tokenize(t2, env.grammar),
                          "language-" + language,
                          t2
                        );
                        var after = s2.substring(index2 + placeholder.length);
                        var replacement = [];
                        if (before) {
                          replacement.push.apply(replacement, walkTokens([before]));
                        }
                        replacement.push(middle);
                        if (after) {
                          replacement.push.apply(replacement, walkTokens([after]));
                        }
                        if (typeof token === "string") {
                          tokens2.splice.apply(tokens2, [i, 1].concat(replacement));
                        } else {
                          token.content = replacement;
                        }
                      }
                    } else if (token.content) {
                      walkTokens(token.content);
                    }
                  }
                  return tokens2;
                }
                walkTokens(env.tokens);
              }
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/django.js
  var require_django = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/django.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = django;
      django.displayName = "django";
      django.aliases = ["jinja2"];
      function django(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.django = {
            comment: /^\{#[\s\S]*?#\}$/,
            tag: {
              pattern: /(^\{%[+-]?\s*)\w+/,
              lookbehind: true,
              alias: "keyword"
            },
            delimiter: {
              pattern: /^\{[{%][+-]?|[+-]?[}%]\}$/,
              alias: "punctuation"
            },
            string: {
              pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
              greedy: true
            },
            filter: {
              pattern: /(\|)\w+/,
              lookbehind: true,
              alias: "function"
            },
            test: {
              pattern: /(\bis\s+(?:not\s+)?)(?!not\b)\w+/,
              lookbehind: true,
              alias: "function"
            },
            function: /\b[a-z_]\w+(?=\s*\()/i,
            keyword: /\b(?:and|as|by|else|for|if|import|in|is|loop|not|or|recursive|with|without)\b/,
            operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
            number: /\b\d+(?:\.\d+)?\b/,
            boolean: /[Ff]alse|[Nn]one|[Tt]rue/,
            variable: /\b\w+\b/,
            punctuation: /[{}[\](),.:;]/
          };
          var pattern = /\{\{[\s\S]*?\}\}|\{%[\s\S]*?%\}|\{#[\s\S]*?#\}/g;
          var markupTemplating = Prism2.languages["markup-templating"];
          Prism2.hooks.add("before-tokenize", function(env) {
            markupTemplating.buildPlaceholders(env, "django", pattern);
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            markupTemplating.tokenizePlaceholders(env, "django");
          });
          Prism2.languages.jinja2 = Prism2.languages.django;
          Prism2.hooks.add("before-tokenize", function(env) {
            markupTemplating.buildPlaceholders(env, "jinja2", pattern);
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            markupTemplating.tokenizePlaceholders(env, "jinja2");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/dns-zone-file.js
  var require_dns_zone_file = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/dns-zone-file.js"(exports, module) {
      "use strict";
      module.exports = dnsZoneFile;
      dnsZoneFile.displayName = "dnsZoneFile";
      dnsZoneFile.aliases = [];
      function dnsZoneFile(Prism) {
        Prism.languages["dns-zone-file"] = {
          comment: /;.*/,
          string: {
            pattern: /"(?:\\.|[^"\\\r\n])*"/,
            greedy: true
          },
          variable: [
            {
              pattern: /(^\$ORIGIN[ \t]+)\S+/m,
              lookbehind: true
            },
            {
              pattern: /(^|\s)@(?=\s|$)/,
              lookbehind: true
            }
          ],
          keyword: /^\$(?:INCLUDE|ORIGIN|TTL)(?=\s|$)/m,
          class: {
            pattern: /(^|\s)(?:CH|CS|HS|IN)(?=\s|$)/,
            lookbehind: true,
            alias: "keyword"
          },
          type: {
            pattern: /(^|\s)(?:A|A6|AAAA|AFSDB|APL|ATMA|CAA|CDNSKEY|CDS|CERT|CNAME|DHCID|DLV|DNAME|DNSKEY|DS|EID|GID|GPOS|HINFO|HIP|IPSECKEY|ISDN|KEY|KX|LOC|MAILA|MAILB|MB|MD|MF|MG|MINFO|MR|MX|NAPTR|NB|NBSTAT|NIMLOC|NINFO|NS|NSAP|NSAP-PTR|NSEC|NSEC3|NSEC3PARAM|NULL|NXT|OPENPGPKEY|PTR|PX|RKEY|RP|RRSIG|RT|SIG|SINK|SMIMEA|SOA|SPF|SRV|SSHFP|TA|TKEY|TLSA|TSIG|TXT|UID|UINFO|UNSPEC|URI|WKS|X25)(?=\s|$)/,
            lookbehind: true,
            alias: "keyword"
          },
          punctuation: /[()]/
        };
        Prism.languages["dns-zone"] = Prism.languages["dns-zone-file"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/docker.js
  var require_docker = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/docker.js"(exports, module) {
      "use strict";
      module.exports = docker;
      docker.displayName = "docker";
      docker.aliases = ["dockerfile"];
      function docker(Prism) {
        ;
        (function(Prism2) {
          var spaceAfterBackSlash = /\\[\r\n](?:\s|\\[\r\n]|#.*(?!.))*(?![\s#]|\\[\r\n])/.source;
          var space3 = /(?:[ \t]+(?![ \t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(
            /<SP_BS>/g,
            function() {
              return spaceAfterBackSlash;
            }
          );
          var string3 = /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"|'(?:[^'\\\r\n]|\\(?:\r\n|[\s\S]))*'/.source;
          var option = /--[\w-]+=(?:<STR>|(?!["'])(?:[^\s\\]|\\.)+)/.source.replace(
            /<STR>/g,
            function() {
              return string3;
            }
          );
          var stringRule = {
            pattern: RegExp(string3),
            greedy: true
          };
          var commentRule = {
            pattern: /(^[ \t]*)#.*/m,
            lookbehind: true,
            greedy: true
          };
          function re(source, flags) {
            source = source.replace(/<OPT>/g, function() {
              return option;
            }).replace(/<SP>/g, function() {
              return space3;
            });
            return RegExp(source, flags);
          }
          Prism2.languages.docker = {
            instruction: {
              pattern: /(^[ \t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\s)(?:\\.|[^\r\n\\])*(?:\\$(?:\s|#.*$)*(?![\s#])(?:\\.|[^\r\n\\])*)*/im,
              lookbehind: true,
              greedy: true,
              inside: {
                options: {
                  pattern: re(
                    /(^(?:ONBUILD<SP>)?\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,
                    "i"
                  ),
                  lookbehind: true,
                  greedy: true,
                  inside: {
                    property: {
                      pattern: /(^|\s)--[\w-]+/,
                      lookbehind: true
                    },
                    string: [
                      stringRule,
                      {
                        pattern: /(=)(?!["'])(?:[^\s\\]|\\.)+/,
                        lookbehind: true
                      }
                    ],
                    operator: /\\$/m,
                    punctuation: /=/
                  }
                },
                keyword: [
                  {
                    pattern: re(
                      /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\b/.source,
                      "i"
                    ),
                    lookbehind: true,
                    greedy: true
                  },
                  {
                    pattern: re(
                      /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \t\\]+<SP>)AS/.source,
                      "i"
                    ),
                    lookbehind: true,
                    greedy: true
                  },
                  {
                    pattern: re(/(^ONBUILD<SP>)\w+/.source, "i"),
                    lookbehind: true,
                    greedy: true
                  },
                  {
                    pattern: /^\w+/,
                    greedy: true
                  }
                ],
                comment: commentRule,
                string: stringRule,
                variable: /\$(?:\w+|\{[^{}"'\\]*\})/,
                operator: /\\$/m
              }
            },
            comment: commentRule
          };
          Prism2.languages.dockerfile = Prism2.languages.docker;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/dot.js
  var require_dot = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/dot.js"(exports, module) {
      "use strict";
      module.exports = dot;
      dot.displayName = "dot";
      dot.aliases = ["gv"];
      function dot(Prism) {
        ;
        (function(Prism2) {
          var ID = "(?:" + [
            /[a-zA-Z_\x80-\uFFFF][\w\x80-\uFFFF]*/.source,
            /-?(?:\.\d+|\d+(?:\.\d*)?)/.source,
            /"[^"\\]*(?:\\[\s\S][^"\\]*)*"/.source,
            /<(?:[^<>]|(?!<!--)<(?:[^<>"']|"[^"]*"|'[^']*')+>|<!--(?:[^-]|-(?!->))*-->)*>/.source
          ].join("|") + ")";
          var IDInside = {
            markup: {
              pattern: /(^<)[\s\S]+(?=>$)/,
              lookbehind: true,
              alias: ["language-markup", "language-html", "language-xml"],
              inside: Prism2.languages.markup
            }
          };
          function withID(source, flags) {
            return RegExp(
              source.replace(/<ID>/g, function() {
                return ID;
              }),
              flags
            );
          }
          Prism2.languages.dot = {
            comment: {
              pattern: /\/\/.*|\/\*[\s\S]*?\*\/|^#.*/m,
              greedy: true
            },
            "graph-name": {
              pattern: withID(
                /(\b(?:digraph|graph|subgraph)[ \t\r\n]+)<ID>/.source,
                "i"
              ),
              lookbehind: true,
              greedy: true,
              alias: "class-name",
              inside: IDInside
            },
            "attr-value": {
              pattern: withID(/(=[ \t\r\n]*)<ID>/.source),
              lookbehind: true,
              greedy: true,
              inside: IDInside
            },
            "attr-name": {
              pattern: withID(/([\[;, \t\r\n])<ID>(?=[ \t\r\n]*=)/.source),
              lookbehind: true,
              greedy: true,
              inside: IDInside
            },
            keyword: /\b(?:digraph|edge|graph|node|strict|subgraph)\b/i,
            "compass-point": {
              pattern: /(:[ \t\r\n]*)(?:[ewc_]|[ns][ew]?)(?![\w\x80-\uFFFF])/,
              lookbehind: true,
              alias: "builtin"
            },
            node: {
              pattern: withID(/(^|[^-.\w\x80-\uFFFF\\])<ID>/.source),
              lookbehind: true,
              greedy: true,
              inside: IDInside
            },
            operator: /[=:]|-[->]/,
            punctuation: /[\[\]{};,]/
          };
          Prism2.languages.gv = Prism2.languages.dot;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ebnf.js
  var require_ebnf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ebnf.js"(exports, module) {
      "use strict";
      module.exports = ebnf;
      ebnf.displayName = "ebnf";
      ebnf.aliases = [];
      function ebnf(Prism) {
        Prism.languages.ebnf = {
          comment: /\(\*[\s\S]*?\*\)/,
          string: {
            pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
            greedy: true
          },
          special: {
            pattern: /\?[^?\r\n]*\?/,
            greedy: true,
            alias: "class-name"
          },
          definition: {
            pattern: /^([\t ]*)[a-z]\w*(?:[ \t]+[a-z]\w*)*(?=\s*=)/im,
            lookbehind: true,
            alias: ["rule", "keyword"]
          },
          rule: /\b[a-z]\w*(?:[ \t]+[a-z]\w*)*\b/i,
          punctuation: /\([:/]|[:/]\)|[.,;()[\]{}]/,
          operator: /[-=|*/!]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/editorconfig.js
  var require_editorconfig = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/editorconfig.js"(exports, module) {
      "use strict";
      module.exports = editorconfig;
      editorconfig.displayName = "editorconfig";
      editorconfig.aliases = [];
      function editorconfig(Prism) {
        Prism.languages.editorconfig = {
          comment: /[;#].*/,
          section: {
            pattern: /(^[ \t]*)\[.+\]/m,
            lookbehind: true,
            alias: "selector",
            inside: {
              regex: /\\\\[\[\]{},!?.*]/,
              operator: /[!?]|\.\.|\*{1,2}/,
              punctuation: /[\[\]{},]/
            }
          },
          key: {
            pattern: /(^[ \t]*)[^\s=]+(?=[ \t]*=)/m,
            lookbehind: true,
            alias: "attr-name"
          },
          value: {
            pattern: /=.*/,
            alias: "attr-value",
            inside: {
              punctuation: /^=/
            }
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/eiffel.js
  var require_eiffel = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/eiffel.js"(exports, module) {
      "use strict";
      module.exports = eiffel;
      eiffel.displayName = "eiffel";
      eiffel.aliases = [];
      function eiffel(Prism) {
        Prism.languages.eiffel = {
          comment: /--.*/,
          string: [
            {
              pattern: /"([^[]*)\[[\s\S]*?\]\1"/,
              greedy: true
            },
            {
              pattern: /"([^{]*)\{[\s\S]*?\}\1"/,
              greedy: true
            },
            {
              pattern: /"(?:%(?:(?!\n)\s)*\n\s*%|%\S|[^%"\r\n])*"/,
              greedy: true
            }
          ],
          char: /'(?:%.|[^%'\r\n])+'/,
          keyword: /\b(?:across|agent|alias|all|and|as|assign|attached|attribute|check|class|convert|create|Current|debug|deferred|detachable|do|else|elseif|end|ensure|expanded|export|external|feature|from|frozen|if|implies|inherit|inspect|invariant|like|local|loop|not|note|obsolete|old|once|or|Precursor|redefine|rename|require|rescue|Result|retry|select|separate|some|then|undefine|until|variant|Void|when|xor)\b/i,
          boolean: /\b(?:False|True)\b/i,
          "class-name": /\b[A-Z][\dA-Z_]*\b/,
          number: [
            /\b0[xcb][\da-f](?:_*[\da-f])*\b/i,
            /(?:\b\d(?:_*\d)*)?\.(?:(?:\d(?:_*\d)*)?e[+-]?)?\d(?:_*\d)*\b|\b\d(?:_*\d)*\b\.?/i
          ],
          punctuation: /:=|<<|>>|\(\||\|\)|->|\.(?=\w)|[{}[\];(),:?]/,
          operator: /\\\\|\|\.\.\||\.\.|\/[~\/=]?|[><]=?|[-+*^=~]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ejs.js
  var require_ejs = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ejs.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = ejs;
      ejs.displayName = "ejs";
      ejs.aliases = ["eta"];
      function ejs(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.ejs = {
            delimiter: {
              pattern: /^<%[-_=]?|[-_]?%>$/,
              alias: "punctuation"
            },
            comment: /^#[\s\S]*/,
            "language-javascript": {
              pattern: /[\s\S]+/,
              inside: Prism2.languages.javascript
            }
          };
          Prism2.hooks.add("before-tokenize", function(env) {
            var ejsPattern = /<%(?!%)[\s\S]+?%>/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "ejs",
              ejsPattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "ejs");
          });
          Prism2.languages.eta = Prism2.languages.ejs;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/elixir.js
  var require_elixir = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/elixir.js"(exports, module) {
      "use strict";
      module.exports = elixir;
      elixir.displayName = "elixir";
      elixir.aliases = [];
      function elixir(Prism) {
        Prism.languages.elixir = {
          doc: {
            pattern: /@(?:doc|moduledoc)\s+(?:("""|''')[\s\S]*?\1|("|')(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2)/,
            inside: {
              attribute: /^@\w+/,
              string: /['"][\s\S]+/
            }
          },
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          regex: {
            pattern: /~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,
            greedy: true
          },
          string: [
            {
              pattern: /~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|#(?!\{)|[^#\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,
              greedy: true,
              inside: {}
            },
            {
              pattern: /("""|''')[\s\S]*?\1/,
              greedy: true,
              inside: {}
            },
            {
              pattern: /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
              greedy: true,
              inside: {}
            }
          ],
          atom: {
            pattern: /(^|[^:]):\w+/,
            lookbehind: true,
            alias: "symbol"
          },
          module: {
            pattern: /\b[A-Z]\w*\b/,
            alias: "class-name"
          },
          "attr-name": /\b\w+\??:(?!:)/,
          argument: {
            pattern: /(^|[^&])&\d+/,
            lookbehind: true,
            alias: "variable"
          },
          attribute: {
            pattern: /@\w+/,
            alias: "variable"
          },
          function: /\b[_a-zA-Z]\w*[?!]?(?:(?=\s*(?:\.\s*)?\()|(?=\/\d))/,
          number: /\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,
          keyword: /\b(?:after|alias|and|case|catch|cond|def(?:callback|delegate|exception|impl|macro|module|n|np|p|protocol|struct)?|do|else|end|fn|for|if|import|not|or|quote|raise|require|rescue|try|unless|unquote|use|when)\b/,
          boolean: /\b(?:false|nil|true)\b/,
          operator: [
            /\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/,
            {
              pattern: /([^<])<(?!<)/,
              lookbehind: true
            },
            {
              pattern: /([^>])>(?!>)/,
              lookbehind: true
            }
          ],
          punctuation: /<<|>>|[.,%\[\]{}()]/
        };
        Prism.languages.elixir.string.forEach(function(o) {
          o.inside = {
            interpolation: {
              pattern: /#\{[^}]+\}/,
              inside: {
                delimiter: {
                  pattern: /^#\{|\}$/,
                  alias: "punctuation"
                },
                rest: Prism.languages.elixir
              }
            }
          };
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/elm.js
  var require_elm = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/elm.js"(exports, module) {
      "use strict";
      module.exports = elm;
      elm.displayName = "elm";
      elm.aliases = [];
      function elm(Prism) {
        Prism.languages.elm = {
          comment: /--.*|\{-[\s\S]*?-\}/,
          char: {
            pattern: /'(?:[^\\'\r\n]|\\(?:[abfnrtv\\']|\d+|x[0-9a-fA-F]+|u\{[0-9a-fA-F]+\}))'/,
            greedy: true
          },
          string: [
            {
              pattern: /"""[\s\S]*?"""/,
              greedy: true
            },
            {
              pattern: /"(?:[^\\"\r\n]|\\.)*"/,
              greedy: true
            }
          ],
          "import-statement": {
            pattern: /(^[\t ]*)import\s+[A-Z]\w*(?:\.[A-Z]\w*)*(?:\s+as\s+(?:[A-Z]\w*)(?:\.[A-Z]\w*)*)?(?:\s+exposing\s+)?/m,
            lookbehind: true,
            inside: {
              keyword: /\b(?:as|exposing|import)\b/
            }
          },
          keyword: /\b(?:alias|as|case|else|exposing|if|in|infixl|infixr|let|module|of|then|type)\b/,
          builtin: /\b(?:abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|e|flip|floor|fromPolar|identity|isInfinite|isNaN|logBase|max|min|negate|never|not|pi|radians|rem|round|sin|sqrt|tan|toFloat|toPolar|toString|truncate|turns|uncurry|xor)\b/,
          number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0x[0-9a-f]+)\b/i,
          operator: /\s\.\s|[+\-/*=.$<>:&|^?%#@~!]{2,}|[+\-/*=$<>:&|^?%#@~!]/,
          hvariable: /\b(?:[A-Z]\w*\.)*[a-z]\w*\b/,
          constant: /\b(?:[A-Z]\w*\.)*[A-Z]\w*\b/,
          punctuation: /[{}[\]|(),.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/erb.js
  var require_erb = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/erb.js"(exports, module) {
      "use strict";
      var refractorRuby = require_ruby();
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = erb;
      erb.displayName = "erb";
      erb.aliases = [];
      function erb(Prism) {
        Prism.register(refractorRuby);
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.erb = {
            delimiter: {
              pattern: /^(\s*)<%=?|%>(?=\s*$)/,
              lookbehind: true,
              alias: "punctuation"
            },
            ruby: {
              pattern: /\s*\S[\s\S]*/,
              alias: "language-ruby",
              inside: Prism2.languages.ruby
            }
          };
          Prism2.hooks.add("before-tokenize", function(env) {
            var erbPattern = /<%=?(?:[^\r\n]|[\r\n](?!=begin)|[\r\n]=begin\s(?:[^\r\n]|[\r\n](?!=end))*[\r\n]=end)+?%>/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "erb",
              erbPattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "erb");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/erlang.js
  var require_erlang = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/erlang.js"(exports, module) {
      "use strict";
      module.exports = erlang;
      erlang.displayName = "erlang";
      erlang.aliases = [];
      function erlang(Prism) {
        Prism.languages.erlang = {
          comment: /%.+/,
          string: {
            pattern: /"(?:\\.|[^\\"\r\n])*"/,
            greedy: true
          },
          "quoted-function": {
            pattern: /'(?:\\.|[^\\'\r\n])+'(?=\()/,
            alias: "function"
          },
          "quoted-atom": {
            pattern: /'(?:\\.|[^\\'\r\n])+'/,
            alias: "atom"
          },
          boolean: /\b(?:false|true)\b/,
          keyword: /\b(?:after|case|catch|end|fun|if|of|receive|try|when)\b/,
          number: [
            /\$\\?./,
            /\b\d+#[a-z0-9]+/i,
            /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i
          ],
          function: /\b[a-z][\w@]*(?=\()/,
          variable: {
            pattern: /(^|[^@])(?:\b|\?)[A-Z_][\w@]*/,
            lookbehind: true
          },
          operator: [
            /[=\/<>:]=|=[:\/]=|\+\+?|--?|[=*\/!]|\b(?:and|andalso|band|bnot|bor|bsl|bsr|bxor|div|not|or|orelse|rem|xor)\b/,
            {
              pattern: /(^|[^<])<(?!<)/,
              lookbehind: true
            },
            {
              pattern: /(^|[^>])>(?!>)/,
              lookbehind: true
            }
          ],
          atom: /\b[a-z][\w@]*/,
          punctuation: /[()[\]{}:;,.#|]|<<|>>/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/lua.js
  var require_lua = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/lua.js"(exports, module) {
      "use strict";
      module.exports = lua;
      lua.displayName = "lua";
      lua.aliases = [];
      function lua(Prism) {
        Prism.languages.lua = {
          comment: /^#!.+|--(?:\[(=*)\[[\s\S]*?\]\1\]|.*)/m,
          string: {
            pattern: /(["'])(?:(?!\1)[^\\\r\n]|\\z(?:\r\n|\s)|\\(?:\r\n|[^z]))*\1|\[(=*)\[[\s\S]*?\]\2\]/,
            greedy: true
          },
          number: /\b0x[a-f\d]+(?:\.[a-f\d]*)?(?:p[+-]?\d+)?\b|\b\d+(?:\.\B|(?:\.\d*)?(?:e[+-]?\d+)?\b)|\B\.\d+(?:e[+-]?\d+)?\b/i,
          keyword: /\b(?:and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|return|then|true|until|while)\b/,
          function: /(?!\d)\w+(?=\s*(?:[({]))/,
          operator: [
            /[-+*%^&|#]|\/\/?|<[<=]?|>[>=]?|[=~]=?/,
            {
              pattern: /(^|[^.])\.\.(?!\.)/,
              lookbehind: true
            }
          ],
          punctuation: /[\[\](){},;]|\.+|:+/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/etlua.js
  var require_etlua = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/etlua.js"(exports, module) {
      "use strict";
      var refractorLua = require_lua();
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = etlua;
      etlua.displayName = "etlua";
      etlua.aliases = [];
      function etlua(Prism) {
        Prism.register(refractorLua);
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.etlua = {
            delimiter: {
              pattern: /^<%[-=]?|-?%>$/,
              alias: "punctuation"
            },
            "language-lua": {
              pattern: /[\s\S]+/,
              inside: Prism2.languages.lua
            }
          };
          Prism2.hooks.add("before-tokenize", function(env) {
            var pattern = /<%[\s\S]+?%>/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "etlua",
              pattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "etlua");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/excel-formula.js
  var require_excel_formula = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/excel-formula.js"(exports, module) {
      "use strict";
      module.exports = excelFormula;
      excelFormula.displayName = "excelFormula";
      excelFormula.aliases = [];
      function excelFormula(Prism) {
        Prism.languages["excel-formula"] = {
          comment: {
            pattern: /(\bN\(\s*)"(?:[^"]|"")*"(?=\s*\))/i,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /"(?:[^"]|"")*"(?!")/,
            greedy: true
          },
          reference: {
            pattern: /(?:'[^']*'|(?:[^\s()[\]{}<>*?"';,$&]*\[[^^\s()[\]{}<>*?"']+\])?\w+)!/,
            greedy: true,
            alias: "string",
            inside: {
              operator: /!$/,
              punctuation: /'/,
              sheet: {
                pattern: /[^[\]]+$/,
                alias: "function"
              },
              file: {
                pattern: /\[[^[\]]+\]$/,
                inside: {
                  punctuation: /[[\]]/
                }
              },
              path: /[\s\S]+/
            }
          },
          "function-name": {
            pattern: /\b[A-Z]\w*(?=\()/i,
            alias: "keyword"
          },
          range: {
            pattern: /\$?\b(?:[A-Z]+\$?\d+:\$?[A-Z]+\$?\d+|[A-Z]+:\$?[A-Z]+|\d+:\$?\d+)\b/i,
            alias: "property",
            inside: {
              operator: /:/,
              cell: /\$?[A-Z]+\$?\d+/i,
              column: /\$?[A-Z]+/i,
              row: /\$?\d+/
            }
          },
          cell: {
            pattern: /\b[A-Z]+\d+\b|\$[A-Za-z]+\$?\d+\b|\b[A-Za-z]+\$\d+\b/,
            alias: "property"
          },
          number: /(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e[+-]?\d+)?\b/i,
          boolean: /\b(?:FALSE|TRUE)\b/i,
          operator: /[-+*/^%=&,]|<[=>]?|>=?/,
          punctuation: /[[\]();{}|]/
        };
        Prism.languages["xlsx"] = Prism.languages["xls"] = Prism.languages["excel-formula"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/factor.js
  var require_factor = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/factor.js"(exports, module) {
      "use strict";
      module.exports = factor;
      factor.displayName = "factor";
      factor.aliases = [];
      function factor(Prism) {
        ;
        (function(Prism2) {
          var comment_inside = {
            function: /\b(?:BUGS?|FIX(?:MES?)?|NOTES?|TODOS?|XX+|HACKS?|WARN(?:ING)?|\?{2,}|!{2,})\b/
          };
          var string_inside = {
            number: /\\[^\s']|%\w/
          };
          var factor2 = {
            comment: [
              {
                pattern: /(^|\s)(?:! .*|!$)/,
                lookbehind: true,
                inside: comment_inside
              },
              {
                pattern: /(^|\s)\/\*\s[\s\S]*?\*\/(?=\s|$)/,
                lookbehind: true,
                greedy: true,
                inside: comment_inside
              },
              {
                pattern: /(^|\s)!\[(={0,6})\[\s[\s\S]*?\]\2\](?=\s|$)/,
                lookbehind: true,
                greedy: true,
                inside: comment_inside
              }
            ],
            number: [
              {
                pattern: /(^|\s)[+-]?\d+(?=\s|$)/,
                lookbehind: true
              },
              {
                pattern: /(^|\s)[+-]?0(?:b[01]+|o[0-7]+|d\d+|x[\dA-F]+)(?=\s|$)/i,
                lookbehind: true
              },
              {
                pattern: /(^|\s)[+-]?\d+\/\d+\.?(?=\s|$)/,
                lookbehind: true
              },
              {
                pattern: /(^|\s)\+?\d+\+\d+\/\d+(?=\s|$)/,
                lookbehind: true
              },
              {
                pattern: /(^|\s)-\d+-\d+\/\d+(?=\s|$)/,
                lookbehind: true
              },
              {
                pattern: /(^|\s)[+-]?(?:\d*\.\d+|\d+\.\d*|\d+)(?:e[+-]?\d+)?(?=\s|$)/i,
                lookbehind: true
              },
              {
                pattern: /(^|\s)NAN:\s+[\da-fA-F]+(?=\s|$)/,
                lookbehind: true
              },
              {
                pattern: /(^|\s)[+-]?0(?:b1\.[01]*|o1\.[0-7]*|d1\.\d*|x1\.[\dA-F]*)p\d+(?=\s|$)/i,
                lookbehind: true
              }
            ],
            regexp: {
              pattern: /(^|\s)R\/\s(?:\\\S|[^\\/])*\/(?:[idmsr]*|[idmsr]+-[idmsr]+)(?=\s|$)/,
              lookbehind: true,
              alias: "number",
              inside: {
                variable: /\\\S/,
                keyword: /[+?*\[\]^$(){}.|]/,
                operator: {
                  pattern: /(\/)[idmsr]+(?:-[idmsr]+)?/,
                  lookbehind: true
                }
              }
            },
            boolean: {
              pattern: /(^|\s)[tf](?=\s|$)/,
              lookbehind: true
            },
            "custom-string": {
              pattern: /(^|\s)[A-Z0-9\-]+"\s(?:\\\S|[^"\\])*"/,
              lookbehind: true,
              greedy: true,
              alias: "string",
              inside: {
                number: /\\\S|%\w|\//
              }
            },
            "multiline-string": [
              {
                pattern: /(^|\s)STRING:\s+\S+(?:\n|\r\n).*(?:\n|\r\n)\s*;(?=\s|$)/,
                lookbehind: true,
                greedy: true,
                alias: "string",
                inside: {
                  number: string_inside.number,
                  "semicolon-or-setlocal": {
                    pattern: /([\r\n][ \t]*);(?=\s|$)/,
                    lookbehind: true,
                    alias: "function"
                  }
                }
              },
              {
                pattern: /(^|\s)HEREDOC:\s+\S+(?:\n|\r\n).*(?:\n|\r\n)\s*\S+(?=\s|$)/,
                lookbehind: true,
                greedy: true,
                alias: "string",
                inside: string_inside
              },
              {
                pattern: /(^|\s)\[(={0,6})\[\s[\s\S]*?\]\2\](?=\s|$)/,
                lookbehind: true,
                greedy: true,
                alias: "string",
                inside: string_inside
              }
            ],
            "special-using": {
              pattern: /(^|\s)USING:(?:\s\S+)*(?=\s+;(?:\s|$))/,
              lookbehind: true,
              alias: "function",
              inside: {
                string: {
                  pattern: /(\s)[^:\s]+/,
                  lookbehind: true
                }
              }
            },
            "stack-effect-delimiter": [
              {
                pattern: /(^|\s)(?:call|eval|execute)?\((?=\s)/,
                lookbehind: true,
                alias: "operator"
              },
              {
                pattern: /(\s)--(?=\s)/,
                lookbehind: true,
                alias: "operator"
              },
              {
                pattern: /(\s)\)(?=\s|$)/,
                lookbehind: true,
                alias: "operator"
              }
            ],
            combinators: {
              pattern: null,
              lookbehind: true,
              alias: "keyword"
            },
            "kernel-builtin": {
              pattern: null,
              lookbehind: true,
              alias: "variable"
            },
            "sequences-builtin": {
              pattern: null,
              lookbehind: true,
              alias: "variable"
            },
            "math-builtin": {
              pattern: null,
              lookbehind: true,
              alias: "variable"
            },
            "constructor-word": {
              pattern: /(^|\s)<(?!=+>|-+>)\S+>(?=\s|$)/,
              lookbehind: true,
              alias: "keyword"
            },
            "other-builtin-syntax": {
              pattern: null,
              lookbehind: true,
              alias: "operator"
            },
            "conventionally-named-word": {
              pattern: /(^|\s)(?!")(?:(?:change|new|set|with)-\S+|\$\S+|>[^>\s]+|[^:>\s]+>|[^>\s]+>[^>\s]+|\+[^+\s]+\+|[^?\s]+\?|\?[^?\s]+|[^>\s]+>>|>>[^>\s]+|[^<\s]+<<|\([^()\s]+\)|[^!\s]+!|[^*\s]\S*\*|[^.\s]\S*\.)(?=\s|$)/,
              lookbehind: true,
              alias: "keyword"
            },
            "colon-syntax": {
              pattern: /(^|\s)(?:[A-Z0-9\-]+#?)?:{1,2}\s+(?:;\S+|(?!;)\S+)(?=\s|$)/,
              lookbehind: true,
              greedy: true,
              alias: "function"
            },
            "semicolon-or-setlocal": {
              pattern: /(\s)(?:;|:>)(?=\s|$)/,
              lookbehind: true,
              alias: "function"
            },
            "curly-brace-literal-delimiter": [
              {
                pattern: /(^|\s)[a-z]*\{(?=\s)/i,
                lookbehind: true,
                alias: "operator"
              },
              {
                pattern: /(\s)\}(?=\s|$)/,
                lookbehind: true,
                alias: "operator"
              }
            ],
            "quotation-delimiter": [
              {
                pattern: /(^|\s)\[(?=\s)/,
                lookbehind: true,
                alias: "operator"
              },
              {
                pattern: /(\s)\](?=\s|$)/,
                lookbehind: true,
                alias: "operator"
              }
            ],
            "normal-word": {
              pattern: /(^|\s)[^"\s]\S*(?=\s|$)/,
              lookbehind: true
            },
            string: {
              pattern: /"(?:\\\S|[^"\\])*"/,
              greedy: true,
              inside: string_inside
            }
          };
          var escape3 = function(str) {
            return (str + "").replace(/([.?*+\^$\[\]\\(){}|\-])/g, "\\$1");
          };
          var arrToWordsRegExp = function(arr) {
            return new RegExp("(^|\\s)(?:" + arr.map(escape3).join("|") + ")(?=\\s|$)");
          };
          var builtins = {
            "kernel-builtin": [
              "or",
              "2nipd",
              "4drop",
              "tuck",
              "wrapper",
              "nip",
              "wrapper?",
              "callstack>array",
              "die",
              "dupd",
              "callstack",
              "callstack?",
              "3dup",
              "hashcode",
              "pick",
              "4nip",
              "build",
              ">boolean",
              "nipd",
              "clone",
              "5nip",
              "eq?",
              "?",
              "=",
              "swapd",
              "2over",
              "clear",
              "2dup",
              "get-retainstack",
              "not",
              "tuple?",
              "dup",
              "3nipd",
              "call",
              "-rotd",
              "object",
              "drop",
              "assert=",
              "assert?",
              "-rot",
              "execute",
              "boa",
              "get-callstack",
              "curried?",
              "3drop",
              "pickd",
              "overd",
              "over",
              "roll",
              "3nip",
              "swap",
              "and",
              "2nip",
              "rotd",
              "throw",
              "(clone)",
              "hashcode*",
              "spin",
              "reach",
              "4dup",
              "equal?",
              "get-datastack",
              "assert",
              "2drop",
              "<wrapper>",
              "boolean?",
              "identity-hashcode",
              "identity-tuple?",
              "null",
              "composed?",
              "new",
              "5drop",
              "rot",
              "-roll",
              "xor",
              "identity-tuple",
              "boolean"
            ],
            "other-builtin-syntax": [
              "=======",
              "recursive",
              "flushable",
              ">>",
              "<<<<<<",
              "M\\",
              "B",
              "PRIVATE>",
              "\\",
              "======",
              "final",
              "inline",
              "delimiter",
              "deprecated",
              "<PRIVATE",
              ">>>>>>",
              "<<<<<<<",
              "parse-complex",
              "malformed-complex",
              "read-only",
              ">>>>>>>",
              "call-next-method",
              "<<",
              "foldable",
              "$",
              "$[",
              "${"
            ],
            "sequences-builtin": [
              "member-eq?",
              "mismatch",
              "append",
              "assert-sequence=",
              "longer",
              "repetition",
              "clone-like",
              "3sequence",
              "assert-sequence?",
              "last-index-from",
              "reversed",
              "index-from",
              "cut*",
              "pad-tail",
              "join-as",
              "remove-eq!",
              "concat-as",
              "but-last",
              "snip",
              "nths",
              "nth",
              "sequence",
              "longest",
              "slice?",
              "<slice>",
              "remove-nth",
              "tail-slice",
              "empty?",
              "tail*",
              "member?",
              "virtual-sequence?",
              "set-length",
              "drop-prefix",
              "iota",
              "unclip",
              "bounds-error?",
              "unclip-last-slice",
              "non-negative-integer-expected",
              "non-negative-integer-expected?",
              "midpoint@",
              "longer?",
              "?set-nth",
              "?first",
              "rest-slice",
              "prepend-as",
              "prepend",
              "fourth",
              "sift",
              "subseq-start",
              "new-sequence",
              "?last",
              "like",
              "first4",
              "1sequence",
              "reverse",
              "slice",
              "virtual@",
              "repetition?",
              "set-last",
              "index",
              "4sequence",
              "max-length",
              "set-second",
              "immutable-sequence",
              "first2",
              "first3",
              "supremum",
              "unclip-slice",
              "suffix!",
              "insert-nth",
              "tail",
              "3append",
              "short",
              "suffix",
              "concat",
              "flip",
              "immutable?",
              "reverse!",
              "2sequence",
              "sum",
              "delete-all",
              "indices",
              "snip-slice",
              "<iota>",
              "check-slice",
              "sequence?",
              "head",
              "append-as",
              "halves",
              "sequence=",
              "collapse-slice",
              "?second",
              "slice-error?",
              "product",
              "bounds-check?",
              "bounds-check",
              "immutable",
              "virtual-exemplar",
              "harvest",
              "remove",
              "pad-head",
              "last",
              "set-fourth",
              "cartesian-product",
              "remove-eq",
              "shorten",
              "shorter",
              "reversed?",
              "shorter?",
              "shortest",
              "head-slice",
              "pop*",
              "tail-slice*",
              "but-last-slice",
              "iota?",
              "append!",
              "cut-slice",
              "new-resizable",
              "head-slice*",
              "sequence-hashcode",
              "pop",
              "set-nth",
              "?nth",
              "second",
              "join",
              "immutable-sequence?",
              "<reversed>",
              "3append-as",
              "virtual-sequence",
              "subseq?",
              "remove-nth!",
              "length",
              "last-index",
              "lengthen",
              "assert-sequence",
              "copy",
              "move",
              "third",
              "first",
              "tail?",
              "set-first",
              "prefix",
              "bounds-error",
              "<repetition>",
              "exchange",
              "surround",
              "cut",
              "min-length",
              "set-third",
              "push-all",
              "head?",
              "subseq-start-from",
              "delete-slice",
              "rest",
              "sum-lengths",
              "head*",
              "infimum",
              "remove!",
              "glue",
              "slice-error",
              "subseq",
              "push",
              "replace-slice",
              "subseq-as",
              "unclip-last"
            ],
            "math-builtin": [
              "number=",
              "next-power-of-2",
              "?1+",
              "fp-special?",
              "imaginary-part",
              "float>bits",
              "number?",
              "fp-infinity?",
              "bignum?",
              "fp-snan?",
              "denominator",
              "gcd",
              "*",
              "+",
              "fp-bitwise=",
              "-",
              "u>=",
              "/",
              ">=",
              "bitand",
              "power-of-2?",
              "log2-expects-positive",
              "neg?",
              "<",
              "log2",
              ">",
              "integer?",
              "number",
              "bits>double",
              "2/",
              "zero?",
              "bits>float",
              "float?",
              "shift",
              "ratio?",
              "rect>",
              "even?",
              "ratio",
              "fp-sign",
              "bitnot",
              ">fixnum",
              "complex?",
              "/i",
              "integer>fixnum",
              "/f",
              "sgn",
              ">bignum",
              "next-float",
              "u<",
              "u>",
              "mod",
              "recip",
              "rational",
              ">float",
              "2^",
              "integer",
              "fixnum?",
              "neg",
              "fixnum",
              "sq",
              "bignum",
              ">rect",
              "bit?",
              "fp-qnan?",
              "simple-gcd",
              "complex",
              "<fp-nan>",
              "real",
              ">fraction",
              "double>bits",
              "bitor",
              "rem",
              "fp-nan-payload",
              "real-part",
              "log2-expects-positive?",
              "prev-float",
              "align",
              "unordered?",
              "float",
              "fp-nan?",
              "abs",
              "bitxor",
              "integer>fixnum-strict",
              "u<=",
              "odd?",
              "<=",
              "/mod",
              ">integer",
              "real?",
              "rational?",
              "numerator"
            ]
          };
          Object.keys(builtins).forEach(function(k) {
            factor2[k].pattern = arrToWordsRegExp(builtins[k]);
          });
          var combinators = [
            "2bi",
            "while",
            "2tri",
            "bi*",
            "4dip",
            "both?",
            "same?",
            "tri@",
            "curry",
            "prepose",
            "3bi",
            "?if",
            "tri*",
            "2keep",
            "3keep",
            "curried",
            "2keepd",
            "when",
            "2bi*",
            "2tri*",
            "4keep",
            "bi@",
            "keepdd",
            "do",
            "unless*",
            "tri-curry",
            "if*",
            "loop",
            "bi-curry*",
            "when*",
            "2bi@",
            "2tri@",
            "with",
            "2with",
            "either?",
            "bi",
            "until",
            "3dip",
            "3curry",
            "tri-curry*",
            "tri-curry@",
            "bi-curry",
            "keepd",
            "compose",
            "2dip",
            "if",
            "3tri",
            "unless",
            "tuple",
            "keep",
            "2curry",
            "tri",
            "most",
            "while*",
            "dip",
            "composed",
            "bi-curry@",
            "find-last-from",
            "trim-head-slice",
            "map-as",
            "each-from",
            "none?",
            "trim-tail",
            "partition",
            "if-empty",
            "accumulate*",
            "reject!",
            "find-from",
            "accumulate-as",
            "collector-for-as",
            "reject",
            "map",
            "map-sum",
            "accumulate!",
            "2each-from",
            "follow",
            "supremum-by",
            "map!",
            "unless-empty",
            "collector",
            "padding",
            "reduce-index",
            "replicate-as",
            "infimum-by",
            "trim-tail-slice",
            "count",
            "find-index",
            "filter",
            "accumulate*!",
            "reject-as",
            "map-integers",
            "map-find",
            "reduce",
            "selector",
            "interleave",
            "2map",
            "filter-as",
            "binary-reduce",
            "map-index-as",
            "find",
            "produce",
            "filter!",
            "replicate",
            "cartesian-map",
            "cartesian-each",
            "find-index-from",
            "map-find-last",
            "3map-as",
            "3map",
            "find-last",
            "selector-as",
            "2map-as",
            "2map-reduce",
            "accumulate",
            "each",
            "each-index",
            "accumulate*-as",
            "when-empty",
            "all?",
            "collector-as",
            "push-either",
            "new-like",
            "collector-for",
            "2selector",
            "push-if",
            "2all?",
            "map-reduce",
            "3each",
            "any?",
            "trim-slice",
            "2reduce",
            "change-nth",
            "produce-as",
            "2each",
            "trim",
            "trim-head",
            "cartesian-find",
            "map-index",
            "if-zero",
            "each-integer",
            "unless-zero",
            "(find-integer)",
            "when-zero",
            "find-last-integer",
            "(all-integers?)",
            "times",
            "(each-integer)",
            "find-integer",
            "all-integers?",
            "unless-negative",
            "if-positive",
            "when-positive",
            "when-negative",
            "unless-positive",
            "if-negative",
            "case",
            "2cleave",
            "cond>quot",
            "case>quot",
            "3cleave",
            "wrong-values",
            "to-fixed-point",
            "alist>quot",
            "cond",
            "cleave",
            "call-effect",
            "recursive-hashcode",
            "spread",
            "deep-spread>quot",
            "2||",
            "0||",
            "n||",
            "0&&",
            "2&&",
            "3||",
            "1||",
            "1&&",
            "n&&",
            "3&&",
            "smart-unless*",
            "keep-inputs",
            "reduce-outputs",
            "smart-when*",
            "cleave>array",
            "smart-with",
            "smart-apply",
            "smart-if",
            "inputs/outputs",
            "output>sequence-n",
            "map-outputs",
            "map-reduce-outputs",
            "dropping",
            "output>array",
            "smart-map-reduce",
            "smart-2map-reduce",
            "output>array-n",
            "nullary",
            "input<sequence",
            "append-outputs",
            "drop-inputs",
            "inputs",
            "smart-2reduce",
            "drop-outputs",
            "smart-reduce",
            "preserving",
            "smart-when",
            "outputs",
            "append-outputs-as",
            "smart-unless",
            "smart-if*",
            "sum-outputs",
            "input<sequence-unsafe",
            "output>sequence"
          ];
          factor2.combinators.pattern = arrToWordsRegExp(combinators);
          Prism2.languages.factor = factor2;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/false.js
  var require_false = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/false.js"(exports, module) {
      "use strict";
      module.exports = $false;
      $false.displayName = "$false";
      $false.aliases = [];
      function $false(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages["false"] = {
            comment: {
              pattern: /\{[^}]*\}/
            },
            string: {
              pattern: /"[^"]*"/,
              greedy: true
            },
            "character-code": {
              pattern: /'(?:[^\r]|\r\n?)/,
              alias: "number"
            },
            "assembler-code": {
              pattern: /\d+`/,
              alias: "important"
            },
            number: /\d+/,
            operator: /[-!#$%&'*+,./:;=>?@\\^_`|~ßø]/,
            punctuation: /\[|\]/,
            variable: /[a-z]/,
            "non-standard": {
              pattern: /[()<BDO®]/,
              alias: "bold"
            }
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/firestore-security-rules.js
  var require_firestore_security_rules = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/firestore-security-rules.js"(exports, module) {
      "use strict";
      module.exports = firestoreSecurityRules;
      firestoreSecurityRules.displayName = "firestoreSecurityRules";
      firestoreSecurityRules.aliases = [];
      function firestoreSecurityRules(Prism) {
        Prism.languages["firestore-security-rules"] = Prism.languages.extend(
          "clike",
          {
            comment: /\/\/.*/,
            keyword: /\b(?:allow|function|if|match|null|return|rules_version|service)\b/,
            operator: /&&|\|\||[<>!=]=?|[-+*/%]|\b(?:in|is)\b/
          }
        );
        delete Prism.languages["firestore-security-rules"]["class-name"];
        Prism.languages.insertBefore("firestore-security-rules", "keyword", {
          path: {
            pattern: /(^|[\s(),])(?:\/(?:[\w\xA0-\uFFFF]+|\{[\w\xA0-\uFFFF]+(?:=\*\*)?\}|\$\([\w\xA0-\uFFFF.]+\)))+/,
            lookbehind: true,
            greedy: true,
            inside: {
              variable: {
                pattern: /\{[\w\xA0-\uFFFF]+(?:=\*\*)?\}|\$\([\w\xA0-\uFFFF.]+\)/,
                inside: {
                  operator: /=/,
                  keyword: /\*\*/,
                  punctuation: /[.$(){}]/
                }
              },
              punctuation: /\//
            }
          },
          method: {
            pattern: /(\ballow\s+)[a-z]+(?:\s*,\s*[a-z]+)*(?=\s*[:;])/,
            lookbehind: true,
            alias: "builtin",
            inside: {
              punctuation: /,/
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/flow.js
  var require_flow = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/flow.js"(exports, module) {
      "use strict";
      module.exports = flow3;
      flow3.displayName = "flow";
      flow3.aliases = [];
      function flow3(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.flow = Prism2.languages.extend("javascript", {});
          Prism2.languages.insertBefore("flow", "keyword", {
            type: [
              {
                pattern: /\b(?:[Bb]oolean|Function|[Nn]umber|[Ss]tring|any|mixed|null|void)\b/,
                alias: "tag"
              }
            ]
          });
          Prism2.languages.flow["function-variable"].pattern = /(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=\s*(?:function\b|(?:\([^()]*\)(?:\s*:\s*\w+)?|(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/i;
          delete Prism2.languages.flow["parameter"];
          Prism2.languages.insertBefore("flow", "operator", {
            "flow-punctuation": {
              pattern: /\{\||\|\}/,
              alias: "punctuation"
            }
          });
          if (!Array.isArray(Prism2.languages.flow.keyword)) {
            Prism2.languages.flow.keyword = [Prism2.languages.flow.keyword];
          }
          Prism2.languages.flow.keyword.unshift(
            {
              pattern: /(^|[^$]\b)(?:Class|declare|opaque|type)\b(?!\$)/,
              lookbehind: true
            },
            {
              pattern: /(^|[^$]\B)\$(?:Diff|Enum|Exact|Keys|ObjMap|PropertyType|Record|Shape|Subtype|Supertype|await)\b(?!\$)/,
              lookbehind: true
            }
          );
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/fortran.js
  var require_fortran = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/fortran.js"(exports, module) {
      "use strict";
      module.exports = fortran;
      fortran.displayName = "fortran";
      fortran.aliases = [];
      function fortran(Prism) {
        Prism.languages.fortran = {
          "quoted-number": {
            pattern: /[BOZ](['"])[A-F0-9]+\1/i,
            alias: "number"
          },
          string: {
            pattern: /(?:\b\w+_)?(['"])(?:\1\1|&(?:\r\n?|\n)(?:[ \t]*!.*(?:\r\n?|\n)|(?![ \t]*!))|(?!\1).)*(?:\1|&)/,
            inside: {
              comment: {
                pattern: /(&(?:\r\n?|\n)\s*)!.*/,
                lookbehind: true
              }
            }
          },
          comment: {
            pattern: /!.*/,
            greedy: true
          },
          boolean: /\.(?:FALSE|TRUE)\.(?:_\w+)?/i,
          number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[ED][+-]?\d+)?(?:_\w+)?/i,
          keyword: [
            /\b(?:CHARACTER|COMPLEX|DOUBLE ?PRECISION|INTEGER|LOGICAL|REAL)\b/i,
            /\b(?:END ?)?(?:BLOCK ?DATA|DO|FILE|FORALL|FUNCTION|IF|INTERFACE|MODULE(?! PROCEDURE)|PROGRAM|SELECT|SUBROUTINE|TYPE|WHERE)\b/i,
            /\b(?:ALLOCATABLE|ALLOCATE|BACKSPACE|CALL|CASE|CLOSE|COMMON|CONTAINS|CONTINUE|CYCLE|DATA|DEALLOCATE|DIMENSION|DO|END|EQUIVALENCE|EXIT|EXTERNAL|FORMAT|GO ?TO|IMPLICIT(?: NONE)?|INQUIRE|INTENT|INTRINSIC|MODULE PROCEDURE|NAMELIST|NULLIFY|OPEN|OPTIONAL|PARAMETER|POINTER|PRINT|PRIVATE|PUBLIC|READ|RETURN|REWIND|SAVE|SELECT|STOP|TARGET|WHILE|WRITE)\b/i,
            /\b(?:ASSIGNMENT|DEFAULT|ELEMENTAL|ELSE|ELSEIF|ELSEWHERE|ENTRY|IN|INCLUDE|INOUT|KIND|NULL|ONLY|OPERATOR|OUT|PURE|RECURSIVE|RESULT|SEQUENCE|STAT|THEN|USE)\b/i
          ],
          operator: [
            /\*\*|\/\/|=>|[=\/]=|[<>]=?|::|[+\-*=%]|\.[A-Z]+\./i,
            {
              pattern: /(^|(?!\().)\/(?!\))/,
              lookbehind: true
            }
          ],
          punctuation: /\(\/|\/\)|[(),;:&]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/fsharp.js
  var require_fsharp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/fsharp.js"(exports, module) {
      "use strict";
      module.exports = fsharp;
      fsharp.displayName = "fsharp";
      fsharp.aliases = [];
      function fsharp(Prism) {
        Prism.languages.fsharp = Prism.languages.extend("clike", {
          comment: [
            {
              pattern: /(^|[^\\])\(\*(?!\))[\s\S]*?\*\)/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          string: {
            pattern: /(?:"""[\s\S]*?"""|@"(?:""|[^"])*"|"(?:\\[\s\S]|[^\\"])*")B?/,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:exception|inherit|interface|new|of|type)\s+|\w\s*:\s*|\s:\??>\s*)[.\w]+\b(?:\s*(?:->|\*)\s*[.\w]+\b)*(?!\s*[:.])/,
            lookbehind: true,
            inside: {
              operator: /->|\*/,
              punctuation: /\./
            }
          },
          keyword: /\b(?:let|return|use|yield)(?:!\B|\b)|\b(?:abstract|and|as|asr|assert|atomic|base|begin|break|checked|class|component|const|constraint|constructor|continue|default|delegate|do|done|downcast|downto|eager|elif|else|end|event|exception|extern|external|false|finally|fixed|for|fun|function|functor|global|if|in|include|inherit|inline|interface|internal|land|lazy|lor|lsl|lsr|lxor|match|member|method|mixin|mod|module|mutable|namespace|new|not|null|object|of|open|or|override|parallel|private|process|protected|public|pure|rec|sealed|select|sig|static|struct|tailcall|then|to|trait|true|try|type|upcast|val|virtual|void|volatile|when|while|with)\b/,
          number: [
            /\b0x[\da-fA-F]+(?:LF|lf|un)?\b/,
            /\b0b[01]+(?:uy|y)?\b/,
            /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[fm]|e[+-]?\d+)?\b/i,
            /\b\d+(?:[IlLsy]|UL|u[lsy]?)?\b/
          ],
          operator: /([<>~&^])\1\1|([*.:<>&])\2|<-|->|[!=:]=|<?\|{1,3}>?|\??(?:<=|>=|<>|[-+*/%=<>])\??|[!?^&]|~[+~-]|:>|:\?>?/
        });
        Prism.languages.insertBefore("fsharp", "keyword", {
          preprocessor: {
            pattern: /(^[\t ]*)#.*/m,
            lookbehind: true,
            alias: "property",
            inside: {
              directive: {
                pattern: /(^#)\b(?:else|endif|if|light|line|nowarn)\b/,
                lookbehind: true,
                alias: "keyword"
              }
            }
          }
        });
        Prism.languages.insertBefore("fsharp", "punctuation", {
          "computation-expression": {
            pattern: /\b[_a-z]\w*(?=\s*\{)/i,
            alias: "keyword"
          }
        });
        Prism.languages.insertBefore("fsharp", "string", {
          annotation: {
            pattern: /\[<.+?>\]/,
            greedy: true,
            inside: {
              punctuation: /^\[<|>\]$/,
              "class-name": {
                pattern: /^\w+$|(^|;\s*)[A-Z]\w*(?=\()/,
                lookbehind: true
              },
              "annotation-content": {
                pattern: /[\s\S]+/,
                inside: Prism.languages.fsharp
              }
            }
          },
          char: {
            pattern: /'(?:[^\\']|\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8}))'B?/,
            greedy: true
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ftl.js
  var require_ftl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ftl.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = ftl;
      ftl.displayName = "ftl";
      ftl.aliases = [];
      function ftl(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          var FTL_EXPR = /[^<()"']|\((?:<expr>)*\)|<(?!#--)|<#--(?:[^-]|-(?!->))*-->|"(?:[^\\"]|\\.)*"|'(?:[^\\']|\\.)*'/.source;
          for (var i = 0; i < 2; i++) {
            FTL_EXPR = FTL_EXPR.replace(/<expr>/g, function() {
              return FTL_EXPR;
            });
          }
          FTL_EXPR = FTL_EXPR.replace(/<expr>/g, /[^\s\S]/.source);
          var ftl2 = {
            comment: /<#--[\s\S]*?-->/,
            string: [
              {
                pattern: /\br("|')(?:(?!\1)[^\\]|\\.)*\1/,
                greedy: true
              },
              {
                pattern: RegExp(
                  /("|')(?:(?!\1|\$\{)[^\\]|\\.|\$\{(?:(?!\})(?:<expr>))*\})*\1/.source.replace(
                    /<expr>/g,
                    function() {
                      return FTL_EXPR;
                    }
                  )
                ),
                greedy: true,
                inside: {
                  interpolation: {
                    pattern: RegExp(
                      /((?:^|[^\\])(?:\\\\)*)\$\{(?:(?!\})(?:<expr>))*\}/.source.replace(
                        /<expr>/g,
                        function() {
                          return FTL_EXPR;
                        }
                      )
                    ),
                    lookbehind: true,
                    inside: {
                      "interpolation-punctuation": {
                        pattern: /^\$\{|\}$/,
                        alias: "punctuation"
                      },
                      rest: null
                    }
                  }
                }
              }
            ],
            keyword: /\b(?:as)\b/,
            boolean: /\b(?:false|true)\b/,
            "builtin-function": {
              pattern: /((?:^|[^?])\?\s*)\w+/,
              lookbehind: true,
              alias: "function"
            },
            function: /\b\w+(?=\s*\()/,
            number: /\b\d+(?:\.\d+)?\b/,
            operator: /\.\.[<*!]?|->|--|\+\+|&&|\|\||\?{1,2}|[-+*/%!=<>]=?|\b(?:gt|gte|lt|lte)\b/,
            punctuation: /[,;.:()[\]{}]/
          };
          ftl2.string[1].inside.interpolation.inside.rest = ftl2;
          Prism2.languages.ftl = {
            "ftl-comment": {
              pattern: /^<#--[\s\S]*/,
              alias: "comment"
            },
            "ftl-directive": {
              pattern: /^<[\s\S]+>$/,
              inside: {
                directive: {
                  pattern: /(^<\/?)[#@][a-z]\w*/i,
                  lookbehind: true,
                  alias: "keyword"
                },
                punctuation: /^<\/?|\/?>$/,
                content: {
                  pattern: /\s*\S[\s\S]*/,
                  alias: "ftl",
                  inside: ftl2
                }
              }
            },
            "ftl-interpolation": {
              pattern: /^\$\{[\s\S]*\}$/,
              inside: {
                punctuation: /^\$\{|\}$/,
                content: {
                  pattern: /\s*\S[\s\S]*/,
                  alias: "ftl",
                  inside: ftl2
                }
              }
            }
          };
          Prism2.hooks.add("before-tokenize", function(env) {
            var pattern = RegExp(
              /<#--[\s\S]*?-->|<\/?[#@][a-zA-Z](?:<expr>)*?>|\$\{(?:<expr>)*?\}/.source.replace(
                /<expr>/g,
                function() {
                  return FTL_EXPR;
                }
              ),
              "gi"
            );
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "ftl",
              pattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "ftl");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gap.js
  var require_gap = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gap.js"(exports, module) {
      "use strict";
      module.exports = gap;
      gap.displayName = "gap";
      gap.aliases = [];
      function gap(Prism) {
        Prism.languages.gap = {
          shell: {
            pattern: /^gap>[\s\S]*?(?=^gap>|$(?![\s\S]))/m,
            greedy: true,
            inside: {
              gap: {
                pattern: /^(gap>).+(?:(?:\r(?:\n|(?!\n))|\n)>.*)*/,
                lookbehind: true,
                inside: null
              },
              punctuation: /^gap>/
            }
          },
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          string: {
            pattern: /(^|[^\\'"])(?:'(?:[^\r\n\\']|\\.){1,10}'|"(?:[^\r\n\\"]|\\.)*"(?!")|"""[\s\S]*?""")/,
            lookbehind: true,
            greedy: true,
            inside: {
              continuation: {
                pattern: /([\r\n])>/,
                lookbehind: true,
                alias: "punctuation"
              }
            }
          },
          keyword: /\b(?:Assert|Info|IsBound|QUIT|TryNextMethod|Unbind|and|atomic|break|continue|do|elif|else|end|fi|for|function|if|in|local|mod|not|od|or|quit|readonly|readwrite|rec|repeat|return|then|until|while)\b/,
          boolean: /\b(?:false|true)\b/,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          number: {
            pattern: /(^|[^\w.]|\.\.)(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?:_[a-z]?)?(?=$|[^\w.]|\.\.)/,
            lookbehind: true
          },
          continuation: {
            pattern: /([\r\n])>/,
            lookbehind: true,
            alias: "punctuation"
          },
          operator: /->|[-+*/^~=!]|<>|[<>]=?|:=|\.\./,
          punctuation: /[()[\]{},;.:]/
        };
        Prism.languages.gap.shell.inside.gap.inside = Prism.languages.gap;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gcode.js
  var require_gcode = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gcode.js"(exports, module) {
      "use strict";
      module.exports = gcode;
      gcode.displayName = "gcode";
      gcode.aliases = [];
      function gcode(Prism) {
        Prism.languages.gcode = {
          comment: /;.*|\B\(.*?\)\B/,
          string: {
            pattern: /"(?:""|[^"])*"/,
            greedy: true
          },
          keyword: /\b[GM]\d+(?:\.\d+)?\b/,
          property: /\b[A-Z]/,
          checksum: {
            pattern: /(\*)\d+/,
            lookbehind: true,
            alias: "number"
          },
          punctuation: /[:*]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gdscript.js
  var require_gdscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gdscript.js"(exports, module) {
      "use strict";
      module.exports = gdscript;
      gdscript.displayName = "gdscript";
      gdscript.aliases = [];
      function gdscript(Prism) {
        Prism.languages.gdscript = {
          comment: /#.*/,
          string: {
            pattern: /@?(?:("|')(?:(?!\1)[^\n\\]|\\[\s\S])*\1(?!"|')|"""(?:[^\\]|\\[\s\S])*?""")/,
            greedy: true
          },
          "class-name": {
            pattern: /(^(?:class|class_name|extends)[ \t]+|^export\([ \t]*|\bas[ \t]+|(?:\b(?:const|var)[ \t]|[,(])[ \t]*\w+[ \t]*:[ \t]*|->[ \t]*)[a-zA-Z_]\w*/m,
            lookbehind: true
          },
          keyword: /\b(?:and|as|assert|break|breakpoint|class|class_name|const|continue|elif|else|enum|export|extends|for|func|if|in|is|master|mastersync|match|not|null|onready|or|pass|preload|puppet|puppetsync|remote|remotesync|return|self|setget|signal|static|tool|var|while|yield)\b/,
          function: /\b[a-z_]\w*(?=[ \t]*\()/i,
          variable: /\$\w+/,
          number: [
            /\b0b[01_]+\b|\b0x[\da-fA-F_]+\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.[\d_]+)(?:e[+-]?[\d_]+)?\b/,
            /\b(?:INF|NAN|PI|TAU)\b/
          ],
          constant: /\b[A-Z][A-Z_\d]*\b/,
          boolean: /\b(?:false|true)\b/,
          operator: /->|:=|&&|\|\||<<|>>|[-+*/%&|!<>=]=?|[~^]/,
          punctuation: /[.:,;()[\]{}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gedcom.js
  var require_gedcom = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gedcom.js"(exports, module) {
      "use strict";
      module.exports = gedcom;
      gedcom.displayName = "gedcom";
      gedcom.aliases = [];
      function gedcom(Prism) {
        Prism.languages.gedcom = {
          "line-value": {
            pattern: /(^[\t ]*\d+ +(?:@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?\w+ ).+/m,
            lookbehind: true,
            inside: {
              pointer: {
                pattern: /^@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@$/,
                alias: "variable"
              }
            }
          },
          tag: {
            pattern: /(^[\t ]*\d+ +(?:@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@ +)?)\w+/m,
            lookbehind: true,
            alias: "string"
          },
          level: {
            pattern: /(^[\t ]*)\d+/m,
            lookbehind: true,
            alias: "number"
          },
          pointer: {
            pattern: /@\w[\w!"$%&'()*+,\-./:;<=>?[\\\]^`{|}~\x80-\xfe #]*@/,
            alias: "variable"
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gherkin.js
  var require_gherkin = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gherkin.js"(exports, module) {
      "use strict";
      module.exports = gherkin;
      gherkin.displayName = "gherkin";
      gherkin.aliases = [];
      function gherkin(Prism) {
        ;
        (function(Prism2) {
          var tableRow2 = /(?:\r?\n|\r)[ \t]*\|.+\|(?:(?!\|).)*/.source;
          Prism2.languages.gherkin = {
            pystring: {
              pattern: /("""|''')[\s\S]+?\1/,
              alias: "string"
            },
            comment: {
              pattern: /(^[ \t]*)#.*/m,
              lookbehind: true
            },
            tag: {
              pattern: /(^[ \t]*)@\S*/m,
              lookbehind: true
            },
            feature: {
              pattern: /((?:^|\r?\n|\r)[ \t]*)(?:Ability|Ahoy matey!|Arwedd|Aspekt|Besigheid Behoefte|Business Need|Caracteristica|Característica|Egenskab|Egenskap|Eiginleiki|Feature|Fīča|Fitur|Fonctionnalité|Fonksyonalite|Funcionalidade|Funcionalitat|Functionalitate|Funcţionalitate|Funcționalitate|Functionaliteit|Fungsi|Funkcia|Funkcija|Funkcionalitāte|Funkcionalnost|Funkcja|Funksie|Funktionalität|Funktionalitéit|Funzionalità|Hwaet|Hwæt|Jellemző|Karakteristik|Lastnost|Mak|Mogucnost|laH|Mogućnost|Moznosti|Možnosti|OH HAI|Omadus|Ominaisuus|Osobina|Özellik|Potrzeba biznesowa|perbogh|poQbogh malja'|Požadavek|Požiadavka|Pretty much|Qap|Qu'meH 'ut|Savybė|Tính năng|Trajto|Vermoë|Vlastnosť|Właściwość|Značilnost|Δυνατότητα|Λειτουργία|Могућност|Мөмкинлек|Особина|Свойство|Үзенчәлеклелек|Функционал|Функционалност|Функция|Функціонал|תכונה|خاصية|خصوصیت|صلاحیت|کاروبار کی ضرورت|وِیژگی|रूप लेख|ਖਾਸੀਅਤ|ਨਕਸ਼ ਨੁਹਾਰ|ਮੁਹਾਂਦਰਾ|గుణము|ಹೆಚ್ಚಳ|ความต้องการทางธุรกิจ|ความสามารถ|โครงหลัก|기능|フィーチャ|功能|機能):(?:[^:\r\n]+(?:\r?\n|\r|$))*/,
              lookbehind: true,
              inside: {
                important: {
                  pattern: /(:)[^\r\n]+/,
                  lookbehind: true
                },
                keyword: /[^:\r\n]+:/
              }
            },
            scenario: {
              pattern: /(^[ \t]*)(?:Abstract Scenario|Abstrakt Scenario|Achtergrond|Aer|Ær|Agtergrond|All y'all|Antecedentes|Antecedents|Atburðarás|Atburðarásir|Awww, look mate|B4|Background|Baggrund|Bakgrund|Bakgrunn|Bakgrunnur|Beispiele|Beispiller|Bối cảnh|Cefndir|Cenario|Cenário|Cenario de Fundo|Cenário de Fundo|Cenarios|Cenários|Contesto|Context|Contexte|Contexto|Conto|Contoh|Contone|Dæmi|Dasar|Dead men tell no tales|Delineacao do Cenario|Delineação do Cenário|Dis is what went down|Dữ liệu|Dyagram Senaryo|Dyagram senaryo|Egzanp|Ejemplos|Eksempler|Ekzemploj|Enghreifftiau|Esbozo do escenario|Escenari|Escenario|Esempi|Esquema de l'escenari|Esquema del escenario|Esquema do Cenario|Esquema do Cenário|EXAMPLZ|Examples|Exempel|Exemple|Exemples|Exemplos|First off|Fono|Forgatókönyv|Forgatókönyv vázlat|Fundo|Geçmiş|Grundlage|Hannergrond|ghantoH|Háttér|Heave to|Istorik|Juhtumid|Keadaan|Khung kịch bản|Khung tình huống|Kịch bản|Koncept|Konsep skenario|Kontèks|Kontekst|Kontekstas|Konteksts|Kontext|Konturo de la scenaro|Latar Belakang|lut chovnatlh|lut|lutmey|Lýsing Atburðarásar|Lýsing Dæma|MISHUN SRSLY|MISHUN|Menggariskan Senario|mo'|Náčrt Scenára|Náčrt Scénáře|Náčrt Scenáru|Oris scenarija|Örnekler|Osnova|Osnova Scenára|Osnova scénáře|Osnutek|Ozadje|Paraugs|Pavyzdžiai|Példák|Piemēri|Plan du scénario|Plan du Scénario|Plan Senaryo|Plan senaryo|Plang vum Szenario|Pozadí|Pozadie|Pozadina|Príklady|Příklady|Primer|Primeri|Primjeri|Przykłady|Raamstsenaarium|Reckon it's like|Rerefons|Scenár|Scénář|Scenarie|Scenarij|Scenarijai|Scenarijaus šablonas|Scenariji|Scenārijs|Scenārijs pēc parauga|Scenarijus|Scenario|Scénario|Scenario Amlinellol|Scenario Outline|Scenario Template|Scenariomal|Scenariomall|Scenarios|Scenariu|Scenariusz|Scenaro|Schema dello scenario|Se ðe|Se the|Se þe|Senario|Senaryo Deskripsyon|Senaryo deskripsyon|Senaryo|Senaryo taslağı|Shiver me timbers|Situācija|Situai|Situasie Uiteensetting|Situasie|Skenario konsep|Skenario|Skica|Structura scenariu|Structură scenariu|Struktura scenarija|Stsenaarium|Swa hwaer swa|Swa|Swa hwær swa|Szablon scenariusza|Szenario|Szenariogrundriss|Tapaukset|Tapaus|Tapausaihio|Taust|Tausta|Template Keadaan|Template Senario|Template Situai|The thing of it is|Tình huống|Variantai|Voorbeelde|Voorbeelden|Wharrimean is|Yo-ho-ho|You'll wanna|Założenia|Παραδείγματα|Περιγραφή Σεναρίου|Σενάρια|Σενάριο|Υπόβαθρο|Кереш|Контекст|Концепт|Мисаллар|Мисоллар|Основа|Передумова|Позадина|Предистория|Предыстория|Приклади|Пример|Примери|Примеры|Рамка на сценарий|Скица|Структура сценарија|Структура сценария|Структура сценарію|Сценарий|Сценарий структураси|Сценарийның төзелеше|Сценарији|Сценарио|Сценарій|Тарих|Үрнәкләр|דוגמאות|רקע|תבנית תרחיש|תרחיש|الخلفية|الگوی سناریو|امثلة|پس منظر|زمینه|سناریو|سيناريو|سيناريو مخطط|مثالیں|منظر نامے کا خاکہ|منظرنامہ|نمونه ها|उदाहरण|परिदृश्य|परिदृश्य रूपरेखा|पृष्ठभूमि|ਉਦਾਹਰਨਾਂ|ਪਟਕਥਾ|ਪਟਕਥਾ ਢਾਂਚਾ|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਿਛੋਕੜ|ఉదాహరణలు|కథనం|నేపథ్యం|సన్నివేశం|ಉದಾಹರಣೆಗಳು|ಕಥಾಸಾರಾಂಶ|ವಿವರಣೆ|ಹಿನ್ನೆಲೆ|โครงสร้างของเหตุการณ์|ชุดของตัวอย่าง|ชุดของเหตุการณ์|แนวคิด|สรุปเหตุการณ์|เหตุการณ์|배경|시나리오|시나리오 개요|예|サンプル|シナリオ|シナリオアウトライン|シナリオテンプレ|シナリオテンプレート|テンプレ|例|例子|剧本|剧本大纲|劇本|劇本大綱|场景|场景大纲|場景|場景大綱|背景):[^:\r\n]*/m,
              lookbehind: true,
              inside: {
                important: {
                  pattern: /(:)[^\r\n]*/,
                  lookbehind: true
                },
                keyword: /[^:\r\n]+:/
              }
            },
            "table-body": {
              pattern: RegExp("(" + tableRow2 + ")(?:" + tableRow2 + ")+"),
              lookbehind: true,
              inside: {
                outline: {
                  pattern: /<[^>]+>/,
                  alias: "variable"
                },
                td: {
                  pattern: /\s*[^\s|][^|]*/,
                  alias: "string"
                },
                punctuation: /\|/
              }
            },
            "table-head": {
              pattern: RegExp(tableRow2),
              inside: {
                th: {
                  pattern: /\s*[^\s|][^|]*/,
                  alias: "variable"
                },
                punctuation: /\|/
              }
            },
            atrule: {
              pattern: /(^[ \t]+)(?:'a|'ach|'ej|7|a|A také|A taktiež|A tiež|A zároveň|Aber|Ac|Adott|Akkor|Ak|Aleshores|Ale|Ali|Allora|Alors|Als|Ama|Amennyiben|Amikor|Ampak|an|AN|Ananging|And y'all|And|Angenommen|Anrhegedig a|An|Apabila|Atès|Atesa|Atunci|Avast!|Aye|A|awer|Bagi|Banjur|Bet|Biết|Blimey!|Buh|But at the end of the day I reckon|But y'all|But|BUT|Cal|Când|Cand|Cando|Ce|Cuando|Če|Ða ðe|Ða|Dadas|Dada|Dados|Dado|DaH ghu' bejlu'|dann|Dann|Dano|Dan|Dar|Dat fiind|Data|Date fiind|Date|Dati fiind|Dati|Daţi fiind|Dați fiind|DEN|Dato|De|Den youse gotta|Dengan|Diberi|Diyelim ki|Donada|Donat|Donitaĵo|Do|Dun|Duota|Ðurh|Eeldades|Ef|Eğer ki|Entao|Então|Entón|E|En|Entonces|Epi|És|Etant donnée|Etant donné|Et|Étant données|Étant donnée|Étant donné|Etant données|Etant donnés|Étant donnés|Fakat|Gangway!|Gdy|Gegeben seien|Gegeben sei|Gegeven|Gegewe|ghu' noblu'|Gitt|Given y'all|Given|Givet|Givun|Ha|Cho|I CAN HAZ|In|Ir|It's just unbelievable|I|Ja|Jeśli|Jeżeli|Kad|Kada|Kadar|Kai|Kaj|Když|Keď|Kemudian|Ketika|Khi|Kiedy|Ko|Kuid|Kui|Kun|Lan|latlh|Le sa a|Let go and haul|Le|Lè sa a|Lè|Logo|Lorsqu'<|Lorsque|mä|Maar|Mais|Mając|Ma|Majd|Maka|Manawa|Mas|Men|Menawa|Mutta|Nalika|Nalikaning|Nanging|Når|När|Nato|Nhưng|Niin|Njuk|O zaman|Och|Og|Oletetaan|Ond|Onda|Oraz|Pak|Pero|Però|Podano|Pokiaľ|Pokud|Potem|Potom|Privzeto|Pryd|Quan|Quand|Quando|qaSDI'|Så|Sed|Se|Siis|Sipoze ke|Sipoze Ke|Sipoze|Si|Şi|Și|Soit|Stel|Tada|Tad|Takrat|Tak|Tapi|Ter|Tetapi|Tha the|Tha|Then y'all|Then|Thì|Thurh|Toda|Too right|Un|Und|ugeholl|Và|vaj|Vendar|Ve|wann|Wanneer|WEN|Wenn|When y'all|When|Wtedy|Wun|Y'know|Yeah nah|Yna|Youse know like when|Youse know when youse got|Y|Za predpokladu|Za předpokladu|Zadan|Zadani|Zadano|Zadate|Zadato|Zakładając|Zaradi|Zatati|Þa þe|Þa|Þá|Þegar|Þurh|Αλλά|Δεδομένου|Και|Όταν|Τότε|А також|Агар|Але|Али|Аммо|А|Әгәр|Әйтик|Әмма|Бирок|Ва|Вә|Дадено|Дано|Допустим|Если|Задате|Задати|Задато|И|І|К тому же|Када|Кад|Когато|Когда|Коли|Ләкин|Лекин|Нәтиҗәдә|Нехай|Но|Онда|Припустимо, що|Припустимо|Пусть|Также|Та|Тогда|Тоді|То|Унда|Һәм|Якщо|אבל|אזי|אז|בהינתן|וגם|כאשר|آنگاه|اذاً|اگر|اما|اور|با فرض|بالفرض|بفرض|پھر|تب|ثم|جب|عندما|فرض کیا|لكن|لیکن|متى|هنگامی|و|अगर|और|कदा|किन्तु|चूंकि|जब|तथा|तदा|तब|परन्तु|पर|यदि|ਅਤੇ|ਜਦੋਂ|ਜਿਵੇਂ ਕਿ|ਜੇਕਰ|ਤਦ|ਪਰ|అప్పుడు|ఈ పరిస్థితిలో|కాని|చెప్పబడినది|మరియు|ಆದರೆ|ನಂತರ|ನೀಡಿದ|ಮತ್ತು|ಸ್ಥಿತಿಯನ್ನು|กำหนดให้|ดังนั้น|แต่|เมื่อ|และ|그러면<|그리고<|단<|만약<|만일<|먼저<|조건<|하지만<|かつ<|しかし<|ただし<|ならば<|もし<|並且<|但し<|但是<|假如<|假定<|假設<|假设<|前提<|同时<|同時<|并且<|当<|當<|而且<|那么<|那麼<)(?=[ \t])/m,
              lookbehind: true
            },
            string: {
              pattern: /"(?:\\.|[^"\\\r\n])*"|'(?:\\.|[^'\\\r\n])*'/,
              inside: {
                outline: {
                  pattern: /<[^>]+>/,
                  alias: "variable"
                }
              }
            },
            outline: {
              pattern: /<[^>]+>/,
              alias: "variable"
            }
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/git.js
  var require_git = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/git.js"(exports, module) {
      "use strict";
      module.exports = git;
      git.displayName = "git";
      git.aliases = [];
      function git(Prism) {
        Prism.languages.git = {
          comment: /^#.*/m,
          deleted: /^[-–].*/m,
          inserted: /^\+.*/m,
          string: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
          command: {
            pattern: /^.*\$ git .*$/m,
            inside: {
              parameter: /\s--?\w+/
            }
          },
          coord: /^@@.*@@$/m,
          "commit-sha1": /^commit \w{40}$/m
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/glsl.js
  var require_glsl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/glsl.js"(exports, module) {
      "use strict";
      var refractorC = require_c();
      module.exports = glsl;
      glsl.displayName = "glsl";
      glsl.aliases = [];
      function glsl(Prism) {
        Prism.register(refractorC);
        Prism.languages.glsl = Prism.languages.extend("c", {
          keyword: /\b(?:active|asm|atomic_uint|attribute|[ibdu]?vec[234]|bool|break|buffer|case|cast|centroid|class|coherent|common|const|continue|d?mat[234](?:x[234])?|default|discard|do|double|else|enum|extern|external|false|filter|fixed|flat|float|for|fvec[234]|goto|half|highp|hvec[234]|[iu]?sampler2DMS(?:Array)?|[iu]?sampler2DRect|[iu]?samplerBuffer|[iu]?samplerCube|[iu]?samplerCubeArray|[iu]?sampler[123]D|[iu]?sampler[12]DArray|[iu]?image2DMS(?:Array)?|[iu]?image2DRect|[iu]?imageBuffer|[iu]?imageCube|[iu]?imageCubeArray|[iu]?image[123]D|[iu]?image[12]DArray|if|in|inline|inout|input|int|interface|invariant|layout|long|lowp|mediump|namespace|noinline|noperspective|out|output|partition|patch|precise|precision|public|readonly|resource|restrict|return|sample|sampler[12]DArrayShadow|sampler[12]DShadow|sampler2DRectShadow|sampler3DRect|samplerCubeArrayShadow|samplerCubeShadow|shared|short|sizeof|smooth|static|struct|subroutine|superp|switch|template|this|true|typedef|uint|uniform|union|unsigned|using|varying|void|volatile|while|writeonly)\b/
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gml.js
  var require_gml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gml.js"(exports, module) {
      "use strict";
      module.exports = gml;
      gml.displayName = "gml";
      gml.aliases = [];
      function gml(Prism) {
        Prism.languages.gamemakerlanguage = Prism.languages.gml = Prism.languages.extend("clike", {
          keyword: /\b(?:break|case|continue|default|do|else|enum|exit|for|globalvar|if|repeat|return|switch|until|var|while)\b/,
          number: /(?:\b0x[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ulf]{0,4}/i,
          operator: /--|\+\+|[-+%/=]=?|!=|\*\*?=?|<[<=>]?|>[=>]?|&&?|\^\^?|\|\|?|~|\b(?:and|at|not|or|with|xor)\b/,
          constant: /\b(?:GM_build_date|GM_version|action_(?:continue|restart|reverse|stop)|all|gamespeed_(?:fps|microseconds)|global|local|noone|other|pi|pointer_(?:invalid|null)|self|timezone_(?:local|utc)|undefined|ev_(?:create|destroy|step|alarm|keyboard|mouse|collision|other|draw|draw_(?:begin|end|post|pre)|keypress|keyrelease|trigger|(?:left|middle|no|right)_button|(?:left|middle|right)_press|(?:left|middle|right)_release|mouse_(?:enter|leave|wheel_down|wheel_up)|global_(?:left|middle|right)_button|global_(?:left|middle|right)_press|global_(?:left|middle|right)_release|joystick(?:1|2)_(?:button1|button2|button3|button4|button5|button6|button7|button8|down|left|right|up)|outside|boundary|game_start|game_end|room_start|room_end|no_more_lives|animation_end|end_of_path|no_more_health|user\d|gui|gui_begin|gui_end|step_(?:begin|end|normal))|vk_(?:alt|anykey|backspace|control|delete|down|end|enter|escape|home|insert|left|nokey|pagedown|pageup|pause|printscreen|return|right|shift|space|tab|up|f\d|numpad\d|add|decimal|divide|lalt|lcontrol|lshift|multiply|ralt|rcontrol|rshift|subtract)|achievement_(?:filter_(?:all_players|favorites_only|friends_only)|friends_info|info|leaderboard_info|our_info|pic_loaded|show_(?:achievement|bank|friend_picker|leaderboard|profile|purchase_prompt|ui)|type_challenge|type_score_challenge)|asset_(?:font|object|path|room|script|shader|sound|sprite|tiles|timeline|unknown)|audio_(?:3d|falloff_(?:exponent_distance|exponent_distance_clamped|inverse_distance|inverse_distance_clamped|linear_distance|linear_distance_clamped|none)|mono|new_system|old_system|stereo)|bm_(?:add|complex|dest_alpha|dest_color|dest_colour|inv_dest_alpha|inv_dest_color|inv_dest_colour|inv_src_alpha|inv_src_color|inv_src_colour|max|normal|one|src_alpha|src_alpha_sat|src_color|src_colour|subtract|zero)|browser_(?:chrome|firefox|ie|ie_mobile|not_a_browser|opera|safari|safari_mobile|tizen|unknown|windows_store)|buffer_(?:bool|f16|f32|f64|fast|fixed|generalerror|grow|invalidtype|network|outofbounds|outofspace|s16|s32|s8|seek_end|seek_relative|seek_start|string|text|u16|u32|u64|u8|vbuffer|wrap)|c_(?:aqua|black|blue|dkgray|fuchsia|gray|green|lime|ltgray|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow)|cmpfunc_(?:always|equal|greater|greaterequal|less|lessequal|never|notequal)|cr_(?:appstart|arrow|beam|cross|default|drag|handpoint|hourglass|none|size_all|size_nesw|size_ns|size_nwse|size_we|uparrow)|cull_(?:clockwise|counterclockwise|noculling)|device_(?:emulator|tablet)|device_ios_(?:ipad|ipad_retina|iphone|iphone5|iphone6|iphone6plus|iphone_retina|unknown)|display_(?:landscape|landscape_flipped|portrait|portrait_flipped)|dll_(?:cdecl|cdel|stdcall)|ds_type_(?:grid|list|map|priority|queue|stack)|ef_(?:cloud|ellipse|explosion|firework|flare|rain|ring|smoke|smokeup|snow|spark|star)|fa_(?:archive|bottom|center|directory|hidden|left|middle|readonly|right|sysfile|top|volumeid)|fb_login_(?:default|fallback_to_webview|forcing_safari|forcing_webview|no_fallback_to_webview|use_system_account)|iap_(?:available|canceled|ev_consume|ev_product|ev_purchase|ev_restore|ev_storeload|failed|purchased|refunded|status_available|status_loading|status_processing|status_restoring|status_unavailable|status_uninitialised|storeload_failed|storeload_ok|unavailable)|leaderboard_type_(?:number|time_mins_secs)|lighttype_(?:dir|point)|matrix_(?:projection|view|world)|mb_(?:any|left|middle|none|right)|network_(?:config_(?:connect_timeout|disable_reliable_udp|enable_reliable_udp|use_non_blocking_socket)|socket_(?:bluetooth|tcp|udp)|type_(?:connect|data|disconnect|non_blocking_connect))|of_challenge_(?:lose|tie|win)|os_(?:android|ios|linux|macosx|ps3|ps4|psvita|unknown|uwp|win32|win8native|windows|winphone|xboxone)|phy_debug_render_(?:aabb|collision_pairs|coms|core_shapes|joints|obb|shapes)|phy_joint_(?:anchor_1_x|anchor_1_y|anchor_2_x|anchor_2_y|angle|angle_limits|damping_ratio|frequency|length_1|length_2|lower_angle_limit|max_force|max_length|max_motor_force|max_motor_torque|max_torque|motor_force|motor_speed|motor_torque|reaction_force_x|reaction_force_y|reaction_torque|speed|translation|upper_angle_limit)|phy_particle_data_flag_(?:category|color|colour|position|typeflags|velocity)|phy_particle_flag_(?:colormixing|colourmixing|elastic|powder|spring|tensile|viscous|wall|water|zombie)|phy_particle_group_flag_(?:rigid|solid)|pr_(?:linelist|linestrip|pointlist|trianglefan|trianglelist|trianglestrip)|ps_(?:distr|shape)_(?:diamond|ellipse|gaussian|invgaussian|line|linear|rectangle)|pt_shape_(?:circle|cloud|disk|explosion|flare|line|pixel|ring|smoke|snow|spark|sphere|square|star)|ty_(?:real|string)|gp_(?:face\d|axislh|axislv|axisrh|axisrv|padd|padl|padr|padu|select|shoulderl|shoulderlb|shoulderr|shoulderrb|start|stickl|stickr)|lb_disp_(?:none|numeric|time_ms|time_sec)|lb_sort_(?:ascending|descending|none)|ov_(?:achievements|community|friends|gamegroup|players|settings)|ugc_(?:filetype_(?:community|microtrans)|list_(?:Favorited|Followed|Published|Subscribed|UsedOrPlayed|VotedDown|VotedOn|VotedUp|WillVoteLater)|match_(?:AllGuides|Artwork|Collections|ControllerBindings|IntegratedGuides|Items|Items_Mtx|Items_ReadyToUse|Screenshots|UsableInGame|Videos|WebGuides)|query_(?:AcceptedForGameRankedByAcceptanceDate|CreatedByFriendsRankedByPublicationDate|FavoritedByFriendsRankedByPublicationDate|NotYetRated)|query_RankedBy(?:NumTimesReported|PublicationDate|TextSearch|TotalVotesAsc|Trend|Vote|VotesUp)|result_success|sortorder_CreationOrder(?:Asc|Desc)|sortorder_(?:ForModeration|LastUpdatedDesc|SubscriptionDateDesc|TitleAsc|VoteScoreDesc)|visibility_(?:friends_only|private|public))|vertex_usage_(?:binormal|blendindices|blendweight|color|colour|depth|fog|normal|position|psize|sample|tangent|texcoord|textcoord)|vertex_type_(?:float\d|color|colour|ubyte4)|input_type|layerelementtype_(?:background|instance|oldtilemap|particlesystem|sprite|tile|tilemap|undefined)|se_(?:chorus|compressor|echo|equalizer|flanger|gargle|none|reverb)|text_type|tile_(?:flip|index_mask|mirror|rotate)|(?:obj|rm|scr|spr)\w+)\b/,
          variable: /\b(?:alarm|application_surface|async_load|background_(?:alpha|blend|color|colour|foreground|height|hspeed|htiled|index|showcolor|showcolour|visible|vspeed|vtiled|width|x|xscale|y|yscale)|bbox_(?:bottom|left|right|top)|browser_(?:height|width)|caption_(?:health|lives|score)|current_(?:day|hour|minute|month|second|time|weekday|year)|cursor_sprite|debug_mode|delta_time|direction|display_aa|error_(?:last|occurred)|event_(?:action|number|object|type)|fps|fps_real|friction|game_(?:display|project|save)_(?:id|name)|gamemaker_(?:pro|registered|version)|gravity|gravity_direction|(?:h|v)speed|health|iap_data|id|image_(?:alpha|angle|blend|depth|index|number|speed|xscale|yscale)|instance_(?:count|id)|keyboard_(?:key|lastchar|lastkey|string)|layer|lives|mask_index|mouse_(?:button|lastbutton|x|y)|object_index|os_(?:browser|device|type|version)|path_(?:endaction|index|orientation|position|positionprevious|scale|speed)|persistent|phy_(?:rotation|(?:col_normal|collision|com|linear_velocity|position|speed)_(?:x|y)|angular_(?:damping|velocity)|position_(?:x|y)previous|speed|linear_damping|bullet|fixed_rotation|active|mass|inertia|dynamic|kinematic|sleeping|collision_points)|pointer_(?:invalid|null)|room|room_(?:caption|first|height|last|persistent|speed|width)|score|secure_mode|show_(?:health|lives|score)|solid|speed|sprite_(?:height|index|width|xoffset|yoffset)|temp_directory|timeline_(?:index|loop|position|running|speed)|transition_(?:color|kind|steps)|undefined|view_(?:angle|current|enabled|(?:h|v)(?:border|speed)|(?:h|w|x|y)port|(?:h|w|x|y)view|object|surface_id|visible)|visible|webgl_enabled|working_directory|(?:x|y)(?:previous|start)|x|y|argument(?:_relitive|_count|\d)|argument|global|local|other|self)\b/
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/gn.js
  var require_gn = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/gn.js"(exports, module) {
      "use strict";
      module.exports = gn;
      gn.displayName = "gn";
      gn.aliases = ["gni"];
      function gn(Prism) {
        Prism.languages.gn = {
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          "string-literal": {
            pattern: /(^|[^\\"])"(?:[^\r\n"\\]|\\.)*"/,
            lookbehind: true,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\{[\s\S]*?\}|[a-zA-Z_]\w*|0x[a-fA-F0-9]{2})/,
                lookbehind: true,
                inside: {
                  number: /^\$0x[\s\S]{2}$/,
                  variable: /^\$\w+$/,
                  "interpolation-punctuation": {
                    pattern: /^\$\{|\}$/,
                    alias: "punctuation"
                  },
                  expression: {
                    pattern: /[\s\S]+/,
                    inside: null
                  }
                }
              },
              string: /[\s\S]+/
            }
          },
          keyword: /\b(?:else|if)\b/,
          boolean: /\b(?:false|true)\b/,
          "builtin-function": {
            pattern: /\b(?:assert|defined|foreach|import|pool|print|template|tool|toolchain)(?=\s*\()/i,
            alias: "keyword"
          },
          function: /\b[a-z_]\w*(?=\s*\()/i,
          constant: /\b(?:current_cpu|current_os|current_toolchain|default_toolchain|host_cpu|host_os|root_build_dir|root_gen_dir|root_out_dir|target_cpu|target_gen_dir|target_os|target_out_dir)\b/,
          number: /-?\b\d+\b/,
          operator: /[-+!=<>]=?|&&|\|\|/,
          punctuation: /[(){}[\],.]/
        };
        Prism.languages.gn["string-literal"].inside["interpolation"].inside["expression"].inside = Prism.languages.gn;
        Prism.languages.gni = Prism.languages.gn;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/go-module.js
  var require_go_module = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/go-module.js"(exports, module) {
      "use strict";
      module.exports = goModule;
      goModule.displayName = "goModule";
      goModule.aliases = [];
      function goModule(Prism) {
        Prism.languages["go-mod"] = Prism.languages["go-module"] = {
          comment: {
            pattern: /\/\/.*/,
            greedy: true
          },
          version: {
            pattern: /(^|[\s()[\],])v\d+\.\d+\.\d+(?:[+-][-+.\w]*)?(?![^\s()[\],])/,
            lookbehind: true,
            alias: "number"
          },
          "go-version": {
            pattern: /((?:^|\s)go\s+)\d+(?:\.\d+){1,2}/,
            lookbehind: true,
            alias: "number"
          },
          keyword: {
            pattern: /^([ \t]*)(?:exclude|go|module|replace|require|retract)\b/m,
            lookbehind: true
          },
          operator: /=>/,
          punctuation: /[()[\],]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/go.js
  var require_go = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/go.js"(exports, module) {
      "use strict";
      module.exports = go;
      go.displayName = "go";
      go.aliases = [];
      function go(Prism) {
        Prism.languages.go = Prism.languages.extend("clike", {
          string: {
            pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,
            lookbehind: true,
            greedy: true
          },
          keyword: /\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,
          boolean: /\b(?:_|false|iota|nil|true)\b/,
          number: [
            /\b0(?:b[01_]+|o[0-7_]+)i?\b/i,
            /\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
            /(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i
          ],
          operator: /[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,
          builtin: /\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/
        });
        Prism.languages.insertBefore("go", "string", {
          char: {
            pattern: /'(?:\\.|[^'\\\r\n]){0,10}'/,
            greedy: true
          }
        });
        delete Prism.languages.go["class-name"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/graphql.js
  var require_graphql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/graphql.js"(exports, module) {
      "use strict";
      module.exports = graphql;
      graphql.displayName = "graphql";
      graphql.aliases = [];
      function graphql(Prism) {
        Prism.languages.graphql = {
          comment: /#.*/,
          description: {
            pattern: /(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,
            greedy: true,
            alias: "string",
            inside: {
              "language-markdown": {
                pattern: /(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,
                lookbehind: true,
                inside: Prism.languages.markdown
              }
            }
          },
          string: {
            pattern: /"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,
            greedy: true
          },
          number: /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
          boolean: /\b(?:false|true)\b/,
          variable: /\$[a-z_]\w*/i,
          directive: {
            pattern: /@[a-z_]\w*/i,
            alias: "function"
          },
          "attr-name": {
            pattern: /\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
            greedy: true
          },
          "atom-input": {
            pattern: /\b[A-Z]\w*Input\b/,
            alias: "class-name"
          },
          scalar: /\b(?:Boolean|Float|ID|Int|String)\b/,
          constant: /\b[A-Z][A-Z_\d]*\b/,
          "class-name": {
            pattern: /(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,
            lookbehind: true
          },
          fragment: {
            pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
            lookbehind: true,
            alias: "function"
          },
          "definition-mutation": {
            pattern: /(\bmutation\s+)[a-zA-Z_]\w*/,
            lookbehind: true,
            alias: "function"
          },
          "definition-query": {
            pattern: /(\bquery\s+)[a-zA-Z_]\w*/,
            lookbehind: true,
            alias: "function"
          },
          keyword: /\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,
          operator: /[!=|&]|\.{3}/,
          "property-query": /\w+(?=\s*\()/,
          object: /\w+(?=\s*\{)/,
          punctuation: /[!(){}\[\]:=,]/,
          property: /\w+/
        };
        Prism.hooks.add("after-tokenize", function afterTokenizeGraphql(env) {
          if (env.language !== "graphql") {
            return;
          }
          var validTokens = env.tokens.filter(function(token) {
            return typeof token !== "string" && token.type !== "comment" && token.type !== "scalar";
          });
          var currentIndex = 0;
          function getToken2(offset) {
            return validTokens[currentIndex + offset];
          }
          function isTokenType(types2, offset) {
            offset = offset || 0;
            for (var i2 = 0; i2 < types2.length; i2++) {
              var token = getToken2(i2 + offset);
              if (!token || token.type !== types2[i2]) {
                return false;
              }
            }
            return true;
          }
          function findClosingBracket(open, close) {
            var stackHeight = 1;
            for (var i2 = currentIndex; i2 < validTokens.length; i2++) {
              var token = validTokens[i2];
              var content3 = token.content;
              if (token.type === "punctuation" && typeof content3 === "string") {
                if (open.test(content3)) {
                  stackHeight++;
                } else if (close.test(content3)) {
                  stackHeight--;
                  if (stackHeight === 0) {
                    return i2;
                  }
                }
              }
            }
            return -1;
          }
          function addAlias(token, alias) {
            var aliases = token.alias;
            if (!aliases) {
              token.alias = aliases = [];
            } else if (!Array.isArray(aliases)) {
              token.alias = aliases = [aliases];
            }
            aliases.push(alias);
          }
          for (; currentIndex < validTokens.length; ) {
            var startToken = validTokens[currentIndex++];
            if (startToken.type === "keyword" && startToken.content === "mutation") {
              var inputVariables = [];
              if (isTokenType(["definition-mutation", "punctuation"]) && getToken2(1).content === "(") {
                currentIndex += 2;
                var definitionEnd = findClosingBracket(/^\($/, /^\)$/);
                if (definitionEnd === -1) {
                  continue;
                }
                for (; currentIndex < definitionEnd; currentIndex++) {
                  var t2 = getToken2(0);
                  if (t2.type === "variable") {
                    addAlias(t2, "variable-input");
                    inputVariables.push(t2.content);
                  }
                }
                currentIndex = definitionEnd + 1;
              }
              if (isTokenType(["punctuation", "property-query"]) && getToken2(0).content === "{") {
                currentIndex++;
                addAlias(getToken2(0), "property-mutation");
                if (inputVariables.length > 0) {
                  var mutationEnd = findClosingBracket(/^\{$/, /^\}$/);
                  if (mutationEnd === -1) {
                    continue;
                  }
                  for (var i = currentIndex; i < mutationEnd; i++) {
                    var varToken2 = validTokens[i];
                    if (varToken2.type === "variable" && inputVariables.indexOf(varToken2.content) >= 0) {
                      addAlias(varToken2, "variable-input");
                    }
                  }
                }
              }
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/groovy.js
  var require_groovy = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/groovy.js"(exports, module) {
      "use strict";
      module.exports = groovy;
      groovy.displayName = "groovy";
      groovy.aliases = [];
      function groovy(Prism) {
        Prism.languages.groovy = Prism.languages.extend("clike", {
          string: [
            {
              pattern: /("""|''')(?:[^\\]|\\[\s\S])*?\1|\$\/(?:[^/$]|\$(?:[/$]|(?![/$]))|\/(?!\$))*\/\$/,
              greedy: true
            },
            {
              pattern: /(["'/])(?:\\.|(?!\1)[^\\\r\n])*\1/,
              greedy: true
            }
          ],
          keyword: /\b(?:abstract|as|assert|boolean|break|byte|case|catch|char|class|const|continue|def|default|do|double|else|enum|extends|final|finally|float|for|goto|if|implements|import|in|instanceof|int|interface|long|native|new|package|private|protected|public|return|short|static|strictfp|super|switch|synchronized|this|throw|throws|trait|transient|try|void|volatile|while)\b/,
          number: /\b(?:0b[01_]+|0x[\da-f_]+(?:\.[\da-f_p\-]+)?|[\d_]+(?:\.[\d_]+)?(?:e[+-]?\d+)?)[glidf]?\b/i,
          operator: {
            pattern: /(^|[^.])(?:~|==?~?|\?[.:]?|\*(?:[.=]|\*=?)?|\.[@&]|\.\.<|\.\.(?!\.)|-[-=>]?|\+[+=]?|!=?|<(?:<=?|=>?)?|>(?:>>?=?|=)?|&[&=]?|\|[|=]?|\/=?|\^=?|%=?)/,
            lookbehind: true
          },
          punctuation: /\.+|[{}[\];(),:$]/
        });
        Prism.languages.insertBefore("groovy", "string", {
          shebang: {
            pattern: /#!.+/,
            alias: "comment"
          }
        });
        Prism.languages.insertBefore("groovy", "punctuation", {
          "spock-block": /\b(?:and|cleanup|expect|given|setup|then|when|where):/
        });
        Prism.languages.insertBefore("groovy", "function", {
          annotation: {
            pattern: /(^|[^.])@\w+/,
            lookbehind: true,
            alias: "punctuation"
          }
        });
        Prism.hooks.add("wrap", function(env) {
          if (env.language === "groovy" && env.type === "string") {
            var delimiter = env.content.value[0];
            if (delimiter != "'") {
              var pattern = /([^\\])(?:\$(?:\{.*?\}|[\w.]+))/;
              if (delimiter === "$") {
                pattern = /([^\$])(?:\$(?:\{.*?\}|[\w.]+))/;
              }
              env.content.value = env.content.value.replace(/&lt;/g, "<").replace(/&amp;/g, "&");
              env.content = Prism.highlight(env.content.value, {
                expression: {
                  pattern,
                  lookbehind: true,
                  inside: Prism.languages.groovy
                }
              });
              env.classes.push(delimiter === "/" ? "regex" : "gstring");
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/haml.js
  var require_haml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/haml.js"(exports, module) {
      "use strict";
      var refractorRuby = require_ruby();
      module.exports = haml;
      haml.displayName = "haml";
      haml.aliases = [];
      function haml(Prism) {
        Prism.register(refractorRuby);
        (function(Prism2) {
          Prism2.languages.haml = {
            "multiline-comment": {
              pattern: /((?:^|\r?\n|\r)([\t ]*))(?:\/|-#).*(?:(?:\r?\n|\r)\2[\t ].+)*/,
              lookbehind: true,
              alias: "comment"
            },
            "multiline-code": [
              {
                pattern: /((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*,[\t ]*(?:(?:\r?\n|\r)\2[\t ].*,[\t ]*)*(?:(?:\r?\n|\r)\2[\t ].+)/,
                lookbehind: true,
                inside: Prism2.languages.ruby
              },
              {
                pattern: /((?:^|\r?\n|\r)([\t ]*)(?:[~-]|[&!]?=)).*\|[\t ]*(?:(?:\r?\n|\r)\2[\t ].*\|[\t ]*)*/,
                lookbehind: true,
                inside: Prism2.languages.ruby
              }
            ],
            filter: {
              pattern: /((?:^|\r?\n|\r)([\t ]*)):[\w-]+(?:(?:\r?\n|\r)(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/,
              lookbehind: true,
              inside: {
                "filter-name": {
                  pattern: /^:[\w-]+/,
                  alias: "symbol"
                }
              }
            },
            markup: {
              pattern: /((?:^|\r?\n|\r)[\t ]*)<.+/,
              lookbehind: true,
              inside: Prism2.languages.markup
            },
            doctype: {
              pattern: /((?:^|\r?\n|\r)[\t ]*)!!!(?: .+)?/,
              lookbehind: true
            },
            tag: {
              pattern: /((?:^|\r?\n|\r)[\t ]*)[%.#][\w\-#.]*[\w\-](?:\([^)]+\)|\{(?:\{[^}]+\}|[^{}])+\}|\[[^\]]+\])*[\/<>]*/,
              lookbehind: true,
              inside: {
                attributes: [
                  {
                    pattern: /(^|[^#])\{(?:\{[^}]+\}|[^{}])+\}/,
                    lookbehind: true,
                    inside: Prism2.languages.ruby
                  },
                  {
                    pattern: /\([^)]+\)/,
                    inside: {
                      "attr-value": {
                        pattern: /(=\s*)(?:"(?:\\.|[^\\"\r\n])*"|[^)\s]+)/,
                        lookbehind: true
                      },
                      "attr-name": /[\w:-]+(?=\s*!?=|\s*[,)])/,
                      punctuation: /[=(),]/
                    }
                  },
                  {
                    pattern: /\[[^\]]+\]/,
                    inside: Prism2.languages.ruby
                  }
                ],
                punctuation: /[<>]/
              }
            },
            code: {
              pattern: /((?:^|\r?\n|\r)[\t ]*(?:[~-]|[&!]?=)).+/,
              lookbehind: true,
              inside: Prism2.languages.ruby
            },
            interpolation: {
              pattern: /#\{[^}]+\}/,
              inside: {
                delimiter: {
                  pattern: /^#\{|\}$/,
                  alias: "punctuation"
                },
                ruby: {
                  pattern: /[\s\S]+/,
                  inside: Prism2.languages.ruby
                }
              }
            },
            punctuation: {
              pattern: /((?:^|\r?\n|\r)[\t ]*)[~=\-&!]+/,
              lookbehind: true
            }
          };
          var filter_pattern = "((?:^|\\r?\\n|\\r)([\\t ]*)):{{filter_name}}(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+";
          var filters = [
            "css",
            {
              filter: "coffee",
              language: "coffeescript"
            },
            "erb",
            "javascript",
            "less",
            "markdown",
            "ruby",
            "scss",
            "textile"
          ];
          var all_filters = {};
          for (var i = 0, l = filters.length; i < l; i++) {
            var filter3 = filters[i];
            filter3 = typeof filter3 === "string" ? {
              filter: filter3,
              language: filter3
            } : filter3;
            if (Prism2.languages[filter3.language]) {
              all_filters["filter-" + filter3.filter] = {
                pattern: RegExp(
                  filter_pattern.replace("{{filter_name}}", function() {
                    return filter3.filter;
                  })
                ),
                lookbehind: true,
                inside: {
                  "filter-name": {
                    pattern: /^:[\w-]+/,
                    alias: "symbol"
                  },
                  text: {
                    pattern: /[\s\S]+/,
                    alias: [filter3.language, "language-" + filter3.language],
                    inside: Prism2.languages[filter3.language]
                  }
                }
              };
            }
          }
          Prism2.languages.insertBefore("haml", "filter", all_filters);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/handlebars.js
  var require_handlebars = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/handlebars.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = handlebars;
      handlebars.displayName = "handlebars";
      handlebars.aliases = ["hbs"];
      function handlebars(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.handlebars = {
            comment: /\{\{![\s\S]*?\}\}/,
            delimiter: {
              pattern: /^\{\{\{?|\}\}\}?$/,
              alias: "punctuation"
            },
            string: /(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,
            number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,
            boolean: /\b(?:false|true)\b/,
            block: {
              pattern: /^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/,
              lookbehind: true,
              alias: "keyword"
            },
            brackets: {
              pattern: /\[[^\]]+\]/,
              inside: {
                punctuation: /\[|\]/,
                variable: /[\s\S]+/
              }
            },
            punctuation: /[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,
            variable: /[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/
          };
          Prism2.hooks.add("before-tokenize", function(env) {
            var handlebarsPattern = /\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "handlebars",
              handlebarsPattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(
              env,
              "handlebars"
            );
          });
          Prism2.languages.hbs = Prism2.languages.handlebars;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/haskell.js
  var require_haskell = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/haskell.js"(exports, module) {
      "use strict";
      module.exports = haskell;
      haskell.displayName = "haskell";
      haskell.aliases = ["hs"];
      function haskell(Prism) {
        Prism.languages.haskell = {
          comment: {
            pattern: /(^|[^-!#$%*+=?&@|~.:<>^\\\/])(?:--(?:(?=.)[^-!#$%*+=?&@|~.:<>^\\\/].*|$)|\{-[\s\S]*?-\})/m,
            lookbehind: true
          },
          char: {
            pattern: /'(?:[^\\']|\\(?:[abfnrtv\\"'&]|\^[A-Z@[\]^_]|ACK|BEL|BS|CAN|CR|DC1|DC2|DC3|DC4|DEL|DLE|EM|ENQ|EOT|ESC|ETB|ETX|FF|FS|GS|HT|LF|NAK|NUL|RS|SI|SO|SOH|SP|STX|SUB|SYN|US|VT|\d+|o[0-7]+|x[0-9a-fA-F]+))'/,
            alias: "string"
          },
          string: {
            pattern: /"(?:[^\\"]|\\(?:\S|\s+\\))*"/,
            greedy: true
          },
          keyword: /\b(?:case|class|data|deriving|do|else|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b/,
          "import-statement": {
            pattern: /(^[\t ]*)import\s+(?:qualified\s+)?(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*(?:\s+as\s+(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,
            lookbehind: true,
            inside: {
              keyword: /\b(?:as|hiding|import|qualified)\b/,
              punctuation: /\./
            }
          },
          builtin: /\b(?:abs|acos|acosh|all|and|any|appendFile|approxRational|asTypeOf|asin|asinh|atan|atan2|atanh|basicIORun|break|catch|ceiling|chr|compare|concat|concatMap|const|cos|cosh|curry|cycle|decodeFloat|denominator|digitToInt|div|divMod|drop|dropWhile|either|elem|encodeFloat|enumFrom|enumFromThen|enumFromThenTo|enumFromTo|error|even|exp|exponent|fail|filter|flip|floatDigits|floatRadix|floatRange|floor|fmap|foldl|foldl1|foldr|foldr1|fromDouble|fromEnum|fromInt|fromInteger|fromIntegral|fromRational|fst|gcd|getChar|getContents|getLine|group|head|id|inRange|index|init|intToDigit|interact|ioError|isAlpha|isAlphaNum|isAscii|isControl|isDenormalized|isDigit|isHexDigit|isIEEE|isInfinite|isLower|isNaN|isNegativeZero|isOctDigit|isPrint|isSpace|isUpper|iterate|last|lcm|length|lex|lexDigits|lexLitChar|lines|log|logBase|lookup|map|mapM|mapM_|max|maxBound|maximum|maybe|min|minBound|minimum|mod|negate|not|notElem|null|numerator|odd|or|ord|otherwise|pack|pi|pred|primExitWith|print|product|properFraction|putChar|putStr|putStrLn|quot|quotRem|range|rangeSize|read|readDec|readFile|readFloat|readHex|readIO|readInt|readList|readLitChar|readLn|readOct|readParen|readSigned|reads|readsPrec|realToFrac|recip|rem|repeat|replicate|return|reverse|round|scaleFloat|scanl|scanl1|scanr|scanr1|seq|sequence|sequence_|show|showChar|showInt|showList|showLitChar|showParen|showSigned|showString|shows|showsPrec|significand|signum|sin|sinh|snd|sort|span|splitAt|sqrt|subtract|succ|sum|tail|take|takeWhile|tan|tanh|threadToIOResult|toEnum|toInt|toInteger|toLower|toRational|toUpper|truncate|uncurry|undefined|unlines|until|unwords|unzip|unzip3|userError|words|writeFile|zip|zip3|zipWith|zipWith3)\b/,
          number: /\b(?:\d+(?:\.\d+)?(?:e[+-]?\d+)?|0o[0-7]+|0x[0-9a-f]+)\b/i,
          operator: [
            {
              pattern: /`(?:[A-Z][\w']*\.)*[_a-z][\w']*`/,
              greedy: true
            },
            {
              pattern: /(\s)\.(?=\s)/,
              lookbehind: true
            },
            /[-!#$%*+=?&@|~:<>^\\\/][-!#$%*+=?&@|~.:<>^\\\/]*|\.[-!#$%*+=?&@|~.:<>^\\\/]+/
          ],
          hvariable: {
            pattern: /\b(?:[A-Z][\w']*\.)*[_a-z][\w']*/,
            inside: {
              punctuation: /\./
            }
          },
          constant: {
            pattern: /\b(?:[A-Z][\w']*\.)*[A-Z][\w']*/,
            inside: {
              punctuation: /\./
            }
          },
          punctuation: /[{}[\];(),.:]/
        };
        Prism.languages.hs = Prism.languages.haskell;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/haxe.js
  var require_haxe = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/haxe.js"(exports, module) {
      "use strict";
      module.exports = haxe;
      haxe.displayName = "haxe";
      haxe.aliases = [];
      function haxe(Prism) {
        Prism.languages.haxe = Prism.languages.extend("clike", {
          string: {
            pattern: /"(?:[^"\\]|\\[\s\S])*"/,
            greedy: true
          },
          "class-name": [
            {
              pattern: /(\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\s+)[A-Z_]\w*/,
              lookbehind: true
            },
            /\b[A-Z]\w*/
          ],
          keyword: /\bthis\b|\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\.)\b/,
          function: {
            pattern: /\b[a-z_]\w*(?=\s*(?:<[^<>]*>\s*)?\()/i,
            greedy: true
          },
          operator: /\.{3}|\+\+|--|&&|\|\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/
        });
        Prism.languages.insertBefore("haxe", "string", {
          "string-interpolation": {
            pattern: /'(?:[^'\\]|\\[\s\S])*'/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /(^|[^\\])\$(?:\w+|\{[^{}]+\})/,
                lookbehind: true,
                inside: {
                  "interpolation-punctuation": {
                    pattern: /^\$\{?|\}$/,
                    alias: "punctuation"
                  },
                  expression: {
                    pattern: /[\s\S]+/,
                    inside: Prism.languages.haxe
                  }
                }
              },
              string: /[\s\S]+/
            }
          }
        });
        Prism.languages.insertBefore("haxe", "class-name", {
          regex: {
            pattern: /~\/(?:[^\/\\\r\n]|\\.)+\/[a-z]*/,
            greedy: true,
            inside: {
              "regex-flags": /\b[a-z]+$/,
              "regex-source": {
                pattern: /^(~\/)[\s\S]+(?=\/$)/,
                lookbehind: true,
                alias: "language-regex",
                inside: Prism.languages.regex
              },
              "regex-delimiter": /^~\/|\/$/
            }
          }
        });
        Prism.languages.insertBefore("haxe", "keyword", {
          preprocessor: {
            pattern: /#(?:else|elseif|end|if)\b.*/,
            alias: "property"
          },
          metadata: {
            pattern: /@:?[\w.]+/,
            alias: "symbol"
          },
          reification: {
            pattern: /\$(?:\w+|(?=\{))/,
            alias: "important"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/hcl.js
  var require_hcl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/hcl.js"(exports, module) {
      "use strict";
      module.exports = hcl;
      hcl.displayName = "hcl";
      hcl.aliases = [];
      function hcl(Prism) {
        Prism.languages.hcl = {
          comment: /(?:\/\/|#).*|\/\*[\s\S]*?(?:\*\/|$)/,
          heredoc: {
            pattern: /<<-?(\w+\b)[\s\S]*?^[ \t]*\1/m,
            greedy: true,
            alias: "string"
          },
          keyword: [
            {
              pattern: /(?:data|resource)\s+(?:"(?:\\[\s\S]|[^\\"])*")(?=\s+"[\w-]+"\s+\{)/i,
              inside: {
                type: {
                  pattern: /(resource|data|\s+)(?:"(?:\\[\s\S]|[^\\"])*")/i,
                  lookbehind: true,
                  alias: "variable"
                }
              }
            },
            {
              pattern: /(?:backend|module|output|provider|provisioner|variable)\s+(?:[\w-]+|"(?:\\[\s\S]|[^\\"])*")\s+(?=\{)/i,
              inside: {
                type: {
                  pattern: /(backend|module|output|provider|provisioner|variable)\s+(?:[\w-]+|"(?:\\[\s\S]|[^\\"])*")\s+/i,
                  lookbehind: true,
                  alias: "variable"
                }
              }
            },
            /[\w-]+(?=\s+\{)/
          ],
          property: [/[-\w\.]+(?=\s*=(?!=))/, /"(?:\\[\s\S]|[^\\"])+"(?=\s*[:=])/],
          string: {
            pattern: /"(?:[^\\$"]|\\[\s\S]|\$(?:(?=")|\$+(?!\$)|[^"${])|\$\{(?:[^{}"]|"(?:[^\\"]|\\[\s\S])*")*\})*"/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /(^|[^$])\$\{(?:[^{}"]|"(?:[^\\"]|\\[\s\S])*")*\}/,
                lookbehind: true,
                inside: {
                  type: {
                    pattern: /(\b(?:count|data|local|module|path|self|terraform|var)\b\.)[\w\*]+/i,
                    lookbehind: true,
                    alias: "variable"
                  },
                  keyword: /\b(?:count|data|local|module|path|self|terraform|var)\b/i,
                  function: /\w+(?=\()/,
                  string: {
                    pattern: /"(?:\\[\s\S]|[^\\"])*"/,
                    greedy: true
                  },
                  number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
                  punctuation: /[!\$#%&'()*+,.\/;<=>@\[\\\]^`{|}~?:]/
                }
              }
            }
          },
          number: /\b0x[\da-f]+\b|\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
          boolean: /\b(?:false|true)\b/i,
          punctuation: /[=\[\]{}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/hlsl.js
  var require_hlsl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/hlsl.js"(exports, module) {
      "use strict";
      var refractorC = require_c();
      module.exports = hlsl;
      hlsl.displayName = "hlsl";
      hlsl.aliases = [];
      function hlsl(Prism) {
        Prism.register(refractorC);
        Prism.languages.hlsl = Prism.languages.extend("c", {
          "class-name": [
            Prism.languages.c["class-name"],
            /\b(?:AppendStructuredBuffer|BlendState|Buffer|ByteAddressBuffer|CompileShader|ComputeShader|ConsumeStructuredBuffer|DepthStencilState|DepthStencilView|DomainShader|GeometryShader|Hullshader|InputPatch|LineStream|OutputPatch|PixelShader|PointStream|RWBuffer|RWByteAddressBuffer|RWStructuredBuffer|RWTexture(?:1D|1DArray|2D|2DArray|3D)|RasterizerState|RenderTargetView|SamplerComparisonState|SamplerState|StructuredBuffer|Texture(?:1D|1DArray|2D|2DArray|2DMS|2DMSArray|3D|Cube|CubeArray)|TriangleStream|VertexShader)\b/
          ],
          keyword: [
            /\b(?:asm|asm_fragment|auto|break|case|catch|cbuffer|centroid|char|class|column_major|compile|compile_fragment|const|const_cast|continue|default|delete|discard|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|fxgroup|goto|groupshared|if|in|inline|inout|interface|line|lineadj|linear|long|matrix|mutable|namespace|new|nointerpolation|noperspective|operator|out|packoffset|pass|pixelfragment|point|precise|private|protected|public|register|reinterpret_cast|return|row_major|sample|sampler|shared|short|signed|sizeof|snorm|stateblock|stateblock_state|static|static_cast|string|struct|switch|tbuffer|technique|technique10|technique11|template|texture|this|throw|triangle|triangleadj|try|typedef|typename|uniform|union|unorm|unsigned|using|vector|vertexfragment|virtual|void|volatile|while)\b/,
            /\b(?:bool|double|dword|float|half|int|min(?:10float|12int|16(?:float|int|uint))|uint)(?:[1-4](?:x[1-4])?)?\b/
          ],
          number: /(?:(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?|\b0x[\da-fA-F]+)[fFhHlLuU]?\b/,
          boolean: /\b(?:false|true)\b/
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/hoon.js
  var require_hoon = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/hoon.js"(exports, module) {
      "use strict";
      module.exports = hoon;
      hoon.displayName = "hoon";
      hoon.aliases = [];
      function hoon(Prism) {
        Prism.languages.hoon = {
          comment: {
            pattern: /::.*/,
            greedy: true
          },
          string: {
            pattern: /"[^"]*"|'[^']*'/,
            greedy: true
          },
          constant: /%(?:\.[ny]|[\w-]+)/,
          "class-name": /@(?:[a-z0-9-]*[a-z0-9])?|\*/i,
          function: /(?:\+[-+] {2})?(?:[a-z](?:[a-z0-9-]*[a-z0-9])?)/,
          keyword: /\.[\^\+\*=\?]|![><:\.=\?!]|=[>|:,\.\-\^<+;/~\*\?]|\?[>|:\.\-\^<\+&~=@!]|\|[\$_%:\.\-\^~\*=@\?]|\+[|\$\+\*]|:[_\-\^\+~\*]|%[_:\.\-\^\+~\*=]|\^[|:\.\-\+&~\*=\?]|\$[|_%:<>\-\^&~@=\?]|;[:<\+;\/~\*=]|~[>|\$_%<\+\/&=\?!]|--|==/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/hpkp.js
  var require_hpkp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/hpkp.js"(exports, module) {
      "use strict";
      module.exports = hpkp;
      hpkp.displayName = "hpkp";
      hpkp.aliases = [];
      function hpkp(Prism) {
        Prism.languages.hpkp = {
          directive: {
            pattern: /\b(?:includeSubDomains|max-age|pin-sha256|preload|report-to|report-uri|strict)(?=[\s;=]|$)/i,
            alias: "property"
          },
          operator: /=/,
          punctuation: /;/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/hsts.js
  var require_hsts = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/hsts.js"(exports, module) {
      "use strict";
      module.exports = hsts;
      hsts.displayName = "hsts";
      hsts.aliases = [];
      function hsts(Prism) {
        Prism.languages.hsts = {
          directive: {
            pattern: /\b(?:includeSubDomains|max-age|preload)(?=[\s;=]|$)/i,
            alias: "property"
          },
          operator: /=/,
          punctuation: /;/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/http.js
  var require_http = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/http.js"(exports, module) {
      "use strict";
      module.exports = http;
      http.displayName = "http";
      http.aliases = [];
      function http(Prism) {
        ;
        (function(Prism2) {
          function headerValueOf(name) {
            return RegExp("(^(?:" + name + "):[ 	]*(?![ 	]))[^]+", "i");
          }
          Prism2.languages.http = {
            "request-line": {
              pattern: /^(?:CONNECT|DELETE|GET|HEAD|OPTIONS|PATCH|POST|PRI|PUT|SEARCH|TRACE)\s(?:https?:\/\/|\/)\S*\sHTTP\/[\d.]+/m,
              inside: {
                method: {
                  pattern: /^[A-Z]+\b/,
                  alias: "property"
                },
                "request-target": {
                  pattern: /^(\s)(?:https?:\/\/|\/)\S*(?=\s)/,
                  lookbehind: true,
                  alias: "url",
                  inside: Prism2.languages.uri
                },
                "http-version": {
                  pattern: /^(\s)HTTP\/[\d.]+/,
                  lookbehind: true,
                  alias: "property"
                }
              }
            },
            "response-status": {
              pattern: /^HTTP\/[\d.]+ \d+ .+/m,
              inside: {
                "http-version": {
                  pattern: /^HTTP\/[\d.]+/,
                  alias: "property"
                },
                "status-code": {
                  pattern: /^(\s)\d+(?=\s)/,
                  lookbehind: true,
                  alias: "number"
                },
                "reason-phrase": {
                  pattern: /^(\s).+/,
                  lookbehind: true,
                  alias: "string"
                }
              }
            },
            header: {
              pattern: /^[\w-]+:.+(?:(?:\r\n?|\n)[ \t].+)*/m,
              inside: {
                "header-value": [
                  {
                    pattern: headerValueOf(/Content-Security-Policy/.source),
                    lookbehind: true,
                    alias: ["csp", "languages-csp"],
                    inside: Prism2.languages.csp
                  },
                  {
                    pattern: headerValueOf(/Public-Key-Pins(?:-Report-Only)?/.source),
                    lookbehind: true,
                    alias: ["hpkp", "languages-hpkp"],
                    inside: Prism2.languages.hpkp
                  },
                  {
                    pattern: headerValueOf(/Strict-Transport-Security/.source),
                    lookbehind: true,
                    alias: ["hsts", "languages-hsts"],
                    inside: Prism2.languages.hsts
                  },
                  {
                    pattern: headerValueOf(/[^:]+/.source),
                    lookbehind: true
                  }
                ],
                "header-name": {
                  pattern: /^[^:]+/,
                  alias: "keyword"
                },
                punctuation: /^:/
              }
            }
          };
          var langs = Prism2.languages;
          var httpLanguages = {
            "application/javascript": langs.javascript,
            "application/json": langs.json || langs.javascript,
            "application/xml": langs.xml,
            "text/xml": langs.xml,
            "text/html": langs.html,
            "text/css": langs.css,
            "text/plain": langs.plain
          };
          var suffixTypes = {
            "application/json": true,
            "application/xml": true
          };
          function getSuffixPattern(contentType2) {
            var suffix = contentType2.replace(/^[a-z]+\//, "");
            var suffixPattern = "\\w+/(?:[\\w.-]+\\+)+" + suffix + "(?![+\\w.-])";
            return "(?:" + contentType2 + "|" + suffixPattern + ")";
          }
          var options;
          for (var contentType in httpLanguages) {
            if (httpLanguages[contentType]) {
              options = options || {};
              var pattern = suffixTypes[contentType] ? getSuffixPattern(contentType) : contentType;
              options[contentType.replace(/\//g, "-")] = {
                pattern: RegExp(
                  "(" + /content-type:\s*/.source + pattern + /(?:(?:\r\n?|\n)[\w-].*)*(?:\r(?:\n|(?!\n))|\n)/.source + ")" + /[^ \t\w-][\s\S]*/.source,
                  "i"
                ),
                lookbehind: true,
                inside: httpLanguages[contentType]
              };
            }
          }
          if (options) {
            Prism2.languages.insertBefore("http", "header", options);
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ichigojam.js
  var require_ichigojam = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ichigojam.js"(exports, module) {
      "use strict";
      module.exports = ichigojam;
      ichigojam.displayName = "ichigojam";
      ichigojam.aliases = [];
      function ichigojam(Prism) {
        Prism.languages.ichigojam = {
          comment: /(?:\B'|REM)(?:[^\n\r]*)/i,
          string: {
            pattern: /"(?:""|[!#$%&'()*,\/:;<=>?^\w +\-.])*"/,
            greedy: true
          },
          number: /\B#[0-9A-F]+|\B`[01]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i,
          keyword: /\b(?:BEEP|BPS|CASE|CLEAR|CLK|CLO|CLP|CLS|CLT|CLV|CONT|COPY|ELSE|END|FILE|FILES|FOR|GOSUB|GOTO|GSB|IF|INPUT|KBD|LED|LET|LIST|LOAD|LOCATE|LRUN|NEW|NEXT|OUT|PLAY|POKE|PRINT|PWM|REM|RENUM|RESET|RETURN|RIGHT|RTN|RUN|SAVE|SCROLL|SLEEP|SRND|STEP|STOP|SUB|TEMPO|THEN|TO|UART|VIDEO|WAIT)(?:\$|\b)/i,
          function: /\b(?:ABS|ANA|ASC|BIN|BTN|DEC|END|FREE|HELP|HEX|I2CR|I2CW|IN|INKEY|LEN|LINE|PEEK|RND|SCR|SOUND|STR|TICK|USR|VER|VPEEK|ZER)(?:\$|\b)/i,
          label: /(?:\B@\S+)/,
          operator: /<[=>]?|>=?|\|\||&&|[+\-*\/=|&^~!]|\b(?:AND|NOT|OR)\b/i,
          punctuation: /[\[,;:()\]]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/icon.js
  var require_icon = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/icon.js"(exports, module) {
      "use strict";
      module.exports = icon;
      icon.displayName = "icon";
      icon.aliases = [];
      function icon(Prism) {
        Prism.languages.icon = {
          comment: /#.*/,
          string: {
            pattern: /(["'])(?:(?!\1)[^\\\r\n_]|\\.|_(?!\1)(?:\r\n|[\s\S]))*\1/,
            greedy: true
          },
          number: /\b(?:\d+r[a-z\d]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b|\.\d+\b/i,
          "builtin-keyword": {
            pattern: /&(?:allocated|ascii|clock|collections|cset|current|date|dateline|digits|dump|e|error(?:number|text|value)?|errout|fail|features|file|host|input|lcase|letters|level|line|main|null|output|phi|pi|pos|progname|random|regions|source|storage|subject|time|trace|ucase|version)\b/,
            alias: "variable"
          },
          directive: {
            pattern: /\$\w+/,
            alias: "builtin"
          },
          keyword: /\b(?:break|by|case|create|default|do|else|end|every|fail|global|if|initial|invocable|link|local|next|not|of|procedure|record|repeat|return|static|suspend|then|to|until|while)\b/,
          function: /\b(?!\d)\w+(?=\s*[({]|\s*!\s*\[)/,
          operator: /[+-]:(?!=)|(?:[\/?@^%&]|\+\+?|--?|==?=?|~==?=?|\*\*?|\|\|\|?|<(?:->?|<?=?)|>>?=?)(?::=)?|:(?:=:?)?|[!.\\|~]/,
          punctuation: /[\[\](){},;]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/icu-message-format.js
  var require_icu_message_format = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/icu-message-format.js"(exports, module) {
      "use strict";
      module.exports = icuMessageFormat;
      icuMessageFormat.displayName = "icuMessageFormat";
      icuMessageFormat.aliases = [];
      function icuMessageFormat(Prism) {
        ;
        (function(Prism2) {
          function nested(source, level) {
            if (level <= 0) {
              return /[]/.source;
            } else {
              return source.replace(/<SELF>/g, function() {
                return nested(source, level - 1);
              });
            }
          }
          var stringPattern = /'[{}:=,](?:[^']|'')*'(?!')/;
          var escape3 = {
            pattern: /''/,
            greedy: true,
            alias: "operator"
          };
          var string3 = {
            pattern: stringPattern,
            greedy: true,
            inside: {
              escape: escape3
            }
          };
          var argumentSource = nested(
            /\{(?:[^{}']|'(?![{},'])|''|<STR>|<SELF>)*\}/.source.replace(
              /<STR>/g,
              function() {
                return stringPattern.source;
              }
            ),
            8
          );
          var nestedMessage = {
            pattern: RegExp(argumentSource),
            inside: {
              message: {
                pattern: /^(\{)[\s\S]+(?=\}$)/,
                lookbehind: true,
                inside: null
              },
              "message-delimiter": {
                pattern: /./,
                alias: "punctuation"
              }
            }
          };
          Prism2.languages["icu-message-format"] = {
            argument: {
              pattern: RegExp(argumentSource),
              greedy: true,
              inside: {
                content: {
                  pattern: /^(\{)[\s\S]+(?=\}$)/,
                  lookbehind: true,
                  inside: {
                    "argument-name": {
                      pattern: /^(\s*)[^{}:=,\s]+/,
                      lookbehind: true
                    },
                    "choice-style": {
                      pattern: /^(\s*,\s*choice\s*,\s*)\S(?:[\s\S]*\S)?/,
                      lookbehind: true,
                      inside: {
                        punctuation: /\|/,
                        range: {
                          pattern: /^(\s*)[+-]?(?:\d+(?:\.\d*)?|\u221e)\s*[<#\u2264]/,
                          lookbehind: true,
                          inside: {
                            operator: /[<#\u2264]/,
                            number: /\S+/
                          }
                        },
                        rest: null
                      }
                    },
                    "plural-style": {
                      pattern: /^(\s*,\s*(?:plural|selectordinal)\s*,\s*)\S(?:[\s\S]*\S)?/,
                      lookbehind: true,
                      inside: {
                        offset: /^offset:\s*\d+/,
                        "nested-message": nestedMessage,
                        selector: {
                          pattern: /=\d+|[^{}:=,\s]+/,
                          inside: {
                            keyword: /^(?:few|many|one|other|two|zero)$/
                          }
                        }
                      }
                    },
                    "select-style": {
                      pattern: /^(\s*,\s*select\s*,\s*)\S(?:[\s\S]*\S)?/,
                      lookbehind: true,
                      inside: {
                        "nested-message": nestedMessage,
                        selector: {
                          pattern: /[^{}:=,\s]+/,
                          inside: {
                            keyword: /^other$/
                          }
                        }
                      }
                    },
                    keyword: /\b(?:choice|plural|select|selectordinal)\b/,
                    "arg-type": {
                      pattern: /\b(?:date|duration|number|ordinal|spellout|time)\b/,
                      alias: "keyword"
                    },
                    "arg-skeleton": {
                      pattern: /(,\s*)::[^{}:=,\s]+/,
                      lookbehind: true
                    },
                    "arg-style": {
                      pattern: /(,\s*)(?:currency|full|integer|long|medium|percent|short)(?=\s*$)/,
                      lookbehind: true
                    },
                    "arg-style-text": {
                      pattern: RegExp(
                        /(^\s*,\s*(?=\S))/.source + nested(/(?:[^{}']|'[^']*'|\{(?:<SELF>)?\})+/.source, 8) + "$"
                      ),
                      lookbehind: true,
                      alias: "string"
                    },
                    punctuation: /,/
                  }
                },
                "argument-delimiter": {
                  pattern: /./,
                  alias: "operator"
                }
              }
            },
            escape: escape3,
            string: string3
          };
          nestedMessage.inside.message.inside = Prism2.languages["icu-message-format"];
          Prism2.languages["icu-message-format"].argument.inside.content.inside["choice-style"].inside.rest = Prism2.languages["icu-message-format"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/idris.js
  var require_idris = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/idris.js"(exports, module) {
      "use strict";
      var refractorHaskell = require_haskell();
      module.exports = idris;
      idris.displayName = "idris";
      idris.aliases = ["idr"];
      function idris(Prism) {
        Prism.register(refractorHaskell);
        Prism.languages.idris = Prism.languages.extend("haskell", {
          comment: {
            pattern: /(?:(?:--|\|\|\|).*$|\{-[\s\S]*?-\})/m
          },
          keyword: /\b(?:Type|case|class|codata|constructor|corecord|data|do|dsl|else|export|if|implementation|implicit|import|impossible|in|infix|infixl|infixr|instance|interface|let|module|mutual|namespace|of|parameters|partial|postulate|private|proof|public|quoteGoal|record|rewrite|syntax|then|total|using|where|with)\b/,
          builtin: void 0
        });
        Prism.languages.insertBefore("idris", "keyword", {
          "import-statement": {
            pattern: /(^\s*import\s+)(?:[A-Z][\w']*)(?:\.[A-Z][\w']*)*/m,
            lookbehind: true,
            inside: {
              punctuation: /\./
            }
          }
        });
        Prism.languages.idr = Prism.languages.idris;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/iecst.js
  var require_iecst = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/iecst.js"(exports, module) {
      "use strict";
      module.exports = iecst;
      iecst.displayName = "iecst";
      iecst.aliases = [];
      function iecst(Prism) {
        Prism.languages.iecst = {
          comment: [
            {
              pattern: /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\(\*[\s\S]*?(?:\*\)|$)|\{[\s\S]*?(?:\}|$))/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          string: {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          keyword: [
            /\b(?:END_)?(?:PROGRAM|CONFIGURATION|INTERFACE|FUNCTION_BLOCK|FUNCTION|ACTION|TRANSITION|TYPE|STRUCT|(?:INITIAL_)?STEP|NAMESPACE|LIBRARY|CHANNEL|FOLDER|RESOURCE|VAR_(?:ACCESS|CONFIG|EXTERNAL|GLOBAL|INPUT|IN_OUT|OUTPUT|TEMP)|VAR|METHOD|PROPERTY)\b/i,
            /\b(?:AT|BY|(?:END_)?(?:CASE|FOR|IF|REPEAT|WHILE)|CONSTANT|CONTINUE|DO|ELSE|ELSIF|EXIT|EXTENDS|FROM|GET|GOTO|IMPLEMENTS|JMP|NON_RETAIN|OF|PRIVATE|PROTECTED|PUBLIC|RETAIN|RETURN|SET|TASK|THEN|TO|UNTIL|USING|WITH|__CATCH|__ENDTRY|__FINALLY|__TRY)\b/
          ],
          "class-name": /\b(?:ANY|ARRAY|BOOL|BYTE|U?(?:D|L|S)?INT|(?:D|L)?WORD|DATE(?:_AND_TIME)?|DT|L?REAL|POINTER|STRING|TIME(?:_OF_DAY)?|TOD)\b/,
          address: {
            pattern: /%[IQM][XBWDL][\d.]*|%[IQ][\d.]*/,
            alias: "symbol"
          },
          number: /\b(?:16#[\da-f]+|2#[01_]+|0x[\da-f]+)\b|\b(?:D|DT|T|TOD)#[\d_shmd:]*|\b[A-Z]*#[\d.,_]*|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
          boolean: /\b(?:FALSE|NULL|TRUE)\b/,
          operator: /S?R?:?=>?|&&?|\*\*?|<[=>]?|>=?|[-:^/+#]|\b(?:AND|EQ|EXPT|GE|GT|LE|LT|MOD|NE|NOT|OR|XOR)\b/,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          punctuation: /[()[\].,;]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ignore.js
  var require_ignore = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ignore.js"(exports, module) {
      "use strict";
      module.exports = ignore2;
      ignore2.displayName = "ignore";
      ignore2.aliases = ["gitignore", "hgignore", "npmignore"];
      function ignore2(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.ignore = {
            comment: /^#.*/m,
            entry: {
              pattern: /\S(?:.*(?:(?:\\ )|\S))?/,
              alias: "string",
              inside: {
                operator: /^!|\*\*?|\?/,
                regex: {
                  pattern: /(^|[^\\])\[[^\[\]]*\]/,
                  lookbehind: true
                },
                punctuation: /\//
              }
            }
          };
          Prism2.languages.gitignore = Prism2.languages.ignore;
          Prism2.languages.hgignore = Prism2.languages.ignore;
          Prism2.languages.npmignore = Prism2.languages.ignore;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/inform7.js
  var require_inform7 = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/inform7.js"(exports, module) {
      "use strict";
      module.exports = inform7;
      inform7.displayName = "inform7";
      inform7.aliases = [];
      function inform7(Prism) {
        Prism.languages.inform7 = {
          string: {
            pattern: /"[^"]*"/,
            inside: {
              substitution: {
                pattern: /\[[^\[\]]+\]/,
                inside: {
                  delimiter: {
                    pattern: /\[|\]/,
                    alias: "punctuation"
                  }
                }
              }
            }
          },
          comment: {
            pattern: /\[[^\[\]]+\]/,
            greedy: true
          },
          title: {
            pattern: /^[ \t]*(?:book|chapter|part(?! of)|section|table|volume)\b.+/im,
            alias: "important"
          },
          number: {
            pattern: /(^|[^-])(?:\b\d+(?:\.\d+)?(?:\^\d+)?(?:(?!\d)\w+)?|\b(?:eight|eleven|five|four|nine|one|seven|six|ten|three|twelve|two))\b(?!-)/i,
            lookbehind: true
          },
          verb: {
            pattern: /(^|[^-])\b(?:answering|applying to|are|asking|attacking|be(?:ing)?|burning|buying|called|carries|carry(?! out)|carrying|climbing|closing|conceal(?:ing|s)?|consulting|contain(?:ing|s)?|cutting|drinking|dropping|eating|enclos(?:es?|ing)|entering|examining|exiting|getting|giving|going|ha(?:s|ve|ving)|hold(?:ing|s)?|impl(?:ies|y)|incorporat(?:es?|ing)|inserting|is|jumping|kissing|listening|locking|looking|mean(?:ing|s)?|opening|provid(?:es?|ing)|pulling|pushing|putting|relat(?:es?|ing)|removing|searching|see(?:ing|s)?|setting|showing|singing|sleeping|smelling|squeezing|support(?:ing|s)?|swearing|switching|taking|tasting|telling|thinking|throwing|touching|turning|tying|unlock(?:ing|s)?|var(?:ies|y|ying)|waiting|waking|waving|wear(?:ing|s)?)\b(?!-)/i,
            lookbehind: true,
            alias: "operator"
          },
          keyword: {
            pattern: /(^|[^-])\b(?:after|before|carry out|check|continue the action|definition(?= *:)|do nothing|else|end (?:if|the story|unless)|every turn|if|include|instead(?: of)?|let|move|no|now|otherwise|repeat|report|resume the story|rule for|running through|say(?:ing)?|stop the action|test|try(?:ing)?|understand|unless|use|when|while|yes)\b(?!-)/i,
            lookbehind: true
          },
          property: {
            pattern: /(^|[^-])\b(?:adjacent(?! to)|carried|closed|concealed|contained|dark|described|edible|empty|enclosed|enterable|even|female|fixed in place|full|handled|held|improper-named|incorporated|inedible|invisible|lighted|lit|lock(?:able|ed)|male|marked for listing|mentioned|negative|neuter|non-(?:empty|full|recurring)|odd|opaque|open(?:able)?|plural-named|portable|positive|privately-named|proper-named|provided|publically-named|pushable between rooms|recurring|related|rubbing|scenery|seen|singular-named|supported|swinging|switch(?:able|ed(?: off| on)?)|touch(?:able|ed)|transparent|unconcealed|undescribed|unlit|unlocked|unmarked for listing|unmentioned|unopenable|untouchable|unvisited|variable|visible|visited|wearable|worn)\b(?!-)/i,
            lookbehind: true,
            alias: "symbol"
          },
          position: {
            pattern: /(^|[^-])\b(?:above|adjacent to|back side of|below|between|down|east|everywhere|front side|here|in|inside(?: from)?|north(?:east|west)?|nowhere|on(?: top of)?|other side|outside(?: from)?|parts? of|regionally in|south(?:east|west)?|through|up|west|within)\b(?!-)/i,
            lookbehind: true,
            alias: "keyword"
          },
          type: {
            pattern: /(^|[^-])\b(?:actions?|activit(?:ies|y)|actors?|animals?|backdrops?|containers?|devices?|directions?|doors?|holders?|kinds?|lists?|m[ae]n|nobody|nothing|nouns?|numbers?|objects?|people|persons?|player(?:'s holdall)?|regions?|relations?|rooms?|rule(?:book)?s?|scenes?|someone|something|supporters?|tables?|texts?|things?|time|vehicles?|wom[ae]n)\b(?!-)/i,
            lookbehind: true,
            alias: "variable"
          },
          punctuation: /[.,:;(){}]/
        };
        Prism.languages.inform7["string"].inside["substitution"].inside.rest = Prism.languages.inform7;
        Prism.languages.inform7["string"].inside["substitution"].inside.rest.text = {
          pattern: /\S(?:\s*\S)*/,
          alias: "comment"
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ini.js
  var require_ini = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ini.js"(exports, module) {
      "use strict";
      module.exports = ini;
      ini.displayName = "ini";
      ini.aliases = [];
      function ini(Prism) {
        Prism.languages.ini = {
          comment: {
            pattern: /(^[ \f\t\v]*)[#;][^\n\r]*/m,
            lookbehind: true
          },
          section: {
            pattern: /(^[ \f\t\v]*)\[[^\n\r\]]*\]?/m,
            lookbehind: true,
            inside: {
              "section-name": {
                pattern: /(^\[[ \f\t\v]*)[^ \f\t\v\]]+(?:[ \f\t\v]+[^ \f\t\v\]]+)*/,
                lookbehind: true,
                alias: "selector"
              },
              punctuation: /\[|\]/
            }
          },
          key: {
            pattern: /(^[ \f\t\v]*)[^ \f\n\r\t\v=]+(?:[ \f\t\v]+[^ \f\n\r\t\v=]+)*(?=[ \f\t\v]*=)/m,
            lookbehind: true,
            alias: "attr-name"
          },
          value: {
            pattern: /(=[ \f\t\v]*)[^ \f\n\r\t\v]+(?:[ \f\t\v]+[^ \f\n\r\t\v]+)*/,
            lookbehind: true,
            alias: "attr-value",
            inside: {
              "inner-value": {
                pattern: /^("|').+(?=\1$)/,
                lookbehind: true
              }
            }
          },
          punctuation: /=/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/io.js
  var require_io = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/io.js"(exports, module) {
      "use strict";
      module.exports = io;
      io.displayName = "io";
      io.aliases = [];
      function io(Prism) {
        Prism.languages.io = {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?(?:\*\/|$)|\/\/.*|#.*)/,
            lookbehind: true,
            greedy: true
          },
          "triple-quoted-string": {
            pattern: /"""(?:\\[\s\S]|(?!""")[^\\])*"""/,
            greedy: true,
            alias: "string"
          },
          string: {
            pattern: /"(?:\\.|[^\\\r\n"])*"/,
            greedy: true
          },
          keyword: /\b(?:activate|activeCoroCount|asString|block|break|call|catch|clone|collectGarbage|compileString|continue|do|doFile|doMessage|doString|else|elseif|exit|for|foreach|forward|getEnvironmentVariable|getSlot|hasSlot|if|ifFalse|ifNil|ifNilEval|ifTrue|isActive|isNil|isResumable|list|message|method|parent|pass|pause|perform|performWithArgList|print|println|proto|raise|raiseResumable|removeSlot|resend|resume|schedulerSleepSeconds|self|sender|setSchedulerSleepSeconds|setSlot|shallowCopy|slotNames|super|system|then|thisBlock|thisContext|try|type|uniqueId|updateSlot|wait|while|write|yield)\b/,
          builtin: /\b(?:Array|AudioDevice|AudioMixer|BigNum|Block|Box|Buffer|CFunction|CGI|Color|Curses|DBM|DNSResolver|DOConnection|DOProxy|DOServer|Date|Directory|Duration|DynLib|Error|Exception|FFT|File|Fnmatch|Font|Future|GL|GLE|GLScissor|GLU|GLUCylinder|GLUQuadric|GLUSphere|GLUT|Host|Image|Importer|LinkList|List|Lobby|Locals|MD5|MP3Decoder|MP3Encoder|Map|Message|Movie|Notification|Number|Object|OpenGL|Point|Protos|Random|Regex|SGML|SGMLElement|SGMLParser|SQLite|Sequence|Server|ShowMessage|SleepyCat|SleepyCatCursor|Socket|SocketManager|Sound|Soup|Store|String|Tree|UDPSender|UPDReceiver|URL|User|Warning|WeakLink)\b/,
          boolean: /\b(?:false|nil|true)\b/,
          number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e-?\d+)?/i,
          operator: /[=!*/%+\-^&|]=|>>?=?|<<?=?|:?:?=|\+\+?|--?|\*\*?|\/\/?|%|\|\|?|&&?|\b(?:and|not|or|return)\b|@@?|\?\??|\.\./,
          punctuation: /[{}[\];(),.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/j.js
  var require_j = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/j.js"(exports, module) {
      "use strict";
      module.exports = j;
      j.displayName = "j";
      j.aliases = [];
      function j(Prism) {
        Prism.languages.j = {
          comment: {
            pattern: /\bNB\..*/,
            greedy: true
          },
          string: {
            pattern: /'(?:''|[^'\r\n])*'/,
            greedy: true
          },
          keyword: /\b(?:(?:CR|LF|adverb|conjunction|def|define|dyad|monad|noun|verb)\b|(?:assert|break|case|catch[dt]?|continue|do|else|elseif|end|fcase|for|for_\w+|goto_\w+|if|label_\w+|return|select|throw|try|while|whilst)\.)/,
          verb: {
            pattern: /(?!\^:|;\.|[=!][.:])(?:\{(?:\.|::?)?|p(?:\.\.?|:)|[=!\]]|[<>+*\-%$|,#][.:]?|[?^]\.?|[;\[]:?|[~}"i][.:]|[ACeEIjLor]\.|(?:[_\/\\qsux]|_?\d):)/,
            alias: "keyword"
          },
          number: /\b_?(?:(?!\d:)\d+(?:\.\d+)?(?:(?:ad|ar|[ejpx])_?\d+(?:\.\d+)?)*(?:b_?[\da-z]+(?:\.[\da-z]+)?)?|_\b(?!\.))/,
          adverb: {
            pattern: /[~}]|[\/\\]\.?|[bfM]\.|t[.:]/,
            alias: "builtin"
          },
          operator: /[=a][.:]|_\./,
          conjunction: {
            pattern: /&(?:\.:?|:)?|[.:@][.:]?|[!D][.:]|[;dHT]\.|`:?|[\^LS]:|"/,
            alias: "variable"
          },
          punctuation: /[()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/java.js
  var require_java = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/java.js"(exports, module) {
      "use strict";
      module.exports = java;
      java.displayName = "java";
      java.aliases = [];
      function java(Prism) {
        ;
        (function(Prism2) {
          var keywords = /\b(?:abstract|assert|boolean|break|byte|case|catch|char|class|const|continue|default|do|double|else|enum|exports|extends|final|finally|float|for|goto|if|implements|import|instanceof|int|interface|long|module|native|new|non-sealed|null|open|opens|package|permits|private|protected|provides|public|record|requires|return|sealed|short|static|strictfp|super|switch|synchronized|this|throw|throws|to|transient|transitive|try|uses|var|void|volatile|while|with|yield)\b/;
          var classNamePrefix = /(^|[^\w.])(?:[a-z]\w*\s*\.\s*)*(?:[A-Z]\w*\s*\.\s*)*/.source;
          var className = {
            pattern: RegExp(classNamePrefix + /[A-Z](?:[\d_A-Z]*[a-z]\w*)?\b/.source),
            lookbehind: true,
            inside: {
              namespace: {
                pattern: /^[a-z]\w*(?:\s*\.\s*[a-z]\w*)*(?:\s*\.)?/,
                inside: {
                  punctuation: /\./
                }
              },
              punctuation: /\./
            }
          };
          Prism2.languages.java = Prism2.languages.extend("clike", {
            string: {
              pattern: /(^|[^\\])"(?:\\.|[^"\\\r\n])*"/,
              lookbehind: true,
              greedy: true
            },
            "class-name": [
              className,
              {
                pattern: RegExp(
                  classNamePrefix + /[A-Z]\w*(?=\s+\w+\s*[;,=()])/.source
                ),
                lookbehind: true,
                inside: className.inside
              }
            ],
            keyword: keywords,
            function: [
              Prism2.languages.clike.function,
              {
                pattern: /(::\s*)[a-z_]\w*/,
                lookbehind: true
              }
            ],
            number: /\b0b[01][01_]*L?\b|\b0x(?:\.[\da-f_p+-]+|[\da-f_]+(?:\.[\da-f_p+-]+)?)\b|(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?\d[\d_]*)?[dfl]?/i,
            operator: {
              pattern: /(^|[^.])(?:<<=?|>>>?=?|->|--|\+\+|&&|\|\||::|[?:~]|[-+*/%&|^!=<>]=?)/m,
              lookbehind: true
            }
          });
          Prism2.languages.insertBefore("java", "string", {
            "triple-quoted-string": {
              pattern: /"""[ \t]*[\r\n](?:(?:"|"")?(?:\\.|[^"\\]))*"""/,
              greedy: true,
              alias: "string"
            },
            char: {
              pattern: /'(?:\\.|[^'\\\r\n]){1,6}'/,
              greedy: true
            }
          });
          Prism2.languages.insertBefore("java", "class-name", {
            annotation: {
              pattern: /(^|[^.])@\w+(?:\s*\.\s*\w+)*/,
              lookbehind: true,
              alias: "punctuation"
            },
            generics: {
              pattern: /<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&)|<(?:[\w\s,.?]|&(?!&))*>)*>)*>)*>/,
              inside: {
                "class-name": className,
                keyword: keywords,
                punctuation: /[<>(),.:]/,
                operator: /[?&|]/
              }
            },
            namespace: {
              pattern: RegExp(
                /(\b(?:exports|import(?:\s+static)?|module|open|opens|package|provides|requires|to|transitive|uses|with)\s+)(?!<keyword>)[a-z]\w*(?:\.[a-z]\w*)*\.?/.source.replace(
                  /<keyword>/g,
                  function() {
                    return keywords.source;
                  }
                )
              ),
              lookbehind: true,
              inside: {
                punctuation: /\./
              }
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/javadoclike.js
  var require_javadoclike = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/javadoclike.js"(exports, module) {
      "use strict";
      module.exports = javadoclike;
      javadoclike.displayName = "javadoclike";
      javadoclike.aliases = [];
      function javadoclike(Prism) {
        ;
        (function(Prism2) {
          var javaDocLike = Prism2.languages.javadoclike = {
            parameter: {
              pattern: /(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*@(?:arg|arguments|param)\s+)\w+/m,
              lookbehind: true
            },
            keyword: {
              pattern: /(^[\t ]*(?:\/{3}|\*|\/\*\*)\s*|\{)@[a-z][a-zA-Z-]+\b/m,
              lookbehind: true
            },
            punctuation: /[{}]/
          };
          function docCommentSupport(lang, callback) {
            var tokenName = "doc-comment";
            var grammar = Prism2.languages[lang];
            if (!grammar) {
              return;
            }
            var token = grammar[tokenName];
            if (!token) {
              var definition2 = {};
              definition2[tokenName] = {
                pattern: /(^|[^\\])\/\*\*[^/][\s\S]*?(?:\*\/|$)/,
                lookbehind: true,
                alias: "comment"
              };
              grammar = Prism2.languages.insertBefore(lang, "comment", definition2);
              token = grammar[tokenName];
            }
            if (token instanceof RegExp) {
              token = grammar[tokenName] = {
                pattern: token
              };
            }
            if (Array.isArray(token)) {
              for (var i = 0, l = token.length; i < l; i++) {
                if (token[i] instanceof RegExp) {
                  token[i] = {
                    pattern: token[i]
                  };
                }
                callback(token[i]);
              }
            } else {
              callback(token);
            }
          }
          function addSupport(languages, docLanguage) {
            if (typeof languages === "string") {
              languages = [languages];
            }
            languages.forEach(function(lang) {
              docCommentSupport(lang, function(pattern) {
                if (!pattern.inside) {
                  pattern.inside = {};
                }
                pattern.inside.rest = docLanguage;
              });
            });
          }
          Object.defineProperty(javaDocLike, "addSupport", {
            value: addSupport
          });
          javaDocLike.addSupport(["java", "javascript", "php"], javaDocLike);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/javadoc.js
  var require_javadoc = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/javadoc.js"(exports, module) {
      "use strict";
      var refractorJava = require_java();
      var refractorJavadoclike = require_javadoclike();
      module.exports = javadoc;
      javadoc.displayName = "javadoc";
      javadoc.aliases = [];
      function javadoc(Prism) {
        Prism.register(refractorJava);
        Prism.register(refractorJavadoclike);
        (function(Prism2) {
          var codeLinePattern = /(^(?:[\t ]*(?:\*\s*)*))[^*\s].*$/m;
          var memberReference = /#\s*\w+(?:\s*\([^()]*\))?/.source;
          var reference = /(?:\b[a-zA-Z]\w+\s*\.\s*)*\b[A-Z]\w*(?:\s*<mem>)?|<mem>/.source.replace(
            /<mem>/g,
            function() {
              return memberReference;
            }
          );
          Prism2.languages.javadoc = Prism2.languages.extend("javadoclike", {});
          Prism2.languages.insertBefore("javadoc", "keyword", {
            reference: {
              pattern: RegExp(
                /(@(?:exception|link|linkplain|see|throws|value)\s+(?:\*\s*)?)/.source + "(?:" + reference + ")"
              ),
              lookbehind: true,
              inside: {
                function: {
                  pattern: /(#\s*)\w+(?=\s*\()/,
                  lookbehind: true
                },
                field: {
                  pattern: /(#\s*)\w+/,
                  lookbehind: true
                },
                namespace: {
                  pattern: /\b(?:[a-z]\w*\s*\.\s*)+/,
                  inside: {
                    punctuation: /\./
                  }
                },
                "class-name": /\b[A-Z]\w*/,
                keyword: Prism2.languages.java.keyword,
                punctuation: /[#()[\],.]/
              }
            },
            "class-name": {
              pattern: /(@param\s+)<[A-Z]\w*>/,
              lookbehind: true,
              inside: {
                punctuation: /[.<>]/
              }
            },
            "code-section": [
              {
                pattern: /(\{@code\s+(?!\s))(?:[^\s{}]|\s+(?![\s}])|\{(?:[^{}]|\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})*\})+(?=\s*\})/,
                lookbehind: true,
                inside: {
                  code: {
                    pattern: codeLinePattern,
                    lookbehind: true,
                    inside: Prism2.languages.java,
                    alias: "language-java"
                  }
                }
              },
              {
                pattern: /(<(code|pre|tt)>(?!<code>)\s*)\S(?:\S|\s+\S)*?(?=\s*<\/\2>)/,
                lookbehind: true,
                inside: {
                  line: {
                    pattern: codeLinePattern,
                    lookbehind: true,
                    inside: {
                      tag: Prism2.languages.markup.tag,
                      entity: Prism2.languages.markup.entity,
                      code: {
                        pattern: /.+/,
                        inside: Prism2.languages.java,
                        alias: "language-java"
                      }
                    }
                  }
                }
              }
            ],
            tag: Prism2.languages.markup.tag,
            entity: Prism2.languages.markup.entity
          });
          Prism2.languages.javadoclike.addSupport("java", Prism2.languages.javadoc);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/javastacktrace.js
  var require_javastacktrace = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/javastacktrace.js"(exports, module) {
      "use strict";
      module.exports = javastacktrace;
      javastacktrace.displayName = "javastacktrace";
      javastacktrace.aliases = [];
      function javastacktrace(Prism) {
        Prism.languages.javastacktrace = {
          summary: {
            pattern: /^([\t ]*)(?:(?:Caused by:|Suppressed:|Exception in thread "[^"]*")[\t ]+)?[\w$.]+(?::.*)?$/m,
            lookbehind: true,
            inside: {
              keyword: {
                pattern: /^([\t ]*)(?:(?:Caused by|Suppressed)(?=:)|Exception in thread)/m,
                lookbehind: true
              },
              string: {
                pattern: /^(\s*)"[^"]*"/,
                lookbehind: true
              },
              exceptions: {
                pattern: /^(:?\s*)[\w$.]+(?=:|$)/,
                lookbehind: true,
                inside: {
                  "class-name": /[\w$]+$/,
                  namespace: /\b[a-z]\w*\b/,
                  punctuation: /\./
                }
              },
              message: {
                pattern: /(:\s*)\S.*/,
                lookbehind: true,
                alias: "string"
              },
              punctuation: /:/
            }
          },
          "stack-frame": {
            pattern: /^([\t ]*)at (?:[\w$./]|@[\w$.+-]*\/)+(?:<init>)?\([^()]*\)/m,
            lookbehind: true,
            inside: {
              keyword: {
                pattern: /^(\s*)at(?= )/,
                lookbehind: true
              },
              source: [
                {
                  pattern: /(\()\w+\.\w+:\d+(?=\))/,
                  lookbehind: true,
                  inside: {
                    file: /^\w+\.\w+/,
                    punctuation: /:/,
                    "line-number": {
                      pattern: /\b\d+\b/,
                      alias: "number"
                    }
                  }
                },
                {
                  pattern: /(\()[^()]*(?=\))/,
                  lookbehind: true,
                  inside: {
                    keyword: /^(?:Native Method|Unknown Source)$/
                  }
                }
              ],
              "class-name": /[\w$]+(?=\.(?:<init>|[\w$]+)\()/,
              function: /(?:<init>|[\w$]+)(?=\()/,
              "class-loader": {
                pattern: /(\s)[a-z]\w*(?:\.[a-z]\w*)*(?=\/[\w@$.]*\/)/,
                lookbehind: true,
                alias: "namespace",
                inside: {
                  punctuation: /\./
                }
              },
              module: {
                pattern: /([\s/])[a-z]\w*(?:\.[a-z]\w*)*(?:@[\w$.+-]*)?(?=\/)/,
                lookbehind: true,
                inside: {
                  version: {
                    pattern: /(@)[\s\S]+/,
                    lookbehind: true,
                    alias: "number"
                  },
                  punctuation: /[@.]/
                }
              },
              namespace: {
                pattern: /(?:\b[a-z]\w*\.)+/,
                inside: {
                  punctuation: /\./
                }
              },
              punctuation: /[()/.]/
            }
          },
          more: {
            pattern: /^([\t ]*)\.{3} \d+ [a-z]+(?: [a-z]+)*/m,
            lookbehind: true,
            inside: {
              punctuation: /\.{3}/,
              number: /\d+/,
              keyword: /\b[a-z]+(?: [a-z]+)*\b/
            }
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jexl.js
  var require_jexl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jexl.js"(exports, module) {
      "use strict";
      module.exports = jexl;
      jexl.displayName = "jexl";
      jexl.aliases = [];
      function jexl(Prism) {
        Prism.languages.jexl = {
          string: /(["'])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
          transform: {
            pattern: /(\|\s*)[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][\wа-яА-Я\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*/,
            alias: "function",
            lookbehind: true
          },
          function: /[a-zA-Zа-яА-Я_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$][\wа-яА-Я\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF$]*\s*(?=\()/,
          number: /\b\d+(?:\.\d+)?\b|\B\.\d+\b/,
          operator: /[<>!]=?|-|\+|&&|==|\|\|?|\/\/?|[?:*^%]/,
          boolean: /\b(?:false|true)\b/,
          keyword: /\bin\b/,
          punctuation: /[{}[\](),.]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jolie.js
  var require_jolie = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jolie.js"(exports, module) {
      "use strict";
      module.exports = jolie;
      jolie.displayName = "jolie";
      jolie.aliases = [];
      function jolie(Prism) {
        Prism.languages.jolie = Prism.languages.extend("clike", {
          string: {
            pattern: /(^|[^\\])"(?:\\[\s\S]|[^"\\])*"/,
            lookbehind: true,
            greedy: true
          },
          "class-name": {
            pattern: /((?:\b(?:as|courier|embed|in|inputPort|outputPort|service)\b|@)[ \t]*)\w+/,
            lookbehind: true
          },
          keyword: /\b(?:as|cH|comp|concurrent|constants|courier|cset|csets|default|define|else|embed|embedded|execution|exit|extender|for|foreach|forward|from|global|if|import|in|include|init|inputPort|install|instanceof|interface|is_defined|linkIn|linkOut|main|new|nullProcess|outputPort|over|private|provide|public|scope|sequential|service|single|spawn|synchronized|this|throw|throws|type|undef|until|while|with)\b/,
          function: /\b[a-z_]\w*(?=[ \t]*[@(])/i,
          number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?l?/i,
          operator: /-[-=>]?|\+[+=]?|<[<=]?|[>=*!]=?|&&|\|\||[?\/%^@|]/,
          punctuation: /[()[\]{},;.:]/,
          builtin: /\b(?:Byte|any|bool|char|double|enum|float|int|length|long|ranges|regex|string|undefined|void)\b/
        });
        Prism.languages.insertBefore("jolie", "keyword", {
          aggregates: {
            pattern: /(\bAggregates\s*:\s*)(?:\w+(?:\s+with\s+\w+)?\s*,\s*)*\w+(?:\s+with\s+\w+)?/,
            lookbehind: true,
            inside: {
              keyword: /\bwith\b/,
              "class-name": /\w+/,
              punctuation: /,/
            }
          },
          redirects: {
            pattern: /(\bRedirects\s*:\s*)(?:\w+\s*=>\s*\w+\s*,\s*)*(?:\w+\s*=>\s*\w+)/,
            lookbehind: true,
            inside: {
              punctuation: /,/,
              "class-name": /\w+/,
              operator: /=>/
            }
          },
          property: {
            pattern: /\b(?:Aggregates|[Ii]nterfaces|Java|Javascript|Jolie|[Ll]ocation|OneWay|[Pp]rotocol|Redirects|RequestResponse)\b(?=[ \t]*:)/
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jq.js
  var require_jq = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jq.js"(exports, module) {
      "use strict";
      module.exports = jq;
      jq.displayName = "jq";
      jq.aliases = [];
      function jq(Prism) {
        ;
        (function(Prism2) {
          var interpolation = /\\\((?:[^()]|\([^()]*\))*\)/.source;
          var string3 = RegExp(
            /(^|[^\\])"(?:[^"\r\n\\]|\\[^\r\n(]|__)*"/.source.replace(
              /__/g,
              function() {
                return interpolation;
              }
            )
          );
          var stringInterpolation = {
            interpolation: {
              pattern: RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + interpolation),
              lookbehind: true,
              inside: {
                content: {
                  pattern: /^(\\\()[\s\S]+(?=\)$)/,
                  lookbehind: true,
                  inside: null
                },
                punctuation: /^\\\(|\)$/
              }
            }
          };
          var jq2 = Prism2.languages.jq = {
            comment: /#.*/,
            property: {
              pattern: RegExp(string3.source + /(?=\s*:(?!:))/.source),
              lookbehind: true,
              greedy: true,
              inside: stringInterpolation
            },
            string: {
              pattern: string3,
              lookbehind: true,
              greedy: true,
              inside: stringInterpolation
            },
            function: {
              pattern: /(\bdef\s+)[a-z_]\w+/i,
              lookbehind: true
            },
            variable: /\B\$\w+/,
            "property-literal": {
              pattern: /\b[a-z_]\w*(?=\s*:(?!:))/i,
              alias: "property"
            },
            keyword: /\b(?:as|break|catch|def|elif|else|end|foreach|if|import|include|label|module|modulemeta|null|reduce|then|try|while)\b/,
            boolean: /\b(?:false|true)\b/,
            number: /(?:\b\d+\.|\B\.)?\b\d+(?:[eE][+-]?\d+)?\b/,
            operator: [
              {
                pattern: /\|=?/,
                alias: "pipe"
              },
              /\.\.|[!=<>]?=|\?\/\/|\/\/=?|[-+*/%]=?|[<>?]|\b(?:and|not|or)\b/
            ],
            "c-style-function": {
              pattern: /\b[a-z_]\w*(?=\s*\()/i,
              alias: "function"
            },
            punctuation: /::|[()\[\]{},:;]|\.(?=\s*[\[\w$])/,
            dot: {
              pattern: /\./,
              alias: "important"
            }
          };
          stringInterpolation.interpolation.inside.content.inside = jq2;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/js-extras.js
  var require_js_extras = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/js-extras.js"(exports, module) {
      "use strict";
      module.exports = jsExtras;
      jsExtras.displayName = "jsExtras";
      jsExtras.aliases = [];
      function jsExtras(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.insertBefore("javascript", "function-variable", {
            "method-variable": {
              pattern: RegExp(
                "(\\.\\s*)" + Prism2.languages.javascript["function-variable"].pattern.source
              ),
              lookbehind: true,
              alias: ["function-variable", "method", "function", "property-access"]
            }
          });
          Prism2.languages.insertBefore("javascript", "function", {
            method: {
              pattern: RegExp(
                "(\\.\\s*)" + Prism2.languages.javascript["function"].source
              ),
              lookbehind: true,
              alias: ["function", "property-access"]
            }
          });
          Prism2.languages.insertBefore("javascript", "constant", {
            "known-class-name": [
              {
                pattern: /\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,
                alias: "class-name"
              },
              {
                pattern: /\b(?:[A-Z]\w*)Error\b/,
                alias: "class-name"
              }
            ]
          });
          function withId(source, flags) {
            return RegExp(
              source.replace(/<ID>/g, function() {
                return /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source;
              }),
              flags
            );
          }
          Prism2.languages.insertBefore("javascript", "keyword", {
            imports: {
              pattern: withId(
                /(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source
              ),
              lookbehind: true,
              inside: Prism2.languages.javascript
            },
            exports: {
              pattern: withId(
                /(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source
              ),
              lookbehind: true,
              inside: Prism2.languages.javascript
            }
          });
          Prism2.languages.javascript["keyword"].unshift(
            {
              pattern: /\b(?:as|default|export|from|import)\b/,
              alias: "module"
            },
            {
              pattern: /\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,
              alias: "control-flow"
            },
            {
              pattern: /\bnull\b/,
              alias: ["null", "nil"]
            },
            {
              pattern: /\bundefined\b/,
              alias: "nil"
            }
          );
          Prism2.languages.insertBefore("javascript", "operator", {
            spread: {
              pattern: /\.{3}/,
              alias: "operator"
            },
            arrow: {
              pattern: /=>/,
              alias: "operator"
            }
          });
          Prism2.languages.insertBefore("javascript", "punctuation", {
            "property-access": {
              pattern: withId(/(\.\s*)#?<ID>/.source),
              lookbehind: true
            },
            "maybe-class-name": {
              pattern: /(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,
              lookbehind: true
            },
            dom: {
              pattern: /\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,
              alias: "variable"
            },
            console: {
              pattern: /\bconsole(?=\s*\.)/,
              alias: "class-name"
            }
          });
          var maybeClassNameTokens = [
            "function",
            "function-variable",
            "method",
            "method-variable",
            "property-access"
          ];
          for (var i = 0; i < maybeClassNameTokens.length; i++) {
            var token = maybeClassNameTokens[i];
            var value = Prism2.languages.javascript[token];
            if (Prism2.util.type(value) === "RegExp") {
              value = Prism2.languages.javascript[token] = {
                pattern: value
              };
            }
            var inside = value.inside || {};
            value.inside = inside;
            inside["maybe-class-name"] = /^[A-Z][\s\S]*/;
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/js-templates.js
  var require_js_templates = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/js-templates.js"(exports, module) {
      "use strict";
      module.exports = jsTemplates;
      jsTemplates.displayName = "jsTemplates";
      jsTemplates.aliases = [];
      function jsTemplates(Prism) {
        ;
        (function(Prism2) {
          var templateString = Prism2.languages.javascript["template-string"];
          var templateLiteralPattern = templateString.pattern.source;
          var interpolationObject = templateString.inside["interpolation"];
          var interpolationPunctuationObject = interpolationObject.inside["interpolation-punctuation"];
          var interpolationPattern = interpolationObject.pattern.source;
          function createTemplate(language, tag) {
            if (!Prism2.languages[language]) {
              return void 0;
            }
            return {
              pattern: RegExp("((?:" + tag + ")\\s*)" + templateLiteralPattern),
              lookbehind: true,
              greedy: true,
              inside: {
                "template-punctuation": {
                  pattern: /^`|`$/,
                  alias: "string"
                },
                "embedded-code": {
                  pattern: /[\s\S]+/,
                  alias: language
                }
              }
            };
          }
          Prism2.languages.javascript["template-string"] = [
            createTemplate(
              "css",
              /\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source
            ),
            createTemplate("html", /\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),
            createTemplate("svg", /\bsvg/.source),
            createTemplate("markdown", /\b(?:markdown|md)/.source),
            createTemplate(
              "graphql",
              /\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source
            ),
            createTemplate("sql", /\bsql/.source),
            templateString
          ].filter(Boolean);
          function getPlaceholder(counter2, language) {
            return "___" + language.toUpperCase() + "_" + counter2 + "___";
          }
          function tokenizeWithHooks(code3, grammar, language) {
            var env = {
              code: code3,
              grammar,
              language
            };
            Prism2.hooks.run("before-tokenize", env);
            env.tokens = Prism2.tokenize(env.code, env.grammar);
            Prism2.hooks.run("after-tokenize", env);
            return env.tokens;
          }
          function tokenizeInterpolationExpression(expression) {
            var tempGrammar = {};
            tempGrammar["interpolation-punctuation"] = interpolationPunctuationObject;
            var tokens2 = Prism2.tokenize(expression, tempGrammar);
            if (tokens2.length === 3) {
              var args = [1, 1];
              args.push.apply(
                args,
                tokenizeWithHooks(tokens2[1], Prism2.languages.javascript, "javascript")
              );
              tokens2.splice.apply(tokens2, args);
            }
            return new Prism2.Token(
              "interpolation",
              tokens2,
              interpolationObject.alias,
              expression
            );
          }
          function tokenizeEmbedded(code3, grammar, language) {
            var _tokens = Prism2.tokenize(code3, {
              interpolation: {
                pattern: RegExp(interpolationPattern),
                lookbehind: true
              }
            });
            var placeholderCounter = 0;
            var placeholderMap = {};
            var embeddedCode = _tokens.map(function(token) {
              if (typeof token === "string") {
                return token;
              } else {
                var interpolationExpression = token.content;
                var placeholder;
                while (code3.indexOf(
                  placeholder = getPlaceholder(placeholderCounter++, language)
                ) !== -1) {
                }
                placeholderMap[placeholder] = interpolationExpression;
                return placeholder;
              }
            }).join("");
            var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language);
            var placeholders = Object.keys(placeholderMap);
            placeholderCounter = 0;
            function walkTokens(tokens2) {
              for (var i = 0; i < tokens2.length; i++) {
                if (placeholderCounter >= placeholders.length) {
                  return;
                }
                var token = tokens2[i];
                if (typeof token === "string" || typeof token.content === "string") {
                  var placeholder = placeholders[placeholderCounter];
                  var s2 = typeof token === "string" ? token : token.content;
                  var index2 = s2.indexOf(placeholder);
                  if (index2 !== -1) {
                    ++placeholderCounter;
                    var before = s2.substring(0, index2);
                    var middle = tokenizeInterpolationExpression(
                      placeholderMap[placeholder]
                    );
                    var after = s2.substring(index2 + placeholder.length);
                    var replacement = [];
                    if (before) {
                      replacement.push(before);
                    }
                    replacement.push(middle);
                    if (after) {
                      var afterTokens = [after];
                      walkTokens(afterTokens);
                      replacement.push.apply(replacement, afterTokens);
                    }
                    if (typeof token === "string") {
                      tokens2.splice.apply(tokens2, [i, 1].concat(replacement));
                      i += replacement.length - 1;
                    } else {
                      token.content = replacement;
                    }
                  }
                } else {
                  var content3 = token.content;
                  if (Array.isArray(content3)) {
                    walkTokens(content3);
                  } else {
                    walkTokens([content3]);
                  }
                }
              }
            }
            walkTokens(embeddedTokens);
            return new Prism2.Token(
              language,
              embeddedTokens,
              "language-" + language,
              code3
            );
          }
          var supportedLanguages = {
            javascript: true,
            js: true,
            typescript: true,
            ts: true,
            jsx: true,
            tsx: true
          };
          Prism2.hooks.add("after-tokenize", function(env) {
            if (!(env.language in supportedLanguages)) {
              return;
            }
            function findTemplateStrings(tokens2) {
              for (var i = 0, l = tokens2.length; i < l; i++) {
                var token = tokens2[i];
                if (typeof token === "string") {
                  continue;
                }
                var content3 = token.content;
                if (!Array.isArray(content3)) {
                  if (typeof content3 !== "string") {
                    findTemplateStrings([content3]);
                  }
                  continue;
                }
                if (token.type === "template-string") {
                  var embedded = content3[1];
                  if (content3.length === 3 && typeof embedded !== "string" && embedded.type === "embedded-code") {
                    var code3 = stringContent(embedded);
                    var alias = embedded.alias;
                    var language = Array.isArray(alias) ? alias[0] : alias;
                    var grammar = Prism2.languages[language];
                    if (!grammar) {
                      continue;
                    }
                    content3[1] = tokenizeEmbedded(code3, grammar, language);
                  }
                } else {
                  findTemplateStrings(content3);
                }
              }
            }
            findTemplateStrings(env.tokens);
          });
          function stringContent(value) {
            if (typeof value === "string") {
              return value;
            } else if (Array.isArray(value)) {
              return value.map(stringContent).join("");
            } else {
              return stringContent(value.content);
            }
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/typescript.js
  var require_typescript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/typescript.js"(exports, module) {
      "use strict";
      module.exports = typescript;
      typescript.displayName = "typescript";
      typescript.aliases = ["ts"];
      function typescript(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.typescript = Prism2.languages.extend("javascript", {
            "class-name": {
              pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
              lookbehind: true,
              greedy: true,
              inside: null
            },
            builtin: /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
          });
          Prism2.languages.typescript.keyword.push(
            /\b(?:abstract|declare|is|keyof|readonly|require)\b/,
            /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
            /\btype\b(?=\s*(?:[\{*]|$))/
          );
          delete Prism2.languages.typescript["parameter"];
          delete Prism2.languages.typescript["literal-property"];
          var typeInside = Prism2.languages.extend("typescript", {});
          delete typeInside["class-name"];
          Prism2.languages.typescript["class-name"].inside = typeInside;
          Prism2.languages.insertBefore("typescript", "function", {
            decorator: {
              pattern: /@[$\w\xA0-\uFFFF]+/,
              inside: {
                at: {
                  pattern: /^@/,
                  alias: "operator"
                },
                function: /^[\s\S]+/
              }
            },
            "generic-function": {
              pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
              greedy: true,
              inside: {
                function: /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
                generic: {
                  pattern: /<[\s\S]+/,
                  alias: "class-name",
                  inside: typeInside
                }
              }
            }
          });
          Prism2.languages.ts = Prism2.languages.typescript;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jsdoc.js
  var require_jsdoc = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jsdoc.js"(exports, module) {
      "use strict";
      var refractorJavadoclike = require_javadoclike();
      var refractorTypescript = require_typescript();
      module.exports = jsdoc;
      jsdoc.displayName = "jsdoc";
      jsdoc.aliases = [];
      function jsdoc(Prism) {
        Prism.register(refractorJavadoclike);
        Prism.register(refractorTypescript);
        (function(Prism2) {
          var javascript = Prism2.languages.javascript;
          var type = /\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})+\}/.source;
          var parameterPrefix = "(@(?:arg|argument|param|property)\\s+(?:" + type + "\\s+)?)";
          Prism2.languages.jsdoc = Prism2.languages.extend("javadoclike", {
            parameter: {
              pattern: RegExp(
                parameterPrefix + /(?:(?!\s)[$\w\xA0-\uFFFF.])+(?=\s|$)/.source
              ),
              lookbehind: true,
              inside: {
                punctuation: /\./
              }
            }
          });
          Prism2.languages.insertBefore("jsdoc", "keyword", {
            "optional-parameter": {
              pattern: RegExp(
                parameterPrefix + /\[(?:(?!\s)[$\w\xA0-\uFFFF.])+(?:=[^[\]]+)?\](?=\s|$)/.source
              ),
              lookbehind: true,
              inside: {
                parameter: {
                  pattern: /(^\[)[$\w\xA0-\uFFFF\.]+/,
                  lookbehind: true,
                  inside: {
                    punctuation: /\./
                  }
                },
                code: {
                  pattern: /(=)[\s\S]*(?=\]$)/,
                  lookbehind: true,
                  inside: javascript,
                  alias: "language-javascript"
                },
                punctuation: /[=[\]]/
              }
            },
            "class-name": [
              {
                pattern: RegExp(
                  /(@(?:augments|class|extends|interface|memberof!?|template|this|typedef)\s+(?:<TYPE>\s+)?)[A-Z]\w*(?:\.[A-Z]\w*)*/.source.replace(
                    /<TYPE>/g,
                    function() {
                      return type;
                    }
                  )
                ),
                lookbehind: true,
                inside: {
                  punctuation: /\./
                }
              },
              {
                pattern: RegExp("(@[a-z]+\\s+)" + type),
                lookbehind: true,
                inside: {
                  string: javascript.string,
                  number: javascript.number,
                  boolean: javascript.boolean,
                  keyword: Prism2.languages.typescript.keyword,
                  operator: /=>|\.\.\.|[&|?:*]/,
                  punctuation: /[.,;=<>{}()[\]]/
                }
              }
            ],
            example: {
              pattern: /(@example\s+(?!\s))(?:[^@\s]|\s+(?!\s))+?(?=\s*(?:\*\s*)?(?:@\w|\*\/))/,
              lookbehind: true,
              inside: {
                code: {
                  pattern: /^([\t ]*(?:\*\s*)?)\S.*$/m,
                  lookbehind: true,
                  inside: javascript,
                  alias: "language-javascript"
                }
              }
            }
          });
          Prism2.languages.javadoclike.addSupport("javascript", Prism2.languages.jsdoc);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/json.js
  var require_json = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/json.js"(exports, module) {
      "use strict";
      module.exports = json;
      json.displayName = "json";
      json.aliases = ["webmanifest"];
      function json(Prism) {
        Prism.languages.json = {
          property: {
            pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
            lookbehind: true,
            greedy: true
          },
          comment: {
            pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
            greedy: true
          },
          number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
          punctuation: /[{}[\],]/,
          operator: /:/,
          boolean: /\b(?:false|true)\b/,
          null: {
            pattern: /\bnull\b/,
            alias: "keyword"
          }
        };
        Prism.languages.webmanifest = Prism.languages.json;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/json5.js
  var require_json5 = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/json5.js"(exports, module) {
      "use strict";
      var refractorJson = require_json();
      module.exports = json5;
      json5.displayName = "json5";
      json5.aliases = [];
      function json5(Prism) {
        Prism.register(refractorJson);
        (function(Prism2) {
          var string3 = /("|')(?:\\(?:\r\n?|\n|.)|(?!\1)[^\\\r\n])*\1/;
          Prism2.languages.json5 = Prism2.languages.extend("json", {
            property: [
              {
                pattern: RegExp(string3.source + "(?=\\s*:)"),
                greedy: true
              },
              {
                pattern: /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/,
                alias: "unquoted"
              }
            ],
            string: {
              pattern: string3,
              greedy: true
            },
            number: /[+-]?\b(?:NaN|Infinity|0x[a-fA-F\d]+)\b|[+-]?(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+\b)?/
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jsonp.js
  var require_jsonp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jsonp.js"(exports, module) {
      "use strict";
      var refractorJson = require_json();
      module.exports = jsonp;
      jsonp.displayName = "jsonp";
      jsonp.aliases = [];
      function jsonp(Prism) {
        Prism.register(refractorJson);
        Prism.languages.jsonp = Prism.languages.extend("json", {
          punctuation: /[{}[\]();,.]/
        });
        Prism.languages.insertBefore("jsonp", "punctuation", {
          function: /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*\()/
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jsstacktrace.js
  var require_jsstacktrace = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jsstacktrace.js"(exports, module) {
      "use strict";
      module.exports = jsstacktrace;
      jsstacktrace.displayName = "jsstacktrace";
      jsstacktrace.aliases = [];
      function jsstacktrace(Prism) {
        Prism.languages.jsstacktrace = {
          "error-message": {
            pattern: /^\S.*/m,
            alias: "string"
          },
          "stack-frame": {
            pattern: /(^[ \t]+)at[ \t].*/m,
            lookbehind: true,
            inside: {
              "not-my-code": {
                pattern: /^at[ \t]+(?!\s)(?:node\.js|<unknown>|.*(?:node_modules|\(<anonymous>\)|\(<unknown>|<anonymous>$|\(internal\/|\(node\.js)).*/m,
                alias: "comment"
              },
              filename: {
                pattern: /(\bat\s+(?!\s)|\()(?:[a-zA-Z]:)?[^():]+(?=:)/,
                lookbehind: true,
                alias: "url"
              },
              function: {
                pattern: /(\bat\s+(?:new\s+)?)(?!\s)[_$a-zA-Z\xA0-\uFFFF<][.$\w\xA0-\uFFFF<>]*/,
                lookbehind: true,
                inside: {
                  punctuation: /\./
                }
              },
              punctuation: /[()]/,
              keyword: /\b(?:at|new)\b/,
              alias: {
                pattern: /\[(?:as\s+)?(?!\s)[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\]/,
                alias: "variable"
              },
              "line-number": {
                pattern: /:\d+(?::\d+)?\b/,
                alias: "number",
                inside: {
                  punctuation: /:/
                }
              }
            }
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/jsx.js
  var require_jsx = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/jsx.js"(exports, module) {
      "use strict";
      module.exports = jsx51;
      jsx51.displayName = "jsx";
      jsx51.aliases = [];
      function jsx51(Prism) {
        ;
        (function(Prism2) {
          var javascript = Prism2.util.clone(Prism2.languages.javascript);
          var space3 = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source;
          var braces = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source;
          var spread = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;
          function re(source, flags) {
            source = source.replace(/<S>/g, function() {
              return space3;
            }).replace(/<BRACES>/g, function() {
              return braces;
            }).replace(/<SPREAD>/g, function() {
              return spread;
            });
            return RegExp(source, flags);
          }
          spread = re(spread).source;
          Prism2.languages.jsx = Prism2.languages.extend("markup", javascript);
          Prism2.languages.jsx.tag.pattern = re(
            /<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source
          );
          Prism2.languages.jsx.tag.inside["tag"].pattern = /^<\/?[^\s>\/]*/;
          Prism2.languages.jsx.tag.inside["attr-value"].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/;
          Prism2.languages.jsx.tag.inside["tag"].inside["class-name"] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/;
          Prism2.languages.jsx.tag.inside["comment"] = javascript["comment"];
          Prism2.languages.insertBefore(
            "inside",
            "attr-name",
            {
              spread: {
                pattern: re(/<SPREAD>/.source),
                inside: Prism2.languages.jsx
              }
            },
            Prism2.languages.jsx.tag
          );
          Prism2.languages.insertBefore(
            "inside",
            "special-attr",
            {
              script: {
                pattern: re(/=<BRACES>/.source),
                alias: "language-javascript",
                inside: {
                  "script-punctuation": {
                    pattern: /^=(?=\{)/,
                    alias: "punctuation"
                  },
                  rest: Prism2.languages.jsx
                }
              }
            },
            Prism2.languages.jsx.tag
          );
          var stringifyToken = function(token) {
            if (!token) {
              return "";
            }
            if (typeof token === "string") {
              return token;
            }
            if (typeof token.content === "string") {
              return token.content;
            }
            return token.content.map(stringifyToken).join("");
          };
          var walkTokens = function(tokens2) {
            var openedTags = [];
            for (var i = 0; i < tokens2.length; i++) {
              var token = tokens2[i];
              var notTagNorBrace = false;
              if (typeof token !== "string") {
                if (token.type === "tag" && token.content[0] && token.content[0].type === "tag") {
                  if (token.content[0].content[0].content === "</") {
                    if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
                      openedTags.pop();
                    }
                  } else {
                    if (token.content[token.content.length - 1].content === "/>") {
                    } else {
                      openedTags.push({
                        tagName: stringifyToken(token.content[0].content[1]),
                        openedBraces: 0
                      });
                    }
                  }
                } else if (openedTags.length > 0 && token.type === "punctuation" && token.content === "{") {
                  openedTags[openedTags.length - 1].openedBraces++;
                } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === "punctuation" && token.content === "}") {
                  openedTags[openedTags.length - 1].openedBraces--;
                } else {
                  notTagNorBrace = true;
                }
              }
              if (notTagNorBrace || typeof token === "string") {
                if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
                  var plainText = stringifyToken(token);
                  if (i < tokens2.length - 1 && (typeof tokens2[i + 1] === "string" || tokens2[i + 1].type === "plain-text")) {
                    plainText += stringifyToken(tokens2[i + 1]);
                    tokens2.splice(i + 1, 1);
                  }
                  if (i > 0 && (typeof tokens2[i - 1] === "string" || tokens2[i - 1].type === "plain-text")) {
                    plainText = stringifyToken(tokens2[i - 1]) + plainText;
                    tokens2.splice(i - 1, 1);
                    i--;
                  }
                  tokens2[i] = new Prism2.Token(
                    "plain-text",
                    plainText,
                    null,
                    plainText
                  );
                }
              }
              if (token.content && typeof token.content !== "string") {
                walkTokens(token.content);
              }
            }
          };
          Prism2.hooks.add("after-tokenize", function(env) {
            if (env.language !== "jsx" && env.language !== "tsx") {
              return;
            }
            walkTokens(env.tokens);
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/julia.js
  var require_julia = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/julia.js"(exports, module) {
      "use strict";
      module.exports = julia;
      julia.displayName = "julia";
      julia.aliases = [];
      function julia(Prism) {
        Prism.languages.julia = {
          comment: {
            pattern: /(^|[^\\])(?:#=(?:[^#=]|=(?!#)|#(?!=)|#=(?:[^#=]|=(?!#)|#(?!=))*=#)*=#|#.*)/,
            lookbehind: true
          },
          regex: {
            pattern: /r"(?:\\.|[^"\\\r\n])*"[imsx]{0,4}/,
            greedy: true
          },
          string: {
            pattern: /"""[\s\S]+?"""|(?:\b\w+)?"(?:\\.|[^"\\\r\n])*"|`(?:[^\\`\r\n]|\\.)*`/,
            greedy: true
          },
          char: {
            pattern: /(^|[^\w'])'(?:\\[^\r\n][^'\r\n]*|[^\\\r\n])'/,
            lookbehind: true,
            greedy: true
          },
          keyword: /\b(?:abstract|baremodule|begin|bitstype|break|catch|ccall|const|continue|do|else|elseif|end|export|finally|for|function|global|if|immutable|import|importall|in|let|local|macro|module|print|println|quote|return|struct|try|type|typealias|using|while)\b/,
          boolean: /\b(?:false|true)\b/,
          number: /(?:\b(?=\d)|\B(?=\.))(?:0[box])?(?:[\da-f]+(?:_[\da-f]+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[efp][+-]?\d+(?:_\d+)*)?j?/i,
          operator: /&&|\|\||[-+*^%÷⊻&$\\]=?|\/[\/=]?|!=?=?|\|[=>]?|<(?:<=?|[=:|])?|>(?:=|>>?=?)?|==?=?|[~≠≤≥'√∛]/,
          punctuation: /::?|[{}[\]();,.?]/,
          constant: /\b(?:(?:Inf|NaN)(?:16|32|64)?|im|pi)\b|[πℯ]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/keepalived.js
  var require_keepalived = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/keepalived.js"(exports, module) {
      "use strict";
      module.exports = keepalived;
      keepalived.displayName = "keepalived";
      keepalived.aliases = [];
      function keepalived(Prism) {
        Prism.languages.keepalived = {
          comment: {
            pattern: /[#!].*/,
            greedy: true
          },
          string: {
            pattern: /(^|[^\\])(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/,
            lookbehind: true,
            greedy: true
          },
          ip: {
            pattern: RegExp(
              /\b(?:(?:(?:[\da-f]{1,4}:){7}[\da-f]{1,4}|(?:[\da-f]{1,4}:){6}:[\da-f]{1,4}|(?:[\da-f]{1,4}:){5}:(?:[\da-f]{1,4}:)?[\da-f]{1,4}|(?:[\da-f]{1,4}:){4}:(?:[\da-f]{1,4}:){0,2}[\da-f]{1,4}|(?:[\da-f]{1,4}:){3}:(?:[\da-f]{1,4}:){0,3}[\da-f]{1,4}|(?:[\da-f]{1,4}:){2}:(?:[\da-f]{1,4}:){0,4}[\da-f]{1,4}|(?:[\da-f]{1,4}:){6}<ipv4>|(?:[\da-f]{1,4}:){0,5}:<ipv4>|::(?:[\da-f]{1,4}:){0,5}<ipv4>|[\da-f]{1,4}::(?:[\da-f]{1,4}:){0,5}[\da-f]{1,4}|::(?:[\da-f]{1,4}:){0,6}[\da-f]{1,4}|(?:[\da-f]{1,4}:){1,7}:)(?:\/\d{1,3})?|<ipv4>(?:\/\d{1,2})?)\b/.source.replace(
                /<ipv4>/g,
                function() {
                  return /(?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d))/.source;
                }
              ),
              "i"
            ),
            alias: "number"
          },
          path: {
            pattern: /(\s)\/(?:[^\/\s]+\/)*[^\/\s]*|\b[a-zA-Z]:\\(?:[^\\\s]+\\)*[^\\\s]*/,
            lookbehind: true,
            alias: "string"
          },
          variable: /\$\{?\w+\}?/,
          email: {
            pattern: /[\w-]+@[\w-]+(?:\.[\w-]{2,3}){1,2}/,
            alias: "string"
          },
          "conditional-configuration": {
            pattern: /@\^?[\w-]+/,
            alias: "variable"
          },
          operator: /=/,
          property: /\b(?:BFD_CHECK|DNS_CHECK|FILE_CHECK|HTTP_GET|MISC_CHECK|NAME|PING_CHECK|SCRIPTS|SMTP_CHECK|SSL|SSL_GET|TCP_CHECK|UDP_CHECK|accept|advert_int|alpha|auth_pass|auth_type|authentication|bfd_cpu_affinity|bfd_instance|bfd_no_swap|bfd_priority|bfd_process_name|bfd_rlimit_rttime|bfd_rt_priority|bind_if|bind_port|bindto|ca|certificate|check_unicast_src|checker|checker_cpu_affinity|checker_log_all_failures|checker_no_swap|checker_priority|checker_rlimit_rttime|checker_rt_priority|child_wait_time|connect_ip|connect_port|connect_timeout|dbus_service_name|debug|default_interface|delay|delay_before_retry|delay_loop|digest|dont_track_primary|dynamic|dynamic_interfaces|enable_(?:dbus|script_security|sni|snmp_checker|snmp_rfc|snmp_rfcv2|snmp_rfcv3|snmp_vrrp|traps)|end|fall|fast_recovery|file|flag-[123]|fork_delay|full_command|fwmark|garp_group|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|global_defs|global_tracking|gna_interval|group|ha_suspend|hashed|helo_name|higher_prio_send_advert|hoplimit|http_protocol|hysteresis|idle_tx|include|inhibit_on_failure|init_fail|init_file|instance|interface|interfaces|interval|ip_family|ipvs_process_name|keepalived.conf|kernel_rx_buf_size|key|linkbeat_interfaces|linkbeat_use_polling|log_all_failures|log_unknown_vrids|lower_prio_no_advert|lthreshold|lvs_flush|lvs_flush_onstop|lvs_method|lvs_netlink_cmd_rcv_bufs|lvs_netlink_cmd_rcv_bufs_force|lvs_netlink_monitor_rcv_bufs|lvs_netlink_monitor_rcv_bufs_force|lvs_notify_fifo|lvs_notify_fifo_script|lvs_sched|lvs_sync_daemon|max_auto_priority|max_hops|mcast_src_ip|mh-fallback|mh-port|min_auto_priority_delay|min_rx|min_tx|misc_dynamic|misc_path|misc_timeout|multiplier|name|namespace_with_ipsets|native_ipv6|neighbor_ip|net_namespace|net_namespace_ipvs|nftables|nftables_counters|nftables_ifindex|nftables_priority|no_accept|no_checker_emails|no_email_faults|nopreempt|notification_email|notification_email_from|notify|notify_backup|notify_deleted|notify_down|notify_fault|notify_fifo|notify_fifo_script|notify_master|notify_master_rx_lower_pri|notify_priority_changes|notify_stop|notify_up|old_unicast_checksum|omega|ops|param_match|passive|password|path|persistence_engine|persistence_granularity|persistence_timeout|preempt|preempt_delay|priority|process|process_monitor_rcv_bufs|process_monitor_rcv_bufs_force|process_name|process_names|promote_secondaries|protocol|proxy_arp|proxy_arp_pvlan|quorum|quorum_down|quorum_max|quorum_up|random_seed|real_server|regex|regex_max_offset|regex_min_offset|regex_no_match|regex_options|regex_stack|reload_repeat|reload_time_file|require_reply|retry|rise|router_id|rs_init_notifies|script|script_user|sh-fallback|sh-port|shutdown_script|shutdown_script_timeout|skip_check_adv_addr|smtp_alert|smtp_alert_checker|smtp_alert_vrrp|smtp_connect_timeout|smtp_helo_name|smtp_server|snmp_socket|sorry_server|sorry_server_inhibit|sorry_server_lvs_method|source_ip|start|startup_script|startup_script_timeout|state|static_ipaddress|static_routes|static_rules|status_code|step|strict_mode|sync_group_tracking_weight|terminate_delay|timeout|track_bfd|track_file|track_group|track_interface|track_process|track_script|track_src_ip|ttl|type|umask|unicast_peer|unicast_src_ip|unicast_ttl|url|use_ipvlan|use_pid_dir|use_vmac|user|uthreshold|val[123]|version|virtual_ipaddress|virtual_ipaddress_excluded|virtual_router_id|virtual_routes|virtual_rules|virtual_server|virtual_server_group|virtualhost|vmac_xmit_base|vrrp|vrrp_(?:check_unicast_src|cpu_affinity|garp_interval|garp_lower_prio_delay|garp_lower_prio_repeat|garp_master_delay|garp_master_refresh|garp_master_refresh_repeat|garp_master_repeat|gna_interval|higher_prio_send_advert|instance|ipsets|iptables|lower_prio_no_advert|mcast_group4|mcast_group6|min_garp|netlink_cmd_rcv_bufs|netlink_cmd_rcv_bufs_force|netlink_monitor_rcv_bufs|netlink_monitor_rcv_bufs_force|no_swap|notify_fifo|notify_fifo_script|notify_priority_changes|priority|process_name|rlimit_rttime|rt_priority|rx_bufs_multiplier|rx_bufs_policy|script|skip_check_adv_addr|startup_delay|strict|sync_group|track_process|version)|warmup|weight)\b/,
          constant: /\b(?:A|AAAA|AH|BACKUP|CNAME|DR|MASTER|MX|NAT|NS|PASS|SCTP|SOA|TCP|TUN|TXT|UDP|dh|fo|lblc|lblcr|lc|mh|nq|ovf|rr|sed|sh|wlc|wrr)\b/,
          number: {
            pattern: /(^|[^\w.-])-?\d+(?:\.\d+)?/,
            lookbehind: true
          },
          boolean: /\b(?:false|no|off|on|true|yes)\b/,
          punctuation: /[\{\}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/keyman.js
  var require_keyman = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/keyman.js"(exports, module) {
      "use strict";
      module.exports = keyman;
      keyman.displayName = "keyman";
      keyman.aliases = [];
      function keyman(Prism) {
        Prism.languages.keyman = {
          comment: {
            pattern: /\bc .*/i,
            greedy: true
          },
          string: {
            pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
            greedy: true
          },
          "virtual-key": {
            pattern: /\[\s*(?:(?:ALT|CAPS|CTRL|LALT|LCTRL|NCAPS|RALT|RCTRL|SHIFT)\s+)*(?:[TKU]_[\w?]+|[A-E]\d\d?|"[^"\r\n]*"|'[^'\r\n]*')\s*\]/i,
            greedy: true,
            alias: "function"
          },
          "header-keyword": {
            pattern: /&\w+/,
            alias: "bold"
          },
          "header-statement": {
            pattern: /\b(?:bitmap|bitmaps|caps always off|caps on only|copyright|hotkey|language|layout|message|name|shift frees caps|version)\b/i,
            alias: "bold"
          },
          "rule-keyword": {
            pattern: /\b(?:any|baselayout|beep|call|context|deadkey|dk|if|index|layer|notany|nul|outs|platform|reset|return|save|set|store|use)\b/i,
            alias: "keyword"
          },
          "structural-keyword": {
            pattern: /\b(?:ansi|begin|group|match|nomatch|unicode|using keys)\b/i,
            alias: "keyword"
          },
          "compile-target": {
            pattern: /\$(?:keyman|keymanonly|keymanweb|kmfl|weaver):/i,
            alias: "property"
          },
          number: /\b(?:U\+[\dA-F]+|d\d+|x[\da-f]+|\d+)\b/i,
          operator: /[+>\\$]|\.\./,
          punctuation: /[()=,]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/kotlin.js
  var require_kotlin = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/kotlin.js"(exports, module) {
      "use strict";
      module.exports = kotlin;
      kotlin.displayName = "kotlin";
      kotlin.aliases = ["kt", "kts"];
      function kotlin(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.kotlin = Prism2.languages.extend("clike", {
            keyword: {
              pattern: /(^|[^.])\b(?:abstract|actual|annotation|as|break|by|catch|class|companion|const|constructor|continue|crossinline|data|do|dynamic|else|enum|expect|external|final|finally|for|fun|get|if|import|in|infix|init|inline|inner|interface|internal|is|lateinit|noinline|null|object|open|operator|out|override|package|private|protected|public|reified|return|sealed|set|super|suspend|tailrec|this|throw|to|try|typealias|val|var|vararg|when|where|while)\b/,
              lookbehind: true
            },
            function: [
              {
                pattern: /(?:`[^\r\n`]+`|\b\w+)(?=\s*\()/,
                greedy: true
              },
              {
                pattern: /(\.)(?:`[^\r\n`]+`|\w+)(?=\s*\{)/,
                lookbehind: true,
                greedy: true
              }
            ],
            number: /\b(?:0[xX][\da-fA-F]+(?:_[\da-fA-F]+)*|0[bB][01]+(?:_[01]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?[fFL]?)\b/,
            operator: /\+[+=]?|-[-=>]?|==?=?|!(?:!|==?)?|[\/*%<>]=?|[?:]:?|\.\.|&&|\|\||\b(?:and|inv|or|shl|shr|ushr|xor)\b/
          });
          delete Prism2.languages.kotlin["class-name"];
          var interpolationInside = {
            "interpolation-punctuation": {
              pattern: /^\$\{?|\}$/,
              alias: "punctuation"
            },
            expression: {
              pattern: /[\s\S]+/,
              inside: Prism2.languages.kotlin
            }
          };
          Prism2.languages.insertBefore("kotlin", "string", {
            "string-literal": [
              {
                pattern: /"""(?:[^$]|\$(?:(?!\{)|\{[^{}]*\}))*?"""/,
                alias: "multiline",
                inside: {
                  interpolation: {
                    pattern: /\$(?:[a-z_]\w*|\{[^{}]*\})/i,
                    inside: interpolationInside
                  },
                  string: /[\s\S]+/
                }
              },
              {
                pattern: /"(?:[^"\\\r\n$]|\\.|\$(?:(?!\{)|\{[^{}]*\}))*"/,
                alias: "singleline",
                inside: {
                  interpolation: {
                    pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:[a-z_]\w*|\{[^{}]*\})/i,
                    lookbehind: true,
                    inside: interpolationInside
                  },
                  string: /[\s\S]+/
                }
              }
            ],
            char: {
              pattern: /'(?:[^'\\\r\n]|\\(?:.|u[a-fA-F0-9]{0,4}))'/,
              greedy: true
            }
          });
          delete Prism2.languages.kotlin["string"];
          Prism2.languages.insertBefore("kotlin", "keyword", {
            annotation: {
              pattern: /\B@(?:\w+:)?(?:[A-Z]\w*|\[[^\]]+\])/,
              alias: "builtin"
            }
          });
          Prism2.languages.insertBefore("kotlin", "function", {
            label: {
              pattern: /\b\w+@|@\w+\b/,
              alias: "symbol"
            }
          });
          Prism2.languages.kt = Prism2.languages.kotlin;
          Prism2.languages.kts = Prism2.languages.kotlin;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/kumir.js
  var require_kumir = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/kumir.js"(exports, module) {
      "use strict";
      module.exports = kumir;
      kumir.displayName = "kumir";
      kumir.aliases = ["kum"];
      function kumir(Prism) {
        ;
        (function(Prism2) {
          var nonId = /\s\x00-\x1f\x22-\x2f\x3a-\x3f\x5b-\x5e\x60\x7b-\x7e/.source;
          function wrapId(pattern, flags) {
            return RegExp(pattern.replace(/<nonId>/g, nonId), flags);
          }
          Prism2.languages.kumir = {
            comment: {
              pattern: /\|.*/
            },
            prolog: {
              pattern: /#.*/,
              greedy: true
            },
            string: {
              pattern: /"[^\n\r"]*"|'[^\n\r']*'/,
              greedy: true
            },
            boolean: {
              pattern: wrapId(/(^|[<nonId>])(?:да|нет)(?=[<nonId>]|$)/.source),
              lookbehind: true
            },
            "operator-word": {
              pattern: wrapId(/(^|[<nonId>])(?:и|или|не)(?=[<nonId>]|$)/.source),
              lookbehind: true,
              alias: "keyword"
            },
            "system-variable": {
              pattern: wrapId(/(^|[<nonId>])знач(?=[<nonId>]|$)/.source),
              lookbehind: true,
              alias: "keyword"
            },
            type: [
              {
                pattern: wrapId(
                  /(^|[<nonId>])(?:вещ|лит|лог|сим|цел)(?:\x20*таб)?(?=[<nonId>]|$)/.source
                ),
                lookbehind: true,
                alias: "builtin"
              },
              {
                pattern: wrapId(
                  /(^|[<nonId>])(?:компл|сканкод|файл|цвет)(?=[<nonId>]|$)/.source
                ),
                lookbehind: true,
                alias: "important"
              }
            ],
            keyword: {
              pattern: wrapId(
                /(^|[<nonId>])(?:алг|арг(?:\x20*рез)?|ввод|ВКЛЮЧИТЬ|вс[её]|выбор|вывод|выход|дано|для|до|дс|если|иначе|исп|использовать|кон(?:(?:\x20+|_)исп)?|кц(?:(?:\x20+|_)при)?|надо|нач|нс|нц|от|пауза|пока|при|раза?|рез|стоп|таб|то|утв|шаг)(?=[<nonId>]|$)/.source
              ),
              lookbehind: true
            },
            name: {
              pattern: wrapId(
                /(^|[<nonId>])[^\d<nonId>][^<nonId>]*(?:\x20+[^<nonId>]+)*(?=[<nonId>]|$)/.source
              ),
              lookbehind: true
            },
            number: {
              pattern: wrapId(
                /(^|[<nonId>])(?:\B\$[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)(?=[<nonId>]|$)/.source,
                "i"
              ),
              lookbehind: true
            },
            punctuation: /:=|[(),:;\[\]]/,
            "operator-char": {
              pattern: /\*\*?|<[=>]?|>=?|[-+/=]/,
              alias: "operator"
            }
          };
          Prism2.languages.kum = Prism2.languages.kumir;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/kusto.js
  var require_kusto = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/kusto.js"(exports, module) {
      "use strict";
      module.exports = kusto;
      kusto.displayName = "kusto";
      kusto.aliases = [];
      function kusto(Prism) {
        Prism.languages.kusto = {
          comment: {
            pattern: /\/\/.*/,
            greedy: true
          },
          string: {
            pattern: /```[\s\S]*?```|[hH]?(?:"(?:[^\r\n\\"]|\\.)*"|'(?:[^\r\n\\']|\\.)*'|@(?:"[^\r\n"]*"|'[^\r\n']*'))/,
            greedy: true
          },
          verb: {
            pattern: /(\|\s*)[a-z][\w-]*/i,
            lookbehind: true,
            alias: "keyword"
          },
          command: {
            pattern: /\.[a-z][a-z\d-]*\b/,
            alias: "keyword"
          },
          "class-name": /\b(?:bool|datetime|decimal|dynamic|guid|int|long|real|string|timespan)\b/,
          keyword: /\b(?:access|alias|and|anti|as|asc|auto|between|by|(?:contains|(?:ends|starts)with|has(?:perfix|suffix)?)(?:_cs)?|database|declare|desc|external|from|fullouter|has_all|in|ingestion|inline|inner|innerunique|into|(?:left|right)(?:anti(?:semi)?|inner|outer|semi)?|let|like|local|not|of|on|or|pattern|print|query_parameters|range|restrict|schema|set|step|table|tables|to|view|where|with|matches\s+regex|nulls\s+(?:first|last))(?![\w-])/,
          boolean: /\b(?:false|null|true)\b/,
          function: /\b[a-z_]\w*(?=\s*\()/,
          datetime: [
            {
              pattern: /\b(?:(?:Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\s*,\s*)?\d{1,2}(?:\s+|-)(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)(?:\s+|-)\d{2}\s+\d{2}:\d{2}(?::\d{2})?(?:\s*(?:\b(?:[A-Z]|(?:[ECMT][DS]|GM|U)T)|[+-]\d{4}))?\b/,
              alias: "number"
            },
            {
              pattern: /[+-]?\b(?:\d{4}-\d{2}-\d{2}(?:[ T]\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?)?|\d{2}:\d{2}(?::\d{2}(?:\.\d+)?)?)Z?/,
              alias: "number"
            }
          ],
          number: /\b(?:0x[0-9A-Fa-f]+|\d+(?:\.\d+)?(?:[Ee][+-]?\d+)?)(?:(?:min|sec|[mnµ]s|[dhms]|microsecond|tick)\b)?|[+-]?\binf\b/,
          operator: /=>|[!=]~|[!=<>]=?|[-+*/%|]|\.\./,
          punctuation: /[()\[\]{},;.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/latex.js
  var require_latex = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/latex.js"(exports, module) {
      "use strict";
      module.exports = latex;
      latex.displayName = "latex";
      latex.aliases = ["tex", "context"];
      function latex(Prism) {
        ;
        (function(Prism2) {
          var funcPattern = /\\(?:[^a-z()[\]]|[a-z*]+)/i;
          var insideEqu = {
            "equation-command": {
              pattern: funcPattern,
              alias: "regex"
            }
          };
          Prism2.languages.latex = {
            comment: /%.*/,
            cdata: {
              pattern: /(\\begin\{((?:lstlisting|verbatim)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
              lookbehind: true
            },
            equation: [
              {
                pattern: /\$\$(?:\\[\s\S]|[^\\$])+\$\$|\$(?:\\[\s\S]|[^\\$])+\$|\\\([\s\S]*?\\\)|\\\[[\s\S]*?\\\]/,
                inside: insideEqu,
                alias: "string"
              },
              {
                pattern: /(\\begin\{((?:align|eqnarray|equation|gather|math|multline)\*?)\})[\s\S]*?(?=\\end\{\2\})/,
                lookbehind: true,
                inside: insideEqu,
                alias: "string"
              }
            ],
            keyword: {
              pattern: /(\\(?:begin|cite|documentclass|end|label|ref|usepackage)(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
              lookbehind: true
            },
            url: {
              pattern: /(\\url\{)[^}]+(?=\})/,
              lookbehind: true
            },
            headline: {
              pattern: /(\\(?:chapter|frametitle|paragraph|part|section|subparagraph|subsection|subsubparagraph|subsubsection|subsubsubparagraph)\*?(?:\[[^\]]+\])?\{)[^}]+(?=\})/,
              lookbehind: true,
              alias: "class-name"
            },
            function: {
              pattern: funcPattern,
              alias: "selector"
            },
            punctuation: /[[\]{}&]/
          };
          Prism2.languages.tex = Prism2.languages.latex;
          Prism2.languages.context = Prism2.languages.latex;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/php.js
  var require_php = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/php.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = php;
      php.displayName = "php";
      php.aliases = [];
      function php(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          var comment2 = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/;
          var constant = [
            {
              pattern: /\b(?:false|true)\b/i,
              alias: "boolean"
            },
            {
              pattern: /(::\s*)\b[a-z_]\w*\b(?!\s*\()/i,
              greedy: true,
              lookbehind: true
            },
            {
              pattern: /(\b(?:case|const)\s+)\b[a-z_]\w*(?=\s*[;=])/i,
              greedy: true,
              lookbehind: true
            },
            /\b(?:null)\b/i,
            /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/
          ];
          var number3 = /\b0b[01]+(?:_[01]+)*\b|\b0o[0-7]+(?:_[0-7]+)*\b|\b0x[\da-f]+(?:_[\da-f]+)*\b|(?:\b\d+(?:_\d+)*\.?(?:\d+(?:_\d+)*)?|\B\.\d+)(?:e[+-]?\d+)?/i;
          var operator = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/;
          var punctuation2 = /[{}\[\](),:;]/;
          Prism2.languages.php = {
            delimiter: {
              pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i,
              alias: "important"
            },
            comment: comment2,
            variable: /\$+(?:\w+\b|(?=\{))/,
            package: {
              pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
              lookbehind: true,
              inside: {
                punctuation: /\\/
              }
            },
            "class-name-definition": {
              pattern: /(\b(?:class|enum|interface|trait)\s+)\b[a-z_]\w*(?!\\)\b/i,
              lookbehind: true,
              alias: "class-name"
            },
            "function-definition": {
              pattern: /(\bfunction\s+)[a-z_]\w*(?=\s*\()/i,
              lookbehind: true,
              alias: "function"
            },
            keyword: [
              {
                pattern: /(\(\s*)\b(?:array|bool|boolean|float|int|integer|object|string)\b(?=\s*\))/i,
                alias: "type-casting",
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /([(,?]\s*)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string)\b(?=\s*\$)/i,
                alias: "type-hint",
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:array(?!\s*\()|bool|callable|(?:false|null)(?=\s*\|)|float|int|iterable|mixed|object|self|static|string|void)\b/i,
                alias: "return-type",
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /\b(?:array(?!\s*\()|bool|float|int|iterable|mixed|object|string|void)\b/i,
                alias: "type-declaration",
                greedy: true
              },
              {
                pattern: /(\|\s*)(?:false|null)\b|\b(?:false|null)(?=\s*\|)/i,
                alias: "type-declaration",
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /\b(?:parent|self|static)(?=\s*::)/i,
                alias: "static-context",
                greedy: true
              },
              {
                pattern: /(\byield\s+)from\b/i,
                lookbehind: true
              },
              /\bclass\b/i,
              {
                pattern: /((?:^|[^\s>:]|(?:^|[^-])>|(?:^|[^:]):)\s*)\b(?:abstract|and|array|as|break|callable|case|catch|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|enum|eval|exit|extends|final|finally|fn|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|match|namespace|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield|__halt_compiler)\b/i,
                lookbehind: true
              }
            ],
            "argument-name": {
              pattern: /([(,]\s+)\b[a-z_]\w*(?=\s*:(?!:))/i,
              lookbehind: true
            },
            "class-name": [
              {
                pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i,
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i,
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i,
                greedy: true
              },
              {
                pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i,
                alias: "class-name-fully-qualified",
                greedy: true,
                lookbehind: true,
                inside: {
                  punctuation: /\\/
                }
              },
              {
                pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i,
                alias: "class-name-fully-qualified",
                greedy: true,
                inside: {
                  punctuation: /\\/
                }
              },
              {
                pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
                alias: "class-name-fully-qualified",
                greedy: true,
                lookbehind: true,
                inside: {
                  punctuation: /\\/
                }
              },
              {
                pattern: /\b[a-z_]\w*(?=\s*\$)/i,
                alias: "type-declaration",
                greedy: true
              },
              {
                pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
                alias: ["class-name-fully-qualified", "type-declaration"],
                greedy: true,
                inside: {
                  punctuation: /\\/
                }
              },
              {
                pattern: /\b[a-z_]\w*(?=\s*::)/i,
                alias: "static-context",
                greedy: true
              },
              {
                pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i,
                alias: ["class-name-fully-qualified", "static-context"],
                greedy: true,
                inside: {
                  punctuation: /\\/
                }
              },
              {
                pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i,
                alias: "type-hint",
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i,
                alias: ["class-name-fully-qualified", "type-hint"],
                greedy: true,
                lookbehind: true,
                inside: {
                  punctuation: /\\/
                }
              },
              {
                pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i,
                alias: "return-type",
                greedy: true,
                lookbehind: true
              },
              {
                pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i,
                alias: ["class-name-fully-qualified", "return-type"],
                greedy: true,
                lookbehind: true,
                inside: {
                  punctuation: /\\/
                }
              }
            ],
            constant,
            function: {
              pattern: /(^|[^\\\w])\\?[a-z_](?:[\w\\]*\w)?(?=\s*\()/i,
              lookbehind: true,
              inside: {
                punctuation: /\\/
              }
            },
            property: {
              pattern: /(->\s*)\w+/,
              lookbehind: true
            },
            number: number3,
            operator,
            punctuation: punctuation2
          };
          var string_interpolation = {
            pattern: /\{\$(?:\{(?:\{[^{}]+\}|[^{}]+)\}|[^{}])+\}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)?)/,
            lookbehind: true,
            inside: Prism2.languages.php
          };
          var string3 = [
            {
              pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/,
              alias: "nowdoc-string",
              greedy: true,
              inside: {
                delimiter: {
                  pattern: /^<<<'[^']+'|[a-z_]\w*;$/i,
                  alias: "symbol",
                  inside: {
                    punctuation: /^<<<'?|[';]$/
                  }
                }
              }
            },
            {
              pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i,
              alias: "heredoc-string",
              greedy: true,
              inside: {
                delimiter: {
                  pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i,
                  alias: "symbol",
                  inside: {
                    punctuation: /^<<<"?|[";]$/
                  }
                },
                interpolation: string_interpolation
              }
            },
            {
              pattern: /`(?:\\[\s\S]|[^\\`])*`/,
              alias: "backtick-quoted-string",
              greedy: true
            },
            {
              pattern: /'(?:\\[\s\S]|[^\\'])*'/,
              alias: "single-quoted-string",
              greedy: true
            },
            {
              pattern: /"(?:\\[\s\S]|[^\\"])*"/,
              alias: "double-quoted-string",
              greedy: true,
              inside: {
                interpolation: string_interpolation
              }
            }
          ];
          Prism2.languages.insertBefore("php", "variable", {
            string: string3,
            attribute: {
              pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im,
              greedy: true,
              inside: {
                "attribute-content": {
                  pattern: /^(#\[)[\s\S]+(?=\]$)/,
                  lookbehind: true,
                  inside: {
                    comment: comment2,
                    string: string3,
                    "attribute-class-name": [
                      {
                        pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i,
                        alias: "class-name",
                        greedy: true,
                        lookbehind: true
                      },
                      {
                        pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i,
                        alias: ["class-name", "class-name-fully-qualified"],
                        greedy: true,
                        lookbehind: true,
                        inside: {
                          punctuation: /\\/
                        }
                      }
                    ],
                    constant,
                    number: number3,
                    operator,
                    punctuation: punctuation2
                  }
                },
                delimiter: {
                  pattern: /^#\[|\]$/,
                  alias: "punctuation"
                }
              }
            }
          });
          Prism2.hooks.add("before-tokenize", function(env) {
            if (!/<\?/.test(env.code)) {
              return;
            }
            var phpPattern = /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "php",
              phpPattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "php");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/latte.js
  var require_latte = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/latte.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      var refractorPhp = require_php();
      module.exports = latte;
      latte.displayName = "latte";
      latte.aliases = [];
      function latte(Prism) {
        Prism.register(refractorMarkupTemplating);
        Prism.register(refractorPhp);
        (function(Prism2) {
          Prism2.languages.latte = {
            comment: /^\{\*[\s\S]*/,
            "latte-tag": {
              pattern: /(^\{(?:\/(?=[a-z]))?)(?:[=_]|[a-z]\w*\b(?!\())/i,
              lookbehind: true,
              alias: "important"
            },
            delimiter: {
              pattern: /^\{\/?|\}$/,
              alias: "punctuation"
            },
            php: {
              pattern: /\S(?:[\s\S]*\S)?/,
              alias: "language-php",
              inside: Prism2.languages.php
            }
          };
          var markupLatte = Prism2.languages.extend("markup", {});
          Prism2.languages.insertBefore(
            "inside",
            "attr-value",
            {
              "n-attr": {
                pattern: /n:[\w-]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+))?/,
                inside: {
                  "attr-name": {
                    pattern: /^[^\s=]+/,
                    alias: "important"
                  },
                  "attr-value": {
                    pattern: /=[\s\S]+/,
                    inside: {
                      punctuation: [
                        /^=/,
                        {
                          pattern: /^(\s*)["']|["']$/,
                          lookbehind: true
                        }
                      ],
                      php: {
                        pattern: /\S(?:[\s\S]*\S)?/,
                        inside: Prism2.languages.php
                      }
                    }
                  }
                }
              }
            },
            markupLatte.tag
          );
          Prism2.hooks.add("before-tokenize", function(env) {
            if (env.language !== "latte") {
              return;
            }
            var lattePattern = /\{\*[\s\S]*?\*\}|\{[^'"\s{}*](?:[^"'/{}]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|\/\*(?:[^*]|\*(?!\/))*\*\/)*\}/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "latte",
              lattePattern
            );
            env.grammar = markupLatte;
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "latte");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/less.js
  var require_less = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/less.js"(exports, module) {
      "use strict";
      module.exports = less;
      less.displayName = "less";
      less.aliases = [];
      function less(Prism) {
        Prism.languages.less = Prism.languages.extend("css", {
          comment: [
            /\/\*[\s\S]*?\*\//,
            {
              pattern: /(^|[^\\])\/\/.*/,
              lookbehind: true
            }
          ],
          atrule: {
            pattern: /@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,
            inside: {
              punctuation: /[:()]/
            }
          },
          selector: {
            pattern: /(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,
            inside: {
              variable: /@+[\w-]+/
            }
          },
          property: /(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,
          operator: /[+\-*\/]/
        });
        Prism.languages.insertBefore("less", "property", {
          variable: [
            {
              pattern: /@[\w-]+\s*:/,
              inside: {
                punctuation: /:/
              }
            },
            /@@?[\w-]+/
          ],
          "mixin-usage": {
            pattern: /([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,
            lookbehind: true,
            alias: "function"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/scheme.js
  var require_scheme = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/scheme.js"(exports, module) {
      "use strict";
      module.exports = scheme;
      scheme.displayName = "scheme";
      scheme.aliases = [];
      function scheme(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.scheme = {
            comment: /;.*|#;\s*(?:\((?:[^()]|\([^()]*\))*\)|\[(?:[^\[\]]|\[[^\[\]]*\])*\])|#\|(?:[^#|]|#(?!\|)|\|(?!#)|#\|(?:[^#|]|#(?!\|)|\|(?!#))*\|#)*\|#/,
            string: {
              pattern: /"(?:[^"\\]|\\.)*"/,
              greedy: true
            },
            symbol: {
              pattern: /'[^()\[\]#'\s]+/,
              greedy: true
            },
            char: {
              pattern: /#\\(?:[ux][a-fA-F\d]+\b|[-a-zA-Z]+\b|[\uD800-\uDBFF][\uDC00-\uDFFF]|\S)/,
              greedy: true
            },
            "lambda-parameter": [
              {
                pattern: /((?:^|[^'`#])[(\[]lambda\s+)(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)/,
                lookbehind: true
              },
              {
                pattern: /((?:^|[^'`#])[(\[]lambda\s+[(\[])[^()\[\]']+/,
                lookbehind: true
              }
            ],
            keyword: {
              pattern: /((?:^|[^'`#])[(\[])(?:begin|case(?:-lambda)?|cond(?:-expand)?|define(?:-library|-macro|-record-type|-syntax|-values)?|defmacro|delay(?:-force)?|do|else|except|export|guard|if|import|include(?:-ci|-library-declarations)?|lambda|let(?:rec)?(?:-syntax|-values|\*)?|let\*-values|only|parameterize|prefix|(?:quasi-?)?quote|rename|set!|syntax-(?:case|rules)|unless|unquote(?:-splicing)?|when)(?=[()\[\]\s]|$)/,
              lookbehind: true
            },
            builtin: {
              pattern: /((?:^|[^'`#])[(\[])(?:abs|and|append|apply|assoc|ass[qv]|binary-port\?|boolean=?\?|bytevector(?:-append|-copy|-copy!|-length|-u8-ref|-u8-set!|\?)?|caar|cadr|call-with-(?:current-continuation|port|values)|call\/cc|car|cdar|cddr|cdr|ceiling|char(?:->integer|-ready\?|\?|<\?|<=\?|=\?|>\?|>=\?)|close-(?:input-port|output-port|port)|complex\?|cons|current-(?:error|input|output)-port|denominator|dynamic-wind|eof-object\??|eq\?|equal\?|eqv\?|error|error-object(?:-irritants|-message|\?)|eval|even\?|exact(?:-integer-sqrt|-integer\?|\?)?|expt|features|file-error\?|floor(?:-quotient|-remainder|\/)?|flush-output-port|for-each|gcd|get-output-(?:bytevector|string)|inexact\??|input-port(?:-open\?|\?)|integer(?:->char|\?)|lcm|length|list(?:->string|->vector|-copy|-ref|-set!|-tail|\?)?|make-(?:bytevector|list|parameter|string|vector)|map|max|member|memq|memv|min|modulo|negative\?|newline|not|null\?|number(?:->string|\?)|numerator|odd\?|open-(?:input|output)-(?:bytevector|string)|or|output-port(?:-open\?|\?)|pair\?|peek-char|peek-u8|port\?|positive\?|procedure\?|quotient|raise|raise-continuable|rational\?|rationalize|read-(?:bytevector|bytevector!|char|error\?|line|string|u8)|real\?|remainder|reverse|round|set-c[ad]r!|square|string(?:->list|->number|->symbol|->utf8|->vector|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?|<\?|<=\?|=\?|>\?|>=\?)?|substring|symbol(?:->string|\?|=\?)|syntax-error|textual-port\?|truncate(?:-quotient|-remainder|\/)?|u8-ready\?|utf8->string|values|vector(?:->list|->string|-append|-copy|-copy!|-fill!|-for-each|-length|-map|-ref|-set!|\?)?|with-exception-handler|write-(?:bytevector|char|string|u8)|zero\?)(?=[()\[\]\s]|$)/,
              lookbehind: true
            },
            operator: {
              pattern: /((?:^|[^'`#])[(\[])(?:[-+*%/]|[<>]=?|=>?)(?=[()\[\]\s]|$)/,
              lookbehind: true
            },
            number: {
              pattern: RegExp(
                SortedBNF({
                  "<ureal dec>": /\d+(?:\/\d+)|(?:\d+(?:\.\d*)?|\.\d+)(?:[esfdl][+-]?\d+)?/.source,
                  "<real dec>": /[+-]?<ureal dec>|[+-](?:inf|nan)\.0/.source,
                  "<imaginary dec>": /[+-](?:<ureal dec>|(?:inf|nan)\.0)?i/.source,
                  "<complex dec>": /<real dec>(?:@<real dec>|<imaginary dec>)?|<imaginary dec>/.source,
                  "<num dec>": /(?:#d(?:#[ei])?|#[ei](?:#d)?)?<complex dec>/.source,
                  "<ureal box>": /[0-9a-f]+(?:\/[0-9a-f]+)?/.source,
                  "<real box>": /[+-]?<ureal box>|[+-](?:inf|nan)\.0/.source,
                  "<imaginary box>": /[+-](?:<ureal box>|(?:inf|nan)\.0)?i/.source,
                  "<complex box>": /<real box>(?:@<real box>|<imaginary box>)?|<imaginary box>/.source,
                  "<num box>": /#[box](?:#[ei])?|(?:#[ei])?#[box]<complex box>/.source,
                  "<number>": /(^|[()\[\]\s])(?:<num dec>|<num box>)(?=[()\[\]\s]|$)/.source
                }),
                "i"
              ),
              lookbehind: true
            },
            boolean: {
              pattern: /(^|[()\[\]\s])#(?:[ft]|false|true)(?=[()\[\]\s]|$)/,
              lookbehind: true
            },
            function: {
              pattern: /((?:^|[^'`#])[(\[])(?:[^|()\[\]'\s]+|\|(?:[^\\|]|\\.)*\|)(?=[()\[\]\s]|$)/,
              lookbehind: true
            },
            identifier: {
              pattern: /(^|[()\[\]\s])\|(?:[^\\|]|\\.)*\|(?=[()\[\]\s]|$)/,
              lookbehind: true,
              greedy: true
            },
            punctuation: /[()\[\]']/
          };
          function SortedBNF(grammar) {
            for (var key in grammar) {
              grammar[key] = grammar[key].replace(/<[\w\s]+>/g, function(key2) {
                return "(?:" + grammar[key2].trim() + ")";
              });
            }
            return grammar[key];
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/lilypond.js
  var require_lilypond = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/lilypond.js"(exports, module) {
      "use strict";
      var refractorScheme = require_scheme();
      module.exports = lilypond;
      lilypond.displayName = "lilypond";
      lilypond.aliases = [];
      function lilypond(Prism) {
        Prism.register(refractorScheme);
        (function(Prism2) {
          var schemeExpression = /\((?:[^();"#\\]|\\[\s\S]|;.*(?!.)|"(?:[^"\\]|\\.)*"|#(?:\{(?:(?!#\})[\s\S])*#\}|[^{])|<expr>)*\)/.source;
          var recursivenessLog2 = 5;
          for (var i = 0; i < recursivenessLog2; i++) {
            schemeExpression = schemeExpression.replace(/<expr>/g, function() {
              return schemeExpression;
            });
          }
          schemeExpression = schemeExpression.replace(/<expr>/g, /[^\s\S]/.source);
          var lilypond2 = Prism2.languages.lilypond = {
            comment: /%(?:(?!\{).*|\{[\s\S]*?%\})/,
            "embedded-scheme": {
              pattern: RegExp(
                /(^|[=\s])#(?:"(?:[^"\\]|\\.)*"|[^\s()"]*(?:[^\s()]|<expr>))/.source.replace(
                  /<expr>/g,
                  function() {
                    return schemeExpression;
                  }
                ),
                "m"
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                scheme: {
                  pattern: /^(#)[\s\S]+$/,
                  lookbehind: true,
                  alias: "language-scheme",
                  inside: {
                    "embedded-lilypond": {
                      pattern: /#\{[\s\S]*?#\}/,
                      greedy: true,
                      inside: {
                        punctuation: /^#\{|#\}$/,
                        lilypond: {
                          pattern: /[\s\S]+/,
                          alias: "language-lilypond",
                          inside: null
                        }
                      }
                    },
                    rest: Prism2.languages.scheme
                  }
                },
                punctuation: /#/
              }
            },
            string: {
              pattern: /"(?:[^"\\]|\\.)*"/,
              greedy: true
            },
            "class-name": {
              pattern: /(\\new\s+)[\w-]+/,
              lookbehind: true
            },
            keyword: {
              pattern: /\\[a-z][-\w]*/i,
              inside: {
                punctuation: /^\\/
              }
            },
            operator: /[=|]|<<|>>/,
            punctuation: {
              pattern: /(^|[a-z\d])(?:'+|,+|[_^]?-[_^]?(?:[-+^!>._]|(?=\d))|[_^]\.?|[.!])|[{}()[\]<>^~]|\\[()[\]<>\\!]|--|__/,
              lookbehind: true
            },
            number: /\b\d+(?:\/\d+)?\b/
          };
          lilypond2["embedded-scheme"].inside["scheme"].inside["embedded-lilypond"].inside["lilypond"].inside = lilypond2;
          Prism2.languages.ly = lilypond2;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/liquid.js
  var require_liquid = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/liquid.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = liquid;
      liquid.displayName = "liquid";
      liquid.aliases = [];
      function liquid(Prism) {
        Prism.register(refractorMarkupTemplating);
        Prism.languages.liquid = {
          comment: {
            pattern: /(^\{%\s*comment\s*%\})[\s\S]+(?=\{%\s*endcomment\s*%\}$)/,
            lookbehind: true
          },
          delimiter: {
            pattern: /^\{(?:\{\{|[%\{])-?|-?(?:\}\}|[%\}])\}$/,
            alias: "punctuation"
          },
          string: {
            pattern: /"[^"]*"|'[^']*'/,
            greedy: true
          },
          keyword: /\b(?:as|assign|break|(?:end)?(?:capture|case|comment|for|form|if|paginate|raw|style|tablerow|unless)|continue|cycle|decrement|echo|else|elsif|in|include|increment|limit|liquid|offset|range|render|reversed|section|when|with)\b/,
          object: /\b(?:address|all_country_option_tags|article|block|blog|cart|checkout|collection|color|country|country_option_tags|currency|current_page|current_tags|customer|customer_address|date|discount_allocation|discount_application|external_video|filter|filter_value|font|forloop|fulfillment|generic_file|gift_card|group|handle|image|line_item|link|linklist|localization|location|measurement|media|metafield|model|model_source|order|page|page_description|page_image|page_title|part|policy|product|product_option|recommendations|request|robots|routes|rule|script|search|selling_plan|selling_plan_allocation|selling_plan_group|shipping_method|shop|shop_locale|sitemap|store_availability|tax_line|template|theme|transaction|unit_price_measurement|user_agent|variant|video|video_source)\b/,
          function: [
            {
              pattern: /(\|\s*)\w+/,
              lookbehind: true,
              alias: "filter"
            },
            {
              pattern: /(\.\s*)(?:first|last|size)/,
              lookbehind: true
            }
          ],
          boolean: /\b(?:false|nil|true)\b/,
          range: {
            pattern: /\.\./,
            alias: "operator"
          },
          number: /\b\d+(?:\.\d+)?\b/,
          operator: /[!=]=|<>|[<>]=?|[|?:=-]|\b(?:and|contains(?=\s)|or)\b/,
          punctuation: /[.,\[\]()]/,
          empty: {
            pattern: /\bempty\b/,
            alias: "keyword"
          }
        };
        Prism.hooks.add("before-tokenize", function(env) {
          var liquidPattern = /\{%\s*comment\s*%\}[\s\S]*?\{%\s*endcomment\s*%\}|\{(?:%[\s\S]*?%|\{\{[\s\S]*?\}\}|\{[\s\S]*?\})\}/g;
          var insideRaw = false;
          Prism.languages["markup-templating"].buildPlaceholders(
            env,
            "liquid",
            liquidPattern,
            function(match) {
              var tagMatch = /^\{%-?\s*(\w+)/.exec(match);
              if (tagMatch) {
                var tag = tagMatch[1];
                if (tag === "raw" && !insideRaw) {
                  insideRaw = true;
                  return true;
                } else if (tag === "endraw") {
                  insideRaw = false;
                  return true;
                }
              }
              return !insideRaw;
            }
          );
        });
        Prism.hooks.add("after-tokenize", function(env) {
          Prism.languages["markup-templating"].tokenizePlaceholders(env, "liquid");
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/lisp.js
  var require_lisp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/lisp.js"(exports, module) {
      "use strict";
      module.exports = lisp;
      lisp.displayName = "lisp";
      lisp.aliases = [];
      function lisp(Prism) {
        ;
        (function(Prism2) {
          function simple_form(name) {
            return RegExp(/(\()/.source + "(?:" + name + ")" + /(?=[\s\)])/.source);
          }
          function primitive(pattern) {
            return RegExp(
              /([\s([])/.source + "(?:" + pattern + ")" + /(?=[\s)])/.source
            );
          }
          var symbol = /(?!\d)[-+*/~!@$%^=<>{}\w]+/.source;
          var marker = "&" + symbol;
          var par = "(\\()";
          var endpar = "(?=\\))";
          var space3 = "(?=\\s)";
          var nestedPar = /(?:[^()]|\((?:[^()]|\((?:[^()]|\((?:[^()]|\((?:[^()]|\([^()]*\))*\))*\))*\))*\))*/.source;
          var language = {
            heading: {
              pattern: /;;;.*/,
              alias: ["comment", "title"]
            },
            comment: /;.*/,
            string: {
              pattern: /"(?:[^"\\]|\\.)*"/,
              greedy: true,
              inside: {
                argument: /[-A-Z]+(?=[.,\s])/,
                symbol: RegExp("`" + symbol + "'")
              }
            },
            "quoted-symbol": {
              pattern: RegExp("#?'" + symbol),
              alias: ["variable", "symbol"]
            },
            "lisp-property": {
              pattern: RegExp(":" + symbol),
              alias: "property"
            },
            splice: {
              pattern: RegExp(",@?" + symbol),
              alias: ["symbol", "variable"]
            },
            keyword: [
              {
                pattern: RegExp(
                  par + "(?:and|(?:cl-)?letf|cl-loop|cond|cons|error|if|(?:lexical-)?let\\*?|message|not|null|or|provide|require|setq|unless|use-package|when|while)" + space3
                ),
                lookbehind: true
              },
              {
                pattern: RegExp(
                  par + "(?:append|by|collect|concat|do|finally|for|in|return)" + space3
                ),
                lookbehind: true
              }
            ],
            declare: {
              pattern: simple_form(/declare/.source),
              lookbehind: true,
              alias: "keyword"
            },
            interactive: {
              pattern: simple_form(/interactive/.source),
              lookbehind: true,
              alias: "keyword"
            },
            boolean: {
              pattern: primitive(/nil|t/.source),
              lookbehind: true
            },
            number: {
              pattern: primitive(/[-+]?\d+(?:\.\d*)?/.source),
              lookbehind: true
            },
            defvar: {
              pattern: RegExp(par + "def(?:const|custom|group|var)\\s+" + symbol),
              lookbehind: true,
              inside: {
                keyword: /^def[a-z]+/,
                variable: RegExp(symbol)
              }
            },
            defun: {
              pattern: RegExp(
                par + /(?:cl-)?(?:defmacro|defun\*?)\s+/.source + symbol + /\s+\(/.source + nestedPar + /\)/.source
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                keyword: /^(?:cl-)?def\S+/,
                arguments: null,
                function: {
                  pattern: RegExp("(^\\s)" + symbol),
                  lookbehind: true
                },
                punctuation: /[()]/
              }
            },
            lambda: {
              pattern: RegExp(
                par + "lambda\\s+\\(\\s*(?:&?" + symbol + "(?:\\s+&?" + symbol + ")*\\s*)?\\)"
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                keyword: /^lambda/,
                arguments: null,
                punctuation: /[()]/
              }
            },
            car: {
              pattern: RegExp(par + symbol),
              lookbehind: true
            },
            punctuation: [
              /(?:['`,]?\(|[)\[\]])/,
              {
                pattern: /(\s)\.(?=\s)/,
                lookbehind: true
              }
            ]
          };
          var arg = {
            "lisp-marker": RegExp(marker),
            varform: {
              pattern: RegExp(
                /\(/.source + symbol + /\s+(?=\S)/.source + nestedPar + /\)/.source
              ),
              inside: language
            },
            argument: {
              pattern: RegExp(/(^|[\s(])/.source + symbol),
              lookbehind: true,
              alias: "variable"
            },
            rest: language
          };
          var forms = "\\S+(?:\\s+\\S+)*";
          var arglist = {
            pattern: RegExp(par + nestedPar + endpar),
            lookbehind: true,
            inside: {
              "rest-vars": {
                pattern: RegExp("&(?:body|rest)\\s+" + forms),
                inside: arg
              },
              "other-marker-vars": {
                pattern: RegExp("&(?:aux|optional)\\s+" + forms),
                inside: arg
              },
              keys: {
                pattern: RegExp("&key\\s+" + forms + "(?:\\s+&allow-other-keys)?"),
                inside: arg
              },
              argument: {
                pattern: RegExp(symbol),
                alias: "variable"
              },
              punctuation: /[()]/
            }
          };
          language["lambda"].inside.arguments = arglist;
          language["defun"].inside.arguments = Prism2.util.clone(arglist);
          language["defun"].inside.arguments.inside.sublist = arglist;
          Prism2.languages.lisp = language;
          Prism2.languages.elisp = language;
          Prism2.languages.emacs = language;
          Prism2.languages["emacs-lisp"] = language;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/livescript.js
  var require_livescript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/livescript.js"(exports, module) {
      "use strict";
      module.exports = livescript;
      livescript.displayName = "livescript";
      livescript.aliases = [];
      function livescript(Prism) {
        Prism.languages.livescript = {
          comment: [
            {
              pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
              lookbehind: true
            },
            {
              pattern: /(^|[^\\])#.*/,
              lookbehind: true
            }
          ],
          "interpolated-string": {
            pattern: /(^|[^"])("""|")(?:\\[\s\S]|(?!\2)[^\\])*\2(?!")/,
            lookbehind: true,
            greedy: true,
            inside: {
              variable: {
                pattern: /(^|[^\\])#[a-z_](?:-?[a-z]|[\d_])*/m,
                lookbehind: true
              },
              interpolation: {
                pattern: /(^|[^\\])#\{[^}]+\}/m,
                lookbehind: true,
                inside: {
                  "interpolation-punctuation": {
                    pattern: /^#\{|\}$/,
                    alias: "variable"
                  }
                }
              },
              string: /[\s\S]+/
            }
          },
          string: [
            {
              pattern: /('''|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,
              greedy: true
            },
            {
              pattern: /<\[[\s\S]*?\]>/,
              greedy: true
            },
            /\\[^\s,;\])}]+/
          ],
          regex: [
            {
              pattern: /\/\/(?:\[[^\r\n\]]*\]|\\.|(?!\/\/)[^\\\[])+\/\/[gimyu]{0,5}/,
              greedy: true,
              inside: {
                comment: {
                  pattern: /(^|[^\\])#.*/,
                  lookbehind: true
                }
              }
            },
            {
              pattern: /\/(?:\[[^\r\n\]]*\]|\\.|[^/\\\r\n\[])+\/[gimyu]{0,5}/,
              greedy: true
            }
          ],
          keyword: {
            pattern: /(^|(?!-).)\b(?:break|case|catch|class|const|continue|default|do|else|extends|fallthrough|finally|for(?: ever)?|function|if|implements|it|let|loop|new|null|otherwise|own|return|super|switch|that|then|this|throw|try|unless|until|var|void|when|while|yield)(?!-)\b/m,
            lookbehind: true
          },
          "keyword-operator": {
            pattern: /(^|[^-])\b(?:(?:delete|require|typeof)!|(?:and|by|delete|export|from|import(?: all)?|in|instanceof|is(?: not|nt)?|not|of|or|til|to|typeof|with|xor)(?!-)\b)/m,
            lookbehind: true,
            alias: "operator"
          },
          boolean: {
            pattern: /(^|[^-])\b(?:false|no|off|on|true|yes)(?!-)\b/m,
            lookbehind: true
          },
          argument: {
            pattern: /(^|(?!\.&\.)[^&])&(?!&)\d*/m,
            lookbehind: true,
            alias: "variable"
          },
          number: /\b(?:\d+~[\da-z]+|\d[\d_]*(?:\.\d[\d_]*)?(?:[a-z]\w*)?)/i,
          identifier: /[a-z_](?:-?[a-z]|[\d_])*/i,
          operator: [
            {
              pattern: /( )\.(?= )/,
              lookbehind: true
            },
            /\.(?:[=~]|\.\.?)|\.(?:[&|^]|<<|>>>?)\.|:(?:=|:=?)|&&|\|[|>]|<(?:<<?<?|--?!?|~~?!?|[|=?])?|>[>=?]?|-(?:->?|>)?|\+\+?|@@?|%%?|\*\*?|!(?:~?=|--?>|~?~>)?|~(?:~?>|=)?|==?|\^\^?|[\/?]/
          ],
          punctuation: /[(){}\[\]|.,:;`]/
        };
        Prism.languages.livescript["interpolated-string"].inside["interpolation"].inside.rest = Prism.languages.livescript;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/llvm.js
  var require_llvm = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/llvm.js"(exports, module) {
      "use strict";
      module.exports = llvm;
      llvm.displayName = "llvm";
      llvm.aliases = [];
      function llvm(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.llvm = {
            comment: /;.*/,
            string: {
              pattern: /"[^"]*"/,
              greedy: true
            },
            boolean: /\b(?:false|true)\b/,
            variable: /[%@!#](?:(?!\d)(?:[-$.\w]|\\[a-f\d]{2})+|\d+)/i,
            label: /(?!\d)(?:[-$.\w]|\\[a-f\d]{2})+:/i,
            type: {
              pattern: /\b(?:double|float|fp128|half|i[1-9]\d*|label|metadata|ppc_fp128|token|void|x86_fp80|x86_mmx)\b/,
              alias: "class-name"
            },
            keyword: /\b[a-z_][a-z_0-9]*\b/,
            number: /[+-]?\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-Fa-f]+\b|\b0xK[\dA-Fa-f]{20}\b|\b0x[ML][\dA-Fa-f]{32}\b|\b0xH[\dA-Fa-f]{4}\b/,
            punctuation: /[{}[\];(),.!*=<>]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/log.js
  var require_log = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/log.js"(exports, module) {
      "use strict";
      module.exports = log;
      log.displayName = "log";
      log.aliases = [];
      function log(Prism) {
        Prism.languages.log = {
          string: {
            pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?![st] | \w)(?:[^'\\\r\n]|\\.)*'/,
            greedy: true
          },
          exception: {
            pattern: /(^|[^\w.])[a-z][\w.]*(?:Error|Exception):.*(?:(?:\r\n?|\n)[ \t]*(?:at[ \t].+|\.{3}.*|Caused by:.*))+(?:(?:\r\n?|\n)[ \t]*\.\.\. .*)?/,
            lookbehind: true,
            greedy: true,
            alias: ["javastacktrace", "language-javastacktrace"],
            inside: Prism.languages["javastacktrace"] || {
              keyword: /\bat\b/,
              function: /[a-z_][\w$]*(?=\()/,
              punctuation: /[.:()]/
            }
          },
          level: [
            {
              pattern: /\b(?:ALERT|CRIT|CRITICAL|EMERG|EMERGENCY|ERR|ERROR|FAILURE|FATAL|SEVERE)\b/,
              alias: ["error", "important"]
            },
            {
              pattern: /\b(?:WARN|WARNING|WRN)\b/,
              alias: ["warning", "important"]
            },
            {
              pattern: /\b(?:DISPLAY|INF|INFO|NOTICE|STATUS)\b/,
              alias: ["info", "keyword"]
            },
            {
              pattern: /\b(?:DBG|DEBUG|FINE)\b/,
              alias: ["debug", "keyword"]
            },
            {
              pattern: /\b(?:FINER|FINEST|TRACE|TRC|VERBOSE|VRB)\b/,
              alias: ["trace", "comment"]
            }
          ],
          property: {
            pattern: /((?:^|[\]|])[ \t]*)[a-z_](?:[\w-]|\b\/\b)*(?:[. ]\(?\w(?:[\w-]|\b\/\b)*\)?)*:(?=\s)/im,
            lookbehind: true
          },
          separator: {
            pattern: /(^|[^-+])-{3,}|={3,}|\*{3,}|- - /m,
            lookbehind: true,
            alias: "comment"
          },
          url: /\b(?:file|ftp|https?):\/\/[^\s|,;'"]*[^\s|,;'">.]/,
          email: {
            pattern: /(^|\s)[-\w+.]+@[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)+(?=\s)/,
            lookbehind: true,
            alias: "url"
          },
          "ip-address": {
            pattern: /\b(?:\d{1,3}(?:\.\d{1,3}){3})\b/,
            alias: "constant"
          },
          "mac-address": {
            pattern: /\b[a-f0-9]{2}(?::[a-f0-9]{2}){5}\b/i,
            alias: "constant"
          },
          domain: {
            pattern: /(^|\s)[a-z][a-z0-9-]*(?:\.[a-z][a-z0-9-]*)*\.[a-z][a-z0-9-]+(?=\s)/,
            lookbehind: true,
            alias: "constant"
          },
          uuid: {
            pattern: /\b[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\b/i,
            alias: "constant"
          },
          hash: {
            pattern: /\b(?:[a-f0-9]{32}){1,2}\b/i,
            alias: "constant"
          },
          "file-path": {
            pattern: /\b[a-z]:[\\/][^\s|,;:(){}\[\]"']+|(^|[\s:\[\](>|])\.{0,2}\/\w[^\s|,;:(){}\[\]"']*/i,
            lookbehind: true,
            greedy: true,
            alias: "string"
          },
          date: {
            pattern: RegExp(
              /\b\d{4}[-/]\d{2}[-/]\d{2}(?:T(?=\d{1,2}:)|(?=\s\d{1,2}:))/.source + "|" + /\b\d{1,4}[-/ ](?:\d{1,2}|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)[-/ ]\d{2,4}T?\b/.source + "|" + /\b(?:(?:Fri|Mon|Sat|Sun|Thu|Tue|Wed)(?:\s{1,2}(?:Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep))?|Apr|Aug|Dec|Feb|Jan|Jul|Jun|Mar|May|Nov|Oct|Sep)\s{1,2}\d{1,2}\b/.source,
              "i"
            ),
            alias: "number"
          },
          time: {
            pattern: /\b\d{1,2}:\d{1,2}:\d{1,2}(?:[.,:]\d+)?(?:\s?[+-]\d{2}:?\d{2}|Z)?\b/,
            alias: "number"
          },
          boolean: /\b(?:false|null|true)\b/i,
          number: {
            pattern: /(^|[^.\w])(?:0x[a-f0-9]+|0o[0-7]+|0b[01]+|v?\d[\da-f]*(?:\.\d+)*(?:e[+-]?\d+)?[a-z]{0,3}\b)\b(?!\.\w)/i,
            lookbehind: true
          },
          operator: /[;:?<=>~/@!$%&+\-|^(){}*#]/,
          punctuation: /[\[\].,]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/lolcode.js
  var require_lolcode = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/lolcode.js"(exports, module) {
      "use strict";
      module.exports = lolcode;
      lolcode.displayName = "lolcode";
      lolcode.aliases = [];
      function lolcode(Prism) {
        Prism.languages.lolcode = {
          comment: [/\bOBTW\s[\s\S]*?\sTLDR\b/, /\bBTW.+/],
          string: {
            pattern: /"(?::.|[^":])*"/,
            inside: {
              variable: /:\{[^}]+\}/,
              symbol: [/:\([a-f\d]+\)/i, /:\[[^\]]+\]/, /:[)>o":]/]
            },
            greedy: true
          },
          number: /(?:\B-)?(?:\b\d+(?:\.\d*)?|\B\.\d+)/,
          symbol: {
            pattern: /(^|\s)(?:A )?(?:BUKKIT|NOOB|NUMBAR|NUMBR|TROOF|YARN)(?=\s|,|$)/,
            lookbehind: true,
            inside: {
              keyword: /A(?=\s)/
            }
          },
          label: {
            pattern: /((?:^|\s)(?:IM IN YR|IM OUTTA YR) )[a-zA-Z]\w*/,
            lookbehind: true,
            alias: "string"
          },
          function: {
            pattern: /((?:^|\s)(?:HOW IZ I|I IZ|IZ) )[a-zA-Z]\w*/,
            lookbehind: true
          },
          keyword: [
            {
              pattern: /(^|\s)(?:AN|FOUND YR|GIMMEH|GTFO|HAI|HAS A|HOW IZ I|I HAS A|I IZ|IF U SAY SO|IM IN YR|IM OUTTA YR|IS NOW(?: A)?|ITZ(?: A)?|IZ|KTHX|KTHXBYE|LIEK(?: A)?|MAEK|MEBBE|MKAY|NERFIN|NO WAI|O HAI IM|O RLY\?|OIC|OMG|OMGWTF|R|SMOOSH|SRS|TIL|UPPIN|VISIBLE|WILE|WTF\?|YA RLY|YR)(?=\s|,|$)/,
              lookbehind: true
            },
            /'Z(?=\s|,|$)/
          ],
          boolean: {
            pattern: /(^|\s)(?:FAIL|WIN)(?=\s|,|$)/,
            lookbehind: true
          },
          variable: {
            pattern: /(^|\s)IT(?=\s|,|$)/,
            lookbehind: true
          },
          operator: {
            pattern: /(^|\s)(?:NOT|BOTH SAEM|DIFFRINT|(?:ALL|ANY|BIGGR|BOTH|DIFF|EITHER|MOD|PRODUKT|QUOSHUNT|SMALLR|SUM|WON) OF)(?=\s|,|$)/,
            lookbehind: true
          },
          punctuation: /\.{3}|…|,|!/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/magma.js
  var require_magma = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/magma.js"(exports, module) {
      "use strict";
      module.exports = magma;
      magma.displayName = "magma";
      magma.aliases = [];
      function magma(Prism) {
        Prism.languages.magma = {
          output: {
            pattern: /^(>.*(?:\r(?:\n|(?!\n))|\n))(?!>)(?:.+|(?:\r(?:\n|(?!\n))|\n)(?!>).*)(?:(?:\r(?:\n|(?!\n))|\n)(?!>).*)*/m,
            lookbehind: true,
            greedy: true
          },
          comment: {
            pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
            greedy: true
          },
          string: {
            pattern: /(^|[^\\"])"(?:[^\r\n\\"]|\\.)*"/,
            lookbehind: true,
            greedy: true
          },
          keyword: /\b(?:_|adj|and|assert|assert2|assert3|assigned|break|by|case|cat|catch|clear|cmpeq|cmpne|continue|declare|default|delete|diff|div|do|elif|else|end|eq|error|eval|exists|exit|for|forall|forward|fprintf|freeze|function|ge|gt|if|iload|import|in|intrinsic|is|join|le|load|local|lt|meet|mod|ne|not|notadj|notin|notsubset|or|print|printf|procedure|quit|random|read|readi|repeat|require|requirege|requirerange|restore|return|save|sdiff|select|subset|then|time|to|try|until|vprint|vprintf|vtime|when|where|while|xor)\b/,
          boolean: /\b(?:false|true)\b/,
          generator: {
            pattern: /\b[a-z_]\w*(?=\s*<)/i,
            alias: "class-name"
          },
          function: /\b[a-z_]\w*(?=\s*\()/i,
          number: {
            pattern: /(^|[^\w.]|\.\.)(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?(?:_[a-z]?)?(?=$|[^\w.]|\.\.)/,
            lookbehind: true
          },
          operator: /->|[-+*/^~!|#=]|:=|\.\./,
          punctuation: /[()[\]{}<>,;.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/makefile.js
  var require_makefile = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/makefile.js"(exports, module) {
      "use strict";
      module.exports = makefile;
      makefile.displayName = "makefile";
      makefile.aliases = [];
      function makefile(Prism) {
        Prism.languages.makefile = {
          comment: {
            pattern: /(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,
            lookbehind: true
          },
          string: {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          "builtin-target": {
            pattern: /\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,
            alias: "builtin"
          },
          target: {
            pattern: /^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,
            alias: "symbol",
            inside: {
              variable: /\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/
            }
          },
          variable: /\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,
          keyword: /-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,
          function: {
            pattern: /(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,
            lookbehind: true
          },
          operator: /(?:::|[?:+!])?=|[|@]/,
          punctuation: /[:;(){}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/markdown.js
  var require_markdown = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/markdown.js"(exports, module) {
      "use strict";
      module.exports = markdown;
      markdown.displayName = "markdown";
      markdown.aliases = ["md"];
      function markdown(Prism) {
        ;
        (function(Prism2) {
          var inner = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;
          function createInline(pattern) {
            pattern = pattern.replace(/<inner>/g, function() {
              return inner;
            });
            return RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + "(?:" + pattern + ")");
          }
          var tableCell2 = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source;
          var tableRow2 = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(
            /__/g,
            function() {
              return tableCell2;
            }
          );
          var tableLine = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
          Prism2.languages.markdown = Prism2.languages.extend("markup", {});
          Prism2.languages.insertBefore("markdown", "prolog", {
            "front-matter-block": {
              pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
              lookbehind: true,
              greedy: true,
              inside: {
                punctuation: /^---|---$/,
                "front-matter": {
                  pattern: /\S+(?:\s+\S+)*/,
                  alias: ["yaml", "language-yaml"],
                  inside: Prism2.languages.yaml
                }
              }
            },
            blockquote: {
              pattern: /^>(?:[\t ]*>)*/m,
              alias: "punctuation"
            },
            table: {
              pattern: RegExp(
                "^" + tableRow2 + tableLine + "(?:" + tableRow2 + ")*",
                "m"
              ),
              inside: {
                "table-data-rows": {
                  pattern: RegExp(
                    "^(" + tableRow2 + tableLine + ")(?:" + tableRow2 + ")*$"
                  ),
                  lookbehind: true,
                  inside: {
                    "table-data": {
                      pattern: RegExp(tableCell2),
                      inside: Prism2.languages.markdown
                    },
                    punctuation: /\|/
                  }
                },
                "table-line": {
                  pattern: RegExp("^(" + tableRow2 + ")" + tableLine + "$"),
                  lookbehind: true,
                  inside: {
                    punctuation: /\||:?-{3,}:?/
                  }
                },
                "table-header-row": {
                  pattern: RegExp("^" + tableRow2 + "$"),
                  inside: {
                    "table-header": {
                      pattern: RegExp(tableCell2),
                      alias: "important",
                      inside: Prism2.languages.markdown
                    },
                    punctuation: /\|/
                  }
                }
              }
            },
            code: [
              {
                pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
                lookbehind: true,
                alias: "keyword"
              },
              {
                pattern: /^```[\s\S]*?^```$/m,
                greedy: true,
                inside: {
                  "code-block": {
                    pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
                    lookbehind: true
                  },
                  "code-language": {
                    pattern: /^(```).+/,
                    lookbehind: true
                  },
                  punctuation: /```/
                }
              }
            ],
            title: [
              {
                pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
                alias: "important",
                inside: {
                  punctuation: /==+$|--+$/
                }
              },
              {
                pattern: /(^\s*)#.+/m,
                lookbehind: true,
                alias: "important",
                inside: {
                  punctuation: /^#+|#+$/
                }
              }
            ],
            hr: {
              pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
              lookbehind: true,
              alias: "punctuation"
            },
            list: {
              pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
              lookbehind: true,
              alias: "punctuation"
            },
            "url-reference": {
              pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
              inside: {
                variable: {
                  pattern: /^(!?\[)[^\]]+/,
                  lookbehind: true
                },
                string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
                punctuation: /^[\[\]!:]|[<>]/
              },
              alias: "url"
            },
            bold: {
              pattern: createInline(
                /\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                content: {
                  pattern: /(^..)[\s\S]+(?=..$)/,
                  lookbehind: true,
                  inside: {}
                },
                punctuation: /\*\*|__/
              }
            },
            italic: {
              pattern: createInline(
                /\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                content: {
                  pattern: /(^.)[\s\S]+(?=.$)/,
                  lookbehind: true,
                  inside: {}
                },
                punctuation: /[*_]/
              }
            },
            strike: {
              pattern: createInline(/(~~?)(?:(?!~)<inner>)+\2/.source),
              lookbehind: true,
              greedy: true,
              inside: {
                content: {
                  pattern: /(^~~?)[\s\S]+(?=\1$)/,
                  lookbehind: true,
                  inside: {}
                },
                punctuation: /~~?/
              }
            },
            "code-snippet": {
              pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
              lookbehind: true,
              greedy: true,
              alias: ["code", "keyword"]
            },
            url: {
              pattern: createInline(
                /!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                operator: /^!/,
                content: {
                  pattern: /(^\[)[^\]]+(?=\])/,
                  lookbehind: true,
                  inside: {}
                },
                variable: {
                  pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
                  lookbehind: true
                },
                url: {
                  pattern: /(^\]\()[^\s)]+/,
                  lookbehind: true
                },
                string: {
                  pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
                  lookbehind: true
                }
              }
            }
          });
          ["url", "bold", "italic", "strike"].forEach(function(token) {
            ;
            ["url", "bold", "italic", "strike", "code-snippet"].forEach(function(inside) {
              if (token !== inside) {
                Prism2.languages.markdown[token].inside.content.inside[inside] = Prism2.languages.markdown[inside];
              }
            });
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            if (env.language !== "markdown" && env.language !== "md") {
              return;
            }
            function walkTokens(tokens2) {
              if (!tokens2 || typeof tokens2 === "string") {
                return;
              }
              for (var i = 0, l = tokens2.length; i < l; i++) {
                var token = tokens2[i];
                if (token.type !== "code") {
                  walkTokens(token.content);
                  continue;
                }
                var codeLang = token.content[1];
                var codeBlock = token.content[3];
                if (codeLang && codeBlock && codeLang.type === "code-language" && codeBlock.type === "code-block" && typeof codeLang.content === "string") {
                  var lang = codeLang.content.replace(/\b#/g, "sharp").replace(/\b\+\+/g, "pp");
                  lang = (/[a-z][\w-]*/i.exec(lang) || [""])[0].toLowerCase();
                  var alias = "language-" + lang;
                  if (!codeBlock.alias) {
                    codeBlock.alias = [alias];
                  } else if (typeof codeBlock.alias === "string") {
                    codeBlock.alias = [codeBlock.alias, alias];
                  } else {
                    codeBlock.alias.push(alias);
                  }
                }
              }
            }
            walkTokens(env.tokens);
          });
          Prism2.hooks.add("wrap", function(env) {
            if (env.type !== "code-block") {
              return;
            }
            var codeLang = "";
            for (var i = 0, l = env.classes.length; i < l; i++) {
              var cls = env.classes[i];
              var match = /language-(.+)/.exec(cls);
              if (match) {
                codeLang = match[1];
                break;
              }
            }
            var grammar = Prism2.languages[codeLang];
            if (!grammar) {
              if (codeLang && codeLang !== "none" && Prism2.plugins.autoloader) {
                var id4 = "md-" + new Date().valueOf() + "-" + Math.floor(Math.random() * 1e16);
                env.attributes["id"] = id4;
                Prism2.plugins.autoloader.loadLanguages(codeLang, function() {
                  var ele = document.getElementById(id4);
                  if (ele) {
                    ele.innerHTML = Prism2.highlight(
                      ele.textContent,
                      Prism2.languages[codeLang],
                      codeLang
                    );
                  }
                });
              }
            } else {
              env.content = Prism2.highlight(
                textContent(env.content.value),
                grammar,
                codeLang
              );
            }
          });
          var tagPattern = RegExp(Prism2.languages.markup.tag.pattern.source, "gi");
          var KNOWN_ENTITY_NAMES = {
            amp: "&",
            lt: "<",
            gt: ">",
            quot: '"'
          };
          var fromCodePoint = String.fromCodePoint || String.fromCharCode;
          function textContent(html4) {
            var text6 = html4.replace(tagPattern, "");
            text6 = text6.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function(m, code3) {
              code3 = code3.toLowerCase();
              if (code3[0] === "#") {
                var value;
                if (code3[1] === "x") {
                  value = parseInt(code3.slice(2), 16);
                } else {
                  value = Number(code3.slice(1));
                }
                return fromCodePoint(value);
              } else {
                var known = KNOWN_ENTITY_NAMES[code3];
                if (known) {
                  return known;
                }
                return m;
              }
            });
            return text6;
          }
          Prism2.languages.md = Prism2.languages.markdown;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/matlab.js
  var require_matlab = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/matlab.js"(exports, module) {
      "use strict";
      module.exports = matlab;
      matlab.displayName = "matlab";
      matlab.aliases = [];
      function matlab(Prism) {
        Prism.languages.matlab = {
          comment: [/%\{[\s\S]*?\}%/, /%.+/],
          string: {
            pattern: /\B'(?:''|[^'\r\n])*'/,
            greedy: true
          },
          number: /(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[eE][+-]?\d+)?(?:[ij])?|\b[ij]\b/,
          keyword: /\b(?:NaN|break|case|catch|continue|else|elseif|end|for|function|if|inf|otherwise|parfor|pause|pi|return|switch|try|while)\b/,
          function: /\b(?!\d)\w+(?=\s*\()/,
          operator: /\.?[*^\/\\']|[+\-:@]|[<>=~]=?|&&?|\|\|?/,
          punctuation: /\.{3}|[.,;\[\](){}!]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/maxscript.js
  var require_maxscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/maxscript.js"(exports, module) {
      "use strict";
      module.exports = maxscript;
      maxscript.displayName = "maxscript";
      maxscript.aliases = [];
      function maxscript(Prism) {
        ;
        (function(Prism2) {
          var keywords = /\b(?:about|and|animate|as|at|attributes|by|case|catch|collect|continue|coordsys|do|else|exit|fn|for|from|function|global|if|in|local|macroscript|mapped|max|not|of|off|on|or|parameters|persistent|plugin|rcmenu|return|rollout|set|struct|then|throw|to|tool|try|undo|utility|when|where|while|with)\b/i;
          Prism2.languages.maxscript = {
            comment: {
              pattern: /\/\*[\s\S]*?(?:\*\/|$)|--.*/,
              greedy: true
            },
            string: {
              pattern: /(^|[^"\\@])(?:"(?:[^"\\]|\\[\s\S])*"|@"[^"]*")/,
              lookbehind: true,
              greedy: true
            },
            path: {
              pattern: /\$(?:[\w/\\.*?]|'[^']*')*/,
              greedy: true,
              alias: "string"
            },
            "function-call": {
              pattern: RegExp(
                "((?:" + (/^/.source + "|" + /[;=<>+\-*/^({\[]/.source + "|" + /\b(?:and|by|case|catch|collect|do|else|if|in|not|or|return|then|to|try|where|while|with)\b/.source) + ")[ 	]*)(?!" + keywords.source + ")" + /[a-z_]\w*\b/.source + "(?=[ 	]*(?:" + ("(?!" + keywords.source + ")" + /[a-z_]/.source + "|" + /\d|-\.?\d/.source + "|" + /[({'"$@#?]/.source) + "))",
                "im"
              ),
              lookbehind: true,
              greedy: true,
              alias: "function"
            },
            "function-definition": {
              pattern: /(\b(?:fn|function)\s+)\w+\b/i,
              lookbehind: true,
              alias: "function"
            },
            argument: {
              pattern: /\b[a-z_]\w*(?=:)/i,
              alias: "attr-name"
            },
            keyword: keywords,
            boolean: /\b(?:false|true)\b/,
            time: {
              pattern: /(^|[^\w.])(?:(?:(?:\d+(?:\.\d*)?|\.\d+)(?:[eEdD][+-]\d+|[LP])?[msft])+|\d+:\d+(?:\.\d*)?)(?![\w.:])/,
              lookbehind: true,
              alias: "number"
            },
            number: [
              {
                pattern: /(^|[^\w.])(?:(?:\d+(?:\.\d*)?|\.\d+)(?:[eEdD][+-]\d+|[LP])?|0x[a-fA-F0-9]+)(?![\w.:])/,
                lookbehind: true
              },
              /\b(?:e|pi)\b/
            ],
            constant: /\b(?:dontcollect|ok|silentValue|undefined|unsupplied)\b/,
            color: {
              pattern: /\b(?:black|blue|brown|gray|green|orange|red|white|yellow)\b/i,
              alias: "constant"
            },
            operator: /[-+*/<>=!]=?|[&^?]|#(?!\()/,
            punctuation: /[()\[\]{}.:,;]|#(?=\()|\\$/m
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/mel.js
  var require_mel = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/mel.js"(exports, module) {
      "use strict";
      module.exports = mel;
      mel.displayName = "mel";
      mel.aliases = [];
      function mel(Prism) {
        Prism.languages.mel = {
          comment: /\/\/.*/,
          code: {
            pattern: /`(?:\\.|[^\\`\r\n])*`/,
            greedy: true,
            alias: "italic",
            inside: {
              delimiter: {
                pattern: /^`|`$/,
                alias: "punctuation"
              }
            }
          },
          string: {
            pattern: /"(?:\\.|[^\\"\r\n])*"/,
            greedy: true
          },
          variable: /\$\w+/,
          number: /\b0x[\da-fA-F]+\b|\b\d+(?:\.\d*)?|\B\.\d+/,
          flag: {
            pattern: /-[^\d\W]\w*/,
            alias: "operator"
          },
          keyword: /\b(?:break|case|continue|default|do|else|float|for|global|if|in|int|matrix|proc|return|string|switch|vector|while)\b/,
          function: /\b\w+(?=\()|\b(?:CBG|HfAddAttractorToAS|HfAssignAS|HfBuildEqualMap|HfBuildFurFiles|HfBuildFurImages|HfCancelAFR|HfConnectASToHF|HfCreateAttractor|HfDeleteAS|HfEditAS|HfPerformCreateAS|HfRemoveAttractorFromAS|HfSelectAttached|HfSelectAttractors|HfUnAssignAS|Mayatomr|about|abs|addAttr|addAttributeEditorNodeHelp|addDynamic|addNewShelfTab|addPP|addPanelCategory|addPrefixToName|advanceToNextDrivenKey|affectedNet|affects|aimConstraint|air|alias|aliasAttr|align|alignCtx|alignCurve|alignSurface|allViewFit|ambientLight|angle|angleBetween|animCone|animCurveEditor|animDisplay|animView|annotate|appendStringArray|applicationName|applyAttrPreset|applyTake|arcLenDimContext|arcLengthDimension|arclen|arrayMapper|art3dPaintCtx|artAttrCtx|artAttrPaintVertexCtx|artAttrSkinPaintCtx|artAttrTool|artBuildPaintMenu|artFluidAttrCtx|artPuttyCtx|artSelectCtx|artSetPaintCtx|artUserPaintCtx|assignCommand|assignInputDevice|assignViewportFactories|attachCurve|attachDeviceAttr|attachSurface|attrColorSliderGrp|attrCompatibility|attrControlGrp|attrEnumOptionMenu|attrEnumOptionMenuGrp|attrFieldGrp|attrFieldSliderGrp|attrNavigationControlGrp|attrPresetEditWin|attributeExists|attributeInfo|attributeMenu|attributeQuery|autoKeyframe|autoPlace|bakeClip|bakeFluidShading|bakePartialHistory|bakeResults|bakeSimulation|basename|basenameEx|batchRender|bessel|bevel|bevelPlus|binMembership|bindSkin|blend2|blendShape|blendShapeEditor|blendShapePanel|blendTwoAttr|blindDataType|boneLattice|boundary|boxDollyCtx|boxZoomCtx|bufferCurve|buildBookmarkMenu|buildKeyframeMenu|button|buttonManip|cacheFile|cacheFileCombine|cacheFileMerge|cacheFileTrack|camera|cameraView|canCreateManip|canvas|capitalizeString|catch|catchQuiet|ceil|changeSubdivComponentDisplayLevel|changeSubdivRegion|channelBox|character|characterMap|characterOutlineEditor|characterize|chdir|checkBox|checkBoxGrp|checkDefaultRenderGlobals|choice|circle|circularFillet|clamp|clear|clearCache|clip|clipEditor|clipEditorCurrentTimeCtx|clipSchedule|clipSchedulerOutliner|clipTrimBefore|closeCurve|closeSurface|cluster|cmdFileOutput|cmdScrollFieldExecuter|cmdScrollFieldReporter|cmdShell|coarsenSubdivSelectionList|collision|color|colorAtPoint|colorEditor|colorIndex|colorIndexSliderGrp|colorSliderButtonGrp|colorSliderGrp|columnLayout|commandEcho|commandLine|commandPort|compactHairSystem|componentEditor|compositingInterop|computePolysetVolume|condition|cone|confirmDialog|connectAttr|connectControl|connectDynamic|connectJoint|connectionInfo|constrain|constrainValue|constructionHistory|container|containsMultibyte|contextInfo|control|convertFromOldLayers|convertIffToPsd|convertLightmap|convertSolidTx|convertTessellation|convertUnit|copyArray|copyFlexor|copyKey|copySkinWeights|cos|cpButton|cpCache|cpClothSet|cpCollision|cpConstraint|cpConvClothToMesh|cpForces|cpGetSolverAttr|cpPanel|cpProperty|cpRigidCollisionFilter|cpSeam|cpSetEdit|cpSetSolverAttr|cpSolver|cpSolverTypes|cpTool|cpUpdateClothUVs|createDisplayLayer|createDrawCtx|createEditor|createLayeredPsdFile|createMotionField|createNewShelf|createNode|createRenderLayer|createSubdivRegion|cross|crossProduct|ctxAbort|ctxCompletion|ctxEditMode|ctxTraverse|currentCtx|currentTime|currentTimeCtx|currentUnit|curve|curveAddPtCtx|curveCVCtx|curveEPCtx|curveEditorCtx|curveIntersect|curveMoveEPCtx|curveOnSurface|curveSketchCtx|cutKey|cycleCheck|cylinder|dagPose|date|defaultLightListCheckBox|defaultNavigation|defineDataServer|defineVirtualDevice|deformer|deg_to_rad|delete|deleteAttr|deleteShadingGroupsAndMaterials|deleteShelfTab|deleteUI|deleteUnusedBrushes|delrandstr|detachCurve|detachDeviceAttr|detachSurface|deviceEditor|devicePanel|dgInfo|dgdirty|dgeval|dgtimer|dimWhen|directKeyCtx|directionalLight|dirmap|dirname|disable|disconnectAttr|disconnectJoint|diskCache|displacementToPoly|displayAffected|displayColor|displayCull|displayLevelOfDetail|displayPref|displayRGBColor|displaySmoothness|displayStats|displayString|displaySurface|distanceDimContext|distanceDimension|doBlur|dolly|dollyCtx|dopeSheetEditor|dot|dotProduct|doubleProfileBirailSurface|drag|dragAttrContext|draggerContext|dropoffLocator|duplicate|duplicateCurve|duplicateSurface|dynCache|dynControl|dynExport|dynExpression|dynGlobals|dynPaintEditor|dynParticleCtx|dynPref|dynRelEdPanel|dynRelEditor|dynamicLoad|editAttrLimits|editDisplayLayerGlobals|editDisplayLayerMembers|editRenderLayerAdjustment|editRenderLayerGlobals|editRenderLayerMembers|editor|editorTemplate|effector|emit|emitter|enableDevice|encodeString|endString|endsWith|env|equivalent|equivalentTol|erf|error|eval|evalDeferred|evalEcho|event|exactWorldBoundingBox|exclusiveLightCheckBox|exec|executeForEachObject|exists|exp|expression|expressionEditorListen|extendCurve|extendSurface|extrude|fcheck|fclose|feof|fflush|fgetline|fgetword|file|fileBrowserDialog|fileDialog|fileExtension|fileInfo|filetest|filletCurve|filter|filterCurve|filterExpand|filterStudioImport|findAllIntersections|findAnimCurves|findKeyframe|findMenuItem|findRelatedSkinCluster|finder|firstParentOf|fitBspline|flexor|floatEq|floatField|floatFieldGrp|floatScrollBar|floatSlider|floatSlider2|floatSliderButtonGrp|floatSliderGrp|floor|flow|fluidCacheInfo|fluidEmitter|fluidVoxelInfo|flushUndo|fmod|fontDialog|fopen|formLayout|format|fprint|frameLayout|fread|freeFormFillet|frewind|fromNativePath|fwrite|gamma|gauss|geometryConstraint|getApplicationVersionAsFloat|getAttr|getClassification|getDefaultBrush|getFileList|getFluidAttr|getInputDeviceRange|getMayaPanelTypes|getModifiers|getPanel|getParticleAttr|getPluginResource|getenv|getpid|glRender|glRenderEditor|globalStitch|gmatch|goal|gotoBindPose|grabColor|gradientControl|gradientControlNoAttr|graphDollyCtx|graphSelectContext|graphTrackCtx|gravity|grid|gridLayout|group|groupObjectsByName|hardenPointCurve|hardware|hardwareRenderPanel|headsUpDisplay|headsUpMessage|help|helpLine|hermite|hide|hilite|hitTest|hotBox|hotkey|hotkeyCheck|hsv_to_rgb|hudButton|hudSlider|hudSliderButton|hwReflectionMap|hwRender|hwRenderLoad|hyperGraph|hyperPanel|hyperShade|hypot|iconTextButton|iconTextCheckBox|iconTextRadioButton|iconTextRadioCollection|iconTextScrollList|iconTextStaticLabel|ikHandle|ikHandleCtx|ikHandleDisplayScale|ikSolver|ikSplineHandleCtx|ikSystem|ikSystemInfo|ikfkDisplayMethod|illustratorCurves|image|imfPlugins|inheritTransform|insertJoint|insertJointCtx|insertKeyCtx|insertKnotCurve|insertKnotSurface|instance|instanceable|instancer|intField|intFieldGrp|intScrollBar|intSlider|intSliderGrp|interToUI|internalVar|intersect|iprEngine|isAnimCurve|isConnected|isDirty|isParentOf|isSameObject|isTrue|isValidObjectName|isValidString|isValidUiName|isolateSelect|itemFilter|itemFilterAttr|itemFilterRender|itemFilterType|joint|jointCluster|jointCtx|jointDisplayScale|jointLattice|keyTangent|keyframe|keyframeOutliner|keyframeRegionCurrentTimeCtx|keyframeRegionDirectKeyCtx|keyframeRegionDollyCtx|keyframeRegionInsertKeyCtx|keyframeRegionMoveKeyCtx|keyframeRegionScaleKeyCtx|keyframeRegionSelectKeyCtx|keyframeRegionSetKeyCtx|keyframeRegionTrackCtx|keyframeStats|lassoContext|lattice|latticeDeformKeyCtx|launch|launchImageEditor|layerButton|layeredShaderPort|layeredTexturePort|layout|layoutDialog|lightList|lightListEditor|lightListPanel|lightlink|lineIntersection|linearPrecision|linstep|listAnimatable|listAttr|listCameras|listConnections|listDeviceAttachments|listHistory|listInputDeviceAxes|listInputDeviceButtons|listInputDevices|listMenuAnnotation|listNodeTypes|listPanelCategories|listRelatives|listSets|listTransforms|listUnselected|listerEditor|loadFluid|loadNewShelf|loadPlugin|loadPluginLanguageResources|loadPrefObjects|localizedPanelLabel|lockNode|loft|log|longNameOf|lookThru|ls|lsThroughFilter|lsType|lsUI|mag|makeIdentity|makeLive|makePaintable|makeRoll|makeSingleSurface|makeTubeOn|makebot|manipMoveContext|manipMoveLimitsCtx|manipOptions|manipRotateContext|manipRotateLimitsCtx|manipScaleContext|manipScaleLimitsCtx|marker|match|max|memory|menu|menuBarLayout|menuEditor|menuItem|menuItemToShelf|menuSet|menuSetPref|messageLine|min|minimizeApp|mirrorJoint|modelCurrentTimeCtx|modelEditor|modelPanel|mouse|movIn|movOut|move|moveIKtoFK|moveKeyCtx|moveVertexAlongDirection|multiProfileBirailSurface|mute|nParticle|nameCommand|nameField|namespace|namespaceInfo|newPanelItems|newton|nodeCast|nodeIconButton|nodeOutliner|nodePreset|nodeType|noise|nonLinear|normalConstraint|normalize|nurbsBoolean|nurbsCopyUVSet|nurbsCube|nurbsEditUV|nurbsPlane|nurbsSelect|nurbsSquare|nurbsToPoly|nurbsToPolygonsPref|nurbsToSubdiv|nurbsToSubdivPref|nurbsUVSet|nurbsViewDirectionVector|objExists|objectCenter|objectLayer|objectType|objectTypeUI|obsoleteProc|oceanNurbsPreviewPlane|offsetCurve|offsetCurveOnSurface|offsetSurface|openGLExtension|openMayaPref|optionMenu|optionMenuGrp|optionVar|orbit|orbitCtx|orientConstraint|outlinerEditor|outlinerPanel|overrideModifier|paintEffectsDisplay|pairBlend|palettePort|paneLayout|panel|panelConfiguration|panelHistory|paramDimContext|paramDimension|paramLocator|parent|parentConstraint|particle|particleExists|particleInstancer|particleRenderInfo|partition|pasteKey|pathAnimation|pause|pclose|percent|performanceOptions|pfxstrokes|pickWalk|picture|pixelMove|planarSrf|plane|play|playbackOptions|playblast|plugAttr|plugNode|pluginInfo|pluginResourceUtil|pointConstraint|pointCurveConstraint|pointLight|pointMatrixMult|pointOnCurve|pointOnSurface|pointPosition|poleVectorConstraint|polyAppend|polyAppendFacetCtx|polyAppendVertex|polyAutoProjection|polyAverageNormal|polyAverageVertex|polyBevel|polyBlendColor|polyBlindData|polyBoolOp|polyBridgeEdge|polyCacheMonitor|polyCheck|polyChipOff|polyClipboard|polyCloseBorder|polyCollapseEdge|polyCollapseFacet|polyColorBlindData|polyColorDel|polyColorPerVertex|polyColorSet|polyCompare|polyCone|polyCopyUV|polyCrease|polyCreaseCtx|polyCreateFacet|polyCreateFacetCtx|polyCube|polyCut|polyCutCtx|polyCylinder|polyCylindricalProjection|polyDelEdge|polyDelFacet|polyDelVertex|polyDuplicateAndConnect|polyDuplicateEdge|polyEditUV|polyEditUVShell|polyEvaluate|polyExtrudeEdge|polyExtrudeFacet|polyExtrudeVertex|polyFlipEdge|polyFlipUV|polyForceUV|polyGeoSampler|polyHelix|polyInfo|polyInstallAction|polyLayoutUV|polyListComponentConversion|polyMapCut|polyMapDel|polyMapSew|polyMapSewMove|polyMergeEdge|polyMergeEdgeCtx|polyMergeFacet|polyMergeFacetCtx|polyMergeUV|polyMergeVertex|polyMirrorFace|polyMoveEdge|polyMoveFacet|polyMoveFacetUV|polyMoveUV|polyMoveVertex|polyNormal|polyNormalPerVertex|polyNormalizeUV|polyOptUvs|polyOptions|polyOutput|polyPipe|polyPlanarProjection|polyPlane|polyPlatonicSolid|polyPoke|polyPrimitive|polyPrism|polyProjection|polyPyramid|polyQuad|polyQueryBlindData|polyReduce|polySelect|polySelectConstraint|polySelectConstraintMonitor|polySelectCtx|polySelectEditCtx|polySeparate|polySetToFaceNormal|polySewEdge|polyShortestPathCtx|polySmooth|polySoftEdge|polySphere|polySphericalProjection|polySplit|polySplitCtx|polySplitEdge|polySplitRing|polySplitVertex|polyStraightenUVBorder|polySubdivideEdge|polySubdivideFacet|polyToSubdiv|polyTorus|polyTransfer|polyTriangulate|polyUVSet|polyUnite|polyWedgeFace|popen|popupMenu|pose|pow|preloadRefEd|print|progressBar|progressWindow|projFileViewer|projectCurve|projectTangent|projectionContext|projectionManip|promptDialog|propModCtx|propMove|psdChannelOutliner|psdEditTextureFile|psdExport|psdTextureFile|putenv|pwd|python|querySubdiv|quit|rad_to_deg|radial|radioButton|radioButtonGrp|radioCollection|radioMenuItemCollection|rampColorPort|rand|randomizeFollicles|randstate|rangeControl|readTake|rebuildCurve|rebuildSurface|recordAttr|recordDevice|redo|reference|referenceEdit|referenceQuery|refineSubdivSelectionList|refresh|refreshAE|registerPluginResource|rehash|reloadImage|removeJoint|removeMultiInstance|removePanelCategory|rename|renameAttr|renameSelectionList|renameUI|render|renderGlobalsNode|renderInfo|renderLayerButton|renderLayerParent|renderLayerPostProcess|renderLayerUnparent|renderManip|renderPartition|renderQualityNode|renderSettings|renderThumbnailUpdate|renderWindowEditor|renderWindowSelectContext|renderer|reorder|reorderDeformers|requires|reroot|resampleFluid|resetAE|resetPfxToPolyCamera|resetTool|resolutionNode|retarget|reverseCurve|reverseSurface|revolve|rgb_to_hsv|rigidBody|rigidSolver|roll|rollCtx|rootOf|rot|rotate|rotationInterpolation|roundConstantRadius|rowColumnLayout|rowLayout|runTimeCommand|runup|sampleImage|saveAllShelves|saveAttrPreset|saveFluid|saveImage|saveInitialState|saveMenu|savePrefObjects|savePrefs|saveShelf|saveToolSettings|scale|scaleBrushBrightness|scaleComponents|scaleConstraint|scaleKey|scaleKeyCtx|sceneEditor|sceneUIReplacement|scmh|scriptCtx|scriptEditorInfo|scriptJob|scriptNode|scriptTable|scriptToShelf|scriptedPanel|scriptedPanelType|scrollField|scrollLayout|sculpt|searchPathArray|seed|selLoadSettings|select|selectContext|selectCurveCV|selectKey|selectKeyCtx|selectKeyframeRegionCtx|selectMode|selectPref|selectPriority|selectType|selectedNodes|selectionConnection|separator|setAttr|setAttrEnumResource|setAttrMapping|setAttrNiceNameResource|setConstraintRestPosition|setDefaultShadingGroup|setDrivenKeyframe|setDynamic|setEditCtx|setEditor|setFluidAttr|setFocus|setInfinity|setInputDeviceMapping|setKeyCtx|setKeyPath|setKeyframe|setKeyframeBlendshapeTargetWts|setMenuMode|setNodeNiceNameResource|setNodeTypeFlag|setParent|setParticleAttr|setPfxToPolyCamera|setPluginResource|setProject|setStampDensity|setStartupMessage|setState|setToolTo|setUITemplate|setXformManip|sets|shadingConnection|shadingGeometryRelCtx|shadingLightRelCtx|shadingNetworkCompare|shadingNode|shapeCompare|shelfButton|shelfLayout|shelfTabLayout|shellField|shortNameOf|showHelp|showHidden|showManipCtx|showSelectionInTitle|showShadingGroupAttrEditor|showWindow|sign|simplify|sin|singleProfileBirailSurface|size|sizeBytes|skinCluster|skinPercent|smoothCurve|smoothTangentSurface|smoothstep|snap2to2|snapKey|snapMode|snapTogetherCtx|snapshot|soft|softMod|softModCtx|sort|sound|soundControl|source|spaceLocator|sphere|sphrand|spotLight|spotLightPreviewPort|spreadSheetEditor|spring|sqrt|squareSurface|srtContext|stackTrace|startString|startsWith|stitchAndExplodeShell|stitchSurface|stitchSurfacePoints|strcmp|stringArrayCatenate|stringArrayContains|stringArrayCount|stringArrayInsertAtIndex|stringArrayIntersector|stringArrayRemove|stringArrayRemoveAtIndex|stringArrayRemoveDuplicates|stringArrayRemoveExact|stringArrayToString|stringToStringArray|strip|stripPrefixFromName|stroke|subdAutoProjection|subdCleanTopology|subdCollapse|subdDuplicateAndConnect|subdEditUV|subdListComponentConversion|subdMapCut|subdMapSewMove|subdMatchTopology|subdMirror|subdToBlind|subdToPoly|subdTransferUVsToCache|subdiv|subdivCrease|subdivDisplaySmoothness|substitute|substituteAllString|substituteGeometry|substring|surface|surfaceSampler|surfaceShaderList|swatchDisplayPort|switchTable|symbolButton|symbolCheckBox|sysFile|system|tabLayout|tan|tangentConstraint|texLatticeDeformContext|texManipContext|texMoveContext|texMoveUVShellContext|texRotateContext|texScaleContext|texSelectContext|texSelectShortestPathCtx|texSmudgeUVContext|texWinToolCtx|text|textCurves|textField|textFieldButtonGrp|textFieldGrp|textManip|textScrollList|textToShelf|textureDisplacePlane|textureHairColor|texturePlacementContext|textureWindow|threadCount|threePointArcCtx|timeControl|timePort|timerX|toNativePath|toggle|toggleAxis|toggleWindowVisibility|tokenize|tokenizeList|tolerance|tolower|toolButton|toolCollection|toolDropped|toolHasOptions|toolPropertyWindow|torus|toupper|trace|track|trackCtx|transferAttributes|transformCompare|transformLimits|translator|trim|trunc|truncateFluidCache|truncateHairCache|tumble|tumbleCtx|turbulence|twoPointArcCtx|uiRes|uiTemplate|unassignInputDevice|undo|undoInfo|ungroup|uniform|unit|unloadPlugin|untangleUV|untitledFileName|untrim|upAxis|updateAE|userCtx|uvLink|uvSnapshot|validateShelfName|vectorize|view2dToolCtx|viewCamera|viewClipPlane|viewFit|viewHeadOn|viewLookAt|viewManip|viewPlace|viewSet|visor|volumeAxis|vortex|waitCursor|warning|webBrowser|webBrowserPrefs|whatIs|window|windowPref|wire|wireContext|workspace|wrinkle|wrinkleContext|writeTake|xbmLangPathList|xform)\b/,
          operator: [
            /\+[+=]?|-[-=]?|&&|\|\||[<>]=|[*\/!=]=?|[%^]/,
            {
              pattern: /(^|[^<])<(?!<)/,
              lookbehind: true
            },
            {
              pattern: /(^|[^>])>(?!>)/,
              lookbehind: true
            }
          ],
          punctuation: /<<|>>|[.,:;?\[\](){}]/
        };
        Prism.languages.mel["code"].inside.rest = Prism.languages.mel;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/mermaid.js
  var require_mermaid = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/mermaid.js"(exports, module) {
      "use strict";
      module.exports = mermaid;
      mermaid.displayName = "mermaid";
      mermaid.aliases = [];
      function mermaid(Prism) {
        Prism.languages.mermaid = {
          comment: {
            pattern: /%%.*/,
            greedy: true
          },
          style: {
            pattern: /^([ \t]*(?:classDef|linkStyle|style)[ \t]+[\w$-]+[ \t]+)\w.*[^\s;]/m,
            lookbehind: true,
            inside: {
              property: /\b\w[\w-]*(?=[ \t]*:)/,
              operator: /:/,
              punctuation: /,/
            }
          },
          "inter-arrow-label": {
            pattern: /([^<>ox.=-])(?:-[-.]|==)(?![<>ox.=-])[ \t]*(?:"[^"\r\n]*"|[^\s".=-](?:[^\r\n.=-]*[^\s.=-])?)[ \t]*(?:\.+->?|--+[->]|==+[=>])(?![<>ox.=-])/,
            lookbehind: true,
            greedy: true,
            inside: {
              arrow: {
                pattern: /(?:\.+->?|--+[->]|==+[=>])$/,
                alias: "operator"
              },
              label: {
                pattern: /^([\s\S]{2}[ \t]*)\S(?:[\s\S]*\S)?/,
                lookbehind: true,
                alias: "property"
              },
              "arrow-head": {
                pattern: /^\S+/,
                alias: ["arrow", "operator"]
              }
            }
          },
          arrow: [
            {
              pattern: /(^|[^{}|o.-])[|}][|o](?:--|\.\.)[|o][|{](?![{}|o.-])/,
              lookbehind: true,
              alias: "operator"
            },
            {
              pattern: /(^|[^<>ox.=-])(?:[<ox](?:==+|--+|-\.*-)[>ox]?|(?:==+|--+|-\.*-)[>ox]|===+|---+|-\.+-)(?![<>ox.=-])/,
              lookbehind: true,
              alias: "operator"
            },
            {
              pattern: /(^|[^<>()x-])(?:--?(?:>>|[x>)])(?![<>()x])|(?:<<|[x<(])--?(?!-))/,
              lookbehind: true,
              alias: "operator"
            },
            {
              pattern: /(^|[^<>|*o.-])(?:[*o]--|--[*o]|<\|?(?:--|\.\.)|(?:--|\.\.)\|?>|--|\.\.)(?![<>|*o.-])/,
              lookbehind: true,
              alias: "operator"
            }
          ],
          label: {
            pattern: /(^|[^|<])\|(?:[^\r\n"|]|"[^"\r\n]*")+\|/,
            lookbehind: true,
            greedy: true,
            alias: "property"
          },
          text: {
            pattern: /(?:[(\[{]+|\b>)(?:[^\r\n"()\[\]{}]|"[^"\r\n]*")+(?:[)\]}]+|>)/,
            alias: "string"
          },
          string: {
            pattern: /"[^"\r\n]*"/,
            greedy: true
          },
          annotation: {
            pattern: /<<(?:abstract|choice|enumeration|fork|interface|join|service)>>|\[\[(?:choice|fork|join)\]\]/i,
            alias: "important"
          },
          keyword: [
            {
              pattern: /(^[ \t]*)(?:action|callback|class|classDef|classDiagram|click|direction|erDiagram|flowchart|gantt|gitGraph|graph|journey|link|linkStyle|pie|requirementDiagram|sequenceDiagram|stateDiagram|stateDiagram-v2|style|subgraph)(?![\w$-])/m,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^[ \t]*)(?:activate|alt|and|as|autonumber|deactivate|else|end(?:[ \t]+note)?|loop|opt|par|participant|rect|state|note[ \t]+(?:over|(?:left|right)[ \t]+of))(?![\w$-])/im,
              lookbehind: true,
              greedy: true
            }
          ],
          entity: /#[a-z0-9]+;/,
          operator: {
            pattern: /(\w[ \t]*)&(?=[ \t]*\w)|:::|:/,
            lookbehind: true
          },
          punctuation: /[(){};]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/mizar.js
  var require_mizar = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/mizar.js"(exports, module) {
      "use strict";
      module.exports = mizar;
      mizar.displayName = "mizar";
      mizar.aliases = [];
      function mizar(Prism) {
        Prism.languages.mizar = {
          comment: /::.+/,
          keyword: /@proof\b|\b(?:according|aggregate|all|and|antonym|are|as|associativity|assume|asymmetry|attr|be|begin|being|by|canceled|case|cases|clusters?|coherence|commutativity|compatibility|connectedness|consider|consistency|constructors|contradiction|correctness|def|deffunc|define|definitions?|defpred|do|does|end|environ|equals|ex|exactly|existence|for|from|func|given|hence|hereby|holds|idempotence|identity|iff?|implies|involutiveness|irreflexivity|is|it|let|means|mode|non|not|notations?|now|of|or|otherwise|over|per|pred|prefix|projectivity|proof|provided|qua|reconsider|redefine|reduce|reducibility|reflexivity|registrations?|requirements|reserve|sch|schemes?|section|selector|set|sethood|st|struct|such|suppose|symmetry|synonym|take|that|the|then|theorems?|thesis|thus|to|transitivity|uniqueness|vocabular(?:ies|y)|when|where|with|wrt)\b/,
          parameter: {
            pattern: /\$(?:10|\d)/,
            alias: "variable"
          },
          variable: /\b\w+(?=:)/,
          number: /(?:\b|-)\d+\b/,
          operator: /\.\.\.|->|&|\.?=/,
          punctuation: /\(#|#\)|[,:;\[\](){}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/mongodb.js
  var require_mongodb = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/mongodb.js"(exports, module) {
      "use strict";
      module.exports = mongodb;
      mongodb.displayName = "mongodb";
      mongodb.aliases = [];
      function mongodb(Prism) {
        ;
        (function(Prism2) {
          var operators = [
            "$eq",
            "$gt",
            "$gte",
            "$in",
            "$lt",
            "$lte",
            "$ne",
            "$nin",
            "$and",
            "$not",
            "$nor",
            "$or",
            "$exists",
            "$type",
            "$expr",
            "$jsonSchema",
            "$mod",
            "$regex",
            "$text",
            "$where",
            "$geoIntersects",
            "$geoWithin",
            "$near",
            "$nearSphere",
            "$all",
            "$elemMatch",
            "$size",
            "$bitsAllClear",
            "$bitsAllSet",
            "$bitsAnyClear",
            "$bitsAnySet",
            "$comment",
            "$elemMatch",
            "$meta",
            "$slice",
            "$currentDate",
            "$inc",
            "$min",
            "$max",
            "$mul",
            "$rename",
            "$set",
            "$setOnInsert",
            "$unset",
            "$addToSet",
            "$pop",
            "$pull",
            "$push",
            "$pullAll",
            "$each",
            "$position",
            "$slice",
            "$sort",
            "$bit",
            "$addFields",
            "$bucket",
            "$bucketAuto",
            "$collStats",
            "$count",
            "$currentOp",
            "$facet",
            "$geoNear",
            "$graphLookup",
            "$group",
            "$indexStats",
            "$limit",
            "$listLocalSessions",
            "$listSessions",
            "$lookup",
            "$match",
            "$merge",
            "$out",
            "$planCacheStats",
            "$project",
            "$redact",
            "$replaceRoot",
            "$replaceWith",
            "$sample",
            "$set",
            "$skip",
            "$sort",
            "$sortByCount",
            "$unionWith",
            "$unset",
            "$unwind",
            "$setWindowFields",
            "$abs",
            "$accumulator",
            "$acos",
            "$acosh",
            "$add",
            "$addToSet",
            "$allElementsTrue",
            "$and",
            "$anyElementTrue",
            "$arrayElemAt",
            "$arrayToObject",
            "$asin",
            "$asinh",
            "$atan",
            "$atan2",
            "$atanh",
            "$avg",
            "$binarySize",
            "$bsonSize",
            "$ceil",
            "$cmp",
            "$concat",
            "$concatArrays",
            "$cond",
            "$convert",
            "$cos",
            "$dateFromParts",
            "$dateToParts",
            "$dateFromString",
            "$dateToString",
            "$dayOfMonth",
            "$dayOfWeek",
            "$dayOfYear",
            "$degreesToRadians",
            "$divide",
            "$eq",
            "$exp",
            "$filter",
            "$first",
            "$floor",
            "$function",
            "$gt",
            "$gte",
            "$hour",
            "$ifNull",
            "$in",
            "$indexOfArray",
            "$indexOfBytes",
            "$indexOfCP",
            "$isArray",
            "$isNumber",
            "$isoDayOfWeek",
            "$isoWeek",
            "$isoWeekYear",
            "$last",
            "$last",
            "$let",
            "$literal",
            "$ln",
            "$log",
            "$log10",
            "$lt",
            "$lte",
            "$ltrim",
            "$map",
            "$max",
            "$mergeObjects",
            "$meta",
            "$min",
            "$millisecond",
            "$minute",
            "$mod",
            "$month",
            "$multiply",
            "$ne",
            "$not",
            "$objectToArray",
            "$or",
            "$pow",
            "$push",
            "$radiansToDegrees",
            "$range",
            "$reduce",
            "$regexFind",
            "$regexFindAll",
            "$regexMatch",
            "$replaceOne",
            "$replaceAll",
            "$reverseArray",
            "$round",
            "$rtrim",
            "$second",
            "$setDifference",
            "$setEquals",
            "$setIntersection",
            "$setIsSubset",
            "$setUnion",
            "$size",
            "$sin",
            "$slice",
            "$split",
            "$sqrt",
            "$stdDevPop",
            "$stdDevSamp",
            "$strcasecmp",
            "$strLenBytes",
            "$strLenCP",
            "$substr",
            "$substrBytes",
            "$substrCP",
            "$subtract",
            "$sum",
            "$switch",
            "$tan",
            "$toBool",
            "$toDate",
            "$toDecimal",
            "$toDouble",
            "$toInt",
            "$toLong",
            "$toObjectId",
            "$toString",
            "$toLower",
            "$toUpper",
            "$trim",
            "$trunc",
            "$type",
            "$week",
            "$year",
            "$zip",
            "$count",
            "$dateAdd",
            "$dateDiff",
            "$dateSubtract",
            "$dateTrunc",
            "$getField",
            "$rand",
            "$sampleRate",
            "$setField",
            "$unsetField",
            "$comment",
            "$explain",
            "$hint",
            "$max",
            "$maxTimeMS",
            "$min",
            "$orderby",
            "$query",
            "$returnKey",
            "$showDiskLoc",
            "$natural"
          ];
          var builtinFunctions = [
            "ObjectId",
            "Code",
            "BinData",
            "DBRef",
            "Timestamp",
            "NumberLong",
            "NumberDecimal",
            "MaxKey",
            "MinKey",
            "RegExp",
            "ISODate",
            "UUID"
          ];
          operators = operators.map(function(operator) {
            return operator.replace("$", "\\$");
          });
          var operatorsSource = "(?:" + operators.join("|") + ")\\b";
          Prism2.languages.mongodb = Prism2.languages.extend("javascript", {});
          Prism2.languages.insertBefore("mongodb", "string", {
            property: {
              pattern: /(?:(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)(?=\s*:)/,
              greedy: true,
              inside: {
                keyword: RegExp(`^(['"])?` + operatorsSource + "(?:\\1)?$")
              }
            }
          });
          Prism2.languages.mongodb.string.inside = {
            url: {
              pattern: /https?:\/\/[-\w@:%.+~#=]{1,256}\.[a-z0-9()]{1,6}\b[-\w()@:%+.~#?&/=]*/i,
              greedy: true
            },
            entity: {
              pattern: /\b(?:(?:[01]?\d\d?|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d\d?|2[0-4]\d|25[0-5])\b/,
              greedy: true
            }
          };
          Prism2.languages.insertBefore("mongodb", "constant", {
            builtin: {
              pattern: RegExp("\\b(?:" + builtinFunctions.join("|") + ")\\b"),
              alias: "keyword"
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/monkey.js
  var require_monkey = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/monkey.js"(exports, module) {
      "use strict";
      module.exports = monkey;
      monkey.displayName = "monkey";
      monkey.aliases = [];
      function monkey(Prism) {
        Prism.languages.monkey = {
          comment: {
            pattern: /^#Rem\s[\s\S]*?^#End|'.+/im,
            greedy: true
          },
          string: {
            pattern: /"[^"\r\n]*"/,
            greedy: true
          },
          preprocessor: {
            pattern: /(^[ \t]*)#.+/m,
            lookbehind: true,
            greedy: true,
            alias: "property"
          },
          function: /\b\w+(?=\()/,
          "type-char": {
            pattern: /\b[?%#$]/,
            alias: "class-name"
          },
          number: {
            pattern: /((?:\.\.)?)(?:(?:\b|\B-\.?|\B\.)\d+(?:(?!\.\.)\.\d*)?|\$[\da-f]+)/i,
            lookbehind: true
          },
          keyword: /\b(?:Abstract|Array|Bool|Case|Catch|Class|Const|Continue|Default|Eachin|Else|ElseIf|End|EndIf|Exit|Extends|Extern|False|Field|Final|Float|For|Forever|Function|Global|If|Implements|Import|Inline|Int|Interface|Local|Method|Module|New|Next|Null|Object|Private|Property|Public|Repeat|Return|Select|Self|Step|Strict|String|Super|Then|Throw|To|True|Try|Until|Void|Wend|While)\b/i,
          operator: /\.\.|<[=>]?|>=?|:?=|(?:[+\-*\/&~|]|\b(?:Mod|Shl|Shr)\b)=?|\b(?:And|Not|Or)\b/i,
          punctuation: /[.,:;()\[\]]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/moonscript.js
  var require_moonscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/moonscript.js"(exports, module) {
      "use strict";
      module.exports = moonscript;
      moonscript.displayName = "moonscript";
      moonscript.aliases = ["moon"];
      function moonscript(Prism) {
        Prism.languages.moonscript = {
          comment: /--.*/,
          string: [
            {
              pattern: /'[^']*'|\[(=*)\[[\s\S]*?\]\1\]/,
              greedy: true
            },
            {
              pattern: /"[^"]*"/,
              greedy: true,
              inside: {
                interpolation: {
                  pattern: /#\{[^{}]*\}/,
                  inside: {
                    moonscript: {
                      pattern: /(^#\{)[\s\S]+(?=\})/,
                      lookbehind: true,
                      inside: null
                    },
                    "interpolation-punctuation": {
                      pattern: /#\{|\}/,
                      alias: "punctuation"
                    }
                  }
                }
              }
            }
          ],
          "class-name": [
            {
              pattern: /(\b(?:class|extends)[ \t]+)\w+/,
              lookbehind: true
            },
            /\b[A-Z]\w*/
          ],
          keyword: /\b(?:class|continue|do|else|elseif|export|extends|for|from|if|import|in|local|nil|return|self|super|switch|then|unless|using|when|while|with)\b/,
          variable: /@@?\w*/,
          property: {
            pattern: /\b(?!\d)\w+(?=:)|(:)(?!\d)\w+/,
            lookbehind: true
          },
          function: {
            pattern: /\b(?:_G|_VERSION|assert|collectgarbage|coroutine\.(?:create|resume|running|status|wrap|yield)|debug\.(?:debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|setfenv|sethook|setlocal|setmetatable|setupvalue|traceback)|dofile|error|getfenv|getmetatable|io\.(?:close|flush|input|lines|open|output|popen|read|stderr|stdin|stdout|tmpfile|type|write)|ipairs|load|loadfile|loadstring|math\.(?:abs|acos|asin|atan|atan2|ceil|cos|cosh|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pi|pow|rad|random|randomseed|sin|sinh|sqrt|tan|tanh)|module|next|os\.(?:clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\.(?:cpath|loaded|loadlib|path|preload|seeall)|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|string\.(?:byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\.(?:concat|insert|maxn|remove|sort)|tonumber|tostring|type|unpack|xpcall)\b/,
            inside: {
              punctuation: /\./
            }
          },
          boolean: /\b(?:false|true)\b/,
          number: /(?:\B\.\d+|\b\d+\.\d+|\b\d+(?=[eE]))(?:[eE][-+]?\d+)?\b|\b(?:0x[a-fA-F\d]+|\d+)(?:U?LL)?\b/,
          operator: /\.{3}|[-=]>|~=|(?:[-+*/%<>!=]|\.\.)=?|[:#^]|\b(?:and|or)\b=?|\b(?:not)\b/,
          punctuation: /[.,()[\]{}\\]/
        };
        Prism.languages.moonscript.string[1].inside.interpolation.inside.moonscript.inside = Prism.languages.moonscript;
        Prism.languages.moon = Prism.languages.moonscript;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/n1ql.js
  var require_n1ql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/n1ql.js"(exports, module) {
      "use strict";
      module.exports = n1ql;
      n1ql.displayName = "n1ql";
      n1ql.aliases = [];
      function n1ql(Prism) {
        Prism.languages.n1ql = {
          comment: {
            pattern: /\/\*[\s\S]*?(?:$|\*\/)|--.*/,
            greedy: true
          },
          string: {
            pattern: /(["'])(?:\\[\s\S]|(?!\1)[^\\]|\1\1)*\1/,
            greedy: true
          },
          identifier: {
            pattern: /`(?:\\[\s\S]|[^\\`]|``)*`/,
            greedy: true
          },
          parameter: /\$[\w.]+/,
          keyword: /\b(?:ADVISE|ALL|ALTER|ANALYZE|AS|ASC|AT|BEGIN|BINARY|BOOLEAN|BREAK|BUCKET|BUILD|BY|CALL|CAST|CLUSTER|COLLATE|COLLECTION|COMMIT|COMMITTED|CONNECT|CONTINUE|CORRELATE|CORRELATED|COVER|CREATE|CURRENT|DATABASE|DATASET|DATASTORE|DECLARE|DECREMENT|DELETE|DERIVED|DESC|DESCRIBE|DISTINCT|DO|DROP|EACH|ELEMENT|EXCEPT|EXCLUDE|EXECUTE|EXPLAIN|FETCH|FILTER|FLATTEN|FLUSH|FOLLOWING|FOR|FORCE|FROM|FTS|FUNCTION|GOLANG|GRANT|GROUP|GROUPS|GSI|HASH|HAVING|IF|IGNORE|ILIKE|INCLUDE|INCREMENT|INDEX|INFER|INLINE|INNER|INSERT|INTERSECT|INTO|IS|ISOLATION|JAVASCRIPT|JOIN|KEY|KEYS|KEYSPACE|KNOWN|LANGUAGE|LAST|LEFT|LET|LETTING|LEVEL|LIMIT|LSM|MAP|MAPPING|MATCHED|MATERIALIZED|MERGE|MINUS|MISSING|NAMESPACE|NEST|NL|NO|NTH_VALUE|NULL|NULLS|NUMBER|OBJECT|OFFSET|ON|OPTION|OPTIONS|ORDER|OTHERS|OUTER|OVER|PARSE|PARTITION|PASSWORD|PATH|POOL|PRECEDING|PREPARE|PRIMARY|PRIVATE|PRIVILEGE|PROBE|PROCEDURE|PUBLIC|RANGE|RAW|REALM|REDUCE|RENAME|RESPECT|RETURN|RETURNING|REVOKE|RIGHT|ROLE|ROLLBACK|ROW|ROWS|SATISFIES|SAVEPOINT|SCHEMA|SCOPE|SELECT|SELF|SEMI|SET|SHOW|SOME|START|STATISTICS|STRING|SYSTEM|TIES|TO|TRAN|TRANSACTION|TRIGGER|TRUNCATE|UNBOUNDED|UNDER|UNION|UNIQUE|UNKNOWN|UNNEST|UNSET|UPDATE|UPSERT|USE|USER|USING|VALIDATE|VALUE|VALUES|VIA|VIEW|WHERE|WHILE|WINDOW|WITH|WORK|XOR)\b/i,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          boolean: /\b(?:FALSE|TRUE)\b/i,
          number: /(?:\b\d+\.|\B\.)\d+e[+\-]?\d+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,
          operator: /[-+*\/%]|!=|==?|\|\||<[>=]?|>=?|\b(?:AND|ANY|ARRAY|BETWEEN|CASE|ELSE|END|EVERY|EXISTS|FIRST|IN|LIKE|NOT|OR|THEN|VALUED|WHEN|WITHIN)\b/i,
          punctuation: /[;[\](),.{}:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/n4js.js
  var require_n4js = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/n4js.js"(exports, module) {
      "use strict";
      module.exports = n4js;
      n4js.displayName = "n4js";
      n4js.aliases = ["n4jsd"];
      function n4js(Prism) {
        Prism.languages.n4js = Prism.languages.extend("javascript", {
          keyword: /\b(?:Array|any|boolean|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|false|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|module|new|null|number|package|private|protected|public|return|set|static|string|super|switch|this|throw|true|try|typeof|var|void|while|with|yield)\b/
        });
        Prism.languages.insertBefore("n4js", "constant", {
          annotation: {
            pattern: /@+\w+/,
            alias: "operator"
          }
        });
        Prism.languages.n4jsd = Prism.languages.n4js;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nand2tetris-hdl.js
  var require_nand2tetris_hdl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nand2tetris-hdl.js"(exports, module) {
      "use strict";
      module.exports = nand2tetrisHdl;
      nand2tetrisHdl.displayName = "nand2tetrisHdl";
      nand2tetrisHdl.aliases = [];
      function nand2tetrisHdl(Prism) {
        Prism.languages["nand2tetris-hdl"] = {
          comment: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
          keyword: /\b(?:BUILTIN|CHIP|CLOCKED|IN|OUT|PARTS)\b/,
          boolean: /\b(?:false|true)\b/,
          function: /\b[A-Za-z][A-Za-z0-9]*(?=\()/,
          number: /\b\d+\b/,
          operator: /=|\.\./,
          punctuation: /[{}[\];(),:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/naniscript.js
  var require_naniscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/naniscript.js"(exports, module) {
      "use strict";
      module.exports = naniscript;
      naniscript.displayName = "naniscript";
      naniscript.aliases = [];
      function naniscript(Prism) {
        ;
        (function(Prism2) {
          var expressionDef = /\{[^\r\n\[\]{}]*\}/;
          var params = {
            "quoted-string": {
              pattern: /"(?:[^"\\]|\\.)*"/,
              alias: "operator"
            },
            "command-param-id": {
              pattern: /(\s)\w+:/,
              lookbehind: true,
              alias: "property"
            },
            "command-param-value": [
              {
                pattern: expressionDef,
                alias: "selector"
              },
              {
                pattern: /([\t ])\S+/,
                lookbehind: true,
                greedy: true,
                alias: "operator"
              },
              {
                pattern: /\S(?:.*\S)?/,
                alias: "operator"
              }
            ]
          };
          Prism2.languages.naniscript = {
            comment: {
              pattern: /^([\t ]*);.*/m,
              lookbehind: true
            },
            define: {
              pattern: /^>.+/m,
              alias: "tag",
              inside: {
                value: {
                  pattern: /(^>\w+[\t ]+)(?!\s)[^{}\r\n]+/,
                  lookbehind: true,
                  alias: "operator"
                },
                key: {
                  pattern: /(^>)\w+/,
                  lookbehind: true
                }
              }
            },
            label: {
              pattern: /^([\t ]*)#[\t ]*\w+[\t ]*$/m,
              lookbehind: true,
              alias: "regex"
            },
            command: {
              pattern: /^([\t ]*)@\w+(?=[\t ]|$).*/m,
              lookbehind: true,
              alias: "function",
              inside: {
                "command-name": /^@\w+/,
                expression: {
                  pattern: expressionDef,
                  greedy: true,
                  alias: "selector"
                },
                "command-params": {
                  pattern: /\s*\S[\s\S]*/,
                  inside: params
                }
              }
            },
            "generic-text": {
              pattern: /(^[ \t]*)[^#@>;\s].*/m,
              lookbehind: true,
              alias: "punctuation",
              inside: {
                "escaped-char": /\\[{}\[\]"]/,
                expression: {
                  pattern: expressionDef,
                  greedy: true,
                  alias: "selector"
                },
                "inline-command": {
                  pattern: /\[[\t ]*\w[^\r\n\[\]]*\]/,
                  greedy: true,
                  alias: "function",
                  inside: {
                    "command-params": {
                      pattern: /(^\[[\t ]*\w+\b)[\s\S]+(?=\]$)/,
                      lookbehind: true,
                      inside: params
                    },
                    "command-param-name": {
                      pattern: /^(\[[\t ]*)\w+/,
                      lookbehind: true,
                      alias: "name"
                    },
                    "start-stop-char": /[\[\]]/
                  }
                }
              }
            }
          };
          Prism2.languages.nani = Prism2.languages["naniscript"];
          Prism2.hooks.add("after-tokenize", function(env) {
            var tokens2 = env.tokens;
            tokens2.forEach(function(token) {
              if (typeof token !== "string" && token.type === "generic-text") {
                var content3 = getTextContent(token);
                if (!isBracketsBalanced(content3)) {
                  token.type = "bad-line";
                  token.content = content3;
                }
              }
            });
          });
          function isBracketsBalanced(input) {
            var brackets = "[]{}";
            var stack = [];
            for (var i = 0; i < input.length; i++) {
              var bracket = input[i];
              var bracketsIndex = brackets.indexOf(bracket);
              if (bracketsIndex !== -1) {
                if (bracketsIndex % 2 === 0) {
                  stack.push(bracketsIndex + 1);
                } else if (stack.pop() !== bracketsIndex) {
                  return false;
                }
              }
            }
            return stack.length === 0;
          }
          function getTextContent(token) {
            if (typeof token === "string") {
              return token;
            } else if (Array.isArray(token)) {
              return token.map(getTextContent).join("");
            } else {
              return getTextContent(token.content);
            }
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nasm.js
  var require_nasm = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nasm.js"(exports, module) {
      "use strict";
      module.exports = nasm;
      nasm.displayName = "nasm";
      nasm.aliases = [];
      function nasm(Prism) {
        Prism.languages.nasm = {
          comment: /;.*$/m,
          string: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
          label: {
            pattern: /(^\s*)[A-Za-z._?$][\w.?$@~#]*:/m,
            lookbehind: true,
            alias: "function"
          },
          keyword: [
            /\[?BITS (?:16|32|64)\]?/,
            {
              pattern: /(^\s*)section\s*[a-z.]+:?/im,
              lookbehind: true
            },
            /(?:extern|global)[^;\r\n]*/i,
            /(?:CPU|DEFAULT|FLOAT).*$/m
          ],
          register: {
            pattern: /\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s)\b/i,
            alias: "variable"
          },
          number: /(?:\b|(?=\$))(?:0[hx](?:\.[\da-f]+|[\da-f]+(?:\.[\da-f]+)?)(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|(?:\d+(?:\.\d+)?|\.\d+)(?:\.?e[+-]?\d+)?[dt]?)\b/i,
          operator: /[\[\]*+\-\/%<>=&|$!]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/neon.js
  var require_neon = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/neon.js"(exports, module) {
      "use strict";
      module.exports = neon;
      neon.displayName = "neon";
      neon.aliases = [];
      function neon(Prism) {
        Prism.languages.neon = {
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          datetime: {
            pattern: /(^|[[{(=:,\s])\d\d\d\d-\d\d?-\d\d?(?:(?:[Tt]| +)\d\d?:\d\d:\d\d(?:\.\d*)? *(?:Z|[-+]\d\d?(?::?\d\d)?)?)?(?=$|[\]}),\s])/,
            lookbehind: true,
            alias: "number"
          },
          key: {
            pattern: /(^|[[{(,\s])[^,:=[\]{}()'"\s]+(?=\s*:(?:$|[\]}),\s])|\s*=)/,
            lookbehind: true,
            alias: "atrule"
          },
          number: {
            pattern: /(^|[[{(=:,\s])[+-]?(?:0x[\da-fA-F]+|0o[0-7]+|0b[01]+|(?:\d+(?:\.\d*)?|\.?\d+)(?:[eE][+-]?\d+)?)(?=$|[\]}),:=\s])/,
            lookbehind: true
          },
          boolean: {
            pattern: /(^|[[{(=:,\s])(?:false|no|true|yes)(?=$|[\]}),:=\s])/i,
            lookbehind: true
          },
          null: {
            pattern: /(^|[[{(=:,\s])(?:null)(?=$|[\]}),:=\s])/i,
            lookbehind: true,
            alias: "keyword"
          },
          string: {
            pattern: /(^|[[{(=:,\s])(?:('''|""")\r?\n(?:(?:[^\r\n]|\r?\n(?![\t ]*\2))*\r?\n)?[\t ]*\2|'[^'\r\n]*'|"(?:\\.|[^\\"\r\n])*")/,
            lookbehind: true,
            greedy: true
          },
          literal: {
            pattern: /(^|[[{(=:,\s])(?:[^#"',:=[\]{}()\s`-]|[:-][^"',=[\]{}()\s])(?:[^,:=\]})(\s]|:(?![\s,\]})]|$)|[ \t]+[^#,:=\]})(\s])*/,
            lookbehind: true,
            alias: "string"
          },
          punctuation: /[,:=[\]{}()-]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nevod.js
  var require_nevod = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nevod.js"(exports, module) {
      "use strict";
      module.exports = nevod;
      nevod.displayName = "nevod";
      nevod.aliases = [];
      function nevod(Prism) {
        Prism.languages.nevod = {
          comment: /\/\/.*|(?:\/\*[\s\S]*?(?:\*\/|$))/,
          string: {
            pattern: /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))!?\*?/,
            greedy: true,
            inside: {
              "string-attrs": /!$|!\*$|\*$/
            }
          },
          namespace: {
            pattern: /(@namespace\s+)[a-zA-Z0-9\-.]+(?=\s*\{)/,
            lookbehind: true
          },
          pattern: {
            pattern: /(@pattern\s+)?#?[a-zA-Z0-9\-.]+(?:\s*\(\s*(?:~\s*)?[a-zA-Z0-9\-.]+\s*(?:,\s*(?:~\s*)?[a-zA-Z0-9\-.]*)*\))?(?=\s*=)/,
            lookbehind: true,
            inside: {
              "pattern-name": {
                pattern: /^#?[a-zA-Z0-9\-.]+/,
                alias: "class-name"
              },
              fields: {
                pattern: /\(.*\)/,
                inside: {
                  "field-name": {
                    pattern: /[a-zA-Z0-9\-.]+/,
                    alias: "variable"
                  },
                  punctuation: /[,()]/,
                  operator: {
                    pattern: /~/,
                    alias: "field-hidden-mark"
                  }
                }
              }
            }
          },
          search: {
            pattern: /(@search\s+|#)[a-zA-Z0-9\-.]+(?:\.\*)?(?=\s*;)/,
            alias: "function",
            lookbehind: true
          },
          keyword: /@(?:having|inside|namespace|outside|pattern|require|search|where)\b/,
          "standard-pattern": {
            pattern: /\b(?:Alpha|AlphaNum|Any|Blank|End|LineBreak|Num|NumAlpha|Punct|Space|Start|Symbol|Word|WordBreak)\b(?:\([a-zA-Z0-9\-.,\s+]*\))?/,
            inside: {
              "standard-pattern-name": {
                pattern: /^[a-zA-Z0-9\-.]+/,
                alias: "builtin"
              },
              quantifier: {
                pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
                alias: "number"
              },
              "standard-pattern-attr": {
                pattern: /[a-zA-Z0-9\-.]+/,
                alias: "builtin"
              },
              punctuation: /[,()]/
            }
          },
          quantifier: {
            pattern: /\b\d+(?:\s*\+|\s*-\s*\d+)?(?!\w)/,
            alias: "number"
          },
          operator: [
            {
              pattern: /=/,
              alias: "pattern-def"
            },
            {
              pattern: /&/,
              alias: "conjunction"
            },
            {
              pattern: /~/,
              alias: "exception"
            },
            {
              pattern: /\?/,
              alias: "optionality"
            },
            {
              pattern: /[[\]]/,
              alias: "repetition"
            },
            {
              pattern: /[{}]/,
              alias: "variation"
            },
            {
              pattern: /[+_]/,
              alias: "sequence"
            },
            {
              pattern: /\.{2,3}/,
              alias: "span"
            }
          ],
          "field-capture": [
            {
              pattern: /([a-zA-Z0-9\-.]+\s*\()\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+(?:\s*,\s*[a-zA-Z0-9\-.]+\s*:\s*[a-zA-Z0-9\-.]+)*(?=\s*\))/,
              lookbehind: true,
              inside: {
                "field-name": {
                  pattern: /[a-zA-Z0-9\-.]+/,
                  alias: "variable"
                },
                colon: /:/
              }
            },
            {
              pattern: /[a-zA-Z0-9\-.]+\s*:/,
              inside: {
                "field-name": {
                  pattern: /[a-zA-Z0-9\-.]+/,
                  alias: "variable"
                },
                colon: /:/
              }
            }
          ],
          punctuation: /[:;,()]/,
          name: /[a-zA-Z0-9\-.]+/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nginx.js
  var require_nginx = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nginx.js"(exports, module) {
      "use strict";
      module.exports = nginx;
      nginx.displayName = "nginx";
      nginx.aliases = [];
      function nginx(Prism) {
        ;
        (function(Prism2) {
          var variable = /\$(?:\w[a-z\d]*(?:_[^\x00-\x1F\s"'\\()$]*)?|\{[^}\s"'\\]+\})/i;
          Prism2.languages.nginx = {
            comment: {
              pattern: /(^|[\s{};])#.*/,
              lookbehind: true,
              greedy: true
            },
            directive: {
              pattern: /(^|\s)\w(?:[^;{}"'\\\s]|\\.|"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*'|\s+(?:#.*(?!.)|(?![#\s])))*?(?=\s*[;{])/,
              lookbehind: true,
              greedy: true,
              inside: {
                string: {
                  pattern: /((?:^|[^\\])(?:\\\\)*)(?:"(?:[^"\\]|\\.)*"|'(?:[^'\\]|\\.)*')/,
                  lookbehind: true,
                  greedy: true,
                  inside: {
                    escape: {
                      pattern: /\\["'\\nrt]/,
                      alias: "entity"
                    },
                    variable
                  }
                },
                comment: {
                  pattern: /(\s)#.*/,
                  lookbehind: true,
                  greedy: true
                },
                keyword: {
                  pattern: /^\S+/,
                  greedy: true
                },
                boolean: {
                  pattern: /(\s)(?:off|on)(?!\S)/,
                  lookbehind: true
                },
                number: {
                  pattern: /(\s)\d+[a-z]*(?!\S)/i,
                  lookbehind: true
                },
                variable
              }
            },
            punctuation: /[{};]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nim.js
  var require_nim = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nim.js"(exports, module) {
      "use strict";
      module.exports = nim;
      nim.displayName = "nim";
      nim.aliases = [];
      function nim(Prism) {
        Prism.languages.nim = {
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          string: {
            pattern: /(?:\b(?!\d)(?:\w|\\x[89a-fA-F][0-9a-fA-F])+)?(?:"""[\s\S]*?"""(?!")|"(?:\\[\s\S]|""|[^"\\])*")/,
            greedy: true
          },
          char: {
            pattern: /'(?:\\(?:\d+|x[\da-fA-F]{0,2}|.)|[^'])'/,
            greedy: true
          },
          function: {
            pattern: /(?:(?!\d)(?:\w|\\x[89a-fA-F][0-9a-fA-F])+|`[^`\r\n]+`)\*?(?:\[[^\]]+\])?(?=\s*\()/,
            greedy: true,
            inside: {
              operator: /\*$/
            }
          },
          identifier: {
            pattern: /`[^`\r\n]+`/,
            greedy: true,
            inside: {
              punctuation: /`/
            }
          },
          number: /\b(?:0[xXoObB][\da-fA-F_]+|\d[\d_]*(?:(?!\.\.)\.[\d_]*)?(?:[eE][+-]?\d[\d_]*)?)(?:'?[iuf]\d*)?/,
          keyword: /\b(?:addr|as|asm|atomic|bind|block|break|case|cast|concept|const|continue|converter|defer|discard|distinct|do|elif|else|end|enum|except|export|finally|for|from|func|generic|if|import|include|interface|iterator|let|macro|method|mixin|nil|object|out|proc|ptr|raise|ref|return|static|template|try|tuple|type|using|var|when|while|with|without|yield)\b/,
          operator: {
            pattern: /(^|[({\[](?=\.\.)|(?![({\[]\.).)(?:(?:[=+\-*\/<>@$~&%|!?^:\\]|\.\.|\.(?![)}\]]))+|\b(?:and|div|in|is|isnot|mod|not|notin|of|or|shl|shr|xor)\b)/m,
            lookbehind: true
          },
          punctuation: /[({\[]\.|\.[)}\]]|[`(){}\[\],:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nix.js
  var require_nix = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nix.js"(exports, module) {
      "use strict";
      module.exports = nix;
      nix.displayName = "nix";
      nix.aliases = [];
      function nix(Prism) {
        Prism.languages.nix = {
          comment: {
            pattern: /\/\*[\s\S]*?\*\/|#.*/,
            greedy: true
          },
          string: {
            pattern: /"(?:[^"\\]|\\[\s\S])*"|''(?:(?!'')[\s\S]|''(?:'|\\|\$\{))*''/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /(^|(?:^|(?!'').)[^\\])\$\{(?:[^{}]|\{[^}]*\})*\}/,
                lookbehind: true,
                inside: null
              }
            }
          },
          url: [
            /\b(?:[a-z]{3,7}:\/\/)[\w\-+%~\/.:#=?&]+/,
            {
              pattern: /([^\/])(?:[\w\-+%~.:#=?&]*(?!\/\/)[\w\-+%~\/.:#=?&])?(?!\/\/)\/[\w\-+%~\/.:#=?&]*/,
              lookbehind: true
            }
          ],
          antiquotation: {
            pattern: /\$(?=\{)/,
            alias: "important"
          },
          number: /\b\d+\b/,
          keyword: /\b(?:assert|builtins|else|if|in|inherit|let|null|or|then|with)\b/,
          function: /\b(?:abort|add|all|any|attrNames|attrValues|baseNameOf|compareVersions|concatLists|currentSystem|deepSeq|derivation|dirOf|div|elem(?:At)?|fetch(?:Tarball|url)|filter(?:Source)?|fromJSON|genList|getAttr|getEnv|hasAttr|hashString|head|import|intersectAttrs|is(?:Attrs|Bool|Function|Int|List|Null|String)|length|lessThan|listToAttrs|map|mul|parseDrvName|pathExists|read(?:Dir|File)|removeAttrs|replaceStrings|seq|sort|stringLength|sub(?:string)?|tail|throw|to(?:File|JSON|Path|String|XML)|trace|typeOf)\b|\bfoldl'\B/,
          boolean: /\b(?:false|true)\b/,
          operator: /[=!<>]=?|\+\+?|\|\||&&|\/\/|->?|[?@]/,
          punctuation: /[{}()[\].,:;]/
        };
        Prism.languages.nix.string.inside.interpolation.inside = Prism.languages.nix;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/nsis.js
  var require_nsis = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/nsis.js"(exports, module) {
      "use strict";
      module.exports = nsis;
      nsis.displayName = "nsis";
      nsis.aliases = [];
      function nsis(Prism) {
        Prism.languages.nsis = {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|[#;].*)/,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          keyword: {
            pattern: /(^[\t ]*)(?:Abort|Add(?:BrandingImage|Size)|AdvSplash|Allow(?:RootDirInstall|SkipFiles)|AutoCloseWindow|BG(?:Font|Gradient|Image)|Banner|BrandingText|BringToFront|CRCCheck|Call(?:InstDLL)?|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|Create(?:Directory|Font|ShortCut)|Delete(?:INISec|INIStr|RegKey|RegValue)?|Detail(?:Print|sButtonText)|Dialer|Dir(?:Text|Var|Verify)|EnableWindow|Enum(?:RegKey|RegValue)|Exch|Exec(?:Shell(?:Wait)?|Wait)?|ExpandEnvStrings|File(?:BufSize|Close|ErrorText|Open|Read|ReadByte|ReadUTF16LE|ReadWord|Seek|Write|WriteByte|WriteUTF16LE|WriteWord)?|Find(?:Close|First|Next|Window)|FlushINI|Get(?:CurInstType|CurrentAddress|DLLVersion(?:Local)?|DlgItem|ErrorLevel|FileTime(?:Local)?|FullPathName|Function(?:Address|End)?|InstDirError|LabelAddress|TempFileName)|Goto|HideWindow|Icon|If(?:Abort|Errors|FileExists|RebootFlag|Silent)|InitPluginsDir|InstProgressFlags|Inst(?:Type(?:GetText|SetText)?)|Install(?:ButtonText|Colors|Dir(?:RegKey)?)|Int(?:64|Ptr)?CmpU?|Int(?:64)?Fmt|Int(?:Ptr)?Op|IsWindow|Lang(?:DLL|String)|License(?:BkColor|Data|ForceSelection|LangString|Text)|LoadLanguageFile|LockWindow|Log(?:Set|Text)|Manifest(?:DPIAware|SupportedOS)|Math|MessageBox|MiscButtonText|NSISdl|Name|Nop|OutFile|PE(?:DllCharacteristics|SubsysVer)|Page(?:Callbacks)?|Pop|Push|Quit|RMDir|Read(?:EnvStr|INIStr|RegDWORD|RegStr)|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|SearchPath|Section(?:End|GetFlags|GetInstTypes|GetSize|GetText|Group|In|SetFlags|SetInstTypes|SetSize|SetText)?|SendMessage|Set(?:AutoClose|BrandingImage|Compress|Compressor(?:DictSize)?|CtlColors|CurInstType|DatablockOptimize|DateSave|Details(?:Print|View)|ErrorLevel|Errors|FileAttributes|Font|OutPath|Overwrite|PluginUnload|RebootFlag|RegView|ShellVarContext|Silent)|Show(?:InstDetails|UninstDetails|Window)|Silent(?:Install|UnInstall)|Sleep|SpaceTexts|Splash|StartMenu|Str(?:CmpS?|Cpy|Len)|SubCaption|System|UnRegDLL|Unicode|UninstPage|Uninstall(?:ButtonText|Caption|Icon|SubCaption|Text)|UserInfo|VI(?:AddVersionKey|FileVersion|ProductVersion)|VPatch|Var|WindowIcon|Write(?:INIStr|Reg(?:Bin|DWORD|ExpandStr|MultiStr|None|Str)|Uninstaller)|XPStyle|ns(?:Dialogs|Exec))\b/m,
            lookbehind: true
          },
          property: /\b(?:ARCHIVE|FILE_(?:ATTRIBUTE_ARCHIVE|ATTRIBUTE_NORMAL|ATTRIBUTE_OFFLINE|ATTRIBUTE_READONLY|ATTRIBUTE_SYSTEM|ATTRIBUTE_TEMPORARY)|HK(?:(?:CR|CU|LM)(?:32|64)?|DD|PD|U)|HKEY_(?:CLASSES_ROOT|CURRENT_CONFIG|CURRENT_USER|DYN_DATA|LOCAL_MACHINE|PERFORMANCE_DATA|USERS)|ID(?:ABORT|CANCEL|IGNORE|NO|OK|RETRY|YES)|MB_(?:ABORTRETRYIGNORE|DEFBUTTON1|DEFBUTTON2|DEFBUTTON3|DEFBUTTON4|ICONEXCLAMATION|ICONINFORMATION|ICONQUESTION|ICONSTOP|OK|OKCANCEL|RETRYCANCEL|RIGHT|RTLREADING|SETFOREGROUND|TOPMOST|USERICON|YESNO)|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY|admin|all|auto|both|colored|false|force|hide|highest|lastused|leave|listonly|none|normal|notset|off|on|open|print|show|silent|silentlog|smooth|textonly|true|user)\b/,
          constant: /\$\{[!\w\.:\^-]+\}|\$\([!\w\.:\^-]+\)/,
          variable: /\$\w[\w\.]*/,
          number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
          operator: /--?|\+\+?|<=?|>=?|==?=?|&&?|\|\|?|[?*\/~^%]/,
          punctuation: /[{}[\];(),.:]/,
          important: {
            pattern: /(^[\t ]*)!(?:addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|verbose|warning)\b/im,
            lookbehind: true
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/objectivec.js
  var require_objectivec = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/objectivec.js"(exports, module) {
      "use strict";
      var refractorC = require_c();
      module.exports = objectivec;
      objectivec.displayName = "objectivec";
      objectivec.aliases = ["objc"];
      function objectivec(Prism) {
        Prism.register(refractorC);
        Prism.languages.objectivec = Prism.languages.extend("c", {
          string: {
            pattern: /@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
            greedy: true
          },
          keyword: /\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,
          operator: /-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/
        });
        delete Prism.languages.objectivec["class-name"];
        Prism.languages.objc = Prism.languages.objectivec;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/ocaml.js
  var require_ocaml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/ocaml.js"(exports, module) {
      "use strict";
      module.exports = ocaml;
      ocaml.displayName = "ocaml";
      ocaml.aliases = [];
      function ocaml(Prism) {
        Prism.languages.ocaml = {
          comment: {
            pattern: /\(\*[\s\S]*?\*\)/,
            greedy: true
          },
          char: {
            pattern: /'(?:[^\\\r\n']|\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,
            greedy: true
          },
          string: [
            {
              pattern: /"(?:\\(?:[\s\S]|\r\n)|[^\\\r\n"])*"/,
              greedy: true
            },
            {
              pattern: /\{([a-z_]*)\|[\s\S]*?\|\1\}/,
              greedy: true
            }
          ],
          number: [
            /\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\b/i,
            /\b0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]*)?(?:p[+-]?\d[\d_]*)?(?!\w)/i,
            /\b\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?\d[\d_]*)?(?!\w)/i
          ],
          directive: {
            pattern: /\B#\w+/,
            alias: "property"
          },
          label: {
            pattern: /\B~\w+/,
            alias: "property"
          },
          "type-variable": {
            pattern: /\B'\w+/,
            alias: "function"
          },
          variant: {
            pattern: /`\w+/,
            alias: "symbol"
          },
          keyword: /\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,
          boolean: /\b(?:false|true)\b/,
          "operator-like-punctuation": {
            pattern: /\[[<>|]|[>|]\]|\{<|>\}/,
            alias: "punctuation"
          },
          operator: /\.[.~]|:[=>]|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,
          punctuation: /;;|::|[(){}\[\].,:;#]|\b_\b/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/opencl.js
  var require_opencl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/opencl.js"(exports, module) {
      "use strict";
      var refractorC = require_c();
      module.exports = opencl;
      opencl.displayName = "opencl";
      opencl.aliases = [];
      function opencl(Prism) {
        Prism.register(refractorC);
        (function(Prism2) {
          Prism2.languages.opencl = Prism2.languages.extend("c", {
            keyword: /\b(?:(?:__)?(?:constant|global|kernel|local|private|read_only|read_write|write_only)|__attribute__|auto|(?:bool|u?(?:char|int|long|short)|half|quad)(?:2|3|4|8|16)?|break|case|complex|const|continue|(?:double|float)(?:16(?:x(?:1|2|4|8|16))?|1x(?:1|2|4|8|16)|2(?:x(?:1|2|4|8|16))?|3|4(?:x(?:1|2|4|8|16))?|8(?:x(?:1|2|4|8|16))?)?|default|do|else|enum|extern|for|goto|if|imaginary|inline|packed|pipe|register|restrict|return|signed|sizeof|static|struct|switch|typedef|uniform|union|unsigned|void|volatile|while)\b/,
            number: /(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[fuhl]{0,4}/i,
            boolean: /\b(?:false|true)\b/,
            "constant-opencl-kernel": {
              pattern: /\b(?:CHAR_(?:BIT|MAX|MIN)|CLK_(?:ADDRESS_(?:CLAMP(?:_TO_EDGE)?|NONE|REPEAT)|FILTER_(?:LINEAR|NEAREST)|(?:GLOBAL|LOCAL)_MEM_FENCE|NORMALIZED_COORDS_(?:FALSE|TRUE))|CL_(?:BGRA|(?:HALF_)?FLOAT|INTENSITY|LUMINANCE|A?R?G?B?[Ax]?|(?:(?:UN)?SIGNED|[US]NORM)_(?:INT(?:8|16|32))|UNORM_(?:INT_101010|SHORT_(?:555|565)))|(?:DBL|FLT|HALF)_(?:DIG|EPSILON|(?:MAX|MIN)(?:(?:_10)?_EXP)?|MANT_DIG)|FLT_RADIX|HUGE_VALF?|(?:INT|LONG|SCHAR|SHRT)_(?:MAX|MIN)|INFINITY|MAXFLOAT|M_(?:[12]_PI|2_SQRTPI|E|LN(?:2|10)|LOG(?:2|10)E?|PI(?:_[24])?|SQRT(?:1_2|2))(?:_F|_H)?|NAN|(?:UCHAR|UINT|ULONG|USHRT)_MAX)\b/,
              alias: "constant"
            }
          });
          Prism2.languages.insertBefore("opencl", "class-name", {
            "builtin-type": {
              pattern: /\b(?:_cl_(?:command_queue|context|device_id|event|kernel|mem|platform_id|program|sampler)|cl_(?:image_format|mem_fence_flags)|clk_event_t|event_t|image(?:1d_(?:array_|buffer_)?t|2d_(?:array_(?:depth_|msaa_depth_|msaa_)?|depth_|msaa_depth_|msaa_)?t|3d_t)|intptr_t|ndrange_t|ptrdiff_t|queue_t|reserve_id_t|sampler_t|size_t|uintptr_t)\b/,
              alias: "keyword"
            }
          });
          var attributes2 = {
            "type-opencl-host": {
              pattern: /\b(?:cl_(?:GLenum|GLint|GLuin|addressing_mode|bitfield|bool|buffer_create_type|build_status|channel_(?:order|type)|(?:u?(?:char|int|long|short)|double|float)(?:2|3|4|8|16)?|command_(?:queue(?:_info|_properties)?|type)|context(?:_info|_properties)?|device_(?:exec_capabilities|fp_config|id|info|local_mem_type|mem_cache_type|type)|(?:event|sampler)(?:_info)?|filter_mode|half|image_info|kernel(?:_info|_work_group_info)?|map_flags|mem(?:_flags|_info|_object_type)?|platform_(?:id|info)|profiling_info|program(?:_build_info|_info)?))\b/,
              alias: "keyword"
            },
            "boolean-opencl-host": {
              pattern: /\bCL_(?:FALSE|TRUE)\b/,
              alias: "boolean"
            },
            "constant-opencl-host": {
              pattern: /\bCL_(?:A|ABGR|ADDRESS_(?:CLAMP(?:_TO_EDGE)?|MIRRORED_REPEAT|NONE|REPEAT)|ARGB|BGRA|BLOCKING|BUFFER_CREATE_TYPE_REGION|BUILD_(?:ERROR|IN_PROGRESS|NONE|PROGRAM_FAILURE|SUCCESS)|COMMAND_(?:ACQUIRE_GL_OBJECTS|BARRIER|COPY_(?:BUFFER(?:_RECT|_TO_IMAGE)?|IMAGE(?:_TO_BUFFER)?)|FILL_(?:BUFFER|IMAGE)|MAP(?:_BUFFER|_IMAGE)|MARKER|MIGRATE(?:_SVM)?_MEM_OBJECTS|NATIVE_KERNEL|NDRANGE_KERNEL|READ_(?:BUFFER(?:_RECT)?|IMAGE)|RELEASE_GL_OBJECTS|SVM_(?:FREE|MAP|MEMCPY|MEMFILL|UNMAP)|TASK|UNMAP_MEM_OBJECT|USER|WRITE_(?:BUFFER(?:_RECT)?|IMAGE))|COMPILER_NOT_AVAILABLE|COMPILE_PROGRAM_FAILURE|COMPLETE|CONTEXT_(?:DEVICES|INTEROP_USER_SYNC|NUM_DEVICES|PLATFORM|PROPERTIES|REFERENCE_COUNT)|DEPTH(?:_STENCIL)?|DEVICE_(?:ADDRESS_BITS|AFFINITY_DOMAIN_(?:L[1-4]_CACHE|NEXT_PARTITIONABLE|NUMA)|AVAILABLE|BUILT_IN_KERNELS|COMPILER_AVAILABLE|DOUBLE_FP_CONFIG|ENDIAN_LITTLE|ERROR_CORRECTION_SUPPORT|EXECUTION_CAPABILITIES|EXTENSIONS|GLOBAL_(?:MEM_(?:CACHELINE_SIZE|CACHE_SIZE|CACHE_TYPE|SIZE)|VARIABLE_PREFERRED_TOTAL_SIZE)|HOST_UNIFIED_MEMORY|IL_VERSION|IMAGE(?:2D_MAX_(?:HEIGHT|WIDTH)|3D_MAX_(?:DEPTH|HEIGHT|WIDTH)|_BASE_ADDRESS_ALIGNMENT|_MAX_ARRAY_SIZE|_MAX_BUFFER_SIZE|_PITCH_ALIGNMENT|_SUPPORT)|LINKER_AVAILABLE|LOCAL_MEM_SIZE|LOCAL_MEM_TYPE|MAX_(?:CLOCK_FREQUENCY|COMPUTE_UNITS|CONSTANT_ARGS|CONSTANT_BUFFER_SIZE|GLOBAL_VARIABLE_SIZE|MEM_ALLOC_SIZE|NUM_SUB_GROUPS|ON_DEVICE_(?:EVENTS|QUEUES)|PARAMETER_SIZE|PIPE_ARGS|READ_IMAGE_ARGS|READ_WRITE_IMAGE_ARGS|SAMPLERS|WORK_GROUP_SIZE|WORK_ITEM_DIMENSIONS|WORK_ITEM_SIZES|WRITE_IMAGE_ARGS)|MEM_BASE_ADDR_ALIGN|MIN_DATA_TYPE_ALIGN_SIZE|NAME|NATIVE_VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT)|NOT_(?:AVAILABLE|FOUND)|OPENCL_C_VERSION|PARENT_DEVICE|PARTITION_(?:AFFINITY_DOMAIN|BY_AFFINITY_DOMAIN|BY_COUNTS|BY_COUNTS_LIST_END|EQUALLY|FAILED|MAX_SUB_DEVICES|PROPERTIES|TYPE)|PIPE_MAX_(?:ACTIVE_RESERVATIONS|PACKET_SIZE)|PLATFORM|PREFERRED_(?:GLOBAL_ATOMIC_ALIGNMENT|INTEROP_USER_SYNC|LOCAL_ATOMIC_ALIGNMENT|PLATFORM_ATOMIC_ALIGNMENT|VECTOR_WIDTH_(?:CHAR|DOUBLE|FLOAT|HALF|INT|LONG|SHORT))|PRINTF_BUFFER_SIZE|PROFILE|PROFILING_TIMER_RESOLUTION|QUEUE_(?:ON_(?:DEVICE_(?:MAX_SIZE|PREFERRED_SIZE|PROPERTIES)|HOST_PROPERTIES)|PROPERTIES)|REFERENCE_COUNT|SINGLE_FP_CONFIG|SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS|SVM_(?:ATOMICS|CAPABILITIES|COARSE_GRAIN_BUFFER|FINE_GRAIN_BUFFER|FINE_GRAIN_SYSTEM)|TYPE(?:_ACCELERATOR|_ALL|_CPU|_CUSTOM|_DEFAULT|_GPU)?|VENDOR(?:_ID)?|VERSION)|DRIVER_VERSION|EVENT_(?:COMMAND_(?:EXECUTION_STATUS|QUEUE|TYPE)|CONTEXT|REFERENCE_COUNT)|EXEC_(?:KERNEL|NATIVE_KERNEL|STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST)|FILTER_(?:LINEAR|NEAREST)|FLOAT|FP_(?:CORRECTLY_ROUNDED_DIVIDE_SQRT|DENORM|FMA|INF_NAN|ROUND_TO_INF|ROUND_TO_NEAREST|ROUND_TO_ZERO|SOFT_FLOAT)|GLOBAL|HALF_FLOAT|IMAGE_(?:ARRAY_SIZE|BUFFER|DEPTH|ELEMENT_SIZE|FORMAT|FORMAT_MISMATCH|FORMAT_NOT_SUPPORTED|HEIGHT|NUM_MIP_LEVELS|NUM_SAMPLES|ROW_PITCH|SLICE_PITCH|WIDTH)|INTENSITY|INVALID_(?:ARG_INDEX|ARG_SIZE|ARG_VALUE|BINARY|BUFFER_SIZE|BUILD_OPTIONS|COMMAND_QUEUE|COMPILER_OPTIONS|CONTEXT|DEVICE|DEVICE_PARTITION_COUNT|DEVICE_QUEUE|DEVICE_TYPE|EVENT|EVENT_WAIT_LIST|GLOBAL_OFFSET|GLOBAL_WORK_SIZE|GL_OBJECT|HOST_PTR|IMAGE_DESCRIPTOR|IMAGE_FORMAT_DESCRIPTOR|IMAGE_SIZE|KERNEL|KERNEL_ARGS|KERNEL_DEFINITION|KERNEL_NAME|LINKER_OPTIONS|MEM_OBJECT|MIP_LEVEL|OPERATION|PIPE_SIZE|PLATFORM|PROGRAM|PROGRAM_EXECUTABLE|PROPERTY|QUEUE_PROPERTIES|SAMPLER|VALUE|WORK_DIMENSION|WORK_GROUP_SIZE|WORK_ITEM_SIZE)|KERNEL_(?:ARG_(?:ACCESS_(?:NONE|QUALIFIER|READ_ONLY|READ_WRITE|WRITE_ONLY)|ADDRESS_(?:CONSTANT|GLOBAL|LOCAL|PRIVATE|QUALIFIER)|INFO_NOT_AVAILABLE|NAME|TYPE_(?:CONST|NAME|NONE|PIPE|QUALIFIER|RESTRICT|VOLATILE))|ATTRIBUTES|COMPILE_NUM_SUB_GROUPS|COMPILE_WORK_GROUP_SIZE|CONTEXT|EXEC_INFO_SVM_FINE_GRAIN_SYSTEM|EXEC_INFO_SVM_PTRS|FUNCTION_NAME|GLOBAL_WORK_SIZE|LOCAL_MEM_SIZE|LOCAL_SIZE_FOR_SUB_GROUP_COUNT|MAX_NUM_SUB_GROUPS|MAX_SUB_GROUP_SIZE_FOR_NDRANGE|NUM_ARGS|PREFERRED_WORK_GROUP_SIZE_MULTIPLE|PRIVATE_MEM_SIZE|PROGRAM|REFERENCE_COUNT|SUB_GROUP_COUNT_FOR_NDRANGE|WORK_GROUP_SIZE)|LINKER_NOT_AVAILABLE|LINK_PROGRAM_FAILURE|LOCAL|LUMINANCE|MAP_(?:FAILURE|READ|WRITE|WRITE_INVALIDATE_REGION)|MEM_(?:ALLOC_HOST_PTR|ASSOCIATED_MEMOBJECT|CONTEXT|COPY_HOST_PTR|COPY_OVERLAP|FLAGS|HOST_NO_ACCESS|HOST_PTR|HOST_READ_ONLY|HOST_WRITE_ONLY|KERNEL_READ_AND_WRITE|MAP_COUNT|OBJECT_(?:ALLOCATION_FAILURE|BUFFER|IMAGE1D|IMAGE1D_ARRAY|IMAGE1D_BUFFER|IMAGE2D|IMAGE2D_ARRAY|IMAGE3D|PIPE)|OFFSET|READ_ONLY|READ_WRITE|REFERENCE_COUNT|SIZE|SVM_ATOMICS|SVM_FINE_GRAIN_BUFFER|TYPE|USES_SVM_POINTER|USE_HOST_PTR|WRITE_ONLY)|MIGRATE_MEM_OBJECT_(?:CONTENT_UNDEFINED|HOST)|MISALIGNED_SUB_BUFFER_OFFSET|NONE|NON_BLOCKING|OUT_OF_(?:HOST_MEMORY|RESOURCES)|PIPE_(?:MAX_PACKETS|PACKET_SIZE)|PLATFORM_(?:EXTENSIONS|HOST_TIMER_RESOLUTION|NAME|PROFILE|VENDOR|VERSION)|PROFILING_(?:COMMAND_(?:COMPLETE|END|QUEUED|START|SUBMIT)|INFO_NOT_AVAILABLE)|PROGRAM_(?:BINARIES|BINARY_SIZES|BINARY_TYPE(?:_COMPILED_OBJECT|_EXECUTABLE|_LIBRARY|_NONE)?|BUILD_(?:GLOBAL_VARIABLE_TOTAL_SIZE|LOG|OPTIONS|STATUS)|CONTEXT|DEVICES|IL|KERNEL_NAMES|NUM_DEVICES|NUM_KERNELS|REFERENCE_COUNT|SOURCE)|QUEUED|QUEUE_(?:CONTEXT|DEVICE|DEVICE_DEFAULT|ON_DEVICE|ON_DEVICE_DEFAULT|OUT_OF_ORDER_EXEC_MODE_ENABLE|PROFILING_ENABLE|PROPERTIES|REFERENCE_COUNT|SIZE)|R|RA|READ_(?:ONLY|WRITE)_CACHE|RG|RGB|RGBA|RGBx|RGx|RUNNING|Rx|SAMPLER_(?:ADDRESSING_MODE|CONTEXT|FILTER_MODE|LOD_MAX|LOD_MIN|MIP_FILTER_MODE|NORMALIZED_COORDS|REFERENCE_COUNT)|(?:UN)?SIGNED_INT(?:8|16|32)|SNORM_INT(?:8|16)|SUBMITTED|SUCCESS|UNORM_INT(?:8|16|24|_101010|_101010_2)|UNORM_SHORT_(?:555|565)|VERSION_(?:1_0|1_1|1_2|2_0|2_1)|sBGRA|sRGB|sRGBA|sRGBx)\b/,
              alias: "constant"
            },
            "function-opencl-host": {
              pattern: /\bcl(?:BuildProgram|CloneKernel|CompileProgram|Create(?:Buffer|CommandQueue(?:WithProperties)?|Context|ContextFromType|Image|Image2D|Image3D|Kernel|KernelsInProgram|Pipe|ProgramWith(?:Binary|BuiltInKernels|IL|Source)|Sampler|SamplerWithProperties|SubBuffer|SubDevices|UserEvent)|Enqueue(?:(?:Barrier|Marker)(?:WithWaitList)?|Copy(?:Buffer(?:Rect|ToImage)?|Image(?:ToBuffer)?)|(?:Fill|Map)(?:Buffer|Image)|MigrateMemObjects|NDRangeKernel|NativeKernel|(?:Read|Write)(?:Buffer(?:Rect)?|Image)|SVM(?:Free|Map|MemFill|Memcpy|MigrateMem|Unmap)|Task|UnmapMemObject|WaitForEvents)|Finish|Flush|Get(?:CommandQueueInfo|ContextInfo|Device(?:AndHostTimer|IDs|Info)|Event(?:Profiling)?Info|ExtensionFunctionAddress(?:ForPlatform)?|HostTimer|ImageInfo|Kernel(?:ArgInfo|Info|SubGroupInfo|WorkGroupInfo)|MemObjectInfo|PipeInfo|Platform(?:IDs|Info)|Program(?:Build)?Info|SamplerInfo|SupportedImageFormats)|LinkProgram|(?:Release|Retain)(?:CommandQueue|Context|Device|Event|Kernel|MemObject|Program|Sampler)|SVM(?:Alloc|Free)|Set(?:CommandQueueProperty|DefaultDeviceCommandQueue|EventCallback|Kernel|Kernel(?:Arg(?:SVMPointer)?|ExecInfo)|MemObjectDestructorCallback|UserEventStatus)|Unload(?:Platform)?Compiler|WaitForEvents)\b/,
              alias: "function"
            }
          };
          Prism2.languages.insertBefore("c", "keyword", attributes2);
          if (Prism2.languages.cpp) {
            attributes2["type-opencl-host-cpp"] = {
              pattern: /\b(?:Buffer|BufferGL|BufferRenderGL|CommandQueue|Context|Device|DeviceCommandQueue|EnqueueArgs|Event|Image|Image1D|Image1DArray|Image1DBuffer|Image2D|Image2DArray|Image2DGL|Image3D|Image3DGL|ImageFormat|ImageGL|Kernel|KernelFunctor|LocalSpaceArg|Memory|NDRange|Pipe|Platform|Program|SVMAllocator|SVMTraitAtomic|SVMTraitCoarse|SVMTraitFine|SVMTraitReadOnly|SVMTraitReadWrite|SVMTraitWriteOnly|Sampler|UserEvent)\b/,
              alias: "keyword"
            };
            Prism2.languages.insertBefore("cpp", "keyword", attributes2);
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/openqasm.js
  var require_openqasm = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/openqasm.js"(exports, module) {
      "use strict";
      module.exports = openqasm;
      openqasm.displayName = "openqasm";
      openqasm.aliases = ["qasm"];
      function openqasm(Prism) {
        Prism.languages.openqasm = {
          comment: /\/\*[\s\S]*?\*\/|\/\/.*/,
          string: {
            pattern: /"[^"\r\n\t]*"|'[^'\r\n\t]*'/,
            greedy: true
          },
          keyword: /\b(?:CX|OPENQASM|U|barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while)\b|#pragma\b/,
          "class-name": /\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\b/,
          function: /\b(?:cos|exp|ln|popcount|rotl|rotr|sin|sqrt|tan)\b(?=\s*\()/,
          constant: /\b(?:euler|pi|tau)\b|π|𝜏|ℇ/,
          number: {
            pattern: /(^|[^.\w$])(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?(?:dt|ns|us|µs|ms|s)?/i,
            lookbehind: true
          },
          operator: /->|>>=?|<<=?|&&|\|\||\+\+|--|[!=<>&|~^+\-*/%]=?|@/,
          punctuation: /[(){}\[\];,:.]/
        };
        Prism.languages.qasm = Prism.languages.openqasm;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/oz.js
  var require_oz = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/oz.js"(exports, module) {
      "use strict";
      module.exports = oz;
      oz.displayName = "oz";
      oz.aliases = [];
      function oz(Prism) {
        Prism.languages.oz = {
          comment: {
            pattern: /\/\*[\s\S]*?\*\/|%.*/,
            greedy: true
          },
          string: {
            pattern: /"(?:[^"\\]|\\[\s\S])*"/,
            greedy: true
          },
          atom: {
            pattern: /'(?:[^'\\]|\\[\s\S])*'/,
            greedy: true,
            alias: "builtin"
          },
          keyword: /\$|\[\]|\b(?:_|at|attr|case|catch|choice|class|cond|declare|define|dis|else(?:case|if)?|end|export|fail|false|feat|finally|from|fun|functor|if|import|in|local|lock|meth|nil|not|of|or|prepare|proc|prop|raise|require|self|skip|then|thread|true|try|unit)\b/,
          function: [
            /\b[a-z][A-Za-z\d]*(?=\()/,
            {
              pattern: /(\{)[A-Z][A-Za-z\d]*\b/,
              lookbehind: true
            }
          ],
          number: /\b(?:0[bx][\da-f]+|\d+(?:\.\d*)?(?:e~?\d+)?)\b|&(?:[^\\]|\\(?:\d{3}|.))/i,
          variable: /`(?:[^`\\]|\\.)+`/,
          "attr-name": /\b\w+(?=[ \t]*:(?![:=]))/,
          operator: /:(?:=|::?)|<[-:=]?|=(?:=|<?:?)|>=?:?|\\=:?|!!?|[|#+\-*\/,~^@]|\b(?:andthen|div|mod|orelse)\b/,
          punctuation: /[\[\](){}.:;?]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/parigp.js
  var require_parigp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/parigp.js"(exports, module) {
      "use strict";
      module.exports = parigp;
      parigp.displayName = "parigp";
      parigp.aliases = [];
      function parigp(Prism) {
        Prism.languages.parigp = {
          comment: /\/\*[\s\S]*?\*\/|\\\\.*/,
          string: {
            pattern: /"(?:[^"\\\r\n]|\\.)*"/,
            greedy: true
          },
          keyword: function() {
            var keywords = [
              "breakpoint",
              "break",
              "dbg_down",
              "dbg_err",
              "dbg_up",
              "dbg_x",
              "forcomposite",
              "fordiv",
              "forell",
              "forpart",
              "forprime",
              "forstep",
              "forsubgroup",
              "forvec",
              "for",
              "iferr",
              "if",
              "local",
              "my",
              "next",
              "return",
              "until",
              "while"
            ];
            keywords = keywords.map(function(keyword) {
              return keyword.split("").join(" *");
            }).join("|");
            return RegExp("\\b(?:" + keywords + ")\\b");
          }(),
          function: /\b\w(?:[\w ]*\w)?(?= *\()/,
          number: {
            pattern: /((?:\. *\. *)?)(?:\b\d(?: *\d)*(?: *(?!\. *\.)\.(?: *\d)*)?|\. *\d(?: *\d)*)(?: *e *(?:[+-] *)?\d(?: *\d)*)?/i,
            lookbehind: true
          },
          operator: /\. *\.|[*\/!](?: *=)?|%(?: *=|(?: *#)?(?: *')*)?|\+(?: *[+=])?|-(?: *[-=>])?|<(?: *>|(?: *<)?(?: *=)?)?|>(?: *>)?(?: *=)?|=(?: *=){0,2}|\\(?: *\/)?(?: *=)?|&(?: *&)?|\| *\||['#~^]/,
          punctuation: /[\[\]{}().,:;|]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/parser.js
  var require_parser2 = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/parser.js"(exports, module) {
      "use strict";
      module.exports = parser;
      parser.displayName = "parser";
      parser.aliases = [];
      function parser(Prism) {
        ;
        (function(Prism2) {
          var parser2 = Prism2.languages.parser = Prism2.languages.extend("markup", {
            keyword: {
              pattern: /(^|[^^])(?:\^(?:case|eval|for|if|switch|throw)\b|@(?:BASE|CLASS|GET(?:_DEFAULT)?|OPTIONS|SET_DEFAULT|USE)\b)/,
              lookbehind: true
            },
            variable: {
              pattern: /(^|[^^])\B\$(?:\w+|(?=[.{]))(?:(?:\.|::?)\w+)*(?:\.|::?)?/,
              lookbehind: true,
              inside: {
                punctuation: /\.|:+/
              }
            },
            function: {
              pattern: /(^|[^^])\B[@^]\w+(?:(?:\.|::?)\w+)*(?:\.|::?)?/,
              lookbehind: true,
              inside: {
                keyword: {
                  pattern: /(^@)(?:GET_|SET_)/,
                  lookbehind: true
                },
                punctuation: /\.|:+/
              }
            },
            escape: {
              pattern: /\^(?:[$^;@()\[\]{}"':]|#[a-f\d]*)/i,
              alias: "builtin"
            },
            punctuation: /[\[\](){};]/
          });
          parser2 = Prism2.languages.insertBefore("parser", "keyword", {
            "parser-comment": {
              pattern: /(\s)#.*/,
              lookbehind: true,
              alias: "comment"
            },
            expression: {
              pattern: /(^|[^^])\((?:[^()]|\((?:[^()]|\((?:[^()])*\))*\))*\)/,
              greedy: true,
              lookbehind: true,
              inside: {
                string: {
                  pattern: /(^|[^^])(["'])(?:(?!\2)[^^]|\^[\s\S])*\2/,
                  lookbehind: true
                },
                keyword: parser2.keyword,
                variable: parser2.variable,
                function: parser2.function,
                boolean: /\b(?:false|true)\b/,
                number: /\b(?:0x[a-f\d]+|\d+(?:\.\d*)?(?:e[+-]?\d+)?)\b/i,
                escape: parser2.escape,
                operator: /[~+*\/\\%]|!(?:\|\|?|=)?|&&?|\|\|?|==|<[<=]?|>[>=]?|-[fd]?|\b(?:def|eq|ge|gt|in|is|le|lt|ne)\b/,
                punctuation: parser2.punctuation
              }
            }
          });
          Prism2.languages.insertBefore(
            "inside",
            "punctuation",
            {
              expression: parser2.expression,
              keyword: parser2.keyword,
              variable: parser2.variable,
              function: parser2.function,
              escape: parser2.escape,
              "parser-punctuation": {
                pattern: parser2.punctuation,
                alias: "punctuation"
              }
            },
            parser2["tag"].inside["attr-value"]
          );
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/pascal.js
  var require_pascal = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/pascal.js"(exports, module) {
      "use strict";
      module.exports = pascal;
      pascal.displayName = "pascal";
      pascal.aliases = ["objectpascal"];
      function pascal(Prism) {
        Prism.languages.pascal = {
          directive: {
            pattern: /\{\$[\s\S]*?\}/,
            greedy: true,
            alias: ["marco", "property"]
          },
          comment: {
            pattern: /\(\*[\s\S]*?\*\)|\{[\s\S]*?\}|\/\/.*/,
            greedy: true
          },
          string: {
            pattern: /(?:'(?:''|[^'\r\n])*'(?!')|#[&$%]?[a-f\d]+)+|\^[a-z]/i,
            greedy: true
          },
          asm: {
            pattern: /(\basm\b)[\s\S]+?(?=\bend\s*[;[])/i,
            lookbehind: true,
            greedy: true,
            inside: null
          },
          keyword: [
            {
              pattern: /(^|[^&])\b(?:absolute|array|asm|begin|case|const|constructor|destructor|do|downto|else|end|file|for|function|goto|if|implementation|inherited|inline|interface|label|nil|object|of|operator|packed|procedure|program|record|reintroduce|repeat|self|set|string|then|to|type|unit|until|uses|var|while|with)\b/i,
              lookbehind: true
            },
            {
              pattern: /(^|[^&])\b(?:dispose|exit|false|new|true)\b/i,
              lookbehind: true
            },
            {
              pattern: /(^|[^&])\b(?:class|dispinterface|except|exports|finalization|finally|initialization|inline|library|on|out|packed|property|raise|resourcestring|threadvar|try)\b/i,
              lookbehind: true
            },
            {
              pattern: /(^|[^&])\b(?:absolute|abstract|alias|assembler|bitpacked|break|cdecl|continue|cppdecl|cvar|default|deprecated|dynamic|enumerator|experimental|export|external|far|far16|forward|generic|helper|implements|index|interrupt|iochecks|local|message|name|near|nodefault|noreturn|nostackframe|oldfpccall|otherwise|overload|override|pascal|platform|private|protected|public|published|read|register|reintroduce|result|safecall|saveregisters|softfloat|specialize|static|stdcall|stored|strict|unaligned|unimplemented|varargs|virtual|write)\b/i,
              lookbehind: true
            }
          ],
          number: [
            /(?:[&%]\d+|\$[a-f\d]+)/i,
            /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?/i
          ],
          operator: [
            /\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=]/,
            {
              pattern: /(^|[^&])\b(?:and|as|div|exclude|in|include|is|mod|not|or|shl|shr|xor)\b/,
              lookbehind: true
            }
          ],
          punctuation: /\(\.|\.\)|[()\[\]:;,.]/
        };
        Prism.languages.pascal.asm.inside = Prism.languages.extend("pascal", {
          asm: void 0,
          keyword: void 0,
          operator: void 0
        });
        Prism.languages.objectpascal = Prism.languages.pascal;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/pascaligo.js
  var require_pascaligo = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/pascaligo.js"(exports, module) {
      "use strict";
      module.exports = pascaligo;
      pascaligo.displayName = "pascaligo";
      pascaligo.aliases = [];
      function pascaligo(Prism) {
        ;
        (function(Prism2) {
          var braces = /\((?:[^()]|\((?:[^()]|\([^()]*\))*\))*\)/.source;
          var type = /(?:\b\w+(?:<braces>)?|<braces>)/.source.replace(
            /<braces>/g,
            function() {
              return braces;
            }
          );
          var pascaligo2 = Prism2.languages.pascaligo = {
            comment: /\(\*[\s\S]+?\*\)|\/\/.*/,
            string: {
              pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1|\^[a-z]/i,
              greedy: true
            },
            "class-name": [
              {
                pattern: RegExp(
                  /(\btype\s+\w+\s+is\s+)<type>/.source.replace(
                    /<type>/g,
                    function() {
                      return type;
                    }
                  ),
                  "i"
                ),
                lookbehind: true,
                inside: null
              },
              {
                pattern: RegExp(
                  /<type>(?=\s+is\b)/.source.replace(/<type>/g, function() {
                    return type;
                  }),
                  "i"
                ),
                inside: null
              },
              {
                pattern: RegExp(
                  /(:\s*)<type>/.source.replace(/<type>/g, function() {
                    return type;
                  })
                ),
                lookbehind: true,
                inside: null
              }
            ],
            keyword: {
              pattern: /(^|[^&])\b(?:begin|block|case|const|else|end|fail|for|from|function|if|is|nil|of|remove|return|skip|then|type|var|while|with)\b/i,
              lookbehind: true
            },
            boolean: {
              pattern: /(^|[^&])\b(?:False|True)\b/i,
              lookbehind: true
            },
            builtin: {
              pattern: /(^|[^&])\b(?:bool|int|list|map|nat|record|string|unit)\b/i,
              lookbehind: true
            },
            function: /\b\w+(?=\s*\()/,
            number: [
              /%[01]+|&[0-7]+|\$[a-f\d]+/i,
              /\b\d+(?:\.\d+)?(?:e[+-]?\d+)?(?:mtz|n)?/i
            ],
            operator: /->|=\/=|\.\.|\*\*|:=|<[<=>]?|>[>=]?|[+\-*\/]=?|[@^=|]|\b(?:and|mod|or)\b/,
            punctuation: /\(\.|\.\)|[()\[\]:;,.{}]/
          };
          var classNameInside = [
            "comment",
            "keyword",
            "builtin",
            "operator",
            "punctuation"
          ].reduce(function(accum, key) {
            accum[key] = pascaligo2[key];
            return accum;
          }, {});
          pascaligo2["class-name"].forEach(function(p) {
            p.inside = classNameInside;
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/pcaxis.js
  var require_pcaxis = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/pcaxis.js"(exports, module) {
      "use strict";
      module.exports = pcaxis;
      pcaxis.displayName = "pcaxis";
      pcaxis.aliases = ["px"];
      function pcaxis(Prism) {
        Prism.languages.pcaxis = {
          string: /"[^"]*"/,
          keyword: {
            pattern: /((?:^|;)\s*)[-A-Z\d]+(?:\s*\[[-\w]+\])?(?:\s*\("[^"]*"(?:,\s*"[^"]*")*\))?(?=\s*=)/,
            lookbehind: true,
            greedy: true,
            inside: {
              keyword: /^[-A-Z\d]+/,
              language: {
                pattern: /^(\s*)\[[-\w]+\]/,
                lookbehind: true,
                inside: {
                  punctuation: /^\[|\]$/,
                  property: /[-\w]+/
                }
              },
              "sub-key": {
                pattern: /^(\s*)\S[\s\S]*/,
                lookbehind: true,
                inside: {
                  parameter: {
                    pattern: /"[^"]*"/,
                    alias: "property"
                  },
                  punctuation: /^\(|\)$|,/
                }
              }
            }
          },
          operator: /=/,
          tlist: {
            pattern: /TLIST\s*\(\s*\w+(?:(?:\s*,\s*"[^"]*")+|\s*,\s*"[^"]*"-"[^"]*")?\s*\)/,
            greedy: true,
            inside: {
              function: /^TLIST/,
              property: {
                pattern: /^(\s*\(\s*)\w+/,
                lookbehind: true
              },
              string: /"[^"]*"/,
              punctuation: /[(),]/,
              operator: /-/
            }
          },
          punctuation: /[;,]/,
          number: {
            pattern: /(^|\s)\d+(?:\.\d+)?(?!\S)/,
            lookbehind: true
          },
          boolean: /NO|YES/
        };
        Prism.languages.px = Prism.languages.pcaxis;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/peoplecode.js
  var require_peoplecode = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/peoplecode.js"(exports, module) {
      "use strict";
      module.exports = peoplecode;
      peoplecode.displayName = "peoplecode";
      peoplecode.aliases = ["pcode"];
      function peoplecode(Prism) {
        Prism.languages.peoplecode = {
          comment: RegExp(
            [
              /\/\*[\s\S]*?\*\//.source,
              /\bREM[^;]*;/.source,
              /<\*(?:[^<*]|\*(?!>)|<(?!\*)|<\*(?:(?!\*>)[\s\S])*\*>)*\*>/.source,
              /\/\+[\s\S]*?\+\//.source
            ].join("|")
          ),
          string: {
            pattern: /'(?:''|[^'\r\n])*'(?!')|"(?:""|[^"\r\n])*"(?!")/,
            greedy: true
          },
          variable: /%\w+/,
          "function-definition": {
            pattern: /((?:^|[^\w-])(?:function|method)\s+)\w+/i,
            lookbehind: true,
            alias: "function"
          },
          "class-name": {
            pattern: /((?:^|[^-\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\s+)\w+(?::\w+)*/i,
            lookbehind: true,
            inside: {
              punctuation: /:/
            }
          },
          keyword: /\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\b/i,
          "operator-keyword": {
            pattern: /\b(?:and|not|or)\b/i,
            alias: "operator"
          },
          function: /[_a-z]\w*(?=\s*\()/i,
          boolean: /\b(?:false|true)\b/i,
          number: /\b\d+(?:\.\d+)?\b/,
          operator: /<>|[<>]=?|!=|\*\*|[-+*/|=@]/,
          punctuation: /[:.;,()[\]]/
        };
        Prism.languages.pcode = Prism.languages.peoplecode;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/perl.js
  var require_perl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/perl.js"(exports, module) {
      "use strict";
      module.exports = perl;
      perl.displayName = "perl";
      perl.aliases = [];
      function perl(Prism) {
        ;
        (function(Prism2) {
          var brackets = /(?:\((?:[^()\\]|\\[\s\S])*\)|\{(?:[^{}\\]|\\[\s\S])*\}|\[(?:[^[\]\\]|\\[\s\S])*\]|<(?:[^<>\\]|\\[\s\S])*>)/.source;
          Prism2.languages.perl = {
            comment: [
              {
                pattern: /(^\s*)=\w[\s\S]*?=cut.*/m,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /(^|[^\\$])#.*/,
                lookbehind: true,
                greedy: true
              }
            ],
            string: [
              {
                pattern: RegExp(
                  /\b(?:q|qq|qw|qx)(?![a-zA-Z0-9])\s*/.source + "(?:" + [
                    /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
                    /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
                    brackets
                  ].join("|") + ")"
                ),
                greedy: true
              },
              {
                pattern: /("|`)(?:(?!\1)[^\\]|\\[\s\S])*\1/,
                greedy: true
              },
              {
                pattern: /'(?:[^'\\\r\n]|\\.)*'/,
                greedy: true
              }
            ],
            regex: [
              {
                pattern: RegExp(
                  /\b(?:m|qr)(?![a-zA-Z0-9])\s*/.source + "(?:" + [
                    /([^a-zA-Z0-9\s{(\[<])(?:(?!\1)[^\\]|\\[\s\S])*\1/.source,
                    /([a-zA-Z0-9])(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
                    brackets
                  ].join("|") + ")" + /[msixpodualngc]*/.source
                ),
                greedy: true
              },
              {
                pattern: RegExp(
                  /(^|[^-])\b(?:s|tr|y)(?![a-zA-Z0-9])\s*/.source + "(?:" + [
                    /([^a-zA-Z0-9\s{(\[<])(?:(?!\2)[^\\]|\\[\s\S])*\2(?:(?!\2)[^\\]|\\[\s\S])*\2/.source,
                    /([a-zA-Z0-9])(?:(?!\3)[^\\]|\\[\s\S])*\3(?:(?!\3)[^\\]|\\[\s\S])*\3/.source,
                    brackets + /\s*/.source + brackets
                  ].join("|") + ")" + /[msixpodualngcer]*/.source
                ),
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /\/(?:[^\/\\\r\n]|\\.)*\/[msixpodualngc]*(?=\s*(?:$|[\r\n,.;})&|\-+*~<>!?^]|(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|x|xor)\b))/,
                greedy: true
              }
            ],
            variable: [
              /[&*$@%]\{\^[A-Z]+\}/,
              /[&*$@%]\^[A-Z_]/,
              /[&*$@%]#?(?=\{)/,
              /[&*$@%]#?(?:(?:::)*'?(?!\d)[\w$]+(?![\w$]))+(?:::)*/,
              /[&*$@%]\d+/,
              /(?!%=)[$@%][!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~]/
            ],
            filehandle: {
              pattern: /<(?![<=])\S*?>|\b_\b/,
              alias: "symbol"
            },
            "v-string": {
              pattern: /v\d+(?:\.\d+)*|\d+(?:\.\d+){2,}/,
              alias: "string"
            },
            function: {
              pattern: /(\bsub[ \t]+)\w+/,
              lookbehind: true
            },
            keyword: /\b(?:any|break|continue|default|delete|die|do|else|elsif|eval|for|foreach|given|goto|if|last|local|my|next|our|package|print|redo|require|return|say|state|sub|switch|undef|unless|until|use|when|while)\b/,
            number: /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)\b/,
            operator: /-[rwxoRWXOezsfdlpSbctugkTBMAC]\b|\+[+=]?|-[-=>]?|\*\*?=?|\/\/?=?|=[=~>]?|~[~=]?|\|\|?=?|&&?=?|<(?:=>?|<=?)?|>>?=?|![~=]?|[%^]=?|\.(?:=|\.\.?)?|[\\?]|\bx(?:=|\b)|\b(?:and|cmp|eq|ge|gt|le|lt|ne|not|or|xor)\b/,
            punctuation: /[{}[\];(),:]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/php-extras.js
  var require_php_extras = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/php-extras.js"(exports, module) {
      "use strict";
      var refractorPhp = require_php();
      module.exports = phpExtras;
      phpExtras.displayName = "phpExtras";
      phpExtras.aliases = [];
      function phpExtras(Prism) {
        Prism.register(refractorPhp);
        Prism.languages.insertBefore("php", "variable", {
          this: {
            pattern: /\$this\b/,
            alias: "keyword"
          },
          global: /\$(?:GLOBALS|HTTP_RAW_POST_DATA|_(?:COOKIE|ENV|FILES|GET|POST|REQUEST|SERVER|SESSION)|argc|argv|http_response_header|php_errormsg)\b/,
          scope: {
            pattern: /\b[\w\\]+::/,
            inside: {
              keyword: /\b(?:parent|self|static)\b/,
              punctuation: /::|\\/
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/phpdoc.js
  var require_phpdoc = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/phpdoc.js"(exports, module) {
      "use strict";
      var refractorPhp = require_php();
      var refractorJavadoclike = require_javadoclike();
      module.exports = phpdoc;
      phpdoc.displayName = "phpdoc";
      phpdoc.aliases = [];
      function phpdoc(Prism) {
        Prism.register(refractorPhp);
        Prism.register(refractorJavadoclike);
        (function(Prism2) {
          var typeExpression = /(?:\b[a-zA-Z]\w*|[|\\[\]])+/.source;
          Prism2.languages.phpdoc = Prism2.languages.extend("javadoclike", {
            parameter: {
              pattern: RegExp(
                "(@(?:global|param|property(?:-read|-write)?|var)\\s+(?:" + typeExpression + "\\s+)?)\\$\\w+"
              ),
              lookbehind: true
            }
          });
          Prism2.languages.insertBefore("phpdoc", "keyword", {
            "class-name": [
              {
                pattern: RegExp(
                  "(@(?:global|package|param|property(?:-read|-write)?|return|subpackage|throws|var)\\s+)" + typeExpression
                ),
                lookbehind: true,
                inside: {
                  keyword: /\b(?:array|bool|boolean|callback|double|false|float|int|integer|mixed|null|object|resource|self|string|true|void)\b/,
                  punctuation: /[|\\[\]()]/
                }
              }
            ]
          });
          Prism2.languages.javadoclike.addSupport("php", Prism2.languages.phpdoc);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/plsql.js
  var require_plsql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/plsql.js"(exports, module) {
      "use strict";
      var refractorSql = require_sql();
      module.exports = plsql;
      plsql.displayName = "plsql";
      plsql.aliases = [];
      function plsql(Prism) {
        Prism.register(refractorSql);
        Prism.languages.plsql = Prism.languages.extend("sql", {
          comment: {
            pattern: /\/\*[\s\S]*?\*\/|--.*/,
            greedy: true
          },
          keyword: /\b(?:A|ACCESSIBLE|ADD|AGENT|AGGREGATE|ALL|ALTER|AND|ANY|ARRAY|AS|ASC|AT|ATTRIBUTE|AUTHID|AVG|BEGIN|BETWEEN|BFILE_BASE|BINARY|BLOB_BASE|BLOCK|BODY|BOTH|BOUND|BULK|BY|BYTE|C|CALL|CALLING|CASCADE|CASE|CHAR|CHARACTER|CHARSET|CHARSETFORM|CHARSETID|CHAR_BASE|CHECK|CLOB_BASE|CLONE|CLOSE|CLUSTER|CLUSTERS|COLAUTH|COLLECT|COLUMNS|COMMENT|COMMIT|COMMITTED|COMPILED|COMPRESS|CONNECT|CONSTANT|CONSTRUCTOR|CONTEXT|CONTINUE|CONVERT|COUNT|CRASH|CREATE|CREDENTIAL|CURRENT|CURSOR|CUSTOMDATUM|DANGLING|DATA|DATE|DATE_BASE|DAY|DECLARE|DEFAULT|DEFINE|DELETE|DESC|DETERMINISTIC|DIRECTORY|DISTINCT|DOUBLE|DROP|DURATION|ELEMENT|ELSE|ELSIF|EMPTY|END|ESCAPE|EXCEPT|EXCEPTION|EXCEPTIONS|EXCLUSIVE|EXECUTE|EXISTS|EXIT|EXTERNAL|FETCH|FINAL|FIRST|FIXED|FLOAT|FOR|FORALL|FORCE|FROM|FUNCTION|GENERAL|GOTO|GRANT|GROUP|HASH|HAVING|HEAP|HIDDEN|HOUR|IDENTIFIED|IF|IMMEDIATE|IMMUTABLE|IN|INCLUDING|INDEX|INDEXES|INDICATOR|INDICES|INFINITE|INSERT|INSTANTIABLE|INT|INTERFACE|INTERSECT|INTERVAL|INTO|INVALIDATE|IS|ISOLATION|JAVA|LANGUAGE|LARGE|LEADING|LENGTH|LEVEL|LIBRARY|LIKE|LIKE2|LIKE4|LIKEC|LIMIT|LIMITED|LOCAL|LOCK|LONG|LOOP|MAP|MAX|MAXLEN|MEMBER|MERGE|MIN|MINUS|MINUTE|MOD|MODE|MODIFY|MONTH|MULTISET|MUTABLE|NAME|NAN|NATIONAL|NATIVE|NCHAR|NEW|NOCOMPRESS|NOCOPY|NOT|NOWAIT|NULL|NUMBER_BASE|OBJECT|OCICOLL|OCIDATE|OCIDATETIME|OCIDURATION|OCIINTERVAL|OCILOBLOCATOR|OCINUMBER|OCIRAW|OCIREF|OCIREFCURSOR|OCIROWID|OCISTRING|OCITYPE|OF|OLD|ON|ONLY|OPAQUE|OPEN|OPERATOR|OPTION|OR|ORACLE|ORADATA|ORDER|ORGANIZATION|ORLANY|ORLVARY|OTHERS|OUT|OVERLAPS|OVERRIDING|PACKAGE|PARALLEL_ENABLE|PARAMETER|PARAMETERS|PARENT|PARTITION|PASCAL|PERSISTABLE|PIPE|PIPELINED|PLUGGABLE|POLYMORPHIC|PRAGMA|PRECISION|PRIOR|PRIVATE|PROCEDURE|PUBLIC|RAISE|RANGE|RAW|READ|RECORD|REF|REFERENCE|RELIES_ON|REM|REMAINDER|RENAME|RESOURCE|RESULT|RESULT_CACHE|RETURN|RETURNING|REVERSE|REVOKE|ROLLBACK|ROW|SAMPLE|SAVE|SAVEPOINT|SB1|SB2|SB4|SECOND|SEGMENT|SELECT|SELF|SEPARATE|SEQUENCE|SERIALIZABLE|SET|SHARE|SHORT|SIZE|SIZE_T|SOME|SPARSE|SQL|SQLCODE|SQLDATA|SQLNAME|SQLSTATE|STANDARD|START|STATIC|STDDEV|STORED|STRING|STRUCT|STYLE|SUBMULTISET|SUBPARTITION|SUBSTITUTABLE|SUBTYPE|SUM|SYNONYM|TABAUTH|TABLE|TDO|THE|THEN|TIME|TIMESTAMP|TIMEZONE_ABBR|TIMEZONE_HOUR|TIMEZONE_MINUTE|TIMEZONE_REGION|TO|TRAILING|TRANSACTION|TRANSACTIONAL|TRUSTED|TYPE|UB1|UB2|UB4|UNDER|UNION|UNIQUE|UNPLUG|UNSIGNED|UNTRUSTED|UPDATE|USE|USING|VALIST|VALUE|VALUES|VARIABLE|VARIANCE|VARRAY|VARYING|VIEW|VIEWS|VOID|WHEN|WHERE|WHILE|WITH|WORK|WRAPPED|WRITE|YEAR|ZONE)\b/i,
          operator: /:=?|=>|[<>^~!]=|\.\.|\|\||\*\*|[-+*/%<>=@]/
        });
        Prism.languages.insertBefore("plsql", "operator", {
          label: {
            pattern: /<<\s*\w+\s*>>/,
            alias: "symbol"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/powerquery.js
  var require_powerquery = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/powerquery.js"(exports, module) {
      "use strict";
      module.exports = powerquery;
      powerquery.displayName = "powerquery";
      powerquery.aliases = [];
      function powerquery(Prism) {
        Prism.languages.powerquery = {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
            lookbehind: true,
            greedy: true
          },
          "quoted-identifier": {
            pattern: /#"(?:[^"\r\n]|"")*"(?!")/,
            greedy: true
          },
          string: {
            pattern: /(?:#!)?"(?:[^"\r\n]|"")*"(?!")/,
            greedy: true
          },
          constant: [
            /\bDay\.(?:Friday|Monday|Saturday|Sunday|Thursday|Tuesday|Wednesday)\b/,
            /\bTraceLevel\.(?:Critical|Error|Information|Verbose|Warning)\b/,
            /\bOccurrence\.(?:All|First|Last)\b/,
            /\bOrder\.(?:Ascending|Descending)\b/,
            /\bRoundingMode\.(?:AwayFromZero|Down|ToEven|TowardZero|Up)\b/,
            /\bMissingField\.(?:Error|Ignore|UseNull)\b/,
            /\bQuoteStyle\.(?:Csv|None)\b/,
            /\bJoinKind\.(?:FullOuter|Inner|LeftAnti|LeftOuter|RightAnti|RightOuter)\b/,
            /\bGroupKind\.(?:Global|Local)\b/,
            /\bExtraValues\.(?:Error|Ignore|List)\b/,
            /\bJoinAlgorithm\.(?:Dynamic|LeftHash|LeftIndex|PairwiseHash|RightHash|RightIndex|SortMerge)\b/,
            /\bJoinSide\.(?:Left|Right)\b/,
            /\bPrecision\.(?:Decimal|Double)\b/,
            /\bRelativePosition\.From(?:End|Start)\b/,
            /\bTextEncoding\.(?:Ascii|BigEndianUnicode|Unicode|Utf16|Utf8|Windows)\b/,
            /\b(?:Any|Binary|Date|DateTime|DateTimeZone|Duration|Function|Int16|Int32|Int64|Int8|List|Logical|None|Number|Record|Table|Text|Time)\.Type\b/,
            /\bnull\b/
          ],
          boolean: /\b(?:false|true)\b/,
          keyword: /\b(?:and|as|each|else|error|if|in|is|let|meta|not|nullable|optional|or|otherwise|section|shared|then|try|type)\b|#(?:binary|date|datetime|datetimezone|duration|infinity|nan|sections|shared|table|time)\b/,
          function: {
            pattern: /(^|[^#\w.])[a-z_][\w.]*(?=\s*\()/i,
            lookbehind: true
          },
          "data-type": {
            pattern: /\b(?:any|anynonnull|binary|date|datetime|datetimezone|duration|function|list|logical|none|number|record|table|text|time)\b/,
            alias: "class-name"
          },
          number: {
            pattern: /\b0x[\da-f]+\b|(?:[+-]?(?:\b\d+\.)?\b\d+|[+-]\.\d+|(^|[^.])\B\.\d+)(?:e[+-]?\d+)?\b/i,
            lookbehind: true
          },
          operator: /[-+*\/&?@^]|<(?:=>?|>)?|>=?|=>?|\.\.\.?/,
          punctuation: /[,;\[\](){}]/
        };
        Prism.languages.pq = Prism.languages["powerquery"];
        Prism.languages.mscript = Prism.languages["powerquery"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/powershell.js
  var require_powershell = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/powershell.js"(exports, module) {
      "use strict";
      module.exports = powershell;
      powershell.displayName = "powershell";
      powershell.aliases = [];
      function powershell(Prism) {
        ;
        (function(Prism2) {
          var powershell2 = Prism2.languages.powershell = {
            comment: [
              {
                pattern: /(^|[^`])<#[\s\S]*?#>/,
                lookbehind: true
              },
              {
                pattern: /(^|[^`])#.*/,
                lookbehind: true
              }
            ],
            string: [
              {
                pattern: /"(?:`[\s\S]|[^`"])*"/,
                greedy: true,
                inside: null
              },
              {
                pattern: /'(?:[^']|'')*'/,
                greedy: true
              }
            ],
            namespace: /\[[a-z](?:\[(?:\[[^\]]*\]|[^\[\]])*\]|[^\[\]])*\]/i,
            boolean: /\$(?:false|true)\b/i,
            variable: /\$\w+\b/,
            function: [
              /\b(?:Add|Approve|Assert|Backup|Block|Checkpoint|Clear|Close|Compare|Complete|Compress|Confirm|Connect|Convert|ConvertFrom|ConvertTo|Copy|Debug|Deny|Disable|Disconnect|Dismount|Edit|Enable|Enter|Exit|Expand|Export|Find|ForEach|Format|Get|Grant|Group|Hide|Import|Initialize|Install|Invoke|Join|Limit|Lock|Measure|Merge|Move|New|Open|Optimize|Out|Ping|Pop|Protect|Publish|Push|Read|Receive|Redo|Register|Remove|Rename|Repair|Request|Reset|Resize|Resolve|Restart|Restore|Resume|Revoke|Save|Search|Select|Send|Set|Show|Skip|Sort|Split|Start|Step|Stop|Submit|Suspend|Switch|Sync|Tee|Test|Trace|Unblock|Undo|Uninstall|Unlock|Unprotect|Unpublish|Unregister|Update|Use|Wait|Watch|Where|Write)-[a-z]+\b/i,
              /\b(?:ac|cat|chdir|clc|cli|clp|clv|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|ebp|echo|epal|epcsv|epsn|erase|fc|fl|ft|fw|gal|gbp|gc|gci|gcs|gdr|gi|gl|gm|gp|gps|group|gsv|gu|gv|gwmi|iex|ii|ipal|ipcsv|ipsn|irm|iwmi|iwr|kill|lp|ls|measure|mi|mount|move|mp|mv|nal|ndr|ni|nv|ogv|popd|ps|pushd|pwd|rbp|rd|rdr|ren|ri|rm|rmdir|rni|rnp|rp|rv|rvpa|rwmi|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls|sort|sp|spps|spsv|start|sv|swmi|tee|trcm|type|write)\b/i
            ],
            keyword: /\b(?:Begin|Break|Catch|Class|Continue|Data|Define|Do|DynamicParam|Else|ElseIf|End|Exit|Filter|Finally|For|ForEach|From|Function|If|InlineScript|Parallel|Param|Process|Return|Sequence|Switch|Throw|Trap|Try|Until|Using|Var|While|Workflow)\b/i,
            operator: {
              pattern: /(^|\W)(?:!|-(?:b?(?:and|x?or)|as|(?:Not)?(?:Contains|In|Like|Match)|eq|ge|gt|is(?:Not)?|Join|le|lt|ne|not|Replace|sh[lr])\b|-[-=]?|\+[+=]?|[*\/%]=?)/i,
              lookbehind: true
            },
            punctuation: /[|{}[\];(),.]/
          };
          powershell2.string[0].inside = {
            function: {
              pattern: /(^|[^`])\$\((?:\$\([^\r\n()]*\)|(?!\$\()[^\r\n)])*\)/,
              lookbehind: true,
              inside: powershell2
            },
            boolean: powershell2.boolean,
            variable: powershell2.variable
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/processing.js
  var require_processing = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/processing.js"(exports, module) {
      "use strict";
      module.exports = processing;
      processing.displayName = "processing";
      processing.aliases = [];
      function processing(Prism) {
        Prism.languages.processing = Prism.languages.extend("clike", {
          keyword: /\b(?:break|case|catch|class|continue|default|else|extends|final|for|if|implements|import|new|null|private|public|return|static|super|switch|this|try|void|while)\b/,
          function: /\b\w+(?=\s*\()/,
          operator: /<[<=]?|>[>=]?|&&?|\|\|?|[%?]|[!=+\-*\/]=?/
        });
        Prism.languages.insertBefore("processing", "number", {
          constant: /\b(?!XML\b)[A-Z][A-Z\d_]+\b/,
          type: {
            pattern: /\b(?:boolean|byte|char|color|double|float|int|[A-Z]\w*)\b/,
            alias: "class-name"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/prolog.js
  var require_prolog = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/prolog.js"(exports, module) {
      "use strict";
      module.exports = prolog;
      prolog.displayName = "prolog";
      prolog.aliases = [];
      function prolog(Prism) {
        Prism.languages.prolog = {
          comment: {
            pattern: /\/\*[\s\S]*?\*\/|%.*/,
            greedy: true
          },
          string: {
            pattern: /(["'])(?:\1\1|\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1(?!\1)/,
            greedy: true
          },
          builtin: /\b(?:fx|fy|xf[xy]?|yfx?)\b/,
          function: /\b[a-z]\w*(?:(?=\()|\/\d+)/,
          number: /\b\d+(?:\.\d*)?/,
          operator: /[:\\=><\-?*@\/;+^|!$.]+|\b(?:is|mod|not|xor)\b/,
          punctuation: /[(){}\[\],]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/promql.js
  var require_promql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/promql.js"(exports, module) {
      "use strict";
      module.exports = promql;
      promql.displayName = "promql";
      promql.aliases = [];
      function promql(Prism) {
        ;
        (function(Prism2) {
          var aggregations = [
            "sum",
            "min",
            "max",
            "avg",
            "group",
            "stddev",
            "stdvar",
            "count",
            "count_values",
            "bottomk",
            "topk",
            "quantile"
          ];
          var vectorMatching = [
            "on",
            "ignoring",
            "group_right",
            "group_left",
            "by",
            "without"
          ];
          var offsetModifier = ["offset"];
          var keywords = aggregations.concat(vectorMatching, offsetModifier);
          Prism2.languages.promql = {
            comment: {
              pattern: /(^[ \t]*)#.*/m,
              lookbehind: true
            },
            "vector-match": {
              pattern: new RegExp(
                "((?:" + vectorMatching.join("|") + ")\\s*)\\([^)]*\\)"
              ),
              lookbehind: true,
              inside: {
                "label-key": {
                  pattern: /\b[^,]+\b/,
                  alias: "attr-name"
                },
                punctuation: /[(),]/
              }
            },
            "context-labels": {
              pattern: /\{[^{}]*\}/,
              inside: {
                "label-key": {
                  pattern: /\b[a-z_]\w*(?=\s*(?:=|![=~]))/,
                  alias: "attr-name"
                },
                "label-value": {
                  pattern: /(["'`])(?:\\[\s\S]|(?!\1)[^\\])*\1/,
                  greedy: true,
                  alias: "attr-value"
                },
                punctuation: /\{|\}|=~?|![=~]|,/
              }
            },
            "context-range": [
              {
                pattern: /\[[\w\s:]+\]/,
                inside: {
                  punctuation: /\[|\]|:/,
                  "range-duration": {
                    pattern: /\b(?:\d+(?:[smhdwy]|ms))+\b/i,
                    alias: "number"
                  }
                }
              },
              {
                pattern: /(\boffset\s+)\w+/,
                lookbehind: true,
                inside: {
                  "range-duration": {
                    pattern: /\b(?:\d+(?:[smhdwy]|ms))+\b/i,
                    alias: "number"
                  }
                }
              }
            ],
            keyword: new RegExp("\\b(?:" + keywords.join("|") + ")\\b", "i"),
            function: /\b[a-z_]\w*(?=\s*\()/i,
            number: /[-+]?(?:(?:\b\d+(?:\.\d+)?|\B\.\d+)(?:e[-+]?\d+)?\b|\b(?:0x[0-9a-f]+|nan|inf)\b)/i,
            operator: /[\^*/%+-]|==|!=|<=|<|>=|>|\b(?:and|or|unless)\b/i,
            punctuation: /[{};()`,.[\]]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/properties.js
  var require_properties = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/properties.js"(exports, module) {
      "use strict";
      module.exports = properties;
      properties.displayName = "properties";
      properties.aliases = [];
      function properties(Prism) {
        Prism.languages.properties = {
          comment: /^[ \t]*[#!].*$/m,
          "attr-value": {
            pattern: /(^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?: *[=:] *(?! )| ))(?:\\(?:\r\n|[\s\S])|[^\\\r\n])+/m,
            lookbehind: true
          },
          "attr-name": /^[ \t]*(?:\\(?:\r\n|[\s\S])|[^\\\s:=])+(?= *[=:]| )/m,
          punctuation: /[=:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/protobuf.js
  var require_protobuf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/protobuf.js"(exports, module) {
      "use strict";
      module.exports = protobuf;
      protobuf.displayName = "protobuf";
      protobuf.aliases = [];
      function protobuf(Prism) {
        ;
        (function(Prism2) {
          var builtinTypes = /\b(?:bool|bytes|double|s?fixed(?:32|64)|float|[su]?int(?:32|64)|string)\b/;
          Prism2.languages.protobuf = Prism2.languages.extend("clike", {
            "class-name": [
              {
                pattern: /(\b(?:enum|extend|message|service)\s+)[A-Za-z_]\w*(?=\s*\{)/,
                lookbehind: true
              },
              {
                pattern: /(\b(?:rpc\s+\w+|returns)\s*\(\s*(?:stream\s+)?)\.?[A-Za-z_]\w*(?:\.[A-Za-z_]\w*)*(?=\s*\))/,
                lookbehind: true
              }
            ],
            keyword: /\b(?:enum|extend|extensions|import|message|oneof|option|optional|package|public|repeated|required|reserved|returns|rpc(?=\s+\w)|service|stream|syntax|to)\b(?!\s*=\s*\d)/,
            function: /\b[a-z_]\w*(?=\s*\()/i
          });
          Prism2.languages.insertBefore("protobuf", "operator", {
            map: {
              pattern: /\bmap<\s*[\w.]+\s*,\s*[\w.]+\s*>(?=\s+[a-z_]\w*\s*[=;])/i,
              alias: "class-name",
              inside: {
                punctuation: /[<>.,]/,
                builtin: builtinTypes
              }
            },
            builtin: builtinTypes,
            "positional-class-name": {
              pattern: /(?:\b|\B\.)[a-z_]\w*(?:\.[a-z_]\w*)*(?=\s+[a-z_]\w*\s*[=;])/i,
              alias: "class-name",
              inside: {
                punctuation: /\./
              }
            },
            annotation: {
              pattern: /(\[\s*)[a-z_]\w*(?=\s*=)/i,
              lookbehind: true
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/psl.js
  var require_psl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/psl.js"(exports, module) {
      "use strict";
      module.exports = psl;
      psl.displayName = "psl";
      psl.aliases = [];
      function psl(Prism) {
        Prism.languages.psl = {
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          string: {
            pattern: /"(?:\\.|[^\\"])*"/,
            greedy: true,
            inside: {
              symbol: /\\[ntrbA-Z"\\]/
            }
          },
          "heredoc-string": {
            pattern: /<<<([a-zA-Z_]\w*)[\r\n](?:.*[\r\n])*?\1\b/,
            alias: "string",
            greedy: true
          },
          keyword: /\b(?:__multi|__single|case|default|do|else|elsif|exit|export|for|foreach|function|if|last|line|local|next|requires|return|switch|until|while|word)\b/,
          constant: /\b(?:ALARM|CHART_ADD_GRAPH|CHART_DELETE_GRAPH|CHART_DESTROY|CHART_LOAD|CHART_PRINT|EOF|OFFLINE|OK|PSL_PROF_LOG|R_CHECK_HORIZ|R_CHECK_VERT|R_CLICKER|R_COLUMN|R_FRAME|R_ICON|R_LABEL|R_LABEL_CENTER|R_LIST_MULTIPLE|R_LIST_MULTIPLE_ND|R_LIST_SINGLE|R_LIST_SINGLE_ND|R_MENU|R_POPUP|R_POPUP_SCROLLED|R_RADIO_HORIZ|R_RADIO_VERT|R_ROW|R_SCALE_HORIZ|R_SCALE_VERT|R_SEP_HORIZ|R_SEP_VERT|R_SPINNER|R_TEXT_FIELD|R_TEXT_FIELD_LABEL|R_TOGGLE|TRIM_LEADING|TRIM_LEADING_AND_TRAILING|TRIM_REDUNDANT|TRIM_TRAILING|VOID|WARN)\b/,
          boolean: /\b(?:FALSE|False|NO|No|TRUE|True|YES|Yes|false|no|true|yes)\b/,
          variable: /\b(?:PslDebug|errno|exit_status)\b/,
          builtin: {
            pattern: /\b(?:PslExecute|PslFunctionCall|PslFunctionExists|PslSetOptions|_snmp_debug|acos|add_diary|annotate|annotate_get|ascii_to_ebcdic|asctime|asin|atan|atexit|batch_set|blackout|cat|ceil|chan_exists|change_state|close|code_cvt|cond_signal|cond_wait|console_type|convert_base|convert_date|convert_locale_date|cos|cosh|create|date|dcget_text|destroy|destroy_lock|dget_text|difference|dump_hist|ebcdic_to_ascii|encrypt|event_archive|event_catalog_get|event_check|event_query|event_range_manage|event_range_query|event_report|event_schedule|event_trigger|event_trigger2|execute|exists|exp|fabs|file|floor|fmod|fopen|fseek|ftell|full_discovery|get|get_chan_info|get_ranges|get_text|get_vars|getenv|gethostinfo|getpid|getpname|grep|history|history_get_retention|in_transition|index|int|internal|intersection|is_var|isnumber|join|kill|length|lines|lock|lock_info|log|log10|loge|matchline|msg_check|msg_get_format|msg_get_severity|msg_printf|msg_sprintf|ntharg|nthargf|nthline|nthlinef|num_bytes|num_consoles|pconfig|popen|poplines|pow|print|printf|proc_exists|process|random|read|readln|refresh_parameters|remote_check|remote_close|remote_event_query|remote_event_trigger|remote_file_send|remote_open|remove|replace|rindex|sec_check_priv|sec_store_get|sec_store_set|set|set_alarm_ranges|set_locale|share|sin|sinh|sleep|snmp_agent_config|snmp_agent_start|snmp_agent_stop|snmp_close|snmp_config|snmp_get|snmp_get_next|snmp_h_get|snmp_h_get_next|snmp_h_set|snmp_open|snmp_set|snmp_trap_ignore|snmp_trap_listen|snmp_trap_raise_std_trap|snmp_trap_receive|snmp_trap_register_im|snmp_trap_send|snmp_walk|sopen|sort|splitline|sprintf|sqrt|srandom|str_repeat|strcasecmp|subset|substr|system|tail|tan|tanh|text_domain|time|tmpnam|tolower|toupper|trace_psl_process|trim|union|unique|unlock|unset|va_arg|va_start|write)\b/,
            alias: "builtin-function"
          },
          "foreach-variable": {
            pattern: /(\bforeach\s+(?:(?:\w+\b|"(?:\\.|[^\\"])*")\s+){0,2})[_a-zA-Z]\w*(?=\s*\()/,
            lookbehind: true,
            greedy: true
          },
          function: /\b[_a-z]\w*\b(?=\s*\()/i,
          number: /\b(?:0x[0-9a-f]+|\d+(?:\.\d+)?)\b/i,
          operator: /--|\+\+|&&=?|\|\|=?|<<=?|>>=?|[=!]~|[-+*/%&|^!=<>]=?|\.|[:?]/,
          punctuation: /[(){}\[\];,]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/pug.js
  var require_pug = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/pug.js"(exports, module) {
      "use strict";
      module.exports = pug;
      pug.displayName = "pug";
      pug.aliases = [];
      function pug(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.pug = {
            comment: {
              pattern: /(^([\t ]*))\/\/.*(?:(?:\r?\n|\r)\2[\t ].+)*/m,
              lookbehind: true
            },
            "multiline-script": {
              pattern: /(^([\t ]*)script\b.*\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
              lookbehind: true,
              inside: Prism2.languages.javascript
            },
            filter: {
              pattern: /(^([\t ]*)):.+(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
              lookbehind: true,
              inside: {
                "filter-name": {
                  pattern: /^:[\w-]+/,
                  alias: "variable"
                },
                text: /\S[\s\S]*/
              }
            },
            "multiline-plain-text": {
              pattern: /(^([\t ]*)[\w\-#.]+\.[\t ]*)(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/m,
              lookbehind: true
            },
            markup: {
              pattern: /(^[\t ]*)<.+/m,
              lookbehind: true,
              inside: Prism2.languages.markup
            },
            doctype: {
              pattern: /((?:^|\n)[\t ]*)doctype(?: .+)?/,
              lookbehind: true
            },
            "flow-control": {
              pattern: /(^[\t ]*)(?:case|default|each|else|if|unless|when|while)\b(?: .+)?/m,
              lookbehind: true,
              inside: {
                each: {
                  pattern: /^each .+? in\b/,
                  inside: {
                    keyword: /\b(?:each|in)\b/,
                    punctuation: /,/
                  }
                },
                branch: {
                  pattern: /^(?:case|default|else|if|unless|when|while)\b/,
                  alias: "keyword"
                },
                rest: Prism2.languages.javascript
              }
            },
            keyword: {
              pattern: /(^[\t ]*)(?:append|block|extends|include|prepend)\b.+/m,
              lookbehind: true
            },
            mixin: [
              {
                pattern: /(^[\t ]*)mixin .+/m,
                lookbehind: true,
                inside: {
                  keyword: /^mixin/,
                  function: /\w+(?=\s*\(|\s*$)/,
                  punctuation: /[(),.]/
                }
              },
              {
                pattern: /(^[\t ]*)\+.+/m,
                lookbehind: true,
                inside: {
                  name: {
                    pattern: /^\+\w+/,
                    alias: "function"
                  },
                  rest: Prism2.languages.javascript
                }
              }
            ],
            script: {
              pattern: /(^[\t ]*script(?:(?:&[^(]+)?\([^)]+\))*[\t ]).+/m,
              lookbehind: true,
              inside: Prism2.languages.javascript
            },
            "plain-text": {
              pattern: /(^[\t ]*(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?[\t ]).+/m,
              lookbehind: true
            },
            tag: {
              pattern: /(^[\t ]*)(?!-)[\w\-#.]*[\w\-](?:(?:&[^(]+)?\([^)]+\))*\/?:?/m,
              lookbehind: true,
              inside: {
                attributes: [
                  {
                    pattern: /&[^(]+\([^)]+\)/,
                    inside: Prism2.languages.javascript
                  },
                  {
                    pattern: /\([^)]+\)/,
                    inside: {
                      "attr-value": {
                        pattern: /(=\s*(?!\s))(?:\{[^}]*\}|[^,)\r\n]+)/,
                        lookbehind: true,
                        inside: Prism2.languages.javascript
                      },
                      "attr-name": /[\w-]+(?=\s*!?=|\s*[,)])/,
                      punctuation: /[!=(),]+/
                    }
                  }
                ],
                punctuation: /:/,
                "attr-id": /#[\w\-]+/,
                "attr-class": /\.[\w\-]+/
              }
            },
            code: [
              {
                pattern: /(^[\t ]*(?:-|!?=)).+/m,
                lookbehind: true,
                inside: Prism2.languages.javascript
              }
            ],
            punctuation: /[.\-!=|]+/
          };
          var filter_pattern = /(^([\t ]*)):<filter_name>(?:(?:\r?\n|\r(?!\n))(?:\2[\t ].+|\s*?(?=\r?\n|\r)))+/.source;
          var filters = [
            {
              filter: "atpl",
              language: "twig"
            },
            {
              filter: "coffee",
              language: "coffeescript"
            },
            "ejs",
            "handlebars",
            "less",
            "livescript",
            "markdown",
            {
              filter: "sass",
              language: "scss"
            },
            "stylus"
          ];
          var all_filters = {};
          for (var i = 0, l = filters.length; i < l; i++) {
            var filter3 = filters[i];
            filter3 = typeof filter3 === "string" ? {
              filter: filter3,
              language: filter3
            } : filter3;
            if (Prism2.languages[filter3.language]) {
              all_filters["filter-" + filter3.filter] = {
                pattern: RegExp(
                  filter_pattern.replace("<filter_name>", function() {
                    return filter3.filter;
                  }),
                  "m"
                ),
                lookbehind: true,
                inside: {
                  "filter-name": {
                    pattern: /^:[\w-]+/,
                    alias: "variable"
                  },
                  text: {
                    pattern: /\S[\s\S]*/,
                    alias: [filter3.language, "language-" + filter3.language],
                    inside: Prism2.languages[filter3.language]
                  }
                }
              };
            }
          }
          Prism2.languages.insertBefore("pug", "filter", all_filters);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/puppet.js
  var require_puppet = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/puppet.js"(exports, module) {
      "use strict";
      module.exports = puppet;
      puppet.displayName = "puppet";
      puppet.aliases = [];
      function puppet(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.puppet = {
            heredoc: [
              {
                pattern: /(@\("([^"\r\n\/):]+)"(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r(?!\n)))*?[ \t]*(?:\|[ \t]*)?(?:-[ \t]*)?\2/,
                lookbehind: true,
                alias: "string",
                inside: {
                  punctuation: /(?=\S).*\S(?= *$)/
                }
              },
              {
                pattern: /(@\(([^"\r\n\/):]+)(?:\/[nrts$uL]*)?\).*(?:\r?\n|\r))(?:.*(?:\r?\n|\r(?!\n)))*?[ \t]*(?:\|[ \t]*)?(?:-[ \t]*)?\2/,
                lookbehind: true,
                greedy: true,
                alias: "string",
                inside: {
                  punctuation: /(?=\S).*\S(?= *$)/
                }
              },
              {
                pattern: /@\("?(?:[^"\r\n\/):]+)"?(?:\/[nrts$uL]*)?\)/,
                alias: "string",
                inside: {
                  punctuation: {
                    pattern: /(\().+?(?=\))/,
                    lookbehind: true
                  }
                }
              }
            ],
            "multiline-comment": {
              pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
              lookbehind: true,
              greedy: true,
              alias: "comment"
            },
            regex: {
              pattern: /((?:\bnode\s+|[~=\(\[\{,]\s*|[=+]>\s*|^\s*))\/(?:[^\/\\]|\\[\s\S])+\/(?:[imx]+\b|\B)/,
              lookbehind: true,
              greedy: true,
              inside: {
                "extended-regex": {
                  pattern: /^\/(?:[^\/\\]|\\[\s\S])+\/[im]*x[im]*$/,
                  inside: {
                    comment: /#.*/
                  }
                }
              }
            },
            comment: {
              pattern: /(^|[^\\])#.*/,
              lookbehind: true,
              greedy: true
            },
            string: {
              pattern: /(["'])(?:\$\{(?:[^'"}]|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}|\$(?!\{)|(?!\1)[^\\$]|\\[\s\S])*\1/,
              greedy: true,
              inside: {
                "double-quoted": {
                  pattern: /^"[\s\S]*"$/,
                  inside: {}
                }
              }
            },
            variable: {
              pattern: /\$(?:::)?\w+(?:::\w+)*/,
              inside: {
                punctuation: /::/
              }
            },
            "attr-name": /(?:\b\w+|\*)(?=\s*=>)/,
            function: [
              {
                pattern: /(\.)(?!\d)\w+/,
                lookbehind: true
              },
              /\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\b|\b(?!\d)\w+(?=\()/
            ],
            number: /\b(?:0x[a-f\d]+|\d+(?:\.\d+)?(?:e-?\d+)?)\b/i,
            boolean: /\b(?:false|true)\b/,
            keyword: /\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\b/,
            datatype: {
              pattern: /\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\b/,
              alias: "symbol"
            },
            operator: /=[=~>]?|![=~]?|<(?:<\|?|[=~|-])?|>[>=]?|->?|~>|\|>?>?|[*\/%+?]|\b(?:and|in|or)\b/,
            punctuation: /[\[\]{}().,;]|:+/
          };
          var interpolation = [
            {
              pattern: /(^|[^\\])\$\{(?:[^'"{}]|\{[^}]*\}|(["'])(?:(?!\2)[^\\]|\\[\s\S])*\2)+\}/,
              lookbehind: true,
              inside: {
                "short-variable": {
                  pattern: /(^\$\{)(?!\w+\()(?:::)?\w+(?:::\w+)*/,
                  lookbehind: true,
                  alias: "variable",
                  inside: {
                    punctuation: /::/
                  }
                },
                delimiter: {
                  pattern: /^\$/,
                  alias: "variable"
                },
                rest: Prism2.languages.puppet
              }
            },
            {
              pattern: /(^|[^\\])\$(?:::)?\w+(?:::\w+)*/,
              lookbehind: true,
              alias: "variable",
              inside: {
                punctuation: /::/
              }
            }
          ];
          Prism2.languages.puppet["heredoc"][0].inside.interpolation = interpolation;
          Prism2.languages.puppet["string"].inside["double-quoted"].inside.interpolation = interpolation;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/pure.js
  var require_pure = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/pure.js"(exports, module) {
      "use strict";
      module.exports = pure;
      pure.displayName = "pure";
      pure.aliases = [];
      function pure(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.pure = {
            comment: [
              {
                pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
                lookbehind: true
              },
              {
                pattern: /(^|[^\\:])\/\/.*/,
                lookbehind: true
              },
              /#!.+/
            ],
            "inline-lang": {
              pattern: /%<[\s\S]+?%>/,
              greedy: true,
              inside: {
                lang: {
                  pattern: /(^%< *)-\*-.+?-\*-/,
                  lookbehind: true,
                  alias: "comment"
                },
                delimiter: {
                  pattern: /^%<.*|%>$/,
                  alias: "punctuation"
                }
              }
            },
            string: {
              pattern: /"(?:\\.|[^"\\\r\n])*"/,
              greedy: true
            },
            number: {
              pattern: /((?:\.\.)?)(?:\b(?:inf|nan)\b|\b0x[\da-f]+|(?:\b(?:0b)?\d+(?:\.\d+)?|\B\.\d+)(?:e[+-]?\d+)?L?)/i,
              lookbehind: true
            },
            keyword: /\b(?:NULL|ans|break|bt|case|catch|cd|clear|const|def|del|dump|else|end|exit|extern|false|force|help|if|infix[lr]?|interface|let|ls|mem|namespace|nonfix|of|otherwise|outfix|override|postfix|prefix|private|public|pwd|quit|run|save|show|stats|then|throw|trace|true|type|underride|using|when|with)\b/,
            function: /\b(?:abs|add_(?:addr|constdef|(?:fundef|interface|macdef|typedef)(?:_at)?|vardef)|all|any|applp?|arity|bigintp?|blob(?:_crc|_size|p)?|boolp?|byte_c?string(?:_pointer)?|byte_(?:matrix|pointer)|calloc|cat|catmap|ceil|char[ps]?|check_ptrtag|chr|clear_sentry|clearsym|closurep?|cmatrixp?|cols?|colcat(?:map)?|colmap|colrev|colvector(?:p|seq)?|complex(?:_float_(?:matrix|pointer)|_matrix(?:_view)?|_pointer|p)?|conj|cookedp?|cst|cstring(?:_(?:dup|list|vector))?|curry3?|cyclen?|del_(?:constdef|fundef|interface|macdef|typedef|vardef)|delete|diag(?:mat)?|dim|dmatrixp?|do|double(?:_matrix(?:_view)?|_pointer|p)?|dowith3?|drop|dropwhile|eval(?:cmd)?|exactp|filter|fix|fixity|flip|float(?:_matrix|_pointer)|floor|fold[lr]1?|frac|free|funp?|functionp?|gcd|get(?:_(?:byte|constdef|double|float|fundef|int(?:64)?|interface(?:_typedef)?|long|macdef|pointer|ptrtag|sentry|short|string|typedef|vardef))?|globsym|hash|head|id|im|imatrixp?|index|inexactp|infp|init|insert|int(?:_matrix(?:_view)?|_pointer|p)?|int64_(?:matrix|pointer)|integerp?|iteraten?|iterwhile|join|keys?|lambdap?|last(?:err(?:pos)?)?|lcd|list[2p]?|listmap|make_ptrtag|malloc|map|matcat|matrixp?|max|member|min|nanp|nargs|nmatrixp?|null|numberp?|ord|pack(?:ed)?|pointer(?:_cast|_tag|_type|p)?|pow|pred|ptrtag|put(?:_(?:byte|double|float|int(?:64)?|long|pointer|short|string))?|rationalp?|re|realp?|realloc|recordp?|redim|reduce(?:_with)?|refp?|repeatn?|reverse|rlistp?|round|rows?|rowcat(?:map)?|rowmap|rowrev|rowvector(?:p|seq)?|same|scan[lr]1?|sentry|sgn|short_(?:matrix|pointer)|slice|smatrixp?|sort|split|str|strcat|stream|stride|string(?:_(?:dup|list|vector)|p)?|subdiag(?:mat)?|submat|subseq2?|substr|succ|supdiag(?:mat)?|symbolp?|tail|take|takewhile|thunkp?|transpose|trunc|tuplep?|typep|ubyte|uint(?:64)?|ulong|uncurry3?|unref|unzip3?|update|ushort|vals?|varp?|vector(?:p|seq)?|void|zip3?|zipwith3?)\b/,
            special: {
              pattern: /\b__[a-z]+__\b/i,
              alias: "builtin"
            },
            operator: /(?:[!"#$%&'*+,\-.\/:<=>?@\\^`|~\u00a1-\u00bf\u00d7-\u00f7\u20d0-\u2bff]|\b_+\b)+|\b(?:and|div|mod|not|or)\b/,
            punctuation: /[(){}\[\];,|]/
          };
          var inlineLanguages = [
            "c",
            {
              lang: "c++",
              alias: "cpp"
            },
            "fortran"
          ];
          var inlineLanguageRe = /%< *-\*- *<lang>\d* *-\*-[\s\S]+?%>/.source;
          inlineLanguages.forEach(function(lang) {
            var alias = lang;
            if (typeof lang !== "string") {
              alias = lang.alias;
              lang = lang.lang;
            }
            if (Prism2.languages[alias]) {
              var o = {};
              o["inline-lang-" + alias] = {
                pattern: RegExp(
                  inlineLanguageRe.replace(
                    "<lang>",
                    lang.replace(/([.+*?\/\\(){}\[\]])/g, "\\$1")
                  ),
                  "i"
                ),
                inside: Prism2.util.clone(Prism2.languages.pure["inline-lang"].inside)
              };
              o["inline-lang-" + alias].inside.rest = Prism2.util.clone(
                Prism2.languages[alias]
              );
              Prism2.languages.insertBefore("pure", "inline-lang", o);
            }
          });
          if (Prism2.languages.c) {
            Prism2.languages.pure["inline-lang"].inside.rest = Prism2.util.clone(
              Prism2.languages.c
            );
          }
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/purebasic.js
  var require_purebasic = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/purebasic.js"(exports, module) {
      "use strict";
      module.exports = purebasic;
      purebasic.displayName = "purebasic";
      purebasic.aliases = [];
      function purebasic(Prism) {
        Prism.languages.purebasic = Prism.languages.extend("clike", {
          comment: /;.*/,
          keyword: /\b(?:align|and|as|break|calldebugger|case|compilercase|compilerdefault|compilerelse|compilerelseif|compilerendif|compilerendselect|compilererror|compilerif|compilerselect|continue|data|datasection|debug|debuglevel|declare|declarec|declarecdll|declaredll|declaremodule|default|define|dim|disableasm|disabledebugger|disableexplicit|else|elseif|enableasm|enabledebugger|enableexplicit|end|enddatasection|enddeclaremodule|endenumeration|endif|endimport|endinterface|endmacro|endmodule|endprocedure|endselect|endstructure|endstructureunion|endwith|enumeration|extends|fakereturn|for|foreach|forever|global|gosub|goto|if|import|importc|includebinary|includefile|includepath|interface|macro|module|newlist|newmap|next|not|or|procedure|procedurec|procedurecdll|proceduredll|procedurereturn|protected|prototype|prototypec|read|redim|repeat|restore|return|runtime|select|shared|static|step|structure|structureunion|swap|threaded|to|until|wend|while|with|xincludefile|xor)\b/i,
          function: /\b\w+(?:\.\w+)?\s*(?=\()/,
          number: /(?:\$[\da-f]+|\b-?(?:\d+(?:\.\d+)?|\.\d+)(?:e[+-]?\d+)?)\b/i,
          operator: /(?:@\*?|\?|\*)\w+|-[>-]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|?\||[~^%?*/@]/
        });
        Prism.languages.insertBefore("purebasic", "keyword", {
          tag: /#\w+\$?/,
          asm: {
            pattern: /(^[\t ]*)!.*/m,
            lookbehind: true,
            alias: "tag",
            inside: {
              comment: /;.*/,
              string: {
                pattern: /(["'`])(?:\\.|(?!\1)[^\\\r\n])*\1/,
                greedy: true
              },
              "label-reference-anonymous": {
                pattern: /(!\s*j[a-z]+\s+)@[fb]/i,
                lookbehind: true,
                alias: "fasm-label"
              },
              "label-reference-addressed": {
                pattern: /(!\s*j[a-z]+\s+)[A-Z._?$@][\w.?$@~#]*/i,
                lookbehind: true,
                alias: "fasm-label"
              },
              keyword: [
                /\b(?:extern|global)\b[^;\r\n]*/i,
                /\b(?:CPU|DEFAULT|FLOAT)\b.*/
              ],
              function: {
                pattern: /^([\t ]*!\s*)[\da-z]+(?=\s|$)/im,
                lookbehind: true
              },
              "function-inline": {
                pattern: /(:\s*)[\da-z]+(?=\s)/i,
                lookbehind: true,
                alias: "function"
              },
              label: {
                pattern: /^([\t ]*!\s*)[A-Za-z._?$@][\w.?$@~#]*(?=:)/m,
                lookbehind: true,
                alias: "fasm-label"
              },
              register: /\b(?:st\d|[xyz]mm\d\d?|[cdt]r\d|r\d\d?[bwd]?|[er]?[abcd]x|[abcd][hl]|[er]?(?:bp|di|si|sp)|[cdefgs]s|mm\d+)\b/i,
              number: /(?:\b|-|(?=\$))(?:0[hx](?:[\da-f]*\.)?[\da-f]+(?:p[+-]?\d+)?|\d[\da-f]+[hx]|\$\d[\da-f]*|0[oq][0-7]+|[0-7]+[oq]|0[by][01]+|[01]+[by]|0[dt]\d+|(?:\d+(?:\.\d+)?|\.\d+)(?:\.?e[+-]?\d+)?[dt]?)\b/i,
              operator: /[\[\]*+\-/%<>=&|$!,.:]/
            }
          }
        });
        delete Prism.languages.purebasic["class-name"];
        delete Prism.languages.purebasic["boolean"];
        Prism.languages.pbfasm = Prism.languages["purebasic"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/purescript.js
  var require_purescript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/purescript.js"(exports, module) {
      "use strict";
      var refractorHaskell = require_haskell();
      module.exports = purescript;
      purescript.displayName = "purescript";
      purescript.aliases = ["purs"];
      function purescript(Prism) {
        Prism.register(refractorHaskell);
        Prism.languages.purescript = Prism.languages.extend("haskell", {
          keyword: /\b(?:ado|case|class|data|derive|do|else|forall|if|in|infixl|infixr|instance|let|module|newtype|of|primitive|then|type|where)\b|∀/,
          "import-statement": {
            pattern: /(^[\t ]*)import\s+[A-Z][\w']*(?:\.[A-Z][\w']*)*(?:\s+as\s+[A-Z][\w']*(?:\.[A-Z][\w']*)*)?(?:\s+hiding\b)?/m,
            lookbehind: true,
            inside: {
              keyword: /\b(?:as|hiding|import)\b/,
              punctuation: /\./
            }
          },
          builtin: /\b(?:absurd|add|ap|append|apply|between|bind|bottom|clamp|compare|comparing|compose|conj|const|degree|discard|disj|div|eq|flap|flip|gcd|identity|ifM|join|lcm|liftA1|liftM1|map|max|mempty|min|mod|mul|negate|not|notEq|one|otherwise|recip|show|sub|top|unit|unless|unlessM|void|when|whenM|zero)\b/,
          operator: [
            Prism.languages.haskell.operator[0],
            Prism.languages.haskell.operator[2],
            /[\xa2-\xa6\xa8\xa9\xac\xae-\xb1\xb4\xb8\xd7\xf7\u02c2-\u02c5\u02d2-\u02df\u02e5-\u02eb\u02ed\u02ef-\u02ff\u0375\u0384\u0385\u03f6\u0482\u058d-\u058f\u0606-\u0608\u060b\u060e\u060f\u06de\u06e9\u06fd\u06fe\u07f6\u07fe\u07ff\u09f2\u09f3\u09fa\u09fb\u0af1\u0b70\u0bf3-\u0bfa\u0c7f\u0d4f\u0d79\u0e3f\u0f01-\u0f03\u0f13\u0f15-\u0f17\u0f1a-\u0f1f\u0f34\u0f36\u0f38\u0fbe-\u0fc5\u0fc7-\u0fcc\u0fce\u0fcf\u0fd5-\u0fd8\u109e\u109f\u1390-\u1399\u166d\u17db\u1940\u19de-\u19ff\u1b61-\u1b6a\u1b74-\u1b7c\u1fbd\u1fbf-\u1fc1\u1fcd-\u1fcf\u1fdd-\u1fdf\u1fed-\u1fef\u1ffd\u1ffe\u2044\u2052\u207a-\u207c\u208a-\u208c\u20a0-\u20bf\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211e-\u2123\u2125\u2127\u2129\u212e\u213a\u213b\u2140-\u2144\u214a-\u214d\u214f\u218a\u218b\u2190-\u2307\u230c-\u2328\u232b-\u2426\u2440-\u244a\u249c-\u24e9\u2500-\u2767\u2794-\u27c4\u27c7-\u27e5\u27f0-\u2982\u2999-\u29d7\u29dc-\u29fb\u29fe-\u2b73\u2b76-\u2b95\u2b97-\u2bff\u2ce5-\u2cea\u2e50\u2e51\u2e80-\u2e99\u2e9b-\u2ef3\u2f00-\u2fd5\u2ff0-\u2ffb\u3004\u3012\u3013\u3020\u3036\u3037\u303e\u303f\u309b\u309c\u3190\u3191\u3196-\u319f\u31c0-\u31e3\u3200-\u321e\u322a-\u3247\u3250\u3260-\u327f\u328a-\u32b0\u32c0-\u33ff\u4dc0-\u4dff\ua490-\ua4c6\ua700-\ua716\ua720\ua721\ua789\ua78a\ua828-\ua82b\ua836-\ua839\uaa77-\uaa79\uab5b\uab6a\uab6b\ufb29\ufbb2-\ufbc1\ufdfc\ufdfd\ufe62\ufe64-\ufe66\ufe69\uff04\uff0b\uff1c-\uff1e\uff3e\uff40\uff5c\uff5e\uffe0-\uffe6\uffe8-\uffee\ufffc\ufffd]/
          ]
        });
        Prism.languages.purs = Prism.languages.purescript;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/python.js
  var require_python = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/python.js"(exports, module) {
      "use strict";
      module.exports = python;
      python.displayName = "python";
      python.aliases = ["py"];
      function python(Prism) {
        Prism.languages.python = {
          comment: {
            pattern: /(^|[^\\])#.*/,
            lookbehind: true,
            greedy: true
          },
          "string-interpolation": {
            pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
                lookbehind: true,
                inside: {
                  "format-spec": {
                    pattern: /(:)[^:(){}]+(?=\}$)/,
                    lookbehind: true
                  },
                  "conversion-option": {
                    pattern: /![sra](?=[:}]$)/,
                    alias: "punctuation"
                  },
                  rest: null
                }
              },
              string: /[\s\S]+/
            }
          },
          "triple-quoted-string": {
            pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
            greedy: true,
            alias: "string"
          },
          string: {
            pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
            greedy: true
          },
          function: {
            pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
            lookbehind: true
          },
          "class-name": {
            pattern: /(\bclass\s+)\w+/i,
            lookbehind: true
          },
          decorator: {
            pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
            lookbehind: true,
            alias: ["annotation", "punctuation"],
            inside: {
              punctuation: /\./
            }
          },
          keyword: /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
          builtin: /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
          boolean: /\b(?:False|None|True)\b/,
          number: /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
          operator: /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
          punctuation: /[{}[\];(),.:]/
        };
        Prism.languages.python["string-interpolation"].inside["interpolation"].inside.rest = Prism.languages.python;
        Prism.languages.py = Prism.languages.python;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/q.js
  var require_q = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/q.js"(exports, module) {
      "use strict";
      module.exports = q;
      q.displayName = "q";
      q.aliases = [];
      function q(Prism) {
        Prism.languages.q = {
          string: /"(?:\\.|[^"\\\r\n])*"/,
          comment: [
            {
              pattern: /([\t )\]}])\/.*/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /(^|\r?\n|\r)\/[\t ]*(?:(?:\r?\n|\r)(?:.*(?:\r?\n|\r(?!\n)))*?(?:\\(?=[\t ]*(?:\r?\n|\r))|$)|\S.*)/,
              lookbehind: true,
              greedy: true
            },
            {
              pattern: /^\\[\t ]*(?:\r?\n|\r)[\s\S]+/m,
              greedy: true
            },
            {
              pattern: /^#!.+/m,
              greedy: true
            }
          ],
          symbol: /`(?::\S+|[\w.]*)/,
          datetime: {
            pattern: /0N[mdzuvt]|0W[dtz]|\d{4}\.\d\d(?:m|\.\d\d(?:T(?:\d\d(?::\d\d(?::\d\d(?:[.:]\d\d\d)?)?)?)?)?[dz]?)|\d\d:\d\d(?::\d\d(?:[.:]\d\d\d)?)?[uvt]?/,
            alias: "number"
          },
          number: /\b(?![01]:)(?:0N[hje]?|0W[hj]?|0[wn]|0x[\da-fA-F]+|\d+(?:\.\d*)?(?:e[+-]?\d+)?[hjfeb]?)/,
          keyword: /\\\w+\b|\b(?:abs|acos|aj0?|all|and|any|asc|asin|asof|atan|attr|avgs?|binr?|by|ceiling|cols|cor|cos|count|cov|cross|csv|cut|delete|deltas|desc|dev|differ|distinct|div|do|dsave|ej|enlist|eval|except|exec|exit|exp|fby|fills|first|fkeys|flip|floor|from|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|identity|idesc|if|ij|in|insert|inter|inv|keys?|last|like|list|ljf?|load|log|lower|lsq|ltime|ltrim|mavg|maxs?|mcount|md5|mdev|med|meta|mins?|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|plist|prds?|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|select|set|setenv|show|signum|sin|sqrt|ssr?|string|sublist|sums?|sv|svar|system|tables|tan|til|trim|txf|type|uj|ungroup|union|update|upper|upsert|value|var|views?|vs|wavg|where|while|within|wj1?|wsum|ww|xasc|xbar|xcols?|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\b/,
          adverb: {
            pattern: /['\/\\]:?|\beach\b/,
            alias: "function"
          },
          verb: {
            pattern: /(?:\B\.\B|\b[01]:|<[=>]?|>=?|[:+\-*%,!?~=|$&#@^]):?|\b_\b:?/,
            alias: "operator"
          },
          punctuation: /[(){}\[\];.]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/qml.js
  var require_qml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/qml.js"(exports, module) {
      "use strict";
      module.exports = qml;
      qml.displayName = "qml";
      qml.aliases = [];
      function qml(Prism) {
        ;
        (function(Prism2) {
          var jsString = /"(?:\\.|[^\\"\r\n])*"|'(?:\\.|[^\\'\r\n])*'/.source;
          var jsComment = /\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))*\*\//.source;
          var jsExpr = /(?:[^\\()[\]{}"'/]|<string>|\/(?![*/])|<comment>|\(<expr>*\)|\[<expr>*\]|\{<expr>*\}|\\[\s\S])/.source.replace(/<string>/g, function() {
            return jsString;
          }).replace(/<comment>/g, function() {
            return jsComment;
          });
          for (var i = 0; i < 2; i++) {
            jsExpr = jsExpr.replace(/<expr>/g, function() {
              return jsExpr;
            });
          }
          jsExpr = jsExpr.replace(/<expr>/g, "[^\\s\\S]");
          Prism2.languages.qml = {
            comment: {
              pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
              greedy: true
            },
            "javascript-function": {
              pattern: RegExp(
                /((?:^|;)[ \t]*)function\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*\(<js>*\)\s*\{<js>*\}/.source.replace(
                  /<js>/g,
                  function() {
                    return jsExpr;
                  }
                ),
                "m"
              ),
              lookbehind: true,
              greedy: true,
              alias: "language-javascript",
              inside: Prism2.languages.javascript
            },
            "class-name": {
              pattern: /((?:^|[:;])[ \t]*)(?!\d)\w+(?=[ \t]*\{|[ \t]+on\b)/m,
              lookbehind: true
            },
            property: [
              {
                pattern: /((?:^|[;{])[ \t]*)(?!\d)\w+(?:\.\w+)*(?=[ \t]*:)/m,
                lookbehind: true
              },
              {
                pattern: /((?:^|[;{])[ \t]*)property[ \t]+(?!\d)\w+(?:\.\w+)*[ \t]+(?!\d)\w+(?:\.\w+)*(?=[ \t]*:)/m,
                lookbehind: true,
                inside: {
                  keyword: /^property/,
                  property: /\w+(?:\.\w+)*/
                }
              }
            ],
            "javascript-expression": {
              pattern: RegExp(
                /(:[ \t]*)(?![\s;}[])(?:(?!$|[;}])<js>)+/.source.replace(
                  /<js>/g,
                  function() {
                    return jsExpr;
                  }
                ),
                "m"
              ),
              lookbehind: true,
              greedy: true,
              alias: "language-javascript",
              inside: Prism2.languages.javascript
            },
            string: {
              pattern: /"(?:\\.|[^\\"\r\n])*"/,
              greedy: true
            },
            keyword: /\b(?:as|import|on)\b/,
            punctuation: /[{}[\]:;,]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/qore.js
  var require_qore = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/qore.js"(exports, module) {
      "use strict";
      module.exports = qore;
      qore.displayName = "qore";
      qore.aliases = [];
      function qore(Prism) {
        Prism.languages.qore = Prism.languages.extend("clike", {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:\/\/|#).*)/,
            lookbehind: true
          },
          string: {
            pattern: /("|')(?:\\[\s\S]|(?!\1)[^\\])*\1/,
            greedy: true
          },
          keyword: /\b(?:abstract|any|assert|binary|bool|boolean|break|byte|case|catch|char|class|code|const|continue|data|default|do|double|else|enum|extends|final|finally|float|for|goto|hash|if|implements|import|inherits|instanceof|int|interface|long|my|native|new|nothing|null|object|our|own|private|reference|rethrow|return|short|soft(?:bool|date|float|int|list|number|string)|static|strictfp|string|sub|super|switch|synchronized|this|throw|throws|transient|try|void|volatile|while)\b/,
          boolean: /\b(?:false|true)\b/i,
          function: /\$?\b(?!\d)\w+(?=\()/,
          number: /\b(?:0b[01]+|0x(?:[\da-f]*\.)?[\da-fp\-]+|(?:\d+(?:\.\d+)?|\.\d+)(?:e\d+)?[df]|(?:\d+(?:\.\d+)?|\.\d+))\b/i,
          operator: {
            pattern: /(^|[^.])(?:\+[+=]?|-[-=]?|[!=](?:==?|~)?|>>?=?|<(?:=>?|<=?)?|&[&=]?|\|[|=]?|[*\/%^]=?|[~?])/,
            lookbehind: true
          },
          variable: /\$(?!\d)\w+\b/
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/qsharp.js
  var require_qsharp = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/qsharp.js"(exports, module) {
      "use strict";
      module.exports = qsharp;
      qsharp.displayName = "qsharp";
      qsharp.aliases = ["qs"];
      function qsharp(Prism) {
        ;
        (function(Prism2) {
          function replace2(pattern, replacements) {
            return pattern.replace(/<<(\d+)>>/g, function(m, index2) {
              return "(?:" + replacements[+index2] + ")";
            });
          }
          function re(pattern, replacements, flags) {
            return RegExp(replace2(pattern, replacements), flags || "");
          }
          function nested(pattern, depthLog2) {
            for (var i = 0; i < depthLog2; i++) {
              pattern = pattern.replace(/<<self>>/g, function() {
                return "(?:" + pattern + ")";
              });
            }
            return pattern.replace(/<<self>>/g, "[^\\s\\S]");
          }
          var keywordKinds = {
            type: "Adj BigInt Bool Ctl Double false Int One Pauli PauliI PauliX PauliY PauliZ Qubit Range Result String true Unit Zero",
            other: "Adjoint adjoint apply as auto body borrow borrowing Controlled controlled distribute elif else fail fixup for function if in internal intrinsic invert is let mutable namespace new newtype open operation repeat return self set until use using while within"
          };
          function keywordsToPattern(words) {
            return "\\b(?:" + words.trim().replace(/ /g, "|") + ")\\b";
          }
          var keywords = RegExp(
            keywordsToPattern(keywordKinds.type + " " + keywordKinds.other)
          );
          var identifier = /\b[A-Za-z_]\w*\b/.source;
          var qualifiedName = replace2(/<<0>>(?:\s*\.\s*<<0>>)*/.source, [identifier]);
          var typeInside = {
            keyword: keywords,
            punctuation: /[<>()?,.:[\]]/
          };
          var regularString = /"(?:\\.|[^\\"])*"/.source;
          Prism2.languages.qsharp = Prism2.languages.extend("clike", {
            comment: /\/\/.*/,
            string: [
              {
                pattern: re(/(^|[^$\\])<<0>>/.source, [regularString]),
                lookbehind: true,
                greedy: true
              }
            ],
            "class-name": [
              {
                pattern: re(/(\b(?:as|open)\s+)<<0>>(?=\s*(?:;|as\b))/.source, [
                  qualifiedName
                ]),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: re(/(\bnamespace\s+)<<0>>(?=\s*\{)/.source, [qualifiedName]),
                lookbehind: true,
                inside: typeInside
              }
            ],
            keyword: keywords,
            number: /(?:\b0(?:x[\da-f]+|b[01]+|o[0-7]+)|(?:\B\.\d+|\b\d+(?:\.\d*)?)(?:e[-+]?\d+)?)l?\b/i,
            operator: /\band=|\bor=|\band\b|\bnot\b|\bor\b|<[-=]|[-=]>|>>>=?|<<<=?|\^\^\^=?|\|\|\|=?|&&&=?|w\/=?|~~~|[*\/+\-^=!%]=?/,
            punctuation: /::|[{}[\];(),.:]/
          });
          Prism2.languages.insertBefore("qsharp", "number", {
            range: {
              pattern: /\.\./,
              alias: "operator"
            }
          });
          var interpolationExpr = nested(
            replace2(/\{(?:[^"{}]|<<0>>|<<self>>)*\}/.source, [regularString]),
            2
          );
          Prism2.languages.insertBefore("qsharp", "string", {
            "interpolation-string": {
              pattern: re(/\$"(?:\\.|<<0>>|[^\\"{])*"/.source, [interpolationExpr]),
              greedy: true,
              inside: {
                interpolation: {
                  pattern: re(/((?:^|[^\\])(?:\\\\)*)<<0>>/.source, [
                    interpolationExpr
                  ]),
                  lookbehind: true,
                  inside: {
                    punctuation: /^\{|\}$/,
                    expression: {
                      pattern: /[\s\S]+/,
                      alias: "language-qsharp",
                      inside: Prism2.languages.qsharp
                    }
                  }
                },
                string: /[\s\S]+/
              }
            }
          });
        })(Prism);
        Prism.languages.qs = Prism.languages.qsharp;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/r.js
  var require_r = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/r.js"(exports, module) {
      "use strict";
      module.exports = r2;
      r2.displayName = "r";
      r2.aliases = [];
      function r2(Prism) {
        Prism.languages.r = {
          comment: /#.*/,
          string: {
            pattern: /(['"])(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          "percent-operator": {
            pattern: /%[^%\s]*%/,
            alias: "operator"
          },
          boolean: /\b(?:FALSE|TRUE)\b/,
          ellipsis: /\.\.(?:\.|\d+)/,
          number: [
            /\b(?:Inf|NaN)\b/,
            /(?:\b0x[\dA-Fa-f]+(?:\.\d*)?|\b\d+(?:\.\d*)?|\B\.\d+)(?:[EePp][+-]?\d+)?[iL]?/
          ],
          keyword: /\b(?:NA|NA_character_|NA_complex_|NA_integer_|NA_real_|NULL|break|else|for|function|if|in|next|repeat|while)\b/,
          operator: /->?>?|<(?:=|<?-)?|[>=!]=?|::?|&&?|\|\|?|[+*\/^$@~]/,
          punctuation: /[(){}\[\],;]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/racket.js
  var require_racket = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/racket.js"(exports, module) {
      "use strict";
      var refractorScheme = require_scheme();
      module.exports = racket;
      racket.displayName = "racket";
      racket.aliases = ["rkt"];
      function racket(Prism) {
        Prism.register(refractorScheme);
        Prism.languages.racket = Prism.languages.extend("scheme", {
          "lambda-parameter": {
            pattern: /([(\[]lambda\s+[(\[])[^()\[\]'\s]+/,
            lookbehind: true
          }
        });
        Prism.languages.insertBefore("racket", "string", {
          lang: {
            pattern: /^#lang.+/m,
            greedy: true,
            alias: "keyword"
          }
        });
        Prism.languages.rkt = Prism.languages.racket;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/reason.js
  var require_reason = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/reason.js"(exports, module) {
      "use strict";
      module.exports = reason;
      reason.displayName = "reason";
      reason.aliases = [];
      function reason(Prism) {
        Prism.languages.reason = Prism.languages.extend("clike", {
          string: {
            pattern: /"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,
            greedy: true
          },
          "class-name": /\b[A-Z]\w*/,
          keyword: /\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,
          operator: /\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/
        });
        Prism.languages.insertBefore("reason", "class-name", {
          char: {
            pattern: /'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,
            greedy: true
          },
          constructor: /\b[A-Z]\w*\b(?!\s*\.)/,
          label: {
            pattern: /\b[a-z]\w*(?=::)/,
            alias: "symbol"
          }
        });
        delete Prism.languages.reason.function;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/regex.js
  var require_regex = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/regex.js"(exports, module) {
      "use strict";
      module.exports = regex;
      regex.displayName = "regex";
      regex.aliases = [];
      function regex(Prism) {
        ;
        (function(Prism2) {
          var specialEscape = {
            pattern: /\\[\\(){}[\]^$+*?|.]/,
            alias: "escape"
          };
          var escape3 = /\\(?:x[\da-fA-F]{2}|u[\da-fA-F]{4}|u\{[\da-fA-F]+\}|0[0-7]{0,2}|[123][0-7]{2}|c[a-zA-Z]|.)/;
          var charSet = {
            pattern: /\.|\\[wsd]|\\p\{[^{}]+\}/i,
            alias: "class-name"
          };
          var charSetWithoutDot = {
            pattern: /\\[wsd]|\\p\{[^{}]+\}/i,
            alias: "class-name"
          };
          var rangeChar = "(?:[^\\\\-]|" + escape3.source + ")";
          var range2 = RegExp(rangeChar + "-" + rangeChar);
          var groupName = {
            pattern: /(<|')[^<>']+(?=[>']$)/,
            lookbehind: true,
            alias: "variable"
          };
          Prism2.languages.regex = {
            "char-class": {
              pattern: /((?:^|[^\\])(?:\\\\)*)\[(?:[^\\\]]|\\[\s\S])*\]/,
              lookbehind: true,
              inside: {
                "char-class-negation": {
                  pattern: /(^\[)\^/,
                  lookbehind: true,
                  alias: "operator"
                },
                "char-class-punctuation": {
                  pattern: /^\[|\]$/,
                  alias: "punctuation"
                },
                range: {
                  pattern: range2,
                  inside: {
                    escape: escape3,
                    "range-punctuation": {
                      pattern: /-/,
                      alias: "operator"
                    }
                  }
                },
                "special-escape": specialEscape,
                "char-set": charSetWithoutDot,
                escape: escape3
              }
            },
            "special-escape": specialEscape,
            "char-set": charSet,
            backreference: [
              {
                pattern: /\\(?![123][0-7]{2})[1-9]/,
                alias: "keyword"
              },
              {
                pattern: /\\k<[^<>']+>/,
                alias: "keyword",
                inside: {
                  "group-name": groupName
                }
              }
            ],
            anchor: {
              pattern: /[$^]|\\[ABbGZz]/,
              alias: "function"
            },
            escape: escape3,
            group: [
              {
                pattern: /\((?:\?(?:<[^<>']+>|'[^<>']+'|[>:]|<?[=!]|[idmnsuxU]+(?:-[idmnsuxU]+)?:?))?/,
                alias: "punctuation",
                inside: {
                  "group-name": groupName
                }
              },
              {
                pattern: /\)/,
                alias: "punctuation"
              }
            ],
            quantifier: {
              pattern: /(?:[+*?]|\{\d+(?:,\d*)?\})[?+]?/,
              alias: "number"
            },
            alternation: {
              pattern: /\|/,
              alias: "keyword"
            }
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/rego.js
  var require_rego = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/rego.js"(exports, module) {
      "use strict";
      module.exports = rego;
      rego.displayName = "rego";
      rego.aliases = [];
      function rego(Prism) {
        Prism.languages.rego = {
          comment: /#.*/,
          property: {
            pattern: /(^|[^\\.])(?:"(?:\\.|[^\\"\r\n])*"|`[^`]*`|\b[a-z_]\w*\b)(?=\s*:(?!=))/i,
            lookbehind: true,
            greedy: true
          },
          string: {
            pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"|`[^`]*`/,
            lookbehind: true,
            greedy: true
          },
          keyword: /\b(?:as|default|else|import|not|null|package|set(?=\s*\()|some|with)\b/,
          boolean: /\b(?:false|true)\b/,
          function: {
            pattern: /\b[a-z_]\w*\b(?:\s*\.\s*\b[a-z_]\w*\b)*(?=\s*\()/i,
            inside: {
              namespace: /\b\w+\b(?=\s*\.)/,
              punctuation: /\./
            }
          },
          number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
          operator: /[-+*/%|&]|[<>:=]=?|!=|\b_\b/,
          punctuation: /[,;.\[\]{}()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/renpy.js
  var require_renpy = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/renpy.js"(exports, module) {
      "use strict";
      module.exports = renpy;
      renpy.displayName = "renpy";
      renpy.aliases = ["rpy"];
      function renpy(Prism) {
        Prism.languages.renpy = {
          comment: {
            pattern: /(^|[^\\])#.+/,
            lookbehind: true
          },
          string: {
            pattern: /("""|''')[\s\S]+?\1|("|')(?:\\.|(?!\2)[^\\])*\2|(?:^#?(?:(?:[0-9a-fA-F]){3}|[0-9a-fA-F]{6})$)/m,
            greedy: true
          },
          function: /\b[a-z_]\w*(?=\()/i,
          property: /\b(?:Update|UpdateVersion|action|activate_sound|adv_nvl_transition|after_load_transition|align|alpha|alt|anchor|antialias|area|auto|background|bar_invert|bar_resizing|bar_vertical|black_color|bold|bottom_bar|bottom_gutter|bottom_margin|bottom_padding|box_reverse|box_wrap|can_update|caret|child|color|crop|default_afm_enable|default_afm_time|default_fullscreen|default_text_cps|developer|directory_name|drag_handle|drag_joined|drag_name|drag_raise|draggable|dragged|drop_shadow|drop_shadow_color|droppable|dropped|easein|easeout|edgescroll|end_game_transition|end_splash_transition|enter_replay_transition|enter_sound|enter_transition|enter_yesno_transition|executable_name|exit_replay_transition|exit_sound|exit_transition|exit_yesno_transition|fadein|fadeout|first_indent|first_spacing|fit_first|focus|focus_mask|font|foreground|game_main_transition|get_installed_packages|google_play_key|google_play_salt|ground|has_music|has_sound|has_voice|height|help|hinting|hover|hover_background|hover_color|hover_sound|hovered|hyperlink_functions|idle|idle_color|image_style|include_update|insensitive|insensitive_background|insensitive_color|inside|intra_transition|italic|justify|kerning|keyboard_focus|language|layer_clipping|layers|layout|left_bar|left_gutter|left_margin|left_padding|length|line_leading|line_overlap_split|line_spacing|linear|main_game_transition|main_menu_music|maximum|min_width|minimum|minwidth|modal|mouse|mousewheel|name|narrator_menu|newline_indent|nvl_adv_transition|offset|order_reverse|outlines|overlay_functions|pos|position|prefix|radius|range|rest_indent|right_bar|right_gutter|right_margin|right_padding|rotate|rotate_pad|ruby_style|sample_sound|save_directory|say_attribute_transition|screen_height|screen_width|scrollbars|selected_hover|selected_hover_color|selected_idle|selected_idle_color|selected_insensitive|show_side_image|show_two_window|side_spacing|side_xpos|side_ypos|size|size_group|slow_cps|slow_cps_multiplier|spacing|strikethrough|subpixel|text_align|text_style|text_xpos|text_y_fudge|text_ypos|thumb|thumb_offset|thumb_shadow|thumbnail_height|thumbnail_width|time|top_bar|top_gutter|top_margin|top_padding|translations|underline|unscrollable|update|value|version|version_name|version_tuple|vertical|width|window_hide_transition|window_icon|window_left_padding|window_show_transition|window_title|windows_icon|xadjustment|xalign|xanchor|xanchoraround|xaround|xcenter|xfill|xinitial|xmargin|xmaximum|xminimum|xoffset|xofsset|xpadding|xpos|xsize|xzoom|yadjustment|yalign|yanchor|yanchoraround|yaround|ycenter|yfill|yinitial|ymargin|ymaximum|yminimum|yoffset|ypadding|ypos|ysize|ysizexysize|yzoom|zoom|zorder)\b/,
          tag: /\b(?:bar|block|button|buttoscreenn|drag|draggroup|fixed|frame|grid|[hv]box|hotbar|hotspot|image|imagebutton|imagemap|input|key|label|menu|mm_menu_frame|mousearea|nvl|parallel|screen|self|side|tag|text|textbutton|timer|vbar|viewport|window)\b|\$/,
          keyword: /\b(?:None|add|adjustment|alignaround|allow|angle|animation|around|as|assert|behind|box_layout|break|build|cache|call|center|changed|child_size|choice|circles|class|clear|clicked|clipping|clockwise|config|contains|continue|corner1|corner2|counterclockwise|def|default|define|del|delay|disabled|disabled_text|dissolve|elif|else|event|except|exclude|exec|expression|fade|finally|for|from|function|global|gm_root|has|hide|id|if|import|in|init|is|jump|knot|lambda|left|less_rounded|mm_root|movie|music|null|on|onlayer|pass|pause|persistent|play|print|python|queue|raise|random|renpy|repeat|return|right|rounded_window|scene|scope|set|show|slow|slow_abortable|slow_done|sound|stop|store|style|style_group|substitute|suffix|theme|transform|transform_anchor|transpose|try|ui|unhovered|updater|use|voice|while|widget|widget_hover|widget_selected|widget_text|yield)\b/,
          boolean: /\b(?:[Ff]alse|[Tt]rue)\b/,
          number: /(?:\b(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?)|\B\.\d+)(?:e[+-]?\d+)?j?/i,
          operator: /[-+%=]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]|\b(?:and|at|not|or|with)\b/,
          punctuation: /[{}[\];(),.:]/
        };
        Prism.languages.rpy = Prism.languages.renpy;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/rest.js
  var require_rest = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/rest.js"(exports, module) {
      "use strict";
      module.exports = rest;
      rest.displayName = "rest";
      rest.aliases = [];
      function rest(Prism) {
        Prism.languages.rest = {
          table: [
            {
              pattern: /(^[\t ]*)(?:\+[=-]+)+\+(?:\r?\n|\r)(?:\1[+|].+[+|](?:\r?\n|\r))+\1(?:\+[=-]+)+\+/m,
              lookbehind: true,
              inside: {
                punctuation: /\||(?:\+[=-]+)+\+/
              }
            },
            {
              pattern: /(^[\t ]*)=+ [ =]*=(?:(?:\r?\n|\r)\1.+)+(?:\r?\n|\r)\1=+ [ =]*=(?=(?:\r?\n|\r){2}|\s*$)/m,
              lookbehind: true,
              inside: {
                punctuation: /[=-]+/
              }
            }
          ],
          "substitution-def": {
            pattern: /(^[\t ]*\.\. )\|(?:[^|\s](?:[^|]*[^|\s])?)\| [^:]+::/m,
            lookbehind: true,
            inside: {
              substitution: {
                pattern: /^\|(?:[^|\s]|[^|\s][^|]*[^|\s])\|/,
                alias: "attr-value",
                inside: {
                  punctuation: /^\||\|$/
                }
              },
              directive: {
                pattern: /( )(?! )[^:]+::/,
                lookbehind: true,
                alias: "function",
                inside: {
                  punctuation: /::$/
                }
              }
            }
          },
          "link-target": [
            {
              pattern: /(^[\t ]*\.\. )\[[^\]]+\]/m,
              lookbehind: true,
              alias: "string",
              inside: {
                punctuation: /^\[|\]$/
              }
            },
            {
              pattern: /(^[\t ]*\.\. )_(?:`[^`]+`|(?:[^:\\]|\\.)+):/m,
              lookbehind: true,
              alias: "string",
              inside: {
                punctuation: /^_|:$/
              }
            }
          ],
          directive: {
            pattern: /(^[\t ]*\.\. )[^:]+::/m,
            lookbehind: true,
            alias: "function",
            inside: {
              punctuation: /::$/
            }
          },
          comment: {
            pattern: /(^[\t ]*\.\.)(?:(?: .+)?(?:(?:\r?\n|\r).+)+| .+)(?=(?:\r?\n|\r){2}|$)/m,
            lookbehind: true
          },
          title: [
            {
              pattern: /^(([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+)(?:\r?\n|\r).+(?:\r?\n|\r)\1$/m,
              inside: {
                punctuation: /^[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+|[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,
                important: /.+/
              }
            },
            {
              pattern: /(^|(?:\r?\n|\r){2}).+(?:\r?\n|\r)([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2+(?=\r?\n|\r|$)/,
              lookbehind: true,
              inside: {
                punctuation: /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]+$/,
                important: /.+/
              }
            }
          ],
          hr: {
            pattern: /((?:\r?\n|\r){2})([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\2{3,}(?=(?:\r?\n|\r){2})/,
            lookbehind: true,
            alias: "punctuation"
          },
          field: {
            pattern: /(^[\t ]*):[^:\r\n]+:(?= )/m,
            lookbehind: true,
            alias: "attr-name"
          },
          "command-line-option": {
            pattern: /(^[\t ]*)(?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?(?:, (?:[+-][a-z\d]|(?:--|\/)[a-z\d-]+)(?:[ =](?:[a-z][\w-]*|<[^<>]+>))?)*(?=(?:\r?\n|\r)? {2,}\S)/im,
            lookbehind: true,
            alias: "symbol"
          },
          "literal-block": {
            pattern: /::(?:\r?\n|\r){2}([ \t]+)(?![ \t]).+(?:(?:\r?\n|\r)\1.+)*/,
            inside: {
              "literal-block-punctuation": {
                pattern: /^::/,
                alias: "punctuation"
              }
            }
          },
          "quoted-literal-block": {
            pattern: /::(?:\r?\n|\r){2}([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]).*(?:(?:\r?\n|\r)\1.*)*/,
            inside: {
              "literal-block-punctuation": {
                pattern: /^(?:::|([!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~])\1*)/m,
                alias: "punctuation"
              }
            }
          },
          "list-bullet": {
            pattern: /(^[\t ]*)(?:[*+\-•‣⁃]|\(?(?:\d+|[a-z]|[ivxdclm]+)\)|(?:\d+|[a-z]|[ivxdclm]+)\.)(?= )/im,
            lookbehind: true,
            alias: "punctuation"
          },
          "doctest-block": {
            pattern: /(^[\t ]*)>>> .+(?:(?:\r?\n|\r).+)*/m,
            lookbehind: true,
            inside: {
              punctuation: /^>>>/
            }
          },
          inline: [
            {
              pattern: /(^|[\s\-:\/'"<(\[{])(?::[^:]+:`.*?`|`.*?`:[^:]+:|(\*\*?|``?|\|)(?!\s)(?:(?!\2).)*\S\2(?=[\s\-.,:;!?\\\/'")\]}]|$))/m,
              lookbehind: true,
              inside: {
                bold: {
                  pattern: /(^\*\*).+(?=\*\*$)/,
                  lookbehind: true
                },
                italic: {
                  pattern: /(^\*).+(?=\*$)/,
                  lookbehind: true
                },
                "inline-literal": {
                  pattern: /(^``).+(?=``$)/,
                  lookbehind: true,
                  alias: "symbol"
                },
                role: {
                  pattern: /^:[^:]+:|:[^:]+:$/,
                  alias: "function",
                  inside: {
                    punctuation: /^:|:$/
                  }
                },
                "interpreted-text": {
                  pattern: /(^`).+(?=`$)/,
                  lookbehind: true,
                  alias: "attr-value"
                },
                substitution: {
                  pattern: /(^\|).+(?=\|$)/,
                  lookbehind: true,
                  alias: "attr-value"
                },
                punctuation: /\*\*?|``?|\|/
              }
            }
          ],
          link: [
            {
              pattern: /\[[^\[\]]+\]_(?=[\s\-.,:;!?\\\/'")\]}]|$)/,
              alias: "string",
              inside: {
                punctuation: /^\[|\]_$/
              }
            },
            {
              pattern: /(?:\b[a-z\d]+(?:[_.:+][a-z\d]+)*_?_|`[^`]+`_?_|_`[^`]+`)(?=[\s\-.,:;!?\\\/'")\]}]|$)/i,
              alias: "string",
              inside: {
                punctuation: /^_?`|`$|`?_?_$/
              }
            }
          ],
          punctuation: {
            pattern: /(^[\t ]*)(?:\|(?= |$)|(?:---?|—|\.\.|__)(?= )|\.\.$)/m,
            lookbehind: true
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/rip.js
  var require_rip = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/rip.js"(exports, module) {
      "use strict";
      module.exports = rip;
      rip.displayName = "rip";
      rip.aliases = [];
      function rip(Prism) {
        Prism.languages.rip = {
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          char: {
            pattern: /\B`[^\s`'",.:;#\/\\()<>\[\]{}]\b/,
            greedy: true
          },
          string: {
            pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          regex: {
            pattern: /(^|[^/])\/(?!\/)(?:\[[^\n\r\]]*\]|\\.|[^/\\\r\n\[])+\/(?=\s*(?:$|[\r\n,.;})]))/,
            lookbehind: true,
            greedy: true
          },
          keyword: /(?:=>|->)|\b(?:case|catch|class|else|exit|finally|if|raise|return|switch|try)\b/,
          builtin: /@|\bSystem\b/,
          boolean: /\b(?:false|true)\b/,
          date: /\b\d{4}-\d{2}-\d{2}\b/,
          time: /\b\d{2}:\d{2}:\d{2}\b/,
          datetime: /\b\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\b/,
          symbol: /:[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/,
          number: /[+-]?\b(?:\d+\.\d+|\d+)\b/,
          punctuation: /(?:\.{2,3})|[`,.:;=\/\\()<>\[\]{}]/,
          reference: /[^\d\s`'",.:;#\/\\()<>\[\]{}][^\s`'",.:;#\/\\()<>\[\]{}]*/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/roboconf.js
  var require_roboconf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/roboconf.js"(exports, module) {
      "use strict";
      module.exports = roboconf;
      roboconf.displayName = "roboconf";
      roboconf.aliases = [];
      function roboconf(Prism) {
        Prism.languages.roboconf = {
          comment: /#.*/,
          keyword: {
            pattern: /(^|\s)(?:(?:external|import)\b|(?:facet|instance of)(?=[ \t]+[\w-]+[ \t]*\{))/,
            lookbehind: true
          },
          component: {
            pattern: /[\w-]+(?=[ \t]*\{)/,
            alias: "variable"
          },
          property: /[\w.-]+(?=[ \t]*:)/,
          value: {
            pattern: /(=[ \t]*(?![ \t]))[^,;]+/,
            lookbehind: true,
            alias: "attr-value"
          },
          optional: {
            pattern: /\(optional\)/,
            alias: "builtin"
          },
          wildcard: {
            pattern: /(\.)\*/,
            lookbehind: true,
            alias: "operator"
          },
          punctuation: /[{},.;:=]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/robotframework.js
  var require_robotframework = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/robotframework.js"(exports, module) {
      "use strict";
      module.exports = robotframework;
      robotframework.displayName = "robotframework";
      robotframework.aliases = [];
      function robotframework(Prism) {
        ;
        (function(Prism2) {
          var comment2 = {
            pattern: /(^[ \t]*| {2}|\t)#.*/m,
            lookbehind: true,
            greedy: true
          };
          var variable = {
            pattern: /((?:^|[^\\])(?:\\{2})*)[$@&%]\{(?:[^{}\r\n]|\{[^{}\r\n]*\})*\}/,
            lookbehind: true,
            inside: {
              punctuation: /^[$@&%]\{|\}$/
            }
          };
          function createSection(name, inside) {
            var extendecInside = {};
            extendecInside["section-header"] = {
              pattern: /^ ?\*{3}.+?\*{3}/,
              alias: "keyword"
            };
            for (var token in inside) {
              extendecInside[token] = inside[token];
            }
            extendecInside["tag"] = {
              pattern: /([\r\n](?: {2}|\t)[ \t]*)\[[-\w]+\]/,
              lookbehind: true,
              inside: {
                punctuation: /\[|\]/
              }
            };
            extendecInside["variable"] = variable;
            extendecInside["comment"] = comment2;
            return {
              pattern: RegExp(
                /^ ?\*{3}[ \t]*<name>[ \t]*\*{3}(?:.|[\r\n](?!\*{3}))*/.source.replace(
                  /<name>/g,
                  function() {
                    return name;
                  }
                ),
                "im"
              ),
              alias: "section",
              inside: extendecInside
            };
          }
          var docTag = {
            pattern: /(\[Documentation\](?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
            lookbehind: true,
            alias: "string"
          };
          var testNameLike = {
            pattern: /([\r\n] ?)(?!#)(?:\S(?:[ \t]\S)*)+/,
            lookbehind: true,
            alias: "function",
            inside: {
              variable
            }
          };
          var testPropertyLike = {
            pattern: /([\r\n](?: {2}|\t)[ \t]*)(?!\[|\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
            lookbehind: true,
            inside: {
              variable
            }
          };
          Prism2.languages["robotframework"] = {
            settings: createSection("Settings", {
              documentation: {
                pattern: /([\r\n] ?Documentation(?: {2}|\t)[ \t]*)(?![ \t]|#)(?:.|(?:\r\n?|\n)[ \t]*\.{3})+/,
                lookbehind: true,
                alias: "string"
              },
              property: {
                pattern: /([\r\n] ?)(?!\.{3}|#)(?:\S(?:[ \t]\S)*)+/,
                lookbehind: true
              }
            }),
            variables: createSection("Variables"),
            "test-cases": createSection("Test Cases", {
              "test-name": testNameLike,
              documentation: docTag,
              property: testPropertyLike
            }),
            keywords: createSection("Keywords", {
              "keyword-name": testNameLike,
              documentation: docTag,
              property: testPropertyLike
            }),
            tasks: createSection("Tasks", {
              "task-name": testNameLike,
              documentation: docTag,
              property: testPropertyLike
            }),
            comment: comment2
          };
          Prism2.languages.robot = Prism2.languages["robotframework"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/rust.js
  var require_rust = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/rust.js"(exports, module) {
      "use strict";
      module.exports = rust;
      rust.displayName = "rust";
      rust.aliases = [];
      function rust(Prism) {
        ;
        (function(Prism2) {
          var multilineComment = /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|<self>)*\*\//.source;
          for (var i = 0; i < 2; i++) {
            multilineComment = multilineComment.replace(/<self>/g, function() {
              return multilineComment;
            });
          }
          multilineComment = multilineComment.replace(/<self>/g, function() {
            return /[^\s\S]/.source;
          });
          Prism2.languages.rust = {
            comment: [
              {
                pattern: RegExp(/(^|[^\\])/.source + multilineComment),
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /(^|[^\\:])\/\/.*/,
                lookbehind: true,
                greedy: true
              }
            ],
            string: {
              pattern: /b?"(?:\\[\s\S]|[^\\"])*"|b?r(#*)"(?:[^"]|"(?!\1))*"\1/,
              greedy: true
            },
            char: {
              pattern: /b?'(?:\\(?:x[0-7][\da-fA-F]|u\{(?:[\da-fA-F]_*){1,6}\}|.)|[^\\\r\n\t'])'/,
              greedy: true
            },
            attribute: {
              pattern: /#!?\[(?:[^\[\]"]|"(?:\\[\s\S]|[^\\"])*")*\]/,
              greedy: true,
              alias: "attr-name",
              inside: {
                string: null
              }
            },
            "closure-params": {
              pattern: /([=(,:]\s*|\bmove\s*)\|[^|]*\||\|[^|]*\|(?=\s*(?:\{|->))/,
              lookbehind: true,
              greedy: true,
              inside: {
                "closure-punctuation": {
                  pattern: /^\||\|$/,
                  alias: "punctuation"
                },
                rest: null
              }
            },
            "lifetime-annotation": {
              pattern: /'\w+/,
              alias: "symbol"
            },
            "fragment-specifier": {
              pattern: /(\$\w+:)[a-z]+/,
              lookbehind: true,
              alias: "punctuation"
            },
            variable: /\$\w+/,
            "function-definition": {
              pattern: /(\bfn\s+)\w+/,
              lookbehind: true,
              alias: "function"
            },
            "type-definition": {
              pattern: /(\b(?:enum|struct|trait|type|union)\s+)\w+/,
              lookbehind: true,
              alias: "class-name"
            },
            "module-declaration": [
              {
                pattern: /(\b(?:crate|mod)\s+)[a-z][a-z_\d]*/,
                lookbehind: true,
                alias: "namespace"
              },
              {
                pattern: /(\b(?:crate|self|super)\s*)::\s*[a-z][a-z_\d]*\b(?:\s*::(?:\s*[a-z][a-z_\d]*\s*::)*)?/,
                lookbehind: true,
                alias: "namespace",
                inside: {
                  punctuation: /::/
                }
              }
            ],
            keyword: [
              /\b(?:Self|abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,
              /\b(?:bool|char|f(?:32|64)|[ui](?:8|16|32|64|128|size)|str)\b/
            ],
            function: /\b[a-z_]\w*(?=\s*(?:::\s*<|\())/,
            macro: {
              pattern: /\b\w+!/,
              alias: "property"
            },
            constant: /\b[A-Z_][A-Z_\d]+\b/,
            "class-name": /\b[A-Z]\w*\b/,
            namespace: {
              pattern: /(?:\b[a-z][a-z_\d]*\s*::\s*)*\b[a-z][a-z_\d]*\s*::(?!\s*<)/,
              inside: {
                punctuation: /::/
              }
            },
            number: /\b(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:(?:\d(?:_?\d)*)?\.)?\d(?:_?\d)*(?:[Ee][+-]?\d+)?)(?:_?(?:f32|f64|[iu](?:8|16|32|64|size)?))?\b/,
            boolean: /\b(?:false|true)\b/,
            punctuation: /->|\.\.=|\.{1,3}|::|[{}[\];(),:]/,
            operator: /[-+*\/%!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?=?|[@?]/
          };
          Prism2.languages.rust["closure-params"].inside.rest = Prism2.languages.rust;
          Prism2.languages.rust["attribute"].inside["string"] = Prism2.languages.rust["string"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/sas.js
  var require_sas = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/sas.js"(exports, module) {
      "use strict";
      module.exports = sas;
      sas.displayName = "sas";
      sas.aliases = [];
      function sas(Prism) {
        ;
        (function(Prism2) {
          var stringPattern = /(?:"(?:""|[^"])*"(?!")|'(?:''|[^'])*'(?!'))/.source;
          var number3 = /\b(?:\d[\da-f]*x|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i;
          var numericConstant = {
            pattern: RegExp(stringPattern + "[bx]"),
            alias: "number"
          };
          var macroVariable = {
            pattern: /&[a-z_]\w*/i
          };
          var macroKeyword = {
            pattern: /((?:^|\s|=|\())%(?:ABORT|BY|CMS|COPY|DISPLAY|DO|ELSE|END|EVAL|GLOBAL|GO|GOTO|IF|INC|INCLUDE|INDEX|INPUT|KTRIM|LENGTH|LET|LIST|LOCAL|PUT|QKTRIM|QSCAN|QSUBSTR|QSYSFUNC|QUPCASE|RETURN|RUN|SCAN|SUBSTR|SUPERQ|SYMDEL|SYMEXIST|SYMGLOBL|SYMLOCAL|SYSCALL|SYSEVALF|SYSEXEC|SYSFUNC|SYSGET|SYSRPUT|THEN|TO|TSO|UNQUOTE|UNTIL|UPCASE|WHILE|WINDOW)\b/i,
            lookbehind: true,
            alias: "keyword"
          };
          var step = {
            pattern: /(^|\s)(?:proc\s+\w+|data(?!=)|quit|run)\b/i,
            alias: "keyword",
            lookbehind: true
          };
          var comment2 = [
            /\/\*[\s\S]*?\*\//,
            {
              pattern: /(^[ \t]*|;\s*)\*[^;]*;/m,
              lookbehind: true
            }
          ];
          var string3 = {
            pattern: RegExp(stringPattern),
            greedy: true
          };
          var punctuation2 = /[$%@.(){}\[\];,\\]/;
          var func = {
            pattern: /%?\b\w+(?=\()/,
            alias: "keyword"
          };
          var args = {
            function: func,
            "arg-value": {
              pattern: /(=\s*)[A-Z\.]+/i,
              lookbehind: true
            },
            operator: /=/,
            "macro-variable": macroVariable,
            arg: {
              pattern: /[A-Z]+/i,
              alias: "keyword"
            },
            number: number3,
            "numeric-constant": numericConstant,
            punctuation: punctuation2,
            string: string3
          };
          var format = {
            pattern: /\b(?:format|put)\b=?[\w'$.]+/i,
            inside: {
              keyword: /^(?:format|put)(?==)/i,
              equals: /=/,
              format: {
                pattern: /(?:\w|\$\d)+\.\d?/,
                alias: "number"
              }
            }
          };
          var altformat = {
            pattern: /\b(?:format|put)\s+[\w']+(?:\s+[$.\w]+)+(?=;)/i,
            inside: {
              keyword: /^(?:format|put)/i,
              format: {
                pattern: /[\w$]+\.\d?/,
                alias: "number"
              }
            }
          };
          var globalStatements = {
            pattern: /((?:^|\s)=?)(?:catname|checkpoint execute_always|dm|endsas|filename|footnote|%include|libname|%list|lock|missing|options|page|resetline|%run|sasfile|skip|sysecho|title\d?)\b/i,
            lookbehind: true,
            alias: "keyword"
          };
          var submitStatement = {
            pattern: /(^|\s)(?:submit(?:\s+(?:load|norun|parseonly))?|endsubmit)\b/i,
            lookbehind: true,
            alias: "keyword"
          };
          var actionSets = /aStore|accessControl|aggregation|audio|autotune|bayesianNetClassifier|bioMedImage|boolRule|builtins|cardinality|cdm|clustering|conditionalRandomFields|configuration|copula|countreg|dataDiscovery|dataPreprocess|dataSciencePilot|dataStep|decisionTree|deduplication|deepLearn|deepNeural|deepRnn|ds2|ecm|entityRes|espCluster|explainModel|factmac|fastKnn|fcmpact|fedSql|freqTab|gVarCluster|gam|gleam|graphSemiSupLearn|hiddenMarkovModel|hyperGroup|ica|image|iml|kernalPca|langModel|ldaTopic|loadStreams|mbc|mixed|mlTools|modelPublishing|network|neuralNet|nmf|nonParametricBayes|nonlinear|optNetwork|optimization|panel|pca|percentile|phreg|pls|qkb|qlim|quantreg|recommend|regression|reinforcementLearn|robustPca|ruleMining|sampling|sandwich|sccasl|search(?:Analytics)?|sentimentAnalysis|sequence|session(?:Prop)?|severity|simSystem|simple|smartData|sparkEmbeddedProcess|sparseML|spatialreg|spc|stabilityMonitoring|svDataDescription|svm|table|text(?:Filters|Frequency|Mining|Parse|Rule(?:Develop|Score)|Topic|Util)|timeData|transpose|tsInfo|tsReconcile|uniTimeSeries|varReduce/.source;
          var casActions = {
            pattern: RegExp(
              /(^|\s)(?:action\s+)?(?:<act>)\.[a-z]+\b[^;]+/.source.replace(
                /<act>/g,
                function() {
                  return actionSets;
                }
              ),
              "i"
            ),
            lookbehind: true,
            inside: {
              keyword: RegExp(
                /(?:<act>)\.[a-z]+\b/.source.replace(/<act>/g, function() {
                  return actionSets;
                }),
                "i"
              ),
              action: {
                pattern: /(?:action)/i,
                alias: "keyword"
              },
              comment: comment2,
              function: func,
              "arg-value": args["arg-value"],
              operator: args.operator,
              argument: args.arg,
              number: number3,
              "numeric-constant": numericConstant,
              punctuation: punctuation2,
              string: string3
            }
          };
          var keywords = {
            pattern: /((?:^|\s)=?)(?:after|analysis|and|array|barchart|barwidth|begingraph|by|call|cas|cbarline|cfill|class(?:lev)?|close|column|computed?|contains|continue|data(?==)|define|delete|describe|document|do\s+over|do|dol|drop|dul|else|end(?:comp|source)?|entryTitle|eval(?:uate)?|exec(?:ute)?|exit|file(?:name)?|fill(?:attrs)?|flist|fnc|function(?:list)?|global|goto|group(?:by)?|headline|headskip|histogram|if|infile|keep|keylabel|keyword|label|layout|leave|legendlabel|length|libname|loadactionset|merge|midpoints|_?null_|name|noobs|nowd|ods|options|or|otherwise|out(?:put)?|over(?:lay)?|plot|print|put|raise|ranexp|rannor|rbreak|retain|return|select|session|sessref|set|source|statgraph|sum|summarize|table|temp|terminate|then\s+do|then|title\d?|to|var|when|where|xaxisopts|y2axisopts|yaxisopts)\b/i,
            lookbehind: true
          };
          Prism2.languages.sas = {
            datalines: {
              pattern: /^([ \t]*)(?:cards|(?:data)?lines);[\s\S]+?^[ \t]*;/im,
              lookbehind: true,
              alias: "string",
              inside: {
                keyword: {
                  pattern: /^(?:cards|(?:data)?lines)/i
                },
                punctuation: /;/
              }
            },
            "proc-sql": {
              pattern: /(^proc\s+(?:fed)?sql(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|data|quit|run);|(?![\s\S]))/im,
              lookbehind: true,
              inside: {
                sql: {
                  pattern: RegExp(
                    /^[ \t]*(?:select|alter\s+table|(?:create|describe|drop)\s+(?:index|table(?:\s+constraints)?|view)|create\s+unique\s+index|insert\s+into|update)(?:<str>|[^;"'])+;/.source.replace(
                      /<str>/g,
                      function() {
                        return stringPattern;
                      }
                    ),
                    "im"
                  ),
                  alias: "language-sql",
                  inside: Prism2.languages.sql
                },
                "global-statements": globalStatements,
                "sql-statements": {
                  pattern: /(^|\s)(?:disconnect\s+from|begin|commit|exec(?:ute)?|reset|rollback|validate)\b/i,
                  lookbehind: true,
                  alias: "keyword"
                },
                number: number3,
                "numeric-constant": numericConstant,
                punctuation: punctuation2,
                string: string3
              }
            },
            "proc-groovy": {
              pattern: /(^proc\s+groovy(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|data|quit|run);|(?![\s\S]))/im,
              lookbehind: true,
              inside: {
                comment: comment2,
                groovy: {
                  pattern: RegExp(
                    /(^[ \t]*submit(?:\s+(?:load|norun|parseonly))?)(?:<str>|[^"'])+?(?=endsubmit;)/.source.replace(
                      /<str>/g,
                      function() {
                        return stringPattern;
                      }
                    ),
                    "im"
                  ),
                  lookbehind: true,
                  alias: "language-groovy",
                  inside: Prism2.languages.groovy
                },
                keyword: keywords,
                "submit-statement": submitStatement,
                "global-statements": globalStatements,
                number: number3,
                "numeric-constant": numericConstant,
                punctuation: punctuation2,
                string: string3
              }
            },
            "proc-lua": {
              pattern: /(^proc\s+lua(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|data|quit|run);|(?![\s\S]))/im,
              lookbehind: true,
              inside: {
                comment: comment2,
                lua: {
                  pattern: RegExp(
                    /(^[ \t]*submit(?:\s+(?:load|norun|parseonly))?)(?:<str>|[^"'])+?(?=endsubmit;)/.source.replace(
                      /<str>/g,
                      function() {
                        return stringPattern;
                      }
                    ),
                    "im"
                  ),
                  lookbehind: true,
                  alias: "language-lua",
                  inside: Prism2.languages.lua
                },
                keyword: keywords,
                "submit-statement": submitStatement,
                "global-statements": globalStatements,
                number: number3,
                "numeric-constant": numericConstant,
                punctuation: punctuation2,
                string: string3
              }
            },
            "proc-cas": {
              pattern: /(^proc\s+cas(?:\s+[\w|=]+)?;)[\s\S]+?(?=^(?:proc\s+\w+|quit|data);|(?![\s\S]))/im,
              lookbehind: true,
              inside: {
                comment: comment2,
                "statement-var": {
                  pattern: /((?:^|\s)=?)saveresult\s[^;]+/im,
                  lookbehind: true,
                  inside: {
                    statement: {
                      pattern: /^saveresult\s+\S+/i,
                      inside: {
                        keyword: /^(?:saveresult)/i
                      }
                    },
                    rest: args
                  }
                },
                "cas-actions": casActions,
                statement: {
                  pattern: /((?:^|\s)=?)(?:default|(?:un)?set|on|output|upload)[^;]+/im,
                  lookbehind: true,
                  inside: args
                },
                step,
                keyword: keywords,
                function: func,
                format,
                altformat,
                "global-statements": globalStatements,
                number: number3,
                "numeric-constant": numericConstant,
                punctuation: punctuation2,
                string: string3
              }
            },
            "proc-args": {
              pattern: RegExp(
                /(^proc\s+\w+\s+)(?!\s)(?:[^;"']|<str>)+;/.source.replace(
                  /<str>/g,
                  function() {
                    return stringPattern;
                  }
                ),
                "im"
              ),
              lookbehind: true,
              inside: args
            },
            "macro-keyword": macroKeyword,
            "macro-variable": macroVariable,
            "macro-string-functions": {
              pattern: /((?:^|\s|=))%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)\(.*?(?:[^%]\))/i,
              lookbehind: true,
              inside: {
                function: {
                  pattern: /%(?:BQUOTE|NRBQUOTE|NRQUOTE|NRSTR|QUOTE|STR)/i,
                  alias: "keyword"
                },
                "macro-keyword": macroKeyword,
                "macro-variable": macroVariable,
                "escaped-char": {
                  pattern: /%['"()<>=¬^~;,#]/
                },
                punctuation: punctuation2
              }
            },
            "macro-declaration": {
              pattern: /^%macro[^;]+(?=;)/im,
              inside: {
                keyword: /%macro/i
              }
            },
            "macro-end": {
              pattern: /^%mend[^;]+(?=;)/im,
              inside: {
                keyword: /%mend/i
              }
            },
            macro: {
              pattern: /%_\w+(?=\()/,
              alias: "keyword"
            },
            input: {
              pattern: /\binput\s[-\w\s/*.$&]+;/i,
              inside: {
                input: {
                  alias: "keyword",
                  pattern: /^input/i
                },
                comment: comment2,
                number: number3,
                "numeric-constant": numericConstant
              }
            },
            "options-args": {
              pattern: /(^options)[-'"|/\\<>*+=:()\w\s]*(?=;)/im,
              lookbehind: true,
              inside: args
            },
            "cas-actions": casActions,
            comment: comment2,
            function: func,
            format,
            altformat,
            "numeric-constant": numericConstant,
            datetime: {
              pattern: RegExp(stringPattern + "(?:dt?|t)"),
              alias: "number"
            },
            string: string3,
            step,
            keyword: keywords,
            "operator-keyword": {
              pattern: /\b(?:eq|ge|gt|in|le|lt|ne|not)\b/i,
              alias: "operator"
            },
            number: number3,
            operator: /\*\*?|\|\|?|!!?|¦¦?|<[>=]?|>[<=]?|[-+\/=&]|[~¬^]=?/,
            punctuation: punctuation2
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/sass.js
  var require_sass = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/sass.js"(exports, module) {
      "use strict";
      module.exports = sass;
      sass.displayName = "sass";
      sass.aliases = [];
      function sass(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.sass = Prism2.languages.extend("css", {
            comment: {
              pattern: /^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,
              lookbehind: true,
              greedy: true
            }
          });
          Prism2.languages.insertBefore("sass", "atrule", {
            "atrule-line": {
              pattern: /^(?:[ \t]*)[@+=].+/m,
              greedy: true,
              inside: {
                atrule: /(?:@[\w-]+|[+=])/
              }
            }
          });
          delete Prism2.languages.sass.atrule;
          var variable = /\$[-\w]+|#\{\$[-\w]+\}/;
          var operator = [
            /[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/,
            {
              pattern: /(\s)-(?=\s)/,
              lookbehind: true
            }
          ];
          Prism2.languages.insertBefore("sass", "property", {
            "variable-line": {
              pattern: /^[ \t]*\$.+/m,
              greedy: true,
              inside: {
                punctuation: /:/,
                variable,
                operator
              }
            },
            "property-line": {
              pattern: /^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,
              greedy: true,
              inside: {
                property: [
                  /[^:\s]+(?=\s*:)/,
                  {
                    pattern: /(:)[^:\s]+/,
                    lookbehind: true
                  }
                ],
                punctuation: /:/,
                variable,
                operator,
                important: Prism2.languages.sass.important
              }
            }
          });
          delete Prism2.languages.sass.property;
          delete Prism2.languages.sass.important;
          Prism2.languages.insertBefore("sass", "punctuation", {
            selector: {
              pattern: /^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,
              lookbehind: true,
              greedy: true
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/scala.js
  var require_scala = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/scala.js"(exports, module) {
      "use strict";
      var refractorJava = require_java();
      module.exports = scala;
      scala.displayName = "scala";
      scala.aliases = [];
      function scala(Prism) {
        Prism.register(refractorJava);
        Prism.languages.scala = Prism.languages.extend("java", {
          "triple-quoted-string": {
            pattern: /"""[\s\S]*?"""/,
            greedy: true,
            alias: "string"
          },
          string: {
            pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          keyword: /<-|=>|\b(?:abstract|case|catch|class|def|do|else|extends|final|finally|for|forSome|if|implicit|import|lazy|match|new|null|object|override|package|private|protected|return|sealed|self|super|this|throw|trait|try|type|val|var|while|with|yield)\b/,
          number: /\b0x(?:[\da-f]*\.)?[\da-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e\d+)?[dfl]?/i,
          builtin: /\b(?:Any|AnyRef|AnyVal|Boolean|Byte|Char|Double|Float|Int|Long|Nothing|Short|String|Unit)\b/,
          symbol: /'[^\d\s\\]\w*/
        });
        Prism.languages.insertBefore("scala", "triple-quoted-string", {
          "string-interpolation": {
            pattern: /\b[a-z]\w*(?:"""(?:[^$]|\$(?:[^{]|\{(?:[^{}]|\{[^{}]*\})*\}))*?"""|"(?:[^$"\r\n]|\$(?:[^{]|\{(?:[^{}]|\{[^{}]*\})*\}))*")/i,
            greedy: true,
            inside: {
              id: {
                pattern: /^\w+/,
                greedy: true,
                alias: "function"
              },
              escape: {
                pattern: /\\\$"|\$[$"]/,
                greedy: true,
                alias: "symbol"
              },
              interpolation: {
                pattern: /\$(?:\w+|\{(?:[^{}]|\{[^{}]*\})*\})/,
                greedy: true,
                inside: {
                  punctuation: /^\$\{?|\}$/,
                  expression: {
                    pattern: /[\s\S]+/,
                    inside: Prism.languages.scala
                  }
                }
              },
              string: /[\s\S]+/
            }
          }
        });
        delete Prism.languages.scala["class-name"];
        delete Prism.languages.scala["function"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/scss.js
  var require_scss = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/scss.js"(exports, module) {
      "use strict";
      module.exports = scss;
      scss.displayName = "scss";
      scss.aliases = [];
      function scss(Prism) {
        Prism.languages.scss = Prism.languages.extend("css", {
          comment: {
            pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
            lookbehind: true
          },
          atrule: {
            pattern: /@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,
            inside: {
              rule: /@[\w-]+/
            }
          },
          url: /(?:[-a-z]+-)?url(?=\()/i,
          selector: {
            pattern: /(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,
            inside: {
              parent: {
                pattern: /&/,
                alias: "important"
              },
              placeholder: /%[-\w]+/,
              variable: /\$[-\w]+|#\{\$[-\w]+\}/
            }
          },
          property: {
            pattern: /(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,
            inside: {
              variable: /\$[-\w]+|#\{\$[-\w]+\}/
            }
          }
        });
        Prism.languages.insertBefore("scss", "atrule", {
          keyword: [
            /@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i,
            {
              pattern: /( )(?:from|through)(?= )/,
              lookbehind: true
            }
          ]
        });
        Prism.languages.insertBefore("scss", "important", {
          variable: /\$[-\w]+|#\{\$[-\w]+\}/
        });
        Prism.languages.insertBefore("scss", "function", {
          "module-modifier": {
            pattern: /\b(?:as|hide|show|with)\b/i,
            alias: "keyword"
          },
          placeholder: {
            pattern: /%[-\w]+/,
            alias: "selector"
          },
          statement: {
            pattern: /\B!(?:default|optional)\b/i,
            alias: "keyword"
          },
          boolean: /\b(?:false|true)\b/,
          null: {
            pattern: /\bnull\b/,
            alias: "keyword"
          },
          operator: {
            pattern: /(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,
            lookbehind: true
          }
        });
        Prism.languages.scss["atrule"].inside.rest = Prism.languages.scss;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/shell-session.js
  var require_shell_session = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/shell-session.js"(exports, module) {
      "use strict";
      var refractorBash = require_bash();
      module.exports = shellSession;
      shellSession.displayName = "shellSession";
      shellSession.aliases = [];
      function shellSession(Prism) {
        Prism.register(refractorBash);
        (function(Prism2) {
          var strings = [
            /"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/.source,
            /'[^']*'/.source,
            /\$'(?:[^'\\]|\\[\s\S])*'/.source,
            /<<-?\s*(["']?)(\w+)\1\s[\s\S]*?[\r\n]\2/.source
          ].join("|");
          Prism2.languages["shell-session"] = {
            command: {
              pattern: RegExp(
                /^/.source + "(?:" + (/[^\s@:$#%*!/\\]+@[^\r\n@:$#%*!/\\]+(?::[^\0-\x1F$#%*?"<>:;|]+)?/.source + "|" + /[/~.][^\0-\x1F$#%*?"<>@:;|]*/.source) + ")?" + /[$#%](?=\s)/.source + /(?:[^\\\r\n \t'"<$]|[ \t](?:(?!#)|#.*$)|\\(?:[^\r]|\r\n?)|\$(?!')|<(?!<)|<<str>>)+/.source.replace(
                  /<<str>>/g,
                  function() {
                    return strings;
                  }
                ),
                "m"
              ),
              greedy: true,
              inside: {
                info: {
                  pattern: /^[^#$%]+/,
                  alias: "punctuation",
                  inside: {
                    user: /^[^\s@:$#%*!/\\]+@[^\r\n@:$#%*!/\\]+/,
                    punctuation: /:/,
                    path: /[\s\S]+/
                  }
                },
                bash: {
                  pattern: /(^[$#%]\s*)\S[\s\S]*/,
                  lookbehind: true,
                  alias: "language-bash",
                  inside: Prism2.languages.bash
                },
                "shell-symbol": {
                  pattern: /^[$#%]/,
                  alias: "important"
                }
              }
            },
            output: /.(?:.*(?:[\r\n]|.$))*/
          };
          Prism2.languages["sh-session"] = Prism2.languages["shellsession"] = Prism2.languages["shell-session"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/smali.js
  var require_smali = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/smali.js"(exports, module) {
      "use strict";
      module.exports = smali;
      smali.displayName = "smali";
      smali.aliases = [];
      function smali(Prism) {
        Prism.languages.smali = {
          comment: /#.*/,
          string: {
            pattern: /"(?:[^\r\n\\"]|\\.)*"|'(?:[^\r\n\\']|\\(?:.|u[\da-fA-F]{4}))'/,
            greedy: true
          },
          "class-name": {
            pattern: /(^|[^L])L(?:(?:\w+|`[^`\r\n]*`)\/)*(?:[\w$]+|`[^`\r\n]*`)(?=\s*;)/,
            lookbehind: true,
            inside: {
              "class-name": {
                pattern: /(^L|\/)(?:[\w$]+|`[^`\r\n]*`)$/,
                lookbehind: true
              },
              namespace: {
                pattern: /^(L)(?:(?:\w+|`[^`\r\n]*`)\/)+/,
                lookbehind: true,
                inside: {
                  punctuation: /\//
                }
              },
              builtin: /^L/
            }
          },
          builtin: [
            {
              pattern: /([();\[])[BCDFIJSVZ]+/,
              lookbehind: true
            },
            {
              pattern: /([\w$>]:)[BCDFIJSVZ]/,
              lookbehind: true
            }
          ],
          keyword: [
            {
              pattern: /(\.end\s+)[\w-]+/,
              lookbehind: true
            },
            {
              pattern: /(^|[^\w.-])\.(?!\d)[\w-]+/,
              lookbehind: true
            },
            {
              pattern: /(^|[^\w.-])(?:abstract|annotation|bridge|constructor|enum|final|interface|private|protected|public|runtime|static|synthetic|system|transient)(?![\w.-])/,
              lookbehind: true
            }
          ],
          function: {
            pattern: /(^|[^\w.-])(?:\w+|<[\w$-]+>)(?=\()/,
            lookbehind: true
          },
          field: {
            pattern: /[\w$]+(?=:)/,
            alias: "variable"
          },
          register: {
            pattern: /(^|[^\w.-])[vp]\d(?![\w.-])/,
            lookbehind: true,
            alias: "variable"
          },
          boolean: {
            pattern: /(^|[^\w.-])(?:false|true)(?![\w.-])/,
            lookbehind: true
          },
          number: {
            pattern: /(^|[^/\w.-])-?(?:NAN|INFINITY|0x(?:[\dA-F]+(?:\.[\dA-F]*)?|\.[\dA-F]+)(?:p[+-]?[\dA-F]+)?|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?)[dflst]?(?![\w.-])/i,
            lookbehind: true
          },
          label: {
            pattern: /(:)\w+/,
            lookbehind: true,
            alias: "property"
          },
          operator: /->|\.\.|[\[=]/,
          punctuation: /[{}(),;:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/smalltalk.js
  var require_smalltalk = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/smalltalk.js"(exports, module) {
      "use strict";
      module.exports = smalltalk;
      smalltalk.displayName = "smalltalk";
      smalltalk.aliases = [];
      function smalltalk(Prism) {
        Prism.languages.smalltalk = {
          comment: {
            pattern: /"(?:""|[^"])*"/,
            greedy: true
          },
          char: {
            pattern: /\$./,
            greedy: true
          },
          string: {
            pattern: /'(?:''|[^'])*'/,
            greedy: true
          },
          symbol: /#[\da-z]+|#(?:-|([+\/\\*~<>=@%|&?!])\1?)|#(?=\()/i,
          "block-arguments": {
            pattern: /(\[\s*):[^\[|]*\|/,
            lookbehind: true,
            inside: {
              variable: /:[\da-z]+/i,
              punctuation: /\|/
            }
          },
          "temporary-variables": {
            pattern: /\|[^|]+\|/,
            inside: {
              variable: /[\da-z]+/i,
              punctuation: /\|/
            }
          },
          keyword: /\b(?:new|nil|self|super)\b/,
          boolean: /\b(?:false|true)\b/,
          number: [
            /\d+r-?[\dA-Z]+(?:\.[\dA-Z]+)?(?:e-?\d+)?/,
            /\b\d+(?:\.\d+)?(?:e-?\d+)?/
          ],
          operator: /[<=]=?|:=|~[~=]|\/\/?|\\\\|>[>=]?|[!^+\-*&|,@]/,
          punctuation: /[.;:?\[\](){}]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/smarty.js
  var require_smarty = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/smarty.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = smarty;
      smarty.displayName = "smarty";
      smarty.aliases = [];
      function smarty(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.smarty = {
            comment: {
              pattern: /^\{\*[\s\S]*?\*\}/,
              greedy: true
            },
            "embedded-php": {
              pattern: /^\{php\}[\s\S]*?\{\/php\}/,
              greedy: true,
              inside: {
                smarty: {
                  pattern: /^\{php\}|\{\/php\}$/,
                  inside: null
                },
                php: {
                  pattern: /[\s\S]+/,
                  alias: "language-php",
                  inside: Prism2.languages.php
                }
              }
            },
            string: [
              {
                pattern: /"(?:\\.|[^"\\\r\n])*"/,
                greedy: true,
                inside: {
                  interpolation: {
                    pattern: /\{[^{}]*\}|`[^`]*`/,
                    inside: {
                      "interpolation-punctuation": {
                        pattern: /^[{`]|[`}]$/,
                        alias: "punctuation"
                      },
                      expression: {
                        pattern: /[\s\S]+/,
                        inside: null
                      }
                    }
                  },
                  variable: /\$\w+/
                }
              },
              {
                pattern: /'(?:\\.|[^'\\\r\n])*'/,
                greedy: true
              }
            ],
            keyword: {
              pattern: /(^\{\/?)[a-z_]\w*\b(?!\()/i,
              lookbehind: true,
              greedy: true
            },
            delimiter: {
              pattern: /^\{\/?|\}$/,
              greedy: true,
              alias: "punctuation"
            },
            number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
            variable: [
              /\$(?!\d)\w+/,
              /#(?!\d)\w+#/,
              {
                pattern: /(\.|->|\w\s*=)(?!\d)\w+\b(?!\()/,
                lookbehind: true
              },
              {
                pattern: /(\[)(?!\d)\w+(?=\])/,
                lookbehind: true
              }
            ],
            function: {
              pattern: /(\|\s*)@?[a-z_]\w*|\b[a-z_]\w*(?=\()/i,
              lookbehind: true
            },
            "attr-name": /\b[a-z_]\w*(?=\s*=)/i,
            boolean: /\b(?:false|no|off|on|true|yes)\b/,
            punctuation: /[\[\](){}.,:`]|->/,
            operator: [
              /[+\-*\/%]|==?=?|[!<>]=?|&&|\|\|?/,
              /\bis\s+(?:not\s+)?(?:div|even|odd)(?:\s+by)?\b/,
              /\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\b/
            ]
          };
          Prism2.languages.smarty["embedded-php"].inside.smarty.inside = Prism2.languages.smarty;
          Prism2.languages.smarty.string[0].inside.interpolation.inside.expression.inside = Prism2.languages.smarty;
          var string3 = /"(?:\\.|[^"\\\r\n])*"|'(?:\\.|[^'\\\r\n])*'/;
          var smartyPattern = RegExp(
            /\{\*[\s\S]*?\*\}/.source + "|" + /\{php\}[\s\S]*?\{\/php\}/.source + "|" + /\{(?:[^{}"']|<str>|\{(?:[^{}"']|<str>|\{(?:[^{}"']|<str>)*\})*\})*\}/.source.replace(
              /<str>/g,
              function() {
                return string3.source;
              }
            ),
            "g"
          );
          Prism2.hooks.add("before-tokenize", function(env) {
            var smartyLiteralStart = "{literal}";
            var smartyLiteralEnd = "{/literal}";
            var smartyLiteralMode = false;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "smarty",
              smartyPattern,
              function(match) {
                if (match === smartyLiteralEnd) {
                  smartyLiteralMode = false;
                }
                if (!smartyLiteralMode) {
                  if (match === smartyLiteralStart) {
                    smartyLiteralMode = true;
                  }
                  return true;
                }
                return false;
              }
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "smarty");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/sml.js
  var require_sml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/sml.js"(exports, module) {
      "use strict";
      module.exports = sml;
      sml.displayName = "sml";
      sml.aliases = ["smlnj"];
      function sml(Prism) {
        ;
        (function(Prism2) {
          var keywords = /\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\b/i;
          Prism2.languages.sml = {
            comment: /\(\*(?:[^*(]|\*(?!\))|\((?!\*)|\(\*(?:[^*(]|\*(?!\))|\((?!\*))*\*\))*\*\)/,
            string: {
              pattern: /#?"(?:[^"\\]|\\.)*"/,
              greedy: true
            },
            "class-name": [
              {
                pattern: RegExp(
                  /((?:^|[^:]):\s*)<TERMINAL>(?:\s*(?:(?:\*|->)\s*<TERMINAL>|,\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\s+<LONG-ID>)))*/.source.replace(/<NOT-LAST>/g, function() {
                    return /\s*(?:[*,]|->)/.source;
                  }).replace(/<TERMINAL>/g, function() {
                    return /(?:'[\w']*|<LONG-ID>|\((?:[^()]|\([^()]*\))*\)|\{(?:[^{}]|\{[^{}]*\})*\})(?:\s+<LONG-ID>)*/.source;
                  }).replace(/<LONG-ID>/g, function() {
                    return /(?!<KEYWORD>)[a-z\d_][\w'.]*/.source;
                  }).replace(/<KEYWORD>/g, function() {
                    return keywords.source;
                  }),
                  "i"
                ),
                lookbehind: true,
                greedy: true,
                inside: null
              },
              {
                pattern: /((?:^|[^\w'])(?:datatype|exception|functor|signature|structure|type)\s+)[a-z_][\w'.]*/i,
                lookbehind: true
              }
            ],
            function: {
              pattern: /((?:^|[^\w'])fun\s+)[a-z_][\w'.]*/i,
              lookbehind: true
            },
            keyword: keywords,
            variable: {
              pattern: /(^|[^\w'])'[\w']*/,
              lookbehind: true
            },
            number: /~?\b(?:\d+(?:\.\d+)?(?:e~?\d+)?|0x[\da-f]+)\b/i,
            word: {
              pattern: /\b0w(?:\d+|x[\da-f]+)\b/i,
              alias: "constant"
            },
            boolean: /\b(?:false|true)\b/i,
            operator: /\.\.\.|:[>=:]|=>?|->|[<>]=?|[!+\-*/^#|@~]/,
            punctuation: /[(){}\[\].:,;]/
          };
          Prism2.languages.sml["class-name"][0].inside = Prism2.languages.sml;
          Prism2.languages.smlnj = Prism2.languages.sml;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/solidity.js
  var require_solidity = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/solidity.js"(exports, module) {
      "use strict";
      module.exports = solidity;
      solidity.displayName = "solidity";
      solidity.aliases = ["sol"];
      function solidity(Prism) {
        Prism.languages.solidity = Prism.languages.extend("clike", {
          "class-name": {
            pattern: /(\b(?:contract|enum|interface|library|new|struct|using)\s+)(?!\d)[\w$]+/,
            lookbehind: true
          },
          keyword: /\b(?:_|anonymous|as|assembly|assert|break|calldata|case|constant|constructor|continue|contract|default|delete|do|else|emit|enum|event|external|for|from|function|if|import|indexed|inherited|interface|internal|is|let|library|mapping|memory|modifier|new|payable|pragma|private|public|pure|require|returns?|revert|selfdestruct|solidity|storage|struct|suicide|switch|this|throw|using|var|view|while)\b/,
          operator: /=>|->|:=|=:|\*\*|\+\+|--|\|\||&&|<<=?|>>=?|[-+*/%^&|<>!=]=?|[~?]/
        });
        Prism.languages.insertBefore("solidity", "keyword", {
          builtin: /\b(?:address|bool|byte|u?int(?:8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?|string|bytes(?:[1-9]|[12]\d|3[0-2])?)\b/
        });
        Prism.languages.insertBefore("solidity", "number", {
          version: {
            pattern: /([<>]=?|\^)\d+\.\d+\.\d+\b/,
            lookbehind: true,
            alias: "number"
          }
        });
        Prism.languages.sol = Prism.languages.solidity;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/solution-file.js
  var require_solution_file = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/solution-file.js"(exports, module) {
      "use strict";
      module.exports = solutionFile;
      solutionFile.displayName = "solutionFile";
      solutionFile.aliases = [];
      function solutionFile(Prism) {
        ;
        (function(Prism2) {
          var guid = {
            pattern: /\{[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}\}/i,
            alias: "constant",
            inside: {
              punctuation: /[{}]/
            }
          };
          Prism2.languages["solution-file"] = {
            comment: {
              pattern: /#.*/,
              greedy: true
            },
            string: {
              pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
              greedy: true,
              inside: {
                guid
              }
            },
            object: {
              pattern: /^([ \t]*)(?:([A-Z]\w*)\b(?=.*(?:\r\n?|\n)(?:\1[ \t].*(?:\r\n?|\n))*\1End\2(?=[ \t]*$))|End[A-Z]\w*(?=[ \t]*$))/m,
              lookbehind: true,
              greedy: true,
              alias: "keyword"
            },
            property: {
              pattern: /^([ \t]*)(?!\s)[^\r\n"#=()]*[^\s"#=()](?=\s*=)/m,
              lookbehind: true,
              inside: {
                guid
              }
            },
            guid,
            number: /\b\d+(?:\.\d+)*\b/,
            boolean: /\b(?:FALSE|TRUE)\b/,
            operator: /=/,
            punctuation: /[(),]/
          };
          Prism2.languages["sln"] = Prism2.languages["solution-file"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/soy.js
  var require_soy = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/soy.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = soy;
      soy.displayName = "soy";
      soy.aliases = [];
      function soy(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          var stringPattern = /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
          var numberPattern = /\b\d+(?:\.\d+)?(?:[eE][+-]?\d+)?\b|\b0x[\dA-F]+\b/;
          Prism2.languages.soy = {
            comment: [
              /\/\*[\s\S]*?\*\//,
              {
                pattern: /(\s)\/\/.*/,
                lookbehind: true,
                greedy: true
              }
            ],
            "command-arg": {
              pattern: /(\{+\/?\s*(?:alias|call|delcall|delpackage|deltemplate|namespace|template)\s+)\.?[\w.]+/,
              lookbehind: true,
              alias: "string",
              inside: {
                punctuation: /\./
              }
            },
            parameter: {
              pattern: /(\{+\/?\s*@?param\??\s+)\.?[\w.]+/,
              lookbehind: true,
              alias: "variable"
            },
            keyword: [
              {
                pattern: /(\{+\/?[^\S\r\n]*)(?:\\[nrt]|alias|call|case|css|default|delcall|delpackage|deltemplate|else(?:if)?|fallbackmsg|for(?:each)?|if(?:empty)?|lb|let|literal|msg|namespace|nil|@?param\??|rb|sp|switch|template|xid)/,
                lookbehind: true
              },
              /\b(?:any|as|attributes|bool|css|float|html|in|int|js|list|map|null|number|string|uri)\b/
            ],
            delimiter: {
              pattern: /^\{+\/?|\/?\}+$/,
              alias: "punctuation"
            },
            property: /\w+(?==)/,
            variable: {
              pattern: /\$[^\W\d]\w*(?:\??(?:\.\w+|\[[^\]]+\]))*/,
              inside: {
                string: {
                  pattern: stringPattern,
                  greedy: true
                },
                number: numberPattern,
                punctuation: /[\[\].?]/
              }
            },
            string: {
              pattern: stringPattern,
              greedy: true
            },
            function: [
              /\w+(?=\()/,
              {
                pattern: /(\|[^\S\r\n]*)\w+/,
                lookbehind: true
              }
            ],
            boolean: /\b(?:false|true)\b/,
            number: numberPattern,
            operator: /\?:?|<=?|>=?|==?|!=|[+*/%-]|\b(?:and|not|or)\b/,
            punctuation: /[{}()\[\]|.,:]/
          };
          Prism2.hooks.add("before-tokenize", function(env) {
            var soyPattern = /\{\{.+?\}\}|\{.+?\}|\s\/\/.*|\/\*[\s\S]*?\*\//g;
            var soyLitteralStart = "{literal}";
            var soyLitteralEnd = "{/literal}";
            var soyLitteralMode = false;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "soy",
              soyPattern,
              function(match) {
                if (match === soyLitteralEnd) {
                  soyLitteralMode = false;
                }
                if (!soyLitteralMode) {
                  if (match === soyLitteralStart) {
                    soyLitteralMode = true;
                  }
                  return true;
                }
                return false;
              }
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "soy");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/turtle.js
  var require_turtle = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/turtle.js"(exports, module) {
      "use strict";
      module.exports = turtle;
      turtle.displayName = "turtle";
      turtle.aliases = [];
      function turtle(Prism) {
        Prism.languages.turtle = {
          comment: {
            pattern: /#.*/,
            greedy: true
          },
          "multiline-string": {
            pattern: /"""(?:(?:""?)?(?:[^"\\]|\\.))*"""|'''(?:(?:''?)?(?:[^'\\]|\\.))*'''/,
            greedy: true,
            alias: "string",
            inside: {
              comment: /#.*/
            }
          },
          string: {
            pattern: /"(?:[^\\"\r\n]|\\.)*"|'(?:[^\\'\r\n]|\\.)*'/,
            greedy: true
          },
          url: {
            pattern: /<(?:[^\x00-\x20<>"{}|^`\\]|\\(?:u[\da-fA-F]{4}|U[\da-fA-F]{8}))*>/,
            greedy: true,
            inside: {
              punctuation: /[<>]/
            }
          },
          function: {
            pattern: /(?:(?![-.\d\xB7])[-.\w\xB7\xC0-\uFFFD]+)?:(?:(?![-.])(?:[-.:\w\xC0-\uFFFD]|%[\da-f]{2}|\\.)+)?/i,
            inside: {
              "local-name": {
                pattern: /([^:]*:)[\s\S]+/,
                lookbehind: true
              },
              prefix: {
                pattern: /[\s\S]+/,
                inside: {
                  punctuation: /:/
                }
              }
            }
          },
          number: /[+-]?\b\d+(?:\.\d*)?(?:e[+-]?\d+)?/i,
          punctuation: /[{}.,;()[\]]|\^\^/,
          boolean: /\b(?:false|true)\b/,
          keyword: [/(?:\ba|@prefix|@base)\b|=/, /\b(?:base|graph|prefix)\b/i],
          tag: {
            pattern: /@[a-z]+(?:-[a-z\d]+)*/i,
            inside: {
              punctuation: /@/
            }
          }
        };
        Prism.languages.trig = Prism.languages["turtle"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/sparql.js
  var require_sparql = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/sparql.js"(exports, module) {
      "use strict";
      var refractorTurtle = require_turtle();
      module.exports = sparql;
      sparql.displayName = "sparql";
      sparql.aliases = ["rq"];
      function sparql(Prism) {
        Prism.register(refractorTurtle);
        Prism.languages.sparql = Prism.languages.extend("turtle", {
          boolean: /\b(?:false|true)\b/i,
          variable: {
            pattern: /[?$]\w+/,
            greedy: true
          }
        });
        Prism.languages.insertBefore("sparql", "punctuation", {
          keyword: [
            /\b(?:A|ADD|ALL|AS|ASC|ASK|BNODE|BY|CLEAR|CONSTRUCT|COPY|CREATE|DATA|DEFAULT|DELETE|DESC|DESCRIBE|DISTINCT|DROP|EXISTS|FILTER|FROM|GROUP|HAVING|INSERT|INTO|LIMIT|LOAD|MINUS|MOVE|NAMED|NOT|NOW|OFFSET|OPTIONAL|ORDER|RAND|REDUCED|SELECT|SEPARATOR|SERVICE|SILENT|STRUUID|UNION|USING|UUID|VALUES|WHERE)\b/i,
            /\b(?:ABS|AVG|BIND|BOUND|CEIL|COALESCE|CONCAT|CONTAINS|COUNT|DATATYPE|DAY|ENCODE_FOR_URI|FLOOR|GROUP_CONCAT|HOURS|IF|IRI|isBLANK|isIRI|isLITERAL|isNUMERIC|isURI|LANG|LANGMATCHES|LCASE|MAX|MD5|MIN|MINUTES|MONTH|REGEX|REPLACE|ROUND|sameTerm|SAMPLE|SECONDS|SHA1|SHA256|SHA384|SHA512|STR|STRAFTER|STRBEFORE|STRDT|STRENDS|STRLANG|STRLEN|STRSTARTS|SUBSTR|SUM|TIMEZONE|TZ|UCASE|URI|YEAR)\b(?=\s*\()/i,
            /\b(?:BASE|GRAPH|PREFIX)\b/i
          ]
        });
        Prism.languages.rq = Prism.languages.sparql;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/splunk-spl.js
  var require_splunk_spl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/splunk-spl.js"(exports, module) {
      "use strict";
      module.exports = splunkSpl;
      splunkSpl.displayName = "splunkSpl";
      splunkSpl.aliases = [];
      function splunkSpl(Prism) {
        Prism.languages["splunk-spl"] = {
          comment: /`comment\("(?:\\.|[^\\"])*"\)`/,
          string: {
            pattern: /"(?:\\.|[^\\"])*"/,
            greedy: true
          },
          keyword: /\b(?:abstract|accum|addcoltotals|addinfo|addtotals|analyzefields|anomalies|anomalousvalue|anomalydetection|append|appendcols|appendcsv|appendlookup|appendpipe|arules|associate|audit|autoregress|bin|bucket|bucketdir|chart|cluster|cofilter|collect|concurrency|contingency|convert|correlate|datamodel|dbinspect|dedup|delete|delta|diff|erex|eval|eventcount|eventstats|extract|fieldformat|fields|fieldsummary|filldown|fillnull|findtypes|folderize|foreach|format|from|gauge|gentimes|geom|geomfilter|geostats|head|highlight|history|iconify|input|inputcsv|inputlookup|iplocation|join|kmeans|kv|kvform|loadjob|localize|localop|lookup|makecontinuous|makemv|makeresults|map|mcollect|metadata|metasearch|meventcollect|mstats|multikv|multisearch|mvcombine|mvexpand|nomv|outlier|outputcsv|outputlookup|outputtext|overlap|pivot|predict|rangemap|rare|regex|relevancy|reltime|rename|replace|rest|return|reverse|rex|rtorder|run|savedsearch|script|scrub|search|searchtxn|selfjoin|sendemail|set|setfields|sichart|sirare|sistats|sitimechart|sitop|sort|spath|stats|strcat|streamstats|table|tags|tail|timechart|timewrap|top|transaction|transpose|trendline|tscollect|tstats|typeahead|typelearner|typer|union|uniq|untable|where|x11|xmlkv|xmlunescape|xpath|xyseries)\b/i,
          "operator-word": {
            pattern: /\b(?:and|as|by|not|or|xor)\b/i,
            alias: "operator"
          },
          function: /\b\w+(?=\s*\()/,
          property: /\b\w+(?=\s*=(?!=))/,
          date: {
            pattern: /\b\d{1,2}\/\d{1,2}\/\d{1,4}(?:(?::\d{1,2}){3})?\b/,
            alias: "number"
          },
          number: /\b\d+(?:\.\d+)?\b/,
          boolean: /\b(?:f|false|t|true)\b/i,
          operator: /[<>=]=?|[-+*/%|]/,
          punctuation: /[()[\],]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/sqf.js
  var require_sqf = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/sqf.js"(exports, module) {
      "use strict";
      module.exports = sqf;
      sqf.displayName = "sqf";
      sqf.aliases = [];
      function sqf(Prism) {
        Prism.languages.sqf = Prism.languages.extend("clike", {
          string: {
            pattern: /"(?:(?:"")?[^"])*"(?!")|'(?:[^'])*'/,
            greedy: true
          },
          keyword: /\b(?:breakOut|breakTo|call|case|catch|default|do|echo|else|execFSM|execVM|exitWith|for|forEach|forEachMember|forEachMemberAgent|forEachMemberTeam|from|goto|if|nil|preprocessFile|preprocessFileLineNumbers|private|scopeName|spawn|step|switch|then|throw|to|try|while|with)\b/i,
          boolean: /\b(?:false|true)\b/i,
          function: /\b(?:abs|accTime|acos|action|actionIDs|actionKeys|actionKeysImages|actionKeysNames|actionKeysNamesArray|actionName|actionParams|activateAddons|activatedAddons|activateKey|add3DENConnection|add3DENEventHandler|add3DENLayer|addAction|addBackpack|addBackpackCargo|addBackpackCargoGlobal|addBackpackGlobal|addCamShake|addCuratorAddons|addCuratorCameraArea|addCuratorEditableObjects|addCuratorEditingArea|addCuratorPoints|addEditorObject|addEventHandler|addForce|addForceGeneratorRTD|addGoggles|addGroupIcon|addHandgunItem|addHeadgear|addItem|addItemCargo|addItemCargoGlobal|addItemPool|addItemToBackpack|addItemToUniform|addItemToVest|addLiveStats|addMagazine|addMagazineAmmoCargo|addMagazineCargo|addMagazineCargoGlobal|addMagazineGlobal|addMagazinePool|addMagazines|addMagazineTurret|addMenu|addMenuItem|addMissionEventHandler|addMPEventHandler|addMusicEventHandler|addOwnedMine|addPlayerScores|addPrimaryWeaponItem|addPublicVariableEventHandler|addRating|addResources|addScore|addScoreSide|addSecondaryWeaponItem|addSwitchableUnit|addTeamMember|addToRemainsCollector|addTorque|addUniform|addVehicle|addVest|addWaypoint|addWeapon|addWeaponCargo|addWeaponCargoGlobal|addWeaponGlobal|addWeaponItem|addWeaponPool|addWeaponTurret|admin|agent|agents|AGLToASL|aimedAtTarget|aimPos|airDensityCurveRTD|airDensityRTD|airplaneThrottle|airportSide|AISFinishHeal|alive|all3DENEntities|allAirports|allControls|allCurators|allCutLayers|allDead|allDeadMen|allDisplays|allGroups|allMapMarkers|allMines|allMissionObjects|allow3DMode|allowCrewInImmobile|allowCuratorLogicIgnoreAreas|allowDamage|allowDammage|allowFileOperations|allowFleeing|allowGetIn|allowSprint|allPlayers|allSimpleObjects|allSites|allTurrets|allUnits|allUnitsUAV|allVariables|ammo|ammoOnPylon|animate|animateBay|animateDoor|animatePylon|animateSource|animationNames|animationPhase|animationSourcePhase|animationState|append|apply|armoryPoints|arrayIntersect|asin|ASLToAGL|ASLToATL|assert|assignAsCargo|assignAsCargoIndex|assignAsCommander|assignAsDriver|assignAsGunner|assignAsTurret|assignCurator|assignedCargo|assignedCommander|assignedDriver|assignedGunner|assignedItems|assignedTarget|assignedTeam|assignedVehicle|assignedVehicleRole|assignItem|assignTeam|assignToAirport|atan|atan2|atg|ATLToASL|attachedObject|attachedObjects|attachedTo|attachObject|attachTo|attackEnabled|backpack|backpackCargo|backpackContainer|backpackItems|backpackMagazines|backpackSpaceFor|behaviour|benchmark|binocular|blufor|boundingBox|boundingBoxReal|boundingCenter|briefingName|buildingExit|buildingPos|buldozer_EnableRoadDiag|buldozer_IsEnabledRoadDiag|buldozer_LoadNewRoads|buldozer_reloadOperMap|buttonAction|buttonSetAction|cadetMode|callExtension|camCommand|camCommit|camCommitPrepared|camCommitted|camConstuctionSetParams|camCreate|camDestroy|cameraEffect|cameraEffectEnableHUD|cameraInterest|cameraOn|cameraView|campaignConfigFile|camPreload|camPreloaded|camPrepareBank|camPrepareDir|camPrepareDive|camPrepareFocus|camPrepareFov|camPrepareFovRange|camPreparePos|camPrepareRelPos|camPrepareTarget|camSetBank|camSetDir|camSetDive|camSetFocus|camSetFov|camSetFovRange|camSetPos|camSetRelPos|camSetTarget|camTarget|camUseNVG|canAdd|canAddItemToBackpack|canAddItemToUniform|canAddItemToVest|cancelSimpleTaskDestination|canFire|canMove|canSlingLoad|canStand|canSuspend|canTriggerDynamicSimulation|canUnloadInCombat|canVehicleCargo|captive|captiveNum|cbChecked|cbSetChecked|ceil|channelEnabled|cheatsEnabled|checkAIFeature|checkVisibility|civilian|className|clear3DENAttribute|clear3DENInventory|clearAllItemsFromBackpack|clearBackpackCargo|clearBackpackCargoGlobal|clearForcesRTD|clearGroupIcons|clearItemCargo|clearItemCargoGlobal|clearItemPool|clearMagazineCargo|clearMagazineCargoGlobal|clearMagazinePool|clearOverlay|clearRadio|clearVehicleInit|clearWeaponCargo|clearWeaponCargoGlobal|clearWeaponPool|clientOwner|closeDialog|closeDisplay|closeOverlay|collapseObjectTree|collect3DENHistory|collectiveRTD|combatMode|commandArtilleryFire|commandChat|commander|commandFire|commandFollow|commandFSM|commandGetOut|commandingMenu|commandMove|commandRadio|commandStop|commandSuppressiveFire|commandTarget|commandWatch|comment|commitOverlay|compile|compileFinal|completedFSM|composeText|configClasses|configFile|configHierarchy|configName|configNull|configProperties|configSourceAddonList|configSourceMod|configSourceModList|confirmSensorTarget|connectTerminalToUAV|controlNull|controlsGroupCtrl|copyFromClipboard|copyToClipboard|copyWaypoints|cos|count|countEnemy|countFriendly|countSide|countType|countUnknown|create3DENComposition|create3DENEntity|createAgent|createCenter|createDialog|createDiaryLink|createDiaryRecord|createDiarySubject|createDisplay|createGearDialog|createGroup|createGuardedPoint|createLocation|createMarker|createMarkerLocal|createMenu|createMine|createMissionDisplay|createMPCampaignDisplay|createSimpleObject|createSimpleTask|createSite|createSoundSource|createTask|createTeam|createTrigger|createUnit|createVehicle|createVehicleCrew|createVehicleLocal|crew|ctAddHeader|ctAddRow|ctClear|ctCurSel|ctData|ctFindHeaderRows|ctFindRowHeader|ctHeaderControls|ctHeaderCount|ctRemoveHeaders|ctRemoveRows|ctrlActivate|ctrlAddEventHandler|ctrlAngle|ctrlAutoScrollDelay|ctrlAutoScrollRewind|ctrlAutoScrollSpeed|ctrlChecked|ctrlClassName|ctrlCommit|ctrlCommitted|ctrlCreate|ctrlDelete|ctrlEnable|ctrlEnabled|ctrlFade|ctrlHTMLLoaded|ctrlIDC|ctrlIDD|ctrlMapAnimAdd|ctrlMapAnimClear|ctrlMapAnimCommit|ctrlMapAnimDone|ctrlMapCursor|ctrlMapMouseOver|ctrlMapScale|ctrlMapScreenToWorld|ctrlMapWorldToScreen|ctrlModel|ctrlModelDirAndUp|ctrlModelScale|ctrlParent|ctrlParentControlsGroup|ctrlPosition|ctrlRemoveAllEventHandlers|ctrlRemoveEventHandler|ctrlScale|ctrlSetActiveColor|ctrlSetAngle|ctrlSetAutoScrollDelay|ctrlSetAutoScrollRewind|ctrlSetAutoScrollSpeed|ctrlSetBackgroundColor|ctrlSetChecked|ctrlSetDisabledColor|ctrlSetEventHandler|ctrlSetFade|ctrlSetFocus|ctrlSetFont|ctrlSetFontH1|ctrlSetFontH1B|ctrlSetFontH2|ctrlSetFontH2B|ctrlSetFontH3|ctrlSetFontH3B|ctrlSetFontH4|ctrlSetFontH4B|ctrlSetFontH5|ctrlSetFontH5B|ctrlSetFontH6|ctrlSetFontH6B|ctrlSetFontHeight|ctrlSetFontHeightH1|ctrlSetFontHeightH2|ctrlSetFontHeightH3|ctrlSetFontHeightH4|ctrlSetFontHeightH5|ctrlSetFontHeightH6|ctrlSetFontHeightSecondary|ctrlSetFontP|ctrlSetFontPB|ctrlSetFontSecondary|ctrlSetForegroundColor|ctrlSetModel|ctrlSetModelDirAndUp|ctrlSetModelScale|ctrlSetPixelPrecision|ctrlSetPosition|ctrlSetScale|ctrlSetStructuredText|ctrlSetText|ctrlSetTextColor|ctrlSetTextColorSecondary|ctrlSetTextSecondary|ctrlSetTooltip|ctrlSetTooltipColorBox|ctrlSetTooltipColorShade|ctrlSetTooltipColorText|ctrlShow|ctrlShown|ctrlText|ctrlTextHeight|ctrlTextSecondary|ctrlTextWidth|ctrlType|ctrlVisible|ctRowControls|ctRowCount|ctSetCurSel|ctSetData|ctSetHeaderTemplate|ctSetRowTemplate|ctSetValue|ctValue|curatorAddons|curatorCamera|curatorCameraArea|curatorCameraAreaCeiling|curatorCoef|curatorEditableObjects|curatorEditingArea|curatorEditingAreaType|curatorMouseOver|curatorPoints|curatorRegisteredObjects|curatorSelected|curatorWaypointCost|current3DENOperation|currentChannel|currentCommand|currentMagazine|currentMagazineDetail|currentMagazineDetailTurret|currentMagazineTurret|currentMuzzle|currentNamespace|currentTask|currentTasks|currentThrowable|currentVisionMode|currentWaypoint|currentWeapon|currentWeaponMode|currentWeaponTurret|currentZeroing|cursorObject|cursorTarget|customChat|customRadio|cutFadeOut|cutObj|cutRsc|cutText|damage|date|dateToNumber|daytime|deActivateKey|debriefingText|debugFSM|debugLog|deg|delete3DENEntities|deleteAt|deleteCenter|deleteCollection|deleteEditorObject|deleteGroup|deleteGroupWhenEmpty|deleteIdentity|deleteLocation|deleteMarker|deleteMarkerLocal|deleteRange|deleteResources|deleteSite|deleteStatus|deleteTeam|deleteVehicle|deleteVehicleCrew|deleteWaypoint|detach|detectedMines|diag_activeMissionFSMs|diag_activeScripts|diag_activeSQFScripts|diag_activeSQSScripts|diag_captureFrame|diag_captureFrameToFile|diag_captureSlowFrame|diag_codePerformance|diag_drawMode|diag_dynamicSimulationEnd|diag_enable|diag_enabled|diag_fps|diag_fpsMin|diag_frameNo|diag_lightNewLoad|diag_list|diag_log|diag_logSlowFrame|diag_mergeConfigFile|diag_recordTurretLimits|diag_setLightNew|diag_tickTime|diag_toggle|dialog|diarySubjectExists|didJIP|didJIPOwner|difficulty|difficultyEnabled|difficultyEnabledRTD|difficultyOption|direction|directSay|disableAI|disableCollisionWith|disableConversation|disableDebriefingStats|disableMapIndicators|disableNVGEquipment|disableRemoteSensors|disableSerialization|disableTIEquipment|disableUAVConnectability|disableUserInput|displayAddEventHandler|displayCtrl|displayNull|displayParent|displayRemoveAllEventHandlers|displayRemoveEventHandler|displaySetEventHandler|dissolveTeam|distance|distance2D|distanceSqr|distributionRegion|do3DENAction|doArtilleryFire|doFire|doFollow|doFSM|doGetOut|doMove|doorPhase|doStop|doSuppressiveFire|doTarget|doWatch|drawArrow|drawEllipse|drawIcon|drawIcon3D|drawLine|drawLine3D|drawLink|drawLocation|drawPolygon|drawRectangle|drawTriangle|driver|drop|dynamicSimulationDistance|dynamicSimulationDistanceCoef|dynamicSimulationEnabled|dynamicSimulationSystemEnabled|east|edit3DENMissionAttributes|editObject|editorSetEventHandler|effectiveCommander|emptyPositions|enableAI|enableAIFeature|enableAimPrecision|enableAttack|enableAudioFeature|enableAutoStartUpRTD|enableAutoTrimRTD|enableCamShake|enableCaustics|enableChannel|enableCollisionWith|enableCopilot|enableDebriefingStats|enableDiagLegend|enableDynamicSimulation|enableDynamicSimulationSystem|enableEndDialog|enableEngineArtillery|enableEnvironment|enableFatigue|enableGunLights|enableInfoPanelComponent|enableIRLasers|enableMimics|enablePersonTurret|enableRadio|enableReload|enableRopeAttach|enableSatNormalOnDetail|enableSaving|enableSentences|enableSimulation|enableSimulationGlobal|enableStamina|enableStressDamage|enableTeamSwitch|enableTraffic|enableUAVConnectability|enableUAVWaypoints|enableVehicleCargo|enableVehicleSensor|enableWeaponDisassembly|endl|endLoadingScreen|endMission|engineOn|enginesIsOnRTD|enginesPowerRTD|enginesRpmRTD|enginesTorqueRTD|entities|environmentEnabled|estimatedEndServerTime|estimatedTimeLeft|evalObjectArgument|everyBackpack|everyContainer|exec|execEditorScript|exp|expectedDestination|exportJIPMessages|eyeDirection|eyePos|face|faction|fadeMusic|fadeRadio|fadeSound|fadeSpeech|failMission|fillWeaponsFromPool|find|findCover|findDisplay|findEditorObject|findEmptyPosition|findEmptyPositionReady|findIf|findNearestEnemy|finishMissionInit|finite|fire|fireAtTarget|firstBackpack|flag|flagAnimationPhase|flagOwner|flagSide|flagTexture|fleeing|floor|flyInHeight|flyInHeightASL|fog|fogForecast|fogParams|forceAddUniform|forceAtPositionRTD|forcedMap|forceEnd|forceFlagTexture|forceFollowRoad|forceGeneratorRTD|forceMap|forceRespawn|forceSpeed|forceWalk|forceWeaponFire|forceWeatherChange|forgetTarget|format|formation|formationDirection|formationLeader|formationMembers|formationPosition|formationTask|formatText|formLeader|freeLook|fromEditor|fuel|fullCrew|gearIDCAmmoCount|gearSlotAmmoCount|gearSlotData|get3DENActionState|get3DENAttribute|get3DENCamera|get3DENConnections|get3DENEntity|get3DENEntityID|get3DENGrid|get3DENIconsVisible|get3DENLayerEntities|get3DENLinesVisible|get3DENMissionAttribute|get3DENMouseOver|get3DENSelected|getAimingCoef|getAllEnvSoundControllers|getAllHitPointsDamage|getAllOwnedMines|getAllSoundControllers|getAmmoCargo|getAnimAimPrecision|getAnimSpeedCoef|getArray|getArtilleryAmmo|getArtilleryComputerSettings|getArtilleryETA|getAssignedCuratorLogic|getAssignedCuratorUnit|getBackpackCargo|getBleedingRemaining|getBurningValue|getCameraViewDirection|getCargoIndex|getCenterOfMass|getClientState|getClientStateNumber|getCompatiblePylonMagazines|getConnectedUAV|getContainerMaxLoad|getCursorObjectParams|getCustomAimCoef|getDammage|getDescription|getDir|getDirVisual|getDLCAssetsUsage|getDLCAssetsUsageByName|getDLCs|getDLCUsageTime|getEditorCamera|getEditorMode|getEditorObjectScope|getElevationOffset|getEngineTargetRpmRTD|getEnvSoundController|getFatigue|getFieldManualStartPage|getForcedFlagTexture|getFriend|getFSMVariable|getFuelCargo|getGroupIcon|getGroupIconParams|getGroupIcons|getHideFrom|getHit|getHitIndex|getHitPointDamage|getItemCargo|getMagazineCargo|getMarkerColor|getMarkerPos|getMarkerSize|getMarkerType|getMass|getMissionConfig|getMissionConfigValue|getMissionDLCs|getMissionLayerEntities|getMissionLayers|getModelInfo|getMousePosition|getMusicPlayedTime|getNumber|getObjectArgument|getObjectChildren|getObjectDLC|getObjectMaterials|getObjectProxy|getObjectTextures|getObjectType|getObjectViewDistance|getOxygenRemaining|getPersonUsedDLCs|getPilotCameraDirection|getPilotCameraPosition|getPilotCameraRotation|getPilotCameraTarget|getPlateNumber|getPlayerChannel|getPlayerScores|getPlayerUID|getPlayerUIDOld|getPos|getPosASL|getPosASLVisual|getPosASLW|getPosATL|getPosATLVisual|getPosVisual|getPosWorld|getPylonMagazines|getRelDir|getRelPos|getRemoteSensorsDisabled|getRepairCargo|getResolution|getRotorBrakeRTD|getShadowDistance|getShotParents|getSlingLoad|getSoundController|getSoundControllerResult|getSpeed|getStamina|getStatValue|getSuppression|getTerrainGrid|getTerrainHeightASL|getText|getTotalDLCUsageTime|getTrimOffsetRTD|getUnitLoadout|getUnitTrait|getUserMFDText|getUserMFDValue|getVariable|getVehicleCargo|getWeaponCargo|getWeaponSway|getWingsOrientationRTD|getWingsPositionRTD|getWPPos|glanceAt|globalChat|globalRadio|goggles|group|groupChat|groupFromNetId|groupIconSelectable|groupIconsVisible|groupId|groupOwner|groupRadio|groupSelectedUnits|groupSelectUnit|grpNull|gunner|gusts|halt|handgunItems|handgunMagazine|handgunWeapon|handsHit|hasInterface|hasPilotCamera|hasWeapon|hcAllGroups|hcGroupParams|hcLeader|hcRemoveAllGroups|hcRemoveGroup|hcSelected|hcSelectGroup|hcSetGroup|hcShowBar|hcShownBar|headgear|hideBody|hideObject|hideObjectGlobal|hideSelection|hint|hintC|hintCadet|hintSilent|hmd|hostMission|htmlLoad|HUDMovementLevels|humidity|image|importAllGroups|importance|in|inArea|inAreaArray|incapacitatedState|independent|inflame|inflamed|infoPanel|infoPanelComponentEnabled|infoPanelComponents|infoPanels|inGameUISetEventHandler|inheritsFrom|initAmbientLife|inPolygon|inputAction|inRangeOfArtillery|insertEditorObject|intersect|is3DEN|is3DENMultiplayer|isAbleToBreathe|isAgent|isAimPrecisionEnabled|isArray|isAutoHoverOn|isAutonomous|isAutoStartUpEnabledRTD|isAutotest|isAutoTrimOnRTD|isBleeding|isBurning|isClass|isCollisionLightOn|isCopilotEnabled|isDamageAllowed|isDedicated|isDLCAvailable|isEngineOn|isEqualTo|isEqualType|isEqualTypeAll|isEqualTypeAny|isEqualTypeArray|isEqualTypeParams|isFilePatchingEnabled|isFlashlightOn|isFlatEmpty|isForcedWalk|isFormationLeader|isGroupDeletedWhenEmpty|isHidden|isInRemainsCollector|isInstructorFigureEnabled|isIRLaserOn|isKeyActive|isKindOf|isLaserOn|isLightOn|isLocalized|isManualFire|isMarkedForCollection|isMultiplayer|isMultiplayerSolo|isNil|isNull|isNumber|isObjectHidden|isObjectRTD|isOnRoad|isPipEnabled|isPlayer|isRealTime|isRemoteExecuted|isRemoteExecutedJIP|isServer|isShowing3DIcons|isSimpleObject|isSprintAllowed|isStaminaEnabled|isSteamMission|isStreamFriendlyUIEnabled|isStressDamageEnabled|isText|isTouchingGround|isTurnedOut|isTutHintsEnabled|isUAVConnectable|isUAVConnected|isUIContext|isUniformAllowed|isVehicleCargo|isVehicleRadarOn|isVehicleSensorEnabled|isWalking|isWeaponDeployed|isWeaponRested|itemCargo|items|itemsWithMagazines|join|joinAs|joinAsSilent|joinSilent|joinString|kbAddDatabase|kbAddDatabaseTargets|kbAddTopic|kbHasTopic|kbReact|kbRemoveTopic|kbTell|kbWasSaid|keyImage|keyName|knowsAbout|land|landAt|landResult|language|laserTarget|lbAdd|lbClear|lbColor|lbColorRight|lbCurSel|lbData|lbDelete|lbIsSelected|lbPicture|lbPictureRight|lbSelection|lbSetColor|lbSetColorRight|lbSetCurSel|lbSetData|lbSetPicture|lbSetPictureColor|lbSetPictureColorDisabled|lbSetPictureColorSelected|lbSetPictureRight|lbSetPictureRightColor|lbSetPictureRightColorDisabled|lbSetPictureRightColorSelected|lbSetSelectColor|lbSetSelectColorRight|lbSetSelected|lbSetText|lbSetTextRight|lbSetTooltip|lbSetValue|lbSize|lbSort|lbSortByValue|lbText|lbTextRight|lbValue|leader|leaderboardDeInit|leaderboardGetRows|leaderboardInit|leaderboardRequestRowsFriends|leaderboardRequestRowsGlobal|leaderboardRequestRowsGlobalAroundUser|leaderboardsRequestUploadScore|leaderboardsRequestUploadScoreKeepBest|leaderboardState|leaveVehicle|libraryCredits|libraryDisclaimers|lifeState|lightAttachObject|lightDetachObject|lightIsOn|lightnings|limitSpeed|linearConversion|lineBreak|lineIntersects|lineIntersectsObjs|lineIntersectsSurfaces|lineIntersectsWith|linkItem|list|listObjects|listRemoteTargets|listVehicleSensors|ln|lnbAddArray|lnbAddColumn|lnbAddRow|lnbClear|lnbColor|lnbColorRight|lnbCurSelRow|lnbData|lnbDeleteColumn|lnbDeleteRow|lnbGetColumnsPosition|lnbPicture|lnbPictureRight|lnbSetColor|lnbSetColorRight|lnbSetColumnsPos|lnbSetCurSelRow|lnbSetData|lnbSetPicture|lnbSetPictureColor|lnbSetPictureColorRight|lnbSetPictureColorSelected|lnbSetPictureColorSelectedRight|lnbSetPictureRight|lnbSetText|lnbSetTextRight|lnbSetValue|lnbSize|lnbSort|lnbSortByValue|lnbText|lnbTextRight|lnbValue|load|loadAbs|loadBackpack|loadFile|loadGame|loadIdentity|loadMagazine|loadOverlay|loadStatus|loadUniform|loadVest|local|localize|locationNull|locationPosition|lock|lockCameraTo|lockCargo|lockDriver|locked|lockedCargo|lockedDriver|lockedTurret|lockIdentity|lockTurret|lockWP|log|logEntities|logNetwork|logNetworkTerminate|lookAt|lookAtPos|magazineCargo|magazines|magazinesAllTurrets|magazinesAmmo|magazinesAmmoCargo|magazinesAmmoFull|magazinesDetail|magazinesDetailBackpack|magazinesDetailUniform|magazinesDetailVest|magazinesTurret|magazineTurretAmmo|mapAnimAdd|mapAnimClear|mapAnimCommit|mapAnimDone|mapCenterOnCamera|mapGridPosition|markAsFinishedOnSteam|markerAlpha|markerBrush|markerColor|markerDir|markerPos|markerShape|markerSize|markerText|markerType|max|members|menuAction|menuAdd|menuChecked|menuClear|menuCollapse|menuData|menuDelete|menuEnable|menuEnabled|menuExpand|menuHover|menuPicture|menuSetAction|menuSetCheck|menuSetData|menuSetPicture|menuSetValue|menuShortcut|menuShortcutText|menuSize|menuSort|menuText|menuURL|menuValue|min|mineActive|mineDetectedBy|missionConfigFile|missionDifficulty|missionName|missionNamespace|missionStart|missionVersion|modelToWorld|modelToWorldVisual|modelToWorldVisualWorld|modelToWorldWorld|modParams|moonIntensity|moonPhase|morale|move|move3DENCamera|moveInAny|moveInCargo|moveInCommander|moveInDriver|moveInGunner|moveInTurret|moveObjectToEnd|moveOut|moveTime|moveTo|moveToCompleted|moveToFailed|musicVolume|name|nameSound|nearEntities|nearestBuilding|nearestLocation|nearestLocations|nearestLocationWithDubbing|nearestObject|nearestObjects|nearestTerrainObjects|nearObjects|nearObjectsReady|nearRoads|nearSupplies|nearTargets|needReload|netId|netObjNull|newOverlay|nextMenuItemIndex|nextWeatherChange|nMenuItems|numberOfEnginesRTD|numberToDate|objectCurators|objectFromNetId|objectParent|objNull|objStatus|onBriefingGear|onBriefingGroup|onBriefingNotes|onBriefingPlan|onBriefingTeamSwitch|onCommandModeChanged|onDoubleClick|onEachFrame|onGroupIconClick|onGroupIconOverEnter|onGroupIconOverLeave|onHCGroupSelectionChanged|onMapSingleClick|onPlayerConnected|onPlayerDisconnected|onPreloadFinished|onPreloadStarted|onShowNewObject|onTeamSwitch|openCuratorInterface|openDLCPage|openDSInterface|openMap|openSteamApp|openYoutubeVideo|opfor|orderGetIn|overcast|overcastForecast|owner|param|params|parseNumber|parseSimpleArray|parseText|parsingNamespace|particlesQuality|pi|pickWeaponPool|pitch|pixelGrid|pixelGridBase|pixelGridNoUIScale|pixelH|pixelW|playableSlotsNumber|playableUnits|playAction|playActionNow|player|playerRespawnTime|playerSide|playersNumber|playGesture|playMission|playMove|playMoveNow|playMusic|playScriptedMission|playSound|playSound3D|position|positionCameraToWorld|posScreenToWorld|posWorldToScreen|ppEffectAdjust|ppEffectCommit|ppEffectCommitted|ppEffectCreate|ppEffectDestroy|ppEffectEnable|ppEffectEnabled|ppEffectForceInNVG|precision|preloadCamera|preloadObject|preloadSound|preloadTitleObj|preloadTitleRsc|primaryWeapon|primaryWeaponItems|primaryWeaponMagazine|priority|processDiaryLink|processInitCommands|productVersion|profileName|profileNamespace|profileNameSteam|progressLoadingScreen|progressPosition|progressSetPosition|publicVariable|publicVariableClient|publicVariableServer|pushBack|pushBackUnique|putWeaponPool|queryItemsPool|queryMagazinePool|queryWeaponPool|rad|radioChannelAdd|radioChannelCreate|radioChannelRemove|radioChannelSetCallSign|radioChannelSetLabel|radioVolume|rain|rainbow|random|rank|rankId|rating|rectangular|registeredTasks|registerTask|reload|reloadEnabled|remoteControl|remoteExec|remoteExecCall|remoteExecutedOwner|remove3DENConnection|remove3DENEventHandler|remove3DENLayer|removeAction|removeAll3DENEventHandlers|removeAllActions|removeAllAssignedItems|removeAllContainers|removeAllCuratorAddons|removeAllCuratorCameraAreas|removeAllCuratorEditingAreas|removeAllEventHandlers|removeAllHandgunItems|removeAllItems|removeAllItemsWithMagazines|removeAllMissionEventHandlers|removeAllMPEventHandlers|removeAllMusicEventHandlers|removeAllOwnedMines|removeAllPrimaryWeaponItems|removeAllWeapons|removeBackpack|removeBackpackGlobal|removeCuratorAddons|removeCuratorCameraArea|removeCuratorEditableObjects|removeCuratorEditingArea|removeDrawIcon|removeDrawLinks|removeEventHandler|removeFromRemainsCollector|removeGoggles|removeGroupIcon|removeHandgunItem|removeHeadgear|removeItem|removeItemFromBackpack|removeItemFromUniform|removeItemFromVest|removeItems|removeMagazine|removeMagazineGlobal|removeMagazines|removeMagazinesTurret|removeMagazineTurret|removeMenuItem|removeMissionEventHandler|removeMPEventHandler|removeMusicEventHandler|removeOwnedMine|removePrimaryWeaponItem|removeSecondaryWeaponItem|removeSimpleTask|removeSwitchableUnit|removeTeamMember|removeUniform|removeVest|removeWeapon|removeWeaponAttachmentCargo|removeWeaponCargo|removeWeaponGlobal|removeWeaponTurret|reportRemoteTarget|requiredVersion|resetCamShake|resetSubgroupDirection|resistance|resize|resources|respawnVehicle|restartEditorCamera|reveal|revealMine|reverse|reversedMouseY|roadAt|roadsConnectedTo|roleDescription|ropeAttachedObjects|ropeAttachedTo|ropeAttachEnabled|ropeAttachTo|ropeCreate|ropeCut|ropeDestroy|ropeDetach|ropeEndPosition|ropeLength|ropes|ropeUnwind|ropeUnwound|rotorsForcesRTD|rotorsRpmRTD|round|runInitScript|safeZoneH|safeZoneW|safeZoneWAbs|safeZoneX|safeZoneXAbs|safeZoneY|save3DENInventory|saveGame|saveIdentity|saveJoysticks|saveOverlay|saveProfileNamespace|saveStatus|saveVar|savingEnabled|say|say2D|say3D|score|scoreSide|screenshot|screenToWorld|scriptDone|scriptName|scriptNull|scudState|secondaryWeapon|secondaryWeaponItems|secondaryWeaponMagazine|select|selectBestPlaces|selectDiarySubject|selectedEditorObjects|selectEditorObject|selectionNames|selectionPosition|selectLeader|selectMax|selectMin|selectNoPlayer|selectPlayer|selectRandom|selectRandomWeighted|selectWeapon|selectWeaponTurret|sendAUMessage|sendSimpleCommand|sendTask|sendTaskResult|sendUDPMessage|serverCommand|serverCommandAvailable|serverCommandExecutable|serverName|serverTime|set|set3DENAttribute|set3DENAttributes|set3DENGrid|set3DENIconsVisible|set3DENLayer|set3DENLinesVisible|set3DENLogicType|set3DENMissionAttribute|set3DENMissionAttributes|set3DENModelsVisible|set3DENObjectType|set3DENSelected|setAccTime|setActualCollectiveRTD|setAirplaneThrottle|setAirportSide|setAmmo|setAmmoCargo|setAmmoOnPylon|setAnimSpeedCoef|setAperture|setApertureNew|setArmoryPoints|setAttributes|setAutonomous|setBehaviour|setBleedingRemaining|setBrakesRTD|setCameraInterest|setCamShakeDefParams|setCamShakeParams|setCamUseTI|setCaptive|setCenterOfMass|setCollisionLight|setCombatMode|setCompassOscillation|setConvoySeparation|setCuratorCameraAreaCeiling|setCuratorCoef|setCuratorEditingAreaType|setCuratorWaypointCost|setCurrentChannel|setCurrentTask|setCurrentWaypoint|setCustomAimCoef|setCustomWeightRTD|setDamage|setDammage|setDate|setDebriefingText|setDefaultCamera|setDestination|setDetailMapBlendPars|setDir|setDirection|setDrawIcon|setDriveOnPath|setDropInterval|setDynamicSimulationDistance|setDynamicSimulationDistanceCoef|setEditorMode|setEditorObjectScope|setEffectCondition|setEngineRpmRTD|setFace|setFaceAnimation|setFatigue|setFeatureType|setFlagAnimationPhase|setFlagOwner|setFlagSide|setFlagTexture|setFog|setForceGeneratorRTD|setFormation|setFormationTask|setFormDir|setFriend|setFromEditor|setFSMVariable|setFuel|setFuelCargo|setGroupIcon|setGroupIconParams|setGroupIconsSelectable|setGroupIconsVisible|setGroupId|setGroupIdGlobal|setGroupOwner|setGusts|setHideBehind|setHit|setHitIndex|setHitPointDamage|setHorizonParallaxCoef|setHUDMovementLevels|setIdentity|setImportance|setInfoPanel|setLeader|setLightAmbient|setLightAttenuation|setLightBrightness|setLightColor|setLightDayLight|setLightFlareMaxDistance|setLightFlareSize|setLightIntensity|setLightnings|setLightUseFlare|setLocalWindParams|setMagazineTurretAmmo|setMarkerAlpha|setMarkerAlphaLocal|setMarkerBrush|setMarkerBrushLocal|setMarkerColor|setMarkerColorLocal|setMarkerDir|setMarkerDirLocal|setMarkerPos|setMarkerPosLocal|setMarkerShape|setMarkerShapeLocal|setMarkerSize|setMarkerSizeLocal|setMarkerText|setMarkerTextLocal|setMarkerType|setMarkerTypeLocal|setMass|setMimic|setMousePosition|setMusicEffect|setMusicEventHandler|setName|setNameSound|setObjectArguments|setObjectMaterial|setObjectMaterialGlobal|setObjectProxy|setObjectTexture|setObjectTextureGlobal|setObjectViewDistance|setOvercast|setOwner|setOxygenRemaining|setParticleCircle|setParticleClass|setParticleFire|setParticleParams|setParticleRandom|setPilotCameraDirection|setPilotCameraRotation|setPilotCameraTarget|setPilotLight|setPiPEffect|setPitch|setPlateNumber|setPlayable|setPlayerRespawnTime|setPos|setPosASL|setPosASL2|setPosASLW|setPosATL|setPosition|setPosWorld|setPylonLoadOut|setPylonsPriority|setRadioMsg|setRain|setRainbow|setRandomLip|setRank|setRectangular|setRepairCargo|setRotorBrakeRTD|setShadowDistance|setShotParents|setSide|setSimpleTaskAlwaysVisible|setSimpleTaskCustomData|setSimpleTaskDescription|setSimpleTaskDestination|setSimpleTaskTarget|setSimpleTaskType|setSimulWeatherLayers|setSize|setSkill|setSlingLoad|setSoundEffect|setSpeaker|setSpeech|setSpeedMode|setStamina|setStaminaScheme|setStatValue|setSuppression|setSystemOfUnits|setTargetAge|setTaskMarkerOffset|setTaskResult|setTaskState|setTerrainGrid|setText|setTimeMultiplier|setTitleEffect|setToneMapping|setToneMappingParams|setTrafficDensity|setTrafficDistance|setTrafficGap|setTrafficSpeed|setTriggerActivation|setTriggerArea|setTriggerStatements|setTriggerText|setTriggerTimeout|setTriggerType|setType|setUnconscious|setUnitAbility|setUnitLoadout|setUnitPos|setUnitPosWeak|setUnitRank|setUnitRecoilCoefficient|setUnitTrait|setUnloadInCombat|setUserActionText|setUserMFDText|setUserMFDValue|setVariable|setVectorDir|setVectorDirAndUp|setVectorUp|setVehicleAmmo|setVehicleAmmoDef|setVehicleArmor|setVehicleCargo|setVehicleId|setVehicleInit|setVehicleLock|setVehiclePosition|setVehicleRadar|setVehicleReceiveRemoteTargets|setVehicleReportOwnPosition|setVehicleReportRemoteTargets|setVehicleTIPars|setVehicleVarName|setVelocity|setVelocityModelSpace|setVelocityTransformation|setViewDistance|setVisibleIfTreeCollapsed|setWantedRpmRTD|setWaves|setWaypointBehaviour|setWaypointCombatMode|setWaypointCompletionRadius|setWaypointDescription|setWaypointForceBehaviour|setWaypointFormation|setWaypointHousePosition|setWaypointLoiterRadius|setWaypointLoiterType|setWaypointName|setWaypointPosition|setWaypointScript|setWaypointSpeed|setWaypointStatements|setWaypointTimeout|setWaypointType|setWaypointVisible|setWeaponReloadingTime|setWind|setWindDir|setWindForce|setWindStr|setWingForceScaleRTD|setWPPos|show3DIcons|showChat|showCinemaBorder|showCommandingMenu|showCompass|showCuratorCompass|showGPS|showHUD|showLegend|showMap|shownArtilleryComputer|shownChat|shownCompass|shownCuratorCompass|showNewEditorObject|shownGPS|shownHUD|shownMap|shownPad|shownRadio|shownScoretable|shownUAVFeed|shownWarrant|shownWatch|showPad|showRadio|showScoretable|showSubtitles|showUAVFeed|showWarrant|showWatch|showWaypoint|showWaypoints|side|sideAmbientLife|sideChat|sideEmpty|sideEnemy|sideFriendly|sideLogic|sideRadio|sideUnknown|simpleTasks|simulationEnabled|simulCloudDensity|simulCloudOcclusion|simulInClouds|simulWeatherSync|sin|size|sizeOf|skill|skillFinal|skipTime|sleep|sliderPosition|sliderRange|sliderSetPosition|sliderSetRange|sliderSetSpeed|sliderSpeed|slingLoadAssistantShown|soldierMagazines|someAmmo|sort|soundVolume|speaker|speed|speedMode|splitString|sqrt|squadParams|stance|startLoadingScreen|stop|stopEngineRTD|stopped|str|sunOrMoon|supportInfo|suppressFor|surfaceIsWater|surfaceNormal|surfaceType|swimInDepth|switchableUnits|switchAction|switchCamera|switchGesture|switchLight|switchMove|synchronizedObjects|synchronizedTriggers|synchronizedWaypoints|synchronizeObjectsAdd|synchronizeObjectsRemove|synchronizeTrigger|synchronizeWaypoint|systemChat|systemOfUnits|tan|targetKnowledge|targets|targetsAggregate|targetsQuery|taskAlwaysVisible|taskChildren|taskCompleted|taskCustomData|taskDescription|taskDestination|taskHint|taskMarkerOffset|taskNull|taskParent|taskResult|taskState|taskType|teamMember|teamMemberNull|teamName|teams|teamSwitch|teamSwitchEnabled|teamType|terminate|terrainIntersect|terrainIntersectASL|terrainIntersectAtASL|text|textLog|textLogFormat|tg|time|timeMultiplier|titleCut|titleFadeOut|titleObj|titleRsc|titleText|toArray|toFixed|toLower|toString|toUpper|triggerActivated|triggerActivation|triggerArea|triggerAttachedVehicle|triggerAttachObject|triggerAttachVehicle|triggerDynamicSimulation|triggerStatements|triggerText|triggerTimeout|triggerTimeoutCurrent|triggerType|turretLocal|turretOwner|turretUnit|tvAdd|tvClear|tvCollapse|tvCollapseAll|tvCount|tvCurSel|tvData|tvDelete|tvExpand|tvExpandAll|tvPicture|tvPictureRight|tvSetColor|tvSetCurSel|tvSetData|tvSetPicture|tvSetPictureColor|tvSetPictureColorDisabled|tvSetPictureColorSelected|tvSetPictureRight|tvSetPictureRightColor|tvSetPictureRightColorDisabled|tvSetPictureRightColorSelected|tvSetSelectColor|tvSetText|tvSetTooltip|tvSetValue|tvSort|tvSortByValue|tvText|tvTooltip|tvValue|type|typeName|typeOf|UAVControl|uiNamespace|uiSleep|unassignCurator|unassignItem|unassignTeam|unassignVehicle|underwater|uniform|uniformContainer|uniformItems|uniformMagazines|unitAddons|unitAimPosition|unitAimPositionVisual|unitBackpack|unitIsUAV|unitPos|unitReady|unitRecoilCoefficient|units|unitsBelowHeight|unlinkItem|unlockAchievement|unregisterTask|updateDrawIcon|updateMenuItem|updateObjectTree|useAIOperMapObstructionTest|useAISteeringComponent|useAudioTimeForMoves|userInputDisabled|vectorAdd|vectorCos|vectorCrossProduct|vectorDiff|vectorDir|vectorDirVisual|vectorDistance|vectorDistanceSqr|vectorDotProduct|vectorFromTo|vectorMagnitude|vectorMagnitudeSqr|vectorModelToWorld|vectorModelToWorldVisual|vectorMultiply|vectorNormalized|vectorUp|vectorUpVisual|vectorWorldToModel|vectorWorldToModelVisual|vehicle|vehicleCargoEnabled|vehicleChat|vehicleRadio|vehicleReceiveRemoteTargets|vehicleReportOwnPosition|vehicleReportRemoteTargets|vehicles|vehicleVarName|velocity|velocityModelSpace|verifySignature|vest|vestContainer|vestItems|vestMagazines|viewDistance|visibleCompass|visibleGPS|visibleMap|visiblePosition|visiblePositionASL|visibleScoretable|visibleWatch|waitUntil|waves|waypointAttachedObject|waypointAttachedVehicle|waypointAttachObject|waypointAttachVehicle|waypointBehaviour|waypointCombatMode|waypointCompletionRadius|waypointDescription|waypointForceBehaviour|waypointFormation|waypointHousePosition|waypointLoiterRadius|waypointLoiterType|waypointName|waypointPosition|waypoints|waypointScript|waypointsEnabledUAV|waypointShow|waypointSpeed|waypointStatements|waypointTimeout|waypointTimeoutCurrent|waypointType|waypointVisible|weaponAccessories|weaponAccessoriesCargo|weaponCargo|weaponDirection|weaponInertia|weaponLowered|weapons|weaponsItems|weaponsItemsCargo|weaponState|weaponsTurret|weightRTD|west|WFSideText|wind|windDir|windRTD|windStr|wingsForcesRTD|worldName|worldSize|worldToModel|worldToModelVisual|worldToScreen)\b/i,
          number: /(?:\$|\b0x)[\da-f]+\b|(?:\B\.\d+|\b\d+(?:\.\d+)?)(?:e[+-]?\d+)?\b/i,
          operator: /##|>>|&&|\|\||[!=<>]=?|[-+*/%#^]|\b(?:and|mod|not|or)\b/i,
          "magic-variable": {
            pattern: /\b(?:this|thisList|thisTrigger|_exception|_fnc_scriptName|_fnc_scriptNameParent|_forEachIndex|_this|_thisEventHandler|_thisFSM|_thisScript|_x)\b/i,
            alias: "keyword"
          },
          constant: /\bDIK(?:_[a-z\d]+)+\b/i
        });
        Prism.languages.insertBefore("sqf", "string", {
          macro: {
            pattern: /(^[ \t]*)#[a-z](?:[^\r\n\\]|\\(?:\r\n|[\s\S]))*/im,
            lookbehind: true,
            greedy: true,
            alias: "property",
            inside: {
              directive: {
                pattern: /#[a-z]+\b/i,
                alias: "keyword"
              },
              comment: Prism.languages.sqf.comment
            }
          }
        });
        delete Prism.languages.sqf["class-name"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/squirrel.js
  var require_squirrel = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/squirrel.js"(exports, module) {
      "use strict";
      module.exports = squirrel;
      squirrel.displayName = "squirrel";
      squirrel.aliases = [];
      function squirrel(Prism) {
        Prism.languages.squirrel = Prism.languages.extend("clike", {
          comment: [
            Prism.languages.clike["comment"][0],
            {
              pattern: /(^|[^\\:])(?:\/\/|#).*/,
              lookbehind: true,
              greedy: true
            }
          ],
          string: {
            pattern: /(^|[^\\"'@])(?:@"(?:[^"]|"")*"(?!")|"(?:[^\\\r\n"]|\\.)*")/,
            lookbehind: true,
            greedy: true
          },
          "class-name": {
            pattern: /(\b(?:class|enum|extends|instanceof)\s+)\w+(?:\.\w+)*/,
            lookbehind: true,
            inside: {
              punctuation: /\./
            }
          },
          keyword: /\b(?:__FILE__|__LINE__|base|break|case|catch|class|clone|const|constructor|continue|default|delete|else|enum|extends|for|foreach|function|if|in|instanceof|local|null|resume|return|static|switch|this|throw|try|typeof|while|yield)\b/,
          number: /\b(?:0x[0-9a-fA-F]+|\d+(?:\.(?:\d+|[eE][+-]?\d+))?)\b/,
          operator: /\+\+|--|<=>|<[-<]|>>>?|&&?|\|\|?|[-+*/%!=<>]=?|[~^]|::?/,
          punctuation: /[(){}\[\],;.]/
        });
        Prism.languages.insertBefore("squirrel", "string", {
          char: {
            pattern: /(^|[^\\"'])'(?:[^\\']|\\(?:[xuU][0-9a-fA-F]{0,8}|[\s\S]))'/,
            lookbehind: true,
            greedy: true
          }
        });
        Prism.languages.insertBefore("squirrel", "operator", {
          "attribute-punctuation": {
            pattern: /<\/|\/>/,
            alias: "important"
          },
          lambda: {
            pattern: /@(?=\()/,
            alias: "operator"
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/stan.js
  var require_stan = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/stan.js"(exports, module) {
      "use strict";
      module.exports = stan;
      stan.displayName = "stan";
      stan.aliases = [];
      function stan(Prism) {
        ;
        (function(Prism2) {
          var higherOrderFunctions = /\b(?:algebra_solver|algebra_solver_newton|integrate_1d|integrate_ode|integrate_ode_bdf|integrate_ode_rk45|map_rect|ode_(?:adams|bdf|ckrk|rk45)(?:_tol)?|ode_adjoint_tol_ctl|reduce_sum|reduce_sum_static)\b/;
          Prism2.languages.stan = {
            comment: /\/\/.*|\/\*[\s\S]*?\*\/|#(?!include).*/,
            string: {
              pattern: /"[\x20\x21\x23-\x5B\x5D-\x7E]*"/,
              greedy: true
            },
            directive: {
              pattern: /^([ \t]*)#include\b.*/m,
              lookbehind: true,
              alias: "property"
            },
            "function-arg": {
              pattern: RegExp(
                "(" + higherOrderFunctions.source + /\s*\(\s*/.source + ")" + /[a-zA-Z]\w*/.source
              ),
              lookbehind: true,
              alias: "function"
            },
            constraint: {
              pattern: /(\b(?:int|matrix|real|row_vector|vector)\s*)<[^<>]*>/,
              lookbehind: true,
              inside: {
                expression: {
                  pattern: /(=\s*)\S(?:\S|\s+(?!\s))*?(?=\s*(?:>$|,\s*\w+\s*=))/,
                  lookbehind: true,
                  inside: null
                },
                property: /\b[a-z]\w*(?=\s*=)/i,
                operator: /=/,
                punctuation: /^<|>$|,/
              }
            },
            keyword: [
              {
                pattern: /\bdata(?=\s*\{)|\b(?:functions|generated|model|parameters|quantities|transformed)\b/,
                alias: "program-block"
              },
              /\b(?:array|break|cholesky_factor_corr|cholesky_factor_cov|complex|continue|corr_matrix|cov_matrix|data|else|for|if|in|increment_log_prob|int|matrix|ordered|positive_ordered|print|real|reject|return|row_vector|simplex|target|unit_vector|vector|void|while)\b/,
              higherOrderFunctions
            ],
            function: /\b[a-z]\w*(?=\s*\()/i,
            number: /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:E[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,
            boolean: /\b(?:false|true)\b/,
            operator: /<-|\.[*/]=?|\|\|?|&&|[!=<>+\-*/]=?|['^%~?:]/,
            punctuation: /[()\[\]{},;]/
          };
          Prism2.languages.stan.constraint.inside.expression.inside = Prism2.languages.stan;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/stylus.js
  var require_stylus = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/stylus.js"(exports, module) {
      "use strict";
      module.exports = stylus;
      stylus.displayName = "stylus";
      stylus.aliases = [];
      function stylus(Prism) {
        ;
        (function(Prism2) {
          var unit = {
            pattern: /(\b\d+)(?:%|[a-z]+)/,
            lookbehind: true
          };
          var number3 = {
            pattern: /(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,
            lookbehind: true
          };
          var inside = {
            comment: {
              pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
              lookbehind: true
            },
            url: {
              pattern: /\burl\((["']?).*?\1\)/i,
              greedy: true
            },
            string: {
              pattern: /("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,
              greedy: true
            },
            interpolation: null,
            func: null,
            important: /\B!(?:important|optional)\b/i,
            keyword: {
              pattern: /(^|\s+)(?:(?:else|for|if|return|unless)(?=\s|$)|@[\w-]+)/,
              lookbehind: true
            },
            hexcode: /#[\da-f]{3,6}/i,
            color: [
              /\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i,
              {
                pattern: /\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,
                inside: {
                  unit,
                  number: number3,
                  function: /[\w-]+(?=\()/,
                  punctuation: /[(),]/
                }
              }
            ],
            entity: /\\[\da-f]{1,8}/i,
            unit,
            boolean: /\b(?:false|true)\b/,
            operator: [
              /~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/
            ],
            number: number3,
            punctuation: /[{}()\[\];:,]/
          };
          inside["interpolation"] = {
            pattern: /\{[^\r\n}:]+\}/,
            alias: "variable",
            inside: {
              delimiter: {
                pattern: /^\{|\}$/,
                alias: "punctuation"
              },
              rest: inside
            }
          };
          inside["func"] = {
            pattern: /[\w-]+\([^)]*\).*/,
            inside: {
              function: /^[^(]+/,
              rest: inside
            }
          };
          Prism2.languages.stylus = {
            "atrule-declaration": {
              pattern: /(^[ \t]*)@.+/m,
              lookbehind: true,
              inside: {
                atrule: /^@[\w-]+/,
                rest: inside
              }
            },
            "variable-declaration": {
              pattern: /(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,
              lookbehind: true,
              inside: {
                variable: /^\S+/,
                rest: inside
              }
            },
            statement: {
              pattern: /(^[ \t]*)(?:else|for|if|return|unless)[ \t].+/m,
              lookbehind: true,
              inside: {
                keyword: /^\S+/,
                rest: inside
              }
            },
            "property-declaration": {
              pattern: /((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,
              lookbehind: true,
              inside: {
                property: {
                  pattern: /^[^\s:]+/,
                  inside: {
                    interpolation: inside.interpolation
                  }
                },
                rest: inside
              }
            },
            selector: {
              pattern: /(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,
              lookbehind: true,
              inside: {
                interpolation: inside.interpolation,
                comment: inside.comment,
                punctuation: /[{},]/
              }
            },
            func: inside.func,
            string: inside.string,
            comment: {
              pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,
              lookbehind: true,
              greedy: true
            },
            interpolation: inside.interpolation,
            punctuation: /[{}()\[\];:.]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/swift.js
  var require_swift = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/swift.js"(exports, module) {
      "use strict";
      module.exports = swift;
      swift.displayName = "swift";
      swift.aliases = [];
      function swift(Prism) {
        Prism.languages.swift = {
          comment: {
            pattern: /(^|[^\\:])(?:\/\/.*|\/\*(?:[^/*]|\/(?!\*)|\*(?!\/)|\/\*(?:[^*]|\*(?!\/))*\*\/)*\*\/)/,
            lookbehind: true,
            greedy: true
          },
          "string-literal": [
            {
              pattern: RegExp(
                /(^|[^"#])/.source + "(?:" + /"(?:\\(?:\((?:[^()]|\([^()]*\))*\)|\r\n|[^(])|[^\\\r\n"])*"/.source + "|" + /"""(?:\\(?:\((?:[^()]|\([^()]*\))*\)|[^(])|[^\\"]|"(?!""))*"""/.source + ")" + /(?!["#])/.source
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                interpolation: {
                  pattern: /(\\\()(?:[^()]|\([^()]*\))*(?=\))/,
                  lookbehind: true,
                  inside: null
                },
                "interpolation-punctuation": {
                  pattern: /^\)|\\\($/,
                  alias: "punctuation"
                },
                punctuation: /\\(?=[\r\n])/,
                string: /[\s\S]+/
              }
            },
            {
              pattern: RegExp(
                /(^|[^"#])(#+)/.source + "(?:" + /"(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|\r\n|[^#])|[^\\\r\n])*?"/.source + "|" + /"""(?:\\(?:#+\((?:[^()]|\([^()]*\))*\)|[^#])|[^\\])*?"""/.source + ")\\2"
              ),
              lookbehind: true,
              greedy: true,
              inside: {
                interpolation: {
                  pattern: /(\\#+\()(?:[^()]|\([^()]*\))*(?=\))/,
                  lookbehind: true,
                  inside: null
                },
                "interpolation-punctuation": {
                  pattern: /^\)|\\#+\($/,
                  alias: "punctuation"
                },
                string: /[\s\S]+/
              }
            }
          ],
          directive: {
            pattern: RegExp(
              /#/.source + "(?:" + (/(?:elseif|if)\b/.source + "(?:[ 	]*" + /(?:![ \t]*)?(?:\b\w+\b(?:[ \t]*\((?:[^()]|\([^()]*\))*\))?|\((?:[^()]|\([^()]*\))*\))(?:[ \t]*(?:&&|\|\|))?/.source + ")+") + "|" + /(?:else|endif)\b/.source + ")"
            ),
            alias: "property",
            inside: {
              "directive-name": /^#\w+/,
              boolean: /\b(?:false|true)\b/,
              number: /\b\d+(?:\.\d+)*\b/,
              operator: /!|&&|\|\||[<>]=?/,
              punctuation: /[(),]/
            }
          },
          literal: {
            pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\b/,
            alias: "constant"
          },
          "other-directive": {
            pattern: /#\w+\b/,
            alias: "property"
          },
          attribute: {
            pattern: /@\w+/,
            alias: "atrule"
          },
          "function-definition": {
            pattern: /(\bfunc\s+)\w+/,
            lookbehind: true,
            alias: "function"
          },
          label: {
            pattern: /\b(break|continue)\s+\w+|\b[a-zA-Z_]\w*(?=\s*:\s*(?:for|repeat|while)\b)/,
            lookbehind: true,
            alias: "important"
          },
          keyword: /\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\b/,
          boolean: /\b(?:false|true)\b/,
          nil: {
            pattern: /\bnil\b/,
            alias: "constant"
          },
          "short-argument": /\$\d+\b/,
          omit: {
            pattern: /\b_\b/,
            alias: "keyword"
          },
          number: /\b(?:[\d_]+(?:\.[\de_]+)?|0x[a-f0-9_]+(?:\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\b/i,
          "class-name": /\b[A-Z](?:[A-Z_\d]*[a-z]\w*)?\b/,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          constant: /\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\b/,
          operator: /[-+*/%=!<>&|^~?]+|\.[.\-+*/%=!<>&|^~?]+/,
          punctuation: /[{}[\]();,.:\\]/
        };
        Prism.languages.swift["string-literal"].forEach(function(rule) {
          rule.inside["interpolation"].inside = Prism.languages.swift;
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/systemd.js
  var require_systemd = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/systemd.js"(exports, module) {
      "use strict";
      module.exports = systemd;
      systemd.displayName = "systemd";
      systemd.aliases = [];
      function systemd(Prism) {
        ;
        (function(Prism2) {
          var comment2 = {
            pattern: /^[;#].*/m,
            greedy: true
          };
          var quotesSource = /"(?:[^\r\n"\\]|\\(?:[^\r]|\r\n?))*"(?!\S)/.source;
          Prism2.languages.systemd = {
            comment: comment2,
            section: {
              pattern: /^\[[^\n\r\[\]]*\](?=[ \t]*$)/m,
              greedy: true,
              inside: {
                punctuation: /^\[|\]$/,
                "section-name": {
                  pattern: /[\s\S]+/,
                  alias: "selector"
                }
              }
            },
            key: {
              pattern: /^[^\s=]+(?=[ \t]*=)/m,
              greedy: true,
              alias: "attr-name"
            },
            value: {
              pattern: RegExp(
                /(=[ \t]*(?!\s))/.source + "(?:" + quotesSource + '|(?=[^"\r\n]))(?:' + (/[^\s\\]/.source + '|[ 	]+(?:(?![ 	"])|' + quotesSource + ")|" + /\\[\r\n]+(?:[#;].*[\r\n]+)*(?![#;])/.source) + ")*"
              ),
              lookbehind: true,
              greedy: true,
              alias: "attr-value",
              inside: {
                comment: comment2,
                quoted: {
                  pattern: RegExp(/(^|\s)/.source + quotesSource),
                  lookbehind: true,
                  greedy: true
                },
                punctuation: /\\$/m,
                boolean: {
                  pattern: /^(?:false|no|off|on|true|yes)$/,
                  greedy: true
                }
              }
            },
            punctuation: /=/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/t4-templating.js
  var require_t4_templating = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/t4-templating.js"(exports, module) {
      "use strict";
      module.exports = t4Templating;
      t4Templating.displayName = "t4Templating";
      t4Templating.aliases = [];
      function t4Templating(Prism) {
        ;
        (function(Prism2) {
          function createBlock(prefix, inside, contentAlias) {
            return {
              pattern: RegExp("<#" + prefix + "[\\s\\S]*?#>"),
              alias: "block",
              inside: {
                delimiter: {
                  pattern: RegExp("^<#" + prefix + "|#>$"),
                  alias: "important"
                },
                content: {
                  pattern: /[\s\S]+/,
                  inside,
                  alias: contentAlias
                }
              }
            };
          }
          function createT4(insideLang) {
            var grammar = Prism2.languages[insideLang];
            var className = "language-" + insideLang;
            return {
              block: {
                pattern: /<#[\s\S]+?#>/,
                inside: {
                  directive: createBlock("@", {
                    "attr-value": {
                      pattern: /=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+)/,
                      inside: {
                        punctuation: /^=|^["']|["']$/
                      }
                    },
                    keyword: /\b\w+(?=\s)/,
                    "attr-name": /\b\w+/
                  }),
                  expression: createBlock("=", grammar, className),
                  "class-feature": createBlock("\\+", grammar, className),
                  standard: createBlock("", grammar, className)
                }
              }
            };
          }
          Prism2.languages["t4-templating"] = Object.defineProperty({}, "createT4", {
            value: createT4
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/t4-cs.js
  var require_t4_cs = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/t4-cs.js"(exports, module) {
      "use strict";
      var refractorT4Templating = require_t4_templating();
      var refractorCsharp = require_csharp();
      module.exports = t4Cs;
      t4Cs.displayName = "t4Cs";
      t4Cs.aliases = [];
      function t4Cs(Prism) {
        Prism.register(refractorT4Templating);
        Prism.register(refractorCsharp);
        Prism.languages.t4 = Prism.languages["t4-cs"] = Prism.languages["t4-templating"].createT4("csharp");
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/vbnet.js
  var require_vbnet = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/vbnet.js"(exports, module) {
      "use strict";
      var refractorBasic = require_basic();
      module.exports = vbnet;
      vbnet.displayName = "vbnet";
      vbnet.aliases = [];
      function vbnet(Prism) {
        Prism.register(refractorBasic);
        Prism.languages.vbnet = Prism.languages.extend("basic", {
          comment: [
            {
              pattern: /(?:!|REM\b).+/i,
              inside: {
                keyword: /^REM/i
              }
            },
            {
              pattern: /(^|[^\\:])'.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          string: {
            pattern: /(^|[^"])"(?:""|[^"])*"(?!")/,
            lookbehind: true,
            greedy: true
          },
          keyword: /(?:\b(?:ADDHANDLER|ADDRESSOF|ALIAS|AND|ANDALSO|AS|BEEP|BLOAD|BOOLEAN|BSAVE|BYREF|BYTE|BYVAL|CALL(?: ABSOLUTE)?|CASE|CATCH|CBOOL|CBYTE|CCHAR|CDATE|CDBL|CDEC|CHAIN|CHAR|CHDIR|CINT|CLASS|CLEAR|CLNG|CLOSE|CLS|COBJ|COM|COMMON|CONST|CONTINUE|CSBYTE|CSHORT|CSNG|CSTR|CTYPE|CUINT|CULNG|CUSHORT|DATA|DATE|DECIMAL|DECLARE|DEF(?: FN| SEG|DBL|INT|LNG|SNG|STR)|DEFAULT|DELEGATE|DIM|DIRECTCAST|DO|DOUBLE|ELSE|ELSEIF|END|ENUM|ENVIRON|ERASE|ERROR|EVENT|EXIT|FALSE|FIELD|FILES|FINALLY|FOR(?: EACH)?|FRIEND|FUNCTION|GET|GETTYPE|GETXMLNAMESPACE|GLOBAL|GOSUB|GOTO|HANDLES|IF|IMPLEMENTS|IMPORTS|IN|INHERITS|INPUT|INTEGER|INTERFACE|IOCTL|IS|ISNOT|KEY|KILL|LET|LIB|LIKE|LINE INPUT|LOCATE|LOCK|LONG|LOOP|LSET|ME|MKDIR|MOD|MODULE|MUSTINHERIT|MUSTOVERRIDE|MYBASE|MYCLASS|NAME|NAMESPACE|NARROWING|NEW|NEXT|NOT|NOTHING|NOTINHERITABLE|NOTOVERRIDABLE|OBJECT|OF|OFF|ON(?: COM| ERROR| KEY| TIMER)?|OPEN|OPERATOR|OPTION(?: BASE)?|OPTIONAL|OR|ORELSE|OUT|OVERLOADS|OVERRIDABLE|OVERRIDES|PARAMARRAY|PARTIAL|POKE|PRIVATE|PROPERTY|PROTECTED|PUBLIC|PUT|RAISEEVENT|READ|READONLY|REDIM|REM|REMOVEHANDLER|RESTORE|RESUME|RETURN|RMDIR|RSET|RUN|SBYTE|SELECT(?: CASE)?|SET|SHADOWS|SHARED|SHELL|SHORT|SINGLE|SLEEP|STATIC|STEP|STOP|STRING|STRUCTURE|SUB|SWAP|SYNCLOCK|SYSTEM|THEN|THROW|TIMER|TO|TROFF|TRON|TRUE|TRY|TRYCAST|TYPE|TYPEOF|UINTEGER|ULONG|UNLOCK|UNTIL|USHORT|USING|VIEW PRINT|WAIT|WEND|WHEN|WHILE|WIDENING|WITH|WITHEVENTS|WRITE|WRITEONLY|XOR)|\B(?:#CONST|#ELSE|#ELSEIF|#END|#IF))(?:\$|\b)/i,
          punctuation: /[,;:(){}]/
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/t4-vb.js
  var require_t4_vb = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/t4-vb.js"(exports, module) {
      "use strict";
      var refractorT4Templating = require_t4_templating();
      var refractorVbnet = require_vbnet();
      module.exports = t4Vb;
      t4Vb.displayName = "t4Vb";
      t4Vb.aliases = [];
      function t4Vb(Prism) {
        Prism.register(refractorT4Templating);
        Prism.register(refractorVbnet);
        Prism.languages["t4-vb"] = Prism.languages["t4-templating"].createT4("vbnet");
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/yaml.js
  var require_yaml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/yaml.js"(exports, module) {
      "use strict";
      module.exports = yaml;
      yaml.displayName = "yaml";
      yaml.aliases = ["yml"];
      function yaml(Prism) {
        ;
        (function(Prism2) {
          var anchorOrAlias = /[*&][^\s[\]{},]+/;
          var tag = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/;
          var properties = "(?:" + tag.source + "(?:[ 	]+" + anchorOrAlias.source + ")?|" + anchorOrAlias.source + "(?:[ 	]+" + tag.source + ")?)";
          var plainKey = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(
            /<PLAIN>/g,
            function() {
              return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
            }
          );
          var string3 = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;
          function createValuePattern(value, flags) {
            flags = (flags || "").replace(/m/g, "") + "m";
            var pattern = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function() {
              return properties;
            }).replace(/<<value>>/g, function() {
              return value;
            });
            return RegExp(pattern, flags);
          }
          Prism2.languages.yaml = {
            scalar: {
              pattern: RegExp(
                /([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(
                  /<<prop>>/g,
                  function() {
                    return properties;
                  }
                )
              ),
              lookbehind: true,
              alias: "string"
            },
            comment: /#.*/,
            key: {
              pattern: RegExp(
                /((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function() {
                  return properties;
                }).replace(/<<key>>/g, function() {
                  return "(?:" + plainKey + "|" + string3 + ")";
                })
              ),
              lookbehind: true,
              greedy: true,
              alias: "atrule"
            },
            directive: {
              pattern: /(^[ \t]*)%.+/m,
              lookbehind: true,
              alias: "important"
            },
            datetime: {
              pattern: createValuePattern(
                /\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source
              ),
              lookbehind: true,
              alias: "number"
            },
            boolean: {
              pattern: createValuePattern(/false|true/.source, "i"),
              lookbehind: true,
              alias: "important"
            },
            null: {
              pattern: createValuePattern(/null|~/.source, "i"),
              lookbehind: true,
              alias: "important"
            },
            string: {
              pattern: createValuePattern(string3),
              lookbehind: true,
              greedy: true
            },
            number: {
              pattern: createValuePattern(
                /[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,
                "i"
              ),
              lookbehind: true
            },
            tag,
            important: anchorOrAlias,
            punctuation: /---|[:[\]{}\-,|>?]|\.\.\./
          };
          Prism2.languages.yml = Prism2.languages.yaml;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/tap.js
  var require_tap = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/tap.js"(exports, module) {
      "use strict";
      var refractorYaml = require_yaml();
      module.exports = tap;
      tap.displayName = "tap";
      tap.aliases = [];
      function tap(Prism) {
        Prism.register(refractorYaml);
        Prism.languages.tap = {
          fail: /not ok[^#{\n\r]*/,
          pass: /ok[^#{\n\r]*/,
          pragma: /pragma [+-][a-z]+/,
          bailout: /bail out!.*/i,
          version: /TAP version \d+/i,
          plan: /\b\d+\.\.\d+(?: +#.*)?/,
          subtest: {
            pattern: /# Subtest(?:: .*)?/,
            greedy: true
          },
          punctuation: /[{}]/,
          directive: /#.*/,
          yamlish: {
            pattern: /(^[ \t]*)---[\s\S]*?[\r\n][ \t]*\.\.\.$/m,
            lookbehind: true,
            inside: Prism.languages.yaml,
            alias: "language-yaml"
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/tcl.js
  var require_tcl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/tcl.js"(exports, module) {
      "use strict";
      module.exports = tcl;
      tcl.displayName = "tcl";
      tcl.aliases = [];
      function tcl(Prism) {
        Prism.languages.tcl = {
          comment: {
            pattern: /(^|[^\\])#.*/,
            lookbehind: true
          },
          string: {
            pattern: /"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*"/,
            greedy: true
          },
          variable: [
            {
              pattern: /(\$)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/,
              lookbehind: true
            },
            {
              pattern: /(\$)\{[^}]+\}/,
              lookbehind: true
            },
            {
              pattern: /(^[\t ]*set[ \t]+)(?:::)?(?:[a-zA-Z0-9]+::)*\w+/m,
              lookbehind: true
            }
          ],
          function: {
            pattern: /(^[\t ]*proc[ \t]+)\S+/m,
            lookbehind: true
          },
          builtin: [
            {
              pattern: /(^[\t ]*)(?:break|class|continue|error|eval|exit|for|foreach|if|proc|return|switch|while)\b/m,
              lookbehind: true
            },
            /\b(?:else|elseif)\b/
          ],
          scope: {
            pattern: /(^[\t ]*)(?:global|upvar|variable)\b/m,
            lookbehind: true,
            alias: "constant"
          },
          keyword: {
            pattern: /(^[\t ]*|\[)(?:Safe_Base|Tcl|after|append|apply|array|auto_(?:execok|import|load|mkindex|qualify|reset)|automkindex_old|bgerror|binary|catch|cd|chan|clock|close|concat|dde|dict|encoding|eof|exec|expr|fblocked|fconfigure|fcopy|file(?:event|name)?|flush|gets|glob|history|http|incr|info|interp|join|lappend|lassign|lindex|linsert|list|llength|load|lrange|lrepeat|lreplace|lreverse|lsearch|lset|lsort|math(?:func|op)|memory|msgcat|namespace|open|package|parray|pid|pkg_mkIndex|platform|puts|pwd|re_syntax|read|refchan|regexp|registry|regsub|rename|scan|seek|set|socket|source|split|string|subst|tcl(?:_endOfWord|_findLibrary|startOf(?:Next|Previous)Word|test|vars|wordBreak(?:After|Before))|tell|time|tm|trace|unknown|unload|unset|update|uplevel|vwait)\b/m,
            lookbehind: true
          },
          operator: /!=?|\*\*?|==|&&?|\|\|?|<[=<]?|>[=>]?|[-+~\/%?^]|\b(?:eq|in|ne|ni)\b/,
          punctuation: /[{}()\[\]]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/textile.js
  var require_textile = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/textile.js"(exports, module) {
      "use strict";
      module.exports = textile;
      textile.displayName = "textile";
      textile.aliases = [];
      function textile(Prism) {
        ;
        (function(Prism2) {
          var modifierRegex = /\([^|()\n]+\)|\[[^\]\n]+\]|\{[^}\n]+\}/.source;
          var parenthesesRegex = /\)|\((?![^|()\n]+\))/.source;
          function withModifier(source, flags) {
            return RegExp(
              source.replace(/<MOD>/g, function() {
                return "(?:" + modifierRegex + ")";
              }).replace(/<PAR>/g, function() {
                return "(?:" + parenthesesRegex + ")";
              }),
              flags || ""
            );
          }
          var modifierTokens = {
            css: {
              pattern: /\{[^{}]+\}/,
              inside: {
                rest: Prism2.languages.css
              }
            },
            "class-id": {
              pattern: /(\()[^()]+(?=\))/,
              lookbehind: true,
              alias: "attr-value"
            },
            lang: {
              pattern: /(\[)[^\[\]]+(?=\])/,
              lookbehind: true,
              alias: "attr-value"
            },
            punctuation: /[\\\/]\d+|\S/
          };
          var textile2 = Prism2.languages.textile = Prism2.languages.extend("markup", {
            phrase: {
              pattern: /(^|\r|\n)\S[\s\S]*?(?=$|\r?\n\r?\n|\r\r)/,
              lookbehind: true,
              inside: {
                "block-tag": {
                  pattern: withModifier(/^[a-z]\w*(?:<MOD>|<PAR>|[<>=])*\./.source),
                  inside: {
                    modifier: {
                      pattern: withModifier(
                        /(^[a-z]\w*)(?:<MOD>|<PAR>|[<>=])+(?=\.)/.source
                      ),
                      lookbehind: true,
                      inside: modifierTokens
                    },
                    tag: /^[a-z]\w*/,
                    punctuation: /\.$/
                  }
                },
                list: {
                  pattern: withModifier(/^[*#]+<MOD>*\s+\S.*/.source, "m"),
                  inside: {
                    modifier: {
                      pattern: withModifier(/(^[*#]+)<MOD>+/.source),
                      lookbehind: true,
                      inside: modifierTokens
                    },
                    punctuation: /^[*#]+/
                  }
                },
                table: {
                  pattern: withModifier(
                    /^(?:(?:<MOD>|<PAR>|[<>=^~])+\.\s*)?(?:\|(?:(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+\.|(?!(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+\.))[^|]*)+\|/.source,
                    "m"
                  ),
                  inside: {
                    modifier: {
                      pattern: withModifier(
                        /(^|\|(?:\r?\n|\r)?)(?:<MOD>|<PAR>|[<>=^~_]|[\\/]\d+)+(?=\.)/.source
                      ),
                      lookbehind: true,
                      inside: modifierTokens
                    },
                    punctuation: /\||^\./
                  }
                },
                inline: {
                  pattern: withModifier(
                    /(^|[^a-zA-Z\d])(\*\*|__|\?\?|[*_%@+\-^~])<MOD>*.+?\2(?![a-zA-Z\d])/.source
                  ),
                  lookbehind: true,
                  inside: {
                    bold: {
                      pattern: withModifier(/(^(\*\*?)<MOD>*).+?(?=\2)/.source),
                      lookbehind: true
                    },
                    italic: {
                      pattern: withModifier(/(^(__?)<MOD>*).+?(?=\2)/.source),
                      lookbehind: true
                    },
                    cite: {
                      pattern: withModifier(/(^\?\?<MOD>*).+?(?=\?\?)/.source),
                      lookbehind: true,
                      alias: "string"
                    },
                    code: {
                      pattern: withModifier(/(^@<MOD>*).+?(?=@)/.source),
                      lookbehind: true,
                      alias: "keyword"
                    },
                    inserted: {
                      pattern: withModifier(/(^\+<MOD>*).+?(?=\+)/.source),
                      lookbehind: true
                    },
                    deleted: {
                      pattern: withModifier(/(^-<MOD>*).+?(?=-)/.source),
                      lookbehind: true
                    },
                    span: {
                      pattern: withModifier(/(^%<MOD>*).+?(?=%)/.source),
                      lookbehind: true
                    },
                    modifier: {
                      pattern: withModifier(
                        /(^\*\*|__|\?\?|[*_%@+\-^~])<MOD>+/.source
                      ),
                      lookbehind: true,
                      inside: modifierTokens
                    },
                    punctuation: /[*_%?@+\-^~]+/
                  }
                },
                "link-ref": {
                  pattern: /^\[[^\]]+\]\S+$/m,
                  inside: {
                    string: {
                      pattern: /(^\[)[^\]]+(?=\])/,
                      lookbehind: true
                    },
                    url: {
                      pattern: /(^\])\S+$/,
                      lookbehind: true
                    },
                    punctuation: /[\[\]]/
                  }
                },
                link: {
                  pattern: withModifier(
                    /"<MOD>*[^"]+":.+?(?=[^\w/]?(?:\s|$))/.source
                  ),
                  inside: {
                    text: {
                      pattern: withModifier(/(^"<MOD>*)[^"]+(?=")/.source),
                      lookbehind: true
                    },
                    modifier: {
                      pattern: withModifier(/(^")<MOD>+/.source),
                      lookbehind: true,
                      inside: modifierTokens
                    },
                    url: {
                      pattern: /(:).+/,
                      lookbehind: true
                    },
                    punctuation: /[":]/
                  }
                },
                image: {
                  pattern: withModifier(
                    /!(?:<MOD>|<PAR>|[<>=])*(?![<>=])[^!\s()]+(?:\([^)]+\))?!(?::.+?(?=[^\w/]?(?:\s|$)))?/.source
                  ),
                  inside: {
                    source: {
                      pattern: withModifier(
                        /(^!(?:<MOD>|<PAR>|[<>=])*)(?![<>=])[^!\s()]+(?:\([^)]+\))?(?=!)/.source
                      ),
                      lookbehind: true,
                      alias: "url"
                    },
                    modifier: {
                      pattern: withModifier(/(^!)(?:<MOD>|<PAR>|[<>=])+/.source),
                      lookbehind: true,
                      inside: modifierTokens
                    },
                    url: {
                      pattern: /(:).+/,
                      lookbehind: true
                    },
                    punctuation: /[!:]/
                  }
                },
                footnote: {
                  pattern: /\b\[\d+\]/,
                  alias: "comment",
                  inside: {
                    punctuation: /\[|\]/
                  }
                },
                acronym: {
                  pattern: /\b[A-Z\d]+\([^)]+\)/,
                  inside: {
                    comment: {
                      pattern: /(\()[^()]+(?=\))/,
                      lookbehind: true
                    },
                    punctuation: /[()]/
                  }
                },
                mark: {
                  pattern: /\b\((?:C|R|TM)\)/,
                  alias: "comment",
                  inside: {
                    punctuation: /[()]/
                  }
                }
              }
            }
          });
          var phraseInside = textile2["phrase"].inside;
          var nestedPatterns = {
            inline: phraseInside["inline"],
            link: phraseInside["link"],
            image: phraseInside["image"],
            footnote: phraseInside["footnote"],
            acronym: phraseInside["acronym"],
            mark: phraseInside["mark"]
          };
          textile2.tag.pattern = /<\/?(?!\d)[a-z0-9]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/i;
          var phraseInlineInside = phraseInside["inline"].inside;
          phraseInlineInside["bold"].inside = nestedPatterns;
          phraseInlineInside["italic"].inside = nestedPatterns;
          phraseInlineInside["inserted"].inside = nestedPatterns;
          phraseInlineInside["deleted"].inside = nestedPatterns;
          phraseInlineInside["span"].inside = nestedPatterns;
          var phraseTableInside = phraseInside["table"].inside;
          phraseTableInside["inline"] = nestedPatterns["inline"];
          phraseTableInside["link"] = nestedPatterns["link"];
          phraseTableInside["image"] = nestedPatterns["image"];
          phraseTableInside["footnote"] = nestedPatterns["footnote"];
          phraseTableInside["acronym"] = nestedPatterns["acronym"];
          phraseTableInside["mark"] = nestedPatterns["mark"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/toml.js
  var require_toml = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/toml.js"(exports, module) {
      "use strict";
      module.exports = toml;
      toml.displayName = "toml";
      toml.aliases = [];
      function toml(Prism) {
        ;
        (function(Prism2) {
          var key = /(?:[\w-]+|'[^'\n\r]*'|"(?:\\.|[^\\"\r\n])*")/.source;
          function insertKey(pattern) {
            return pattern.replace(/__/g, function() {
              return key;
            });
          }
          Prism2.languages.toml = {
            comment: {
              pattern: /#.*/,
              greedy: true
            },
            table: {
              pattern: RegExp(
                insertKey(
                  /(^[\t ]*\[\s*(?:\[\s*)?)__(?:\s*\.\s*__)*(?=\s*\])/.source
                ),
                "m"
              ),
              lookbehind: true,
              greedy: true,
              alias: "class-name"
            },
            key: {
              pattern: RegExp(
                insertKey(/(^[\t ]*|[{,]\s*)__(?:\s*\.\s*__)*(?=\s*=)/.source),
                "m"
              ),
              lookbehind: true,
              greedy: true,
              alias: "property"
            },
            string: {
              pattern: /"""(?:\\[\s\S]|[^\\])*?"""|'''[\s\S]*?'''|'[^'\n\r]*'|"(?:\\.|[^\\"\r\n])*"/,
              greedy: true
            },
            date: [
              {
                pattern: /\b\d{4}-\d{2}-\d{2}(?:[T\s]\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?)?\b/i,
                alias: "number"
              },
              {
                pattern: /\b\d{2}:\d{2}:\d{2}(?:\.\d+)?\b/,
                alias: "number"
              }
            ],
            number: /(?:\b0(?:x[\da-zA-Z]+(?:_[\da-zA-Z]+)*|o[0-7]+(?:_[0-7]+)*|b[10]+(?:_[10]+)*))\b|[-+]?\b\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?(?:[eE][+-]?\d+(?:_\d+)*)?\b|[-+]?\b(?:inf|nan)\b/,
            boolean: /\b(?:false|true)\b/,
            punctuation: /[.,=[\]{}]/
          };
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/tremor.js
  var require_tremor = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/tremor.js"(exports, module) {
      "use strict";
      module.exports = tremor;
      tremor.displayName = "tremor";
      tremor.aliases = [];
      function tremor(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.tremor = {
            comment: {
              pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
              lookbehind: true
            },
            "interpolated-string": null,
            extractor: {
              pattern: /\b[a-z_]\w*\|(?:[^\r\n\\|]|\\(?:\r\n|[\s\S]))*\|/i,
              greedy: true,
              inside: {
                regex: {
                  pattern: /(^re)\|[\s\S]+/,
                  lookbehind: true
                },
                function: /^\w+/,
                value: /\|[\s\S]+/
              }
            },
            identifier: {
              pattern: /`[^`]*`/,
              greedy: true
            },
            function: /\b[a-z_]\w*(?=\s*(?:::\s*<|\())\b/,
            keyword: /\b(?:args|as|by|case|config|connect|connector|const|copy|create|default|define|deploy|drop|each|emit|end|erase|event|flow|fn|for|from|group|having|insert|into|intrinsic|let|links|match|merge|mod|move|of|operator|patch|pipeline|recur|script|select|set|sliding|state|stream|to|tumbling|update|use|when|where|window|with)\b/,
            boolean: /\b(?:false|null|true)\b/i,
            number: /\b(?:0b[01_]*|0x[0-9a-fA-F_]*|\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee][+-]?[\d_]+)?)\b/,
            "pattern-punctuation": {
              pattern: /%(?=[({[])/,
              alias: "punctuation"
            },
            operator: /[-+*\/%~!^]=?|=[=>]?|&[&=]?|\|[|=]?|<<?=?|>>?>?=?|(?:absent|and|not|or|present|xor)\b/,
            punctuation: /::|[;\[\]()\{\},.:]/
          };
          var interpolationPattern = /#\{(?:[^"{}]|\{[^{}]*\}|"(?:[^"\\\r\n]|\\(?:\r\n|[\s\S]))*")*\}/.source;
          Prism2.languages.tremor["interpolated-string"] = {
            pattern: RegExp(
              /(^|[^\\])/.source + '(?:"""(?:' + /[^"\\#]|\\[\s\S]|"(?!"")|#(?!\{)/.source + "|" + interpolationPattern + ')*"""|"(?:' + /[^"\\\r\n#]|\\(?:\r\n|[\s\S])|#(?!\{)/.source + "|" + interpolationPattern + ')*")'
            ),
            lookbehind: true,
            greedy: true,
            inside: {
              interpolation: {
                pattern: RegExp(interpolationPattern),
                inside: {
                  punctuation: /^#\{|\}$/,
                  expression: {
                    pattern: /[\s\S]+/,
                    inside: Prism2.languages.tremor
                  }
                }
              },
              string: /[\s\S]+/
            }
          };
          Prism2.languages.troy = Prism2.languages["tremor"];
          Prism2.languages.trickle = Prism2.languages["tremor"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/tsx.js
  var require_tsx = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/tsx.js"(exports, module) {
      "use strict";
      var refractorJsx = require_jsx();
      var refractorTypescript = require_typescript();
      module.exports = tsx;
      tsx.displayName = "tsx";
      tsx.aliases = [];
      function tsx(Prism) {
        Prism.register(refractorJsx);
        Prism.register(refractorTypescript);
        (function(Prism2) {
          var typescript = Prism2.util.clone(Prism2.languages.typescript);
          Prism2.languages.tsx = Prism2.languages.extend("jsx", typescript);
          delete Prism2.languages.tsx["parameter"];
          delete Prism2.languages.tsx["literal-property"];
          var tag = Prism2.languages.tsx.tag;
          tag.pattern = RegExp(
            /(^|[^\w$]|(?=<\/))/.source + "(?:" + tag.pattern.source + ")",
            tag.pattern.flags
          );
          tag.lookbehind = true;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/tt2.js
  var require_tt2 = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/tt2.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = tt2;
      tt2.displayName = "tt2";
      tt2.aliases = [];
      function tt2(Prism) {
        Prism.register(refractorMarkupTemplating);
        (function(Prism2) {
          Prism2.languages.tt2 = Prism2.languages.extend("clike", {
            comment: /#.*|\[%#[\s\S]*?%\]/,
            keyword: /\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|SWITCH|TAGS|THROW|TRY|UNLESS|USE|WHILE|WRAPPER)\b/,
            punctuation: /[[\]{},()]/
          });
          Prism2.languages.insertBefore("tt2", "number", {
            operator: /=[>=]?|!=?|<=?|>=?|&&|\|\|?|\b(?:and|not|or)\b/,
            variable: {
              pattern: /\b[a-z]\w*(?:\s*\.\s*(?:\d+|\$?[a-z]\w*))*\b/i
            }
          });
          Prism2.languages.insertBefore("tt2", "keyword", {
            delimiter: {
              pattern: /^(?:\[%|%%)-?|-?%\]$/,
              alias: "punctuation"
            }
          });
          Prism2.languages.insertBefore("tt2", "string", {
            "single-quoted-string": {
              pattern: /'[^\\']*(?:\\[\s\S][^\\']*)*'/,
              greedy: true,
              alias: "string"
            },
            "double-quoted-string": {
              pattern: /"[^\\"]*(?:\\[\s\S][^\\"]*)*"/,
              greedy: true,
              alias: "string",
              inside: {
                variable: {
                  pattern: /\$(?:[a-z]\w*(?:\.(?:\d+|\$?[a-z]\w*))*)/i
                }
              }
            }
          });
          delete Prism2.languages.tt2.string;
          Prism2.hooks.add("before-tokenize", function(env) {
            var tt2Pattern = /\[%[\s\S]+?%\]/g;
            Prism2.languages["markup-templating"].buildPlaceholders(
              env,
              "tt2",
              tt2Pattern
            );
          });
          Prism2.hooks.add("after-tokenize", function(env) {
            Prism2.languages["markup-templating"].tokenizePlaceholders(env, "tt2");
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/twig.js
  var require_twig = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/twig.js"(exports, module) {
      "use strict";
      var refractorMarkupTemplating = require_markup_templating();
      module.exports = twig;
      twig.displayName = "twig";
      twig.aliases = [];
      function twig(Prism) {
        Prism.register(refractorMarkupTemplating);
        Prism.languages.twig = {
          comment: /^\{#[\s\S]*?#\}$/,
          "tag-name": {
            pattern: /(^\{%-?\s*)\w+/,
            lookbehind: true,
            alias: "keyword"
          },
          delimiter: {
            pattern: /^\{[{%]-?|-?[%}]\}$/,
            alias: "punctuation"
          },
          string: {
            pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            inside: {
              punctuation: /^['"]|['"]$/
            }
          },
          keyword: /\b(?:even|if|odd)\b/,
          boolean: /\b(?:false|null|true)\b/,
          number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
          operator: [
            {
              pattern: /(\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\s)/,
              lookbehind: true
            },
            /[=<>]=?|!=|\*\*?|\/\/?|\?:?|[-+~%|]/
          ],
          punctuation: /[()\[\]{}:.,]/
        };
        Prism.hooks.add("before-tokenize", function(env) {
          if (env.language !== "twig") {
            return;
          }
          var pattern = /\{(?:#[\s\S]*?#|%[\s\S]*?%|\{[\s\S]*?\})\}/g;
          Prism.languages["markup-templating"].buildPlaceholders(env, "twig", pattern);
        });
        Prism.hooks.add("after-tokenize", function(env) {
          Prism.languages["markup-templating"].tokenizePlaceholders(env, "twig");
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/typoscript.js
  var require_typoscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/typoscript.js"(exports, module) {
      "use strict";
      module.exports = typoscript;
      typoscript.displayName = "typoscript";
      typoscript.aliases = ["tsconfig"];
      function typoscript(Prism) {
        ;
        (function(Prism2) {
          var keywords = /\b(?:ACT|ACTIFSUB|CARRAY|CASE|CLEARGIF|COA|COA_INT|CONSTANTS|CONTENT|CUR|EDITPANEL|EFFECT|EXT|FILE|FLUIDTEMPLATE|FORM|FRAME|FRAMESET|GIFBUILDER|GMENU|GMENU_FOLDOUT|GMENU_LAYERS|GP|HMENU|HRULER|HTML|IENV|IFSUB|IMAGE|IMGMENU|IMGMENUITEM|IMGTEXT|IMG_RESOURCE|INCLUDE_TYPOSCRIPT|JSMENU|JSMENUITEM|LLL|LOAD_REGISTER|NO|PAGE|RECORDS|RESTORE_REGISTER|TEMPLATE|TEXT|TMENU|TMENUITEM|TMENU_LAYERS|USER|USER_INT|_GIFBUILDER|global|globalString|globalVar)\b/;
          Prism2.languages.typoscript = {
            comment: [
              {
                pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
                lookbehind: true
              },
              {
                pattern: /(^|[^\\:= \t]|(?:^|[^= \t])[ \t]+)\/\/.*/,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /(^|[^"'])#.*/,
                lookbehind: true,
                greedy: true
              }
            ],
            function: [
              {
                pattern: /<INCLUDE_TYPOSCRIPT:\s*source\s*=\s*(?:"[^"\r\n]*"|'[^'\r\n]*')\s*>/,
                inside: {
                  string: {
                    pattern: /"[^"\r\n]*"|'[^'\r\n]*'/,
                    inside: {
                      keyword: keywords
                    }
                  },
                  keyword: {
                    pattern: /INCLUDE_TYPOSCRIPT/
                  }
                }
              },
              {
                pattern: /@import\s*(?:"[^"\r\n]*"|'[^'\r\n]*')/,
                inside: {
                  string: /"[^"\r\n]*"|'[^'\r\n]*'/
                }
              }
            ],
            string: {
              pattern: /^([^=]*=[< ]?)(?:(?!\]\n).)*/,
              lookbehind: true,
              inside: {
                function: /\{\$.*\}/,
                keyword: keywords,
                number: /^\d+$/,
                punctuation: /[,|:]/
              }
            },
            keyword: keywords,
            number: {
              pattern: /\b\d+\s*[.{=]/,
              inside: {
                operator: /[.{=]/
              }
            },
            tag: {
              pattern: /\.?[-\w\\]+\.?/,
              inside: {
                punctuation: /\./
              }
            },
            punctuation: /[{}[\];(),.:|]/,
            operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/
          };
          Prism2.languages.tsconfig = Prism2.languages.typoscript;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/unrealscript.js
  var require_unrealscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/unrealscript.js"(exports, module) {
      "use strict";
      module.exports = unrealscript;
      unrealscript.displayName = "unrealscript";
      unrealscript.aliases = ["uc", "uscript"];
      function unrealscript(Prism) {
        Prism.languages.unrealscript = {
          comment: /\/\/.*|\/\*[\s\S]*?\*\//,
          string: {
            pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
            greedy: true
          },
          category: {
            pattern: /(\b(?:(?:autoexpand|hide|show)categories|var)\s*\()[^()]+(?=\))/,
            lookbehind: true,
            greedy: true,
            alias: "property"
          },
          metadata: {
            pattern: /(\w\s*)<\s*\w+\s*=[^<>|=\r\n]+(?:\|\s*\w+\s*=[^<>|=\r\n]+)*>/,
            lookbehind: true,
            greedy: true,
            inside: {
              property: /\b\w+(?=\s*=)/,
              operator: /=/,
              punctuation: /[<>|]/
            }
          },
          macro: {
            pattern: /`\w+/,
            alias: "property"
          },
          "class-name": {
            pattern: /(\b(?:class|enum|extends|interface|state(?:\(\))?|struct|within)\s+)\w+/,
            lookbehind: true
          },
          keyword: /\b(?:abstract|actor|array|auto|autoexpandcategories|bool|break|byte|case|class|classgroup|client|coerce|collapsecategories|config|const|continue|default|defaultproperties|delegate|dependson|deprecated|do|dontcollapsecategories|editconst|editinlinenew|else|enum|event|exec|export|extends|final|float|for|forcescriptorder|foreach|function|goto|guid|hidecategories|hidedropdown|if|ignores|implements|inherits|input|int|interface|iterator|latent|local|material|name|native|nativereplication|noexport|nontransient|noteditinlinenew|notplaceable|operator|optional|out|pawn|perobjectconfig|perobjectlocalized|placeable|postoperator|preoperator|private|protected|reliable|replication|return|server|showcategories|simulated|singular|state|static|string|struct|structdefault|structdefaultproperties|switch|texture|transient|travel|unreliable|until|var|vector|while|within)\b/,
          function: /\b[a-z_]\w*(?=\s*\()/i,
          boolean: /\b(?:false|true)\b/,
          number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
          operator: />>|<<|--|\+\+|\*\*|[-+*/~!=<>$@]=?|&&?|\|\|?|\^\^?|[?:%]|\b(?:ClockwiseFrom|Cross|Dot)\b/,
          punctuation: /[()[\]{};,.]/
        };
        Prism.languages.uc = Prism.languages.uscript = Prism.languages.unrealscript;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/uorazor.js
  var require_uorazor = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/uorazor.js"(exports, module) {
      "use strict";
      module.exports = uorazor;
      uorazor.displayName = "uorazor";
      uorazor.aliases = [];
      function uorazor(Prism) {
        Prism.languages.uorazor = {
          "comment-hash": {
            pattern: /#.*/,
            alias: "comment",
            greedy: true
          },
          "comment-slash": {
            pattern: /\/\/.*/,
            alias: "comment",
            greedy: true
          },
          string: {
            pattern: /("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,
            inside: {
              punctuation: /^['"]|['"]$/
            },
            greedy: true
          },
          "source-layers": {
            pattern: /\b(?:arms|backpack|blue|bracelet|cancel|clear|cloak|criminal|earrings|enemy|facialhair|friend|friendly|gloves|gray|grey|ground|hair|head|innerlegs|innertorso|innocent|lefthand|middletorso|murderer|neck|nonfriendly|onehandedsecondary|outerlegs|outertorso|pants|red|righthand|ring|self|shirt|shoes|talisman|waist)\b/i,
            alias: "function"
          },
          "source-commands": {
            pattern: /\b(?:alliance|attack|cast|clearall|clearignore|clearjournal|clearlist|clearsysmsg|createlist|createtimer|dclick|dclicktype|dclickvar|dress|dressconfig|drop|droprelloc|emote|getlabel|guild|gumpclose|gumpresponse|hotkey|ignore|lasttarget|lift|lifttype|menu|menuresponse|msg|org|organize|organizer|overhead|pause|poplist|potion|promptresponse|pushlist|removelist|removetimer|rename|restock|say|scav|scavenger|script|setability|setlasttarget|setskill|settimer|setvar|sysmsg|target|targetloc|targetrelloc|targettype|undress|unignore|unsetvar|useobject|useonce|useskill|usetype|virtue|wait|waitforgump|waitformenu|waitforprompt|waitforstat|waitforsysmsg|waitfortarget|walk|wfsysmsg|wft|whisper|yell)\b/,
            alias: "function"
          },
          "tag-name": {
            pattern: /(^\{%-?\s*)\w+/,
            lookbehind: true,
            alias: "keyword"
          },
          delimiter: {
            pattern: /^\{[{%]-?|-?[%}]\}$/,
            alias: "punctuation"
          },
          function: /\b(?:atlist|close|closest|count|counter|counttype|dead|dex|diffhits|diffmana|diffstam|diffweight|find|findbuff|finddebuff|findlayer|findtype|findtypelist|followers|gumpexists|hidden|hits|hp|hue|human|humanoid|ingump|inlist|insysmessage|insysmsg|int|invul|lhandempty|list|listexists|mana|maxhits|maxhp|maxmana|maxstam|maxweight|monster|mounted|name|next|noto|paralyzed|poisoned|position|prev|previous|queued|rand|random|rhandempty|skill|stam|str|targetexists|timer|timerexists|varexist|warmode|weight)\b/,
          keyword: /\b(?:and|as|break|continue|else|elseif|endfor|endif|endwhile|for|if|loop|not|or|replay|stop|while)\b/,
          boolean: /\b(?:false|null|true)\b/,
          number: /\b0x[\dA-Fa-f]+|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][-+]?\d+)?/,
          operator: [
            {
              pattern: /(\s)(?:and|b-and|b-or|b-xor|ends with|in|is|matches|not|or|same as|starts with)(?=\s)/,
              lookbehind: true
            },
            /[=<>]=?|!=|\*\*?|\/\/?|\?:?|[-+~%|]/
          ],
          punctuation: /[()\[\]{}:.,]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/uri.js
  var require_uri = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/uri.js"(exports, module) {
      "use strict";
      module.exports = uri;
      uri.displayName = "uri";
      uri.aliases = ["url"];
      function uri(Prism) {
        Prism.languages.uri = {
          scheme: {
            pattern: /^[a-z][a-z0-9+.-]*:/im,
            greedy: true,
            inside: {
              "scheme-delimiter": /:$/
            }
          },
          fragment: {
            pattern: /#[\w\-.~!$&'()*+,;=%:@/?]*/,
            inside: {
              "fragment-delimiter": /^#/
            }
          },
          query: {
            pattern: /\?[\w\-.~!$&'()*+,;=%:@/?]*/,
            inside: {
              "query-delimiter": {
                pattern: /^\?/,
                greedy: true
              },
              "pair-delimiter": /[&;]/,
              pair: {
                pattern: /^[^=][\s\S]*/,
                inside: {
                  key: /^[^=]+/,
                  value: {
                    pattern: /(^=)[\s\S]+/,
                    lookbehind: true
                  }
                }
              }
            }
          },
          authority: {
            pattern: RegExp(
              /^\/\//.source + /(?:[\w\-.~!$&'()*+,;=%:]*@)?/.source + ("(?:" + /\[(?:[0-9a-fA-F:.]{2,48}|v[0-9a-fA-F]+\.[\w\-.~!$&'()*+,;=]+)\]/.source + "|" + /[\w\-.~!$&'()*+,;=%]*/.source + ")") + /(?::\d*)?/.source,
              "m"
            ),
            inside: {
              "authority-delimiter": /^\/\//,
              "user-info-segment": {
                pattern: /^[\w\-.~!$&'()*+,;=%:]*@/,
                inside: {
                  "user-info-delimiter": /@$/,
                  "user-info": /^[\w\-.~!$&'()*+,;=%:]+/
                }
              },
              "port-segment": {
                pattern: /:\d*$/,
                inside: {
                  "port-delimiter": /^:/,
                  port: /^\d+/
                }
              },
              host: {
                pattern: /[\s\S]+/,
                inside: {
                  "ip-literal": {
                    pattern: /^\[[\s\S]+\]$/,
                    inside: {
                      "ip-literal-delimiter": /^\[|\]$/,
                      "ipv-future": /^v[\s\S]+/,
                      "ipv6-address": /^[\s\S]+/
                    }
                  },
                  "ipv4-address": /^(?:(?:[03-9]\d?|[12]\d{0,2})\.){3}(?:[03-9]\d?|[12]\d{0,2})$/
                }
              }
            }
          },
          path: {
            pattern: /^[\w\-.~!$&'()*+,;=%:@/]+/m,
            inside: {
              "path-separator": /\//
            }
          }
        };
        Prism.languages.url = Prism.languages.uri;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/v.js
  var require_v = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/v.js"(exports, module) {
      "use strict";
      module.exports = v;
      v.displayName = "v";
      v.aliases = [];
      function v(Prism) {
        ;
        (function(Prism2) {
          var interpolationExpr = {
            pattern: /[\s\S]+/,
            inside: null
          };
          Prism2.languages.v = Prism2.languages.extend("clike", {
            string: {
              pattern: /r?(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
              alias: "quoted-string",
              greedy: true,
              inside: {
                interpolation: {
                  pattern: /((?:^|[^\\])(?:\\{2})*)\$(?:\{[^{}]*\}|\w+(?:\.\w+(?:\([^\(\)]*\))?|\[[^\[\]]+\])*)/,
                  lookbehind: true,
                  inside: {
                    "interpolation-variable": {
                      pattern: /^\$\w[\s\S]*$/,
                      alias: "variable"
                    },
                    "interpolation-punctuation": {
                      pattern: /^\$\{|\}$/,
                      alias: "punctuation"
                    },
                    "interpolation-expression": interpolationExpr
                  }
                }
              }
            },
            "class-name": {
              pattern: /(\b(?:enum|interface|struct|type)\s+)(?:C\.)?\w+/,
              lookbehind: true
            },
            keyword: /(?:\b(?:__global|as|asm|assert|atomic|break|chan|const|continue|defer|else|embed|enum|fn|for|go(?:to)?|if|import|in|interface|is|lock|match|module|mut|none|or|pub|return|rlock|select|shared|sizeof|static|struct|type(?:of)?|union|unsafe)|\$(?:else|for|if)|#(?:flag|include))\b/,
            number: /\b(?:0x[a-f\d]+(?:_[a-f\d]+)*|0b[01]+(?:_[01]+)*|0o[0-7]+(?:_[0-7]+)*|\d+(?:_\d+)*(?:\.\d+(?:_\d+)*)?)\b/i,
            operator: /~|\?|[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\.?/,
            builtin: /\b(?:any(?:_float|_int)?|bool|byte(?:ptr)?|charptr|f(?:32|64)|i(?:8|16|64|128|nt)|rune|size_t|string|u(?:16|32|64|128)|voidptr)\b/
          });
          interpolationExpr.inside = Prism2.languages.v;
          Prism2.languages.insertBefore("v", "string", {
            char: {
              pattern: /`(?:\\`|\\?[^`]{1,2})`/,
              alias: "rune"
            }
          });
          Prism2.languages.insertBefore("v", "operator", {
            attribute: {
              pattern: /(^[\t ]*)\[(?:deprecated|direct_array_access|flag|inline|live|ref_only|typedef|unsafe_fn|windows_stdcall)\]/m,
              lookbehind: true,
              alias: "annotation",
              inside: {
                punctuation: /[\[\]]/,
                keyword: /\w+/
              }
            },
            generic: {
              pattern: /<\w+>(?=\s*[\)\{])/,
              inside: {
                punctuation: /[<>]/,
                "class-name": /\w+/
              }
            }
          });
          Prism2.languages.insertBefore("v", "function", {
            "generic-function": {
              pattern: /\b\w+\s*<\w+>(?=\()/,
              inside: {
                function: /^\w+/,
                generic: {
                  pattern: /<\w+>/,
                  inside: Prism2.languages.v.generic.inside
                }
              }
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/vala.js
  var require_vala = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/vala.js"(exports, module) {
      "use strict";
      module.exports = vala;
      vala.displayName = "vala";
      vala.aliases = [];
      function vala(Prism) {
        Prism.languages.vala = Prism.languages.extend("clike", {
          "class-name": [
            {
              pattern: /\b[A-Z]\w*(?:\.\w+)*\b(?=(?:\?\s+|\*?\s+\*?)\w)/,
              inside: {
                punctuation: /\./
              }
            },
            {
              pattern: /(\[)[A-Z]\w*(?:\.\w+)*\b/,
              lookbehind: true,
              inside: {
                punctuation: /\./
              }
            },
            {
              pattern: /(\b(?:class|interface)\s+[A-Z]\w*(?:\.\w+)*\s*:\s*)[A-Z]\w*(?:\.\w+)*\b/,
              lookbehind: true,
              inside: {
                punctuation: /\./
              }
            },
            {
              pattern: /((?:\b(?:class|enum|interface|new|struct)\s+)|(?:catch\s+\())[A-Z]\w*(?:\.\w+)*\b/,
              lookbehind: true,
              inside: {
                punctuation: /\./
              }
            }
          ],
          keyword: /\b(?:abstract|as|assert|async|base|bool|break|case|catch|char|class|const|construct|continue|default|delegate|delete|do|double|dynamic|else|ensures|enum|errordomain|extern|finally|float|for|foreach|get|if|in|inline|int|int16|int32|int64|int8|interface|internal|is|lock|long|namespace|new|null|out|override|owned|params|private|protected|public|ref|requires|return|set|short|signal|sizeof|size_t|ssize_t|static|string|struct|switch|this|throw|throws|try|typeof|uchar|uint|uint16|uint32|uint64|uint8|ulong|unichar|unowned|ushort|using|value|var|virtual|void|volatile|weak|while|yield)\b/i,
          function: /\b\w+(?=\s*\()/,
          number: /(?:\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)(?:f|u?l?)?/i,
          operator: /\+\+|--|&&|\|\||<<=?|>>=?|=>|->|~|[+\-*\/%&^|=!<>]=?|\?\??|\.\.\./,
          punctuation: /[{}[\];(),.:]/,
          constant: /\b[A-Z0-9_]+\b/
        });
        Prism.languages.insertBefore("vala", "string", {
          "raw-string": {
            pattern: /"""[\s\S]*?"""/,
            greedy: true,
            alias: "string"
          },
          "template-string": {
            pattern: /@"[\s\S]*?"/,
            greedy: true,
            inside: {
              interpolation: {
                pattern: /\$(?:\([^)]*\)|[a-zA-Z]\w*)/,
                inside: {
                  delimiter: {
                    pattern: /^\$\(?|\)$/,
                    alias: "punctuation"
                  },
                  rest: Prism.languages.vala
                }
              },
              string: /[\s\S]+/
            }
          }
        });
        Prism.languages.insertBefore("vala", "keyword", {
          regex: {
            pattern: /\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[imsx]{0,4}(?=\s*(?:$|[\r\n,.;})\]]))/,
            greedy: true,
            inside: {
              "regex-source": {
                pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
                lookbehind: true,
                alias: "language-regex",
                inside: Prism.languages.regex
              },
              "regex-delimiter": /^\//,
              "regex-flags": /^[a-z]+$/
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/velocity.js
  var require_velocity = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/velocity.js"(exports, module) {
      "use strict";
      module.exports = velocity;
      velocity.displayName = "velocity";
      velocity.aliases = [];
      function velocity(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.velocity = Prism2.languages.extend("markup", {});
          var velocity2 = {
            variable: {
              pattern: /(^|[^\\](?:\\\\)*)\$!?(?:[a-z][\w-]*(?:\([^)]*\))?(?:\.[a-z][\w-]*(?:\([^)]*\))?|\[[^\]]+\])*|\{[^}]+\})/i,
              lookbehind: true,
              inside: {}
            },
            string: {
              pattern: /"[^"]*"|'[^']*'/,
              greedy: true
            },
            number: /\b\d+\b/,
            boolean: /\b(?:false|true)\b/,
            operator: /[=!<>]=?|[+*/%-]|&&|\|\||\.\.|\b(?:eq|g[et]|l[et]|n(?:e|ot))\b/,
            punctuation: /[(){}[\]:,.]/
          };
          velocity2.variable.inside = {
            string: velocity2["string"],
            function: {
              pattern: /([^\w-])[a-z][\w-]*(?=\()/,
              lookbehind: true
            },
            number: velocity2["number"],
            boolean: velocity2["boolean"],
            punctuation: velocity2["punctuation"]
          };
          Prism2.languages.insertBefore("velocity", "comment", {
            unparsed: {
              pattern: /(^|[^\\])#\[\[[\s\S]*?\]\]#/,
              lookbehind: true,
              greedy: true,
              inside: {
                punctuation: /^#\[\[|\]\]#$/
              }
            },
            "velocity-comment": [
              {
                pattern: /(^|[^\\])#\*[\s\S]*?\*#/,
                lookbehind: true,
                greedy: true,
                alias: "comment"
              },
              {
                pattern: /(^|[^\\])##.*/,
                lookbehind: true,
                greedy: true,
                alias: "comment"
              }
            ],
            directive: {
              pattern: /(^|[^\\](?:\\\\)*)#@?(?:[a-z][\w-]*|\{[a-z][\w-]*\})(?:\s*\((?:[^()]|\([^()]*\))*\))?/i,
              lookbehind: true,
              inside: {
                keyword: {
                  pattern: /^#@?(?:[a-z][\w-]*|\{[a-z][\w-]*\})|\bin\b/,
                  inside: {
                    punctuation: /[{}]/
                  }
                },
                rest: velocity2
              }
            },
            variable: velocity2["variable"]
          });
          Prism2.languages.velocity["tag"].inside["attr-value"].inside.rest = Prism2.languages.velocity;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/verilog.js
  var require_verilog = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/verilog.js"(exports, module) {
      "use strict";
      module.exports = verilog;
      verilog.displayName = "verilog";
      verilog.aliases = [];
      function verilog(Prism) {
        Prism.languages.verilog = {
          comment: {
            pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
            greedy: true
          },
          string: {
            pattern: /"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,
            greedy: true
          },
          "kernel-function": {
            pattern: /\B\$\w+\b/,
            alias: "property"
          },
          constant: /\B`\w+\b/,
          function: /\b\w+(?=\()/,
          keyword: /\b(?:alias|and|assert|assign|assume|automatic|before|begin|bind|bins|binsof|bit|break|buf|bufif0|bufif1|byte|case|casex|casez|cell|chandle|class|clocking|cmos|config|const|constraint|context|continue|cover|covergroup|coverpoint|cross|deassign|default|defparam|design|disable|dist|do|edge|else|end|endcase|endclass|endclocking|endconfig|endfunction|endgenerate|endgroup|endinterface|endmodule|endpackage|endprimitive|endprogram|endproperty|endsequence|endspecify|endtable|endtask|enum|event|expect|export|extends|extern|final|first_match|for|force|foreach|forever|fork|forkjoin|function|generate|genvar|highz0|highz1|if|iff|ifnone|ignore_bins|illegal_bins|import|incdir|include|initial|inout|input|inside|instance|int|integer|interface|intersect|join|join_any|join_none|large|liblist|library|local|localparam|logic|longint|macromodule|matches|medium|modport|module|nand|negedge|new|nmos|nor|noshowcancelled|not|notif0|notif1|null|or|output|package|packed|parameter|pmos|posedge|primitive|priority|program|property|protected|pull0|pull1|pulldown|pullup|pulsestyle_ondetect|pulsestyle_onevent|pure|rand|randc|randcase|randsequence|rcmos|real|realtime|ref|reg|release|repeat|return|rnmos|rpmos|rtran|rtranif0|rtranif1|scalared|sequence|shortint|shortreal|showcancelled|signed|small|solve|specify|specparam|static|string|strong0|strong1|struct|super|supply0|supply1|table|tagged|task|this|throughout|time|timeprecision|timeunit|tran|tranif0|tranif1|tri|tri0|tri1|triand|trior|trireg|type|typedef|union|unique|unsigned|use|uwire|var|vectored|virtual|void|wait|wait_order|wand|weak0|weak1|while|wildcard|wire|with|within|wor|xnor|xor)\b/,
          important: /\b(?:always|always_comb|always_ff|always_latch)\b(?: *@)?/,
          number: /\B##?\d+|(?:\b\d+)?'[odbh] ?[\da-fzx_?]+|\b(?:\d*[._])?\d+(?:e[-+]?\d+)?/i,
          operator: /[-+{}^~%*\/?=!<>&|]+/,
          punctuation: /[[\];(),.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/vhdl.js
  var require_vhdl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/vhdl.js"(exports, module) {
      "use strict";
      module.exports = vhdl;
      vhdl.displayName = "vhdl";
      vhdl.aliases = [];
      function vhdl(Prism) {
        Prism.languages.vhdl = {
          comment: /--.+/,
          "vhdl-vectors": {
            pattern: /\b[oxb]"[\da-f_]+"|"[01uxzwlh-]+"/i,
            alias: "number"
          },
          "quoted-function": {
            pattern: /"\S+?"(?=\()/,
            alias: "function"
          },
          string: /"(?:[^\\"\r\n]|\\(?:\r\n|[\s\S]))*"/,
          constant: /\b(?:library|use)\b/i,
          keyword: /\b(?:'active|'ascending|'base|'delayed|'driving|'driving_value|'event|'high|'image|'instance_name|'last_active|'last_event|'last_value|'left|'leftof|'length|'low|'path_name|'pos|'pred|'quiet|'range|'reverse_range|'right|'rightof|'simple_name|'stable|'succ|'transaction|'val|'value|access|after|alias|all|architecture|array|assert|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|disconnect|downto|else|elsif|end|entity|exit|file|for|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|new|next|null|of|on|open|others|out|package|port|postponed|procedure|process|pure|range|record|register|reject|report|return|select|severity|shared|signal|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with)\b/i,
          boolean: /\b(?:false|true)\b/i,
          function: /\w+(?=\()/,
          number: /'[01uxzwlh-]'|\b(?:\d+#[\da-f_.]+#|\d[\d_.]*)(?:e[-+]?\d+)?/i,
          operator: /[<>]=?|:=|[-+*/&=]|\b(?:abs|and|mod|nand|nor|not|or|rem|rol|ror|sla|sll|sra|srl|xnor|xor)\b/i,
          punctuation: /[{}[\];(),.:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/vim.js
  var require_vim = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/vim.js"(exports, module) {
      "use strict";
      module.exports = vim;
      vim.displayName = "vim";
      vim.aliases = [];
      function vim(Prism) {
        Prism.languages.vim = {
          string: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\r\n]|'')*'/,
          comment: /".*/,
          function: /\b\w+(?=\()/,
          keyword: /\b(?:N|Next|P|Print|X|XMLent|XMLns|ab|abbreviate|abc|abclear|abo|aboveleft|al|all|ar|arga|argadd|argd|argdelete|argdo|arge|argedit|argg|argglobal|argl|arglocal|args|argu|argument|as|ascii|b|bN|bNext|ba|bad|badd|ball|bd|bdelete|be|bel|belowright|bf|bfirst|bl|blast|bm|bmodified|bn|bnext|bo|botright|bp|bprevious|br|brea|break|breaka|breakadd|breakd|breakdel|breakl|breaklist|brewind|bro|browse|bufdo|buffer|buffers|bun|bunload|bw|bwipeout|c|cN|cNext|cNfcNfile|ca|cabbrev|cabc|cabclear|cad|caddb|caddbuffer|caddexpr|caddf|caddfile|cal|call|cat|catch|cb|cbuffer|cc|ccl|cclose|cd|ce|center|cex|cexpr|cf|cfile|cfir|cfirst|cg|cgetb|cgetbuffer|cgete|cgetexpr|cgetfile|change|changes|chd|chdir|che|checkpath|checkt|checktime|cl|cla|clast|clist|clo|close|cmapc|cmapclear|cn|cnew|cnewer|cnext|cnf|cnfile|cnorea|cnoreabbrev|co|col|colder|colo|colorscheme|comc|comclear|comp|compiler|con|conf|confirm|continue|cope|copen|copy|cp|cpf|cpfile|cprevious|cq|cquit|cr|crewind|cu|cuna|cunabbrev|cunmap|cw|cwindow|d|debugg|debuggreedy|delc|delcommand|delete|delf|delfunction|delm|delmarks|di|diffg|diffget|diffoff|diffpatch|diffpu|diffput|diffsplit|diffthis|diffu|diffupdate|dig|digraphs|display|dj|djump|dl|dlist|dr|drop|ds|dsearch|dsp|dsplit|e|earlier|echoe|echoerr|echom|echomsg|echon|edit|el|else|elsei|elseif|em|emenu|en|endf|endfo|endfor|endfun|endfunction|endif|endt|endtry|endw|endwhile|ene|enew|ex|exi|exit|exu|exusage|f|file|files|filetype|fin|fina|finally|find|fini|finish|fir|first|fix|fixdel|fo|fold|foldc|foldclose|foldd|folddoc|folddoclosed|folddoopen|foldo|foldopen|for|fu|fun|function|go|goto|gr|grep|grepa|grepadd|h|ha|hardcopy|help|helpf|helpfind|helpg|helpgrep|helpt|helptags|hid|hide|his|history|ia|iabbrev|iabc|iabclear|if|ij|ijump|il|ilist|imapc|imapclear|in|inorea|inoreabbrev|isearch|isp|isplit|iu|iuna|iunabbrev|iunmap|j|join|ju|jumps|k|kee|keepalt|keepj|keepjumps|keepmarks|l|lN|lNext|lNf|lNfile|la|lad|laddb|laddbuffer|laddexpr|laddf|laddfile|lan|language|last|later|lb|lbuffer|lc|lcd|lch|lchdir|lcl|lclose|left|lefta|leftabove|let|lex|lexpr|lf|lfile|lfir|lfirst|lg|lgetb|lgetbuffer|lgete|lgetexpr|lgetfile|lgr|lgrep|lgrepa|lgrepadd|lh|lhelpgrep|list|ll|lla|llast|lli|llist|lm|lmak|lmake|lmap|lmapc|lmapclear|ln|lne|lnew|lnewer|lnext|lnf|lnfile|lnoremap|lo|loadview|loc|lockmarks|lockv|lockvar|lol|lolder|lop|lopen|lp|lpf|lpfile|lprevious|lr|lrewind|ls|lt|ltag|lu|lunmap|lv|lvimgrep|lvimgrepa|lvimgrepadd|lw|lwindow|m|ma|mak|make|mark|marks|mat|match|menut|menutranslate|mk|mkexrc|mks|mksession|mksp|mkspell|mkv|mkvie|mkview|mkvimrc|mod|mode|move|mz|mzf|mzfile|mzscheme|n|nbkey|new|next|nmapc|nmapclear|noh|nohlsearch|norea|noreabbrev|nu|number|nun|nunmap|o|omapc|omapclear|on|only|open|opt|options|ou|ounmap|p|pc|pclose|pe|ped|pedit|perl|perld|perldo|po|pop|popu|popup|pp|ppop|pre|preserve|prev|previous|print|prof|profd|profdel|profile|promptf|promptfind|promptr|promptrepl|ps|psearch|ptN|ptNext|pta|ptag|ptf|ptfirst|ptj|ptjump|ptl|ptlast|ptn|ptnext|ptp|ptprevious|ptr|ptrewind|pts|ptselect|pu|put|pw|pwd|py|pyf|pyfile|python|q|qa|qall|quit|quita|quitall|r|read|rec|recover|red|redi|redir|redo|redr|redraw|redraws|redrawstatus|reg|registers|res|resize|ret|retab|retu|return|rew|rewind|ri|right|rightb|rightbelow|ru|rub|ruby|rubyd|rubydo|rubyf|rubyfile|runtime|rv|rviminfo|sN|sNext|sa|sal|sall|san|sandbox|sargument|sav|saveas|sb|sbN|sbNext|sba|sball|sbf|sbfirst|sbl|sblast|sbm|sbmodified|sbn|sbnext|sbp|sbprevious|sbr|sbrewind|sbuffer|scrip|scripte|scriptencoding|scriptnames|se|set|setf|setfiletype|setg|setglobal|setl|setlocal|sf|sfind|sfir|sfirst|sh|shell|sign|sil|silent|sim|simalt|sl|sla|slast|sleep|sm|smagic|smap|smapc|smapclear|sme|smenu|sn|snext|sni|sniff|sno|snomagic|snor|snoremap|snoreme|snoremenu|so|sor|sort|source|sp|spe|spelld|spelldump|spellgood|spelli|spellinfo|spellr|spellrepall|spellu|spellundo|spellw|spellwrong|split|spr|sprevious|sre|srewind|st|sta|stag|star|startg|startgreplace|startinsert|startr|startreplace|stj|stjump|stop|stopi|stopinsert|sts|stselect|sun|sunhide|sunm|sunmap|sus|suspend|sv|sview|syncbind|t|tN|tNext|ta|tab|tabN|tabNext|tabc|tabclose|tabd|tabdo|tabe|tabedit|tabf|tabfind|tabfir|tabfirst|tabl|tablast|tabm|tabmove|tabn|tabnew|tabnext|tabo|tabonly|tabp|tabprevious|tabr|tabrewind|tabs|tag|tags|tc|tcl|tcld|tcldo|tclf|tclfile|te|tearoff|tf|tfirst|th|throw|tj|tjump|tl|tlast|tm|tmenu|tn|tnext|to|topleft|tp|tprevious|tr|trewind|try|ts|tselect|tu|tunmenu|u|una|unabbreviate|undo|undoj|undojoin|undol|undolist|unh|unhide|unlet|unlo|unlockvar|unm|unmap|up|update|ve|verb|verbose|version|vert|vertical|vi|vie|view|vim|vimgrep|vimgrepa|vimgrepadd|visual|viu|viusage|vmapc|vmapclear|vne|vnew|vs|vsplit|vu|vunmap|w|wN|wNext|wa|wall|wh|while|win|winc|wincmd|windo|winp|winpos|winsize|wn|wnext|wp|wprevious|wq|wqa|wqall|write|ws|wsverb|wv|wviminfo|x|xa|xall|xit|xm|xmap|xmapc|xmapclear|xme|xmenu|xn|xnoremap|xnoreme|xnoremenu|xu|xunmap|y|yank)\b/,
          builtin: /\b(?:acd|ai|akm|aleph|allowrevins|altkeymap|ambiwidth|ambw|anti|antialias|arab|arabic|arabicshape|ari|arshape|autochdir|autocmd|autoindent|autoread|autowrite|autowriteall|aw|awa|background|backspace|backup|backupcopy|backupdir|backupext|backupskip|balloondelay|ballooneval|balloonexpr|bdir|bdlay|beval|bex|bexpr|bg|bh|bin|binary|biosk|bioskey|bk|bkc|bomb|breakat|brk|browsedir|bs|bsdir|bsk|bt|bufhidden|buflisted|buftype|casemap|ccv|cdpath|cedit|cfu|ch|charconvert|ci|cin|cindent|cink|cinkeys|cino|cinoptions|cinw|cinwords|clipboard|cmdheight|cmdwinheight|cmp|cms|columns|com|comments|commentstring|compatible|complete|completefunc|completeopt|consk|conskey|copyindent|cot|cpo|cpoptions|cpt|cscopepathcomp|cscopeprg|cscopequickfix|cscopetag|cscopetagorder|cscopeverbose|cspc|csprg|csqf|cst|csto|csverb|cuc|cul|cursorcolumn|cursorline|cwh|debug|deco|def|define|delcombine|dex|dg|dict|dictionary|diff|diffexpr|diffopt|digraph|dip|dir|directory|dy|ea|ead|eadirection|eb|ed|edcompatible|ef|efm|ei|ek|enc|encoding|endofline|eol|ep|equalalways|equalprg|errorbells|errorfile|errorformat|esckeys|et|eventignore|expandtab|exrc|fcl|fcs|fdc|fde|fdi|fdl|fdls|fdm|fdn|fdo|fdt|fen|fenc|fencs|fex|ff|ffs|fileencoding|fileencodings|fileformat|fileformats|fillchars|fk|fkmap|flp|fml|fmr|foldcolumn|foldenable|foldexpr|foldignore|foldlevel|foldlevelstart|foldmarker|foldmethod|foldminlines|foldnestmax|foldtext|formatexpr|formatlistpat|formatoptions|formatprg|fp|fs|fsync|ft|gcr|gd|gdefault|gfm|gfn|gfs|gfw|ghr|gp|grepformat|grepprg|gtl|gtt|guicursor|guifont|guifontset|guifontwide|guiheadroom|guioptions|guipty|guitablabel|guitabtooltip|helpfile|helpheight|helplang|hf|hh|hi|hidden|highlight|hk|hkmap|hkmapp|hkp|hl|hlg|hls|hlsearch|ic|icon|iconstring|ignorecase|im|imactivatekey|imak|imc|imcmdline|imd|imdisable|imi|iminsert|ims|imsearch|inc|include|includeexpr|incsearch|inde|indentexpr|indentkeys|indk|inex|inf|infercase|insertmode|invacd|invai|invakm|invallowrevins|invaltkeymap|invanti|invantialias|invar|invarab|invarabic|invarabicshape|invari|invarshape|invautochdir|invautoindent|invautoread|invautowrite|invautowriteall|invaw|invawa|invbackup|invballooneval|invbeval|invbin|invbinary|invbiosk|invbioskey|invbk|invbl|invbomb|invbuflisted|invcf|invci|invcin|invcindent|invcompatible|invconfirm|invconsk|invconskey|invcopyindent|invcp|invcscopetag|invcscopeverbose|invcst|invcsverb|invcuc|invcul|invcursorcolumn|invcursorline|invdeco|invdelcombine|invdg|invdiff|invdigraph|invdisable|invea|inveb|inved|invedcompatible|invek|invendofline|inveol|invequalalways|inverrorbells|invesckeys|invet|invex|invexpandtab|invexrc|invfen|invfk|invfkmap|invfoldenable|invgd|invgdefault|invguipty|invhid|invhidden|invhk|invhkmap|invhkmapp|invhkp|invhls|invhlsearch|invic|invicon|invignorecase|invim|invimc|invimcmdline|invimd|invincsearch|invinf|invinfercase|invinsertmode|invis|invjoinspaces|invjs|invlazyredraw|invlbr|invlinebreak|invlisp|invlist|invloadplugins|invlpl|invlz|invma|invmacatsui|invmagic|invmh|invml|invmod|invmodeline|invmodifiable|invmodified|invmore|invmousef|invmousefocus|invmousehide|invnu|invnumber|invodev|invopendevice|invpaste|invpi|invpreserveindent|invpreviewwindow|invprompt|invpvw|invreadonly|invremap|invrestorescreen|invrevins|invri|invrightleft|invrightleftcmd|invrl|invrlc|invro|invrs|invru|invruler|invsb|invsc|invscb|invscrollbind|invscs|invsecure|invsft|invshellslash|invshelltemp|invshiftround|invshortname|invshowcmd|invshowfulltag|invshowmatch|invshowmode|invsi|invsm|invsmartcase|invsmartindent|invsmarttab|invsmd|invsn|invsol|invspell|invsplitbelow|invsplitright|invspr|invsr|invssl|invsta|invstartofline|invstmp|invswapfile|invswf|invta|invtagbsearch|invtagrelative|invtagstack|invtbi|invtbidi|invtbs|invtermbidi|invterse|invtextauto|invtextmode|invtf|invtgst|invtildeop|invtimeout|invtitle|invto|invtop|invtr|invttimeout|invttybuiltin|invttyfast|invtx|invvb|invvisualbell|invwa|invwarn|invwb|invweirdinvert|invwfh|invwfw|invwildmenu|invwinfixheight|invwinfixwidth|invwiv|invwmnu|invwrap|invwrapscan|invwrite|invwriteany|invwritebackup|invws|isf|isfname|isi|isident|isk|iskeyword|isprint|joinspaces|js|key|keymap|keymodel|keywordprg|km|kmp|kp|langmap|langmenu|laststatus|lazyredraw|lbr|lcs|linebreak|lines|linespace|lisp|lispwords|listchars|loadplugins|lpl|lsp|lz|macatsui|magic|makeef|makeprg|matchpairs|matchtime|maxcombine|maxfuncdepth|maxmapdepth|maxmem|maxmempattern|maxmemtot|mco|mef|menuitems|mfd|mh|mis|mkspellmem|ml|mls|mm|mmd|mmp|mmt|modeline|modelines|modifiable|modified|more|mouse|mousef|mousefocus|mousehide|mousem|mousemodel|mouses|mouseshape|mouset|mousetime|mp|mps|msm|mzq|mzquantum|nf|noacd|noai|noakm|noallowrevins|noaltkeymap|noanti|noantialias|noar|noarab|noarabic|noarabicshape|noari|noarshape|noautochdir|noautoindent|noautoread|noautowrite|noautowriteall|noaw|noawa|nobackup|noballooneval|nobeval|nobin|nobinary|nobiosk|nobioskey|nobk|nobl|nobomb|nobuflisted|nocf|noci|nocin|nocindent|nocompatible|noconfirm|noconsk|noconskey|nocopyindent|nocp|nocscopetag|nocscopeverbose|nocst|nocsverb|nocuc|nocul|nocursorcolumn|nocursorline|nodeco|nodelcombine|nodg|nodiff|nodigraph|nodisable|noea|noeb|noed|noedcompatible|noek|noendofline|noeol|noequalalways|noerrorbells|noesckeys|noet|noex|noexpandtab|noexrc|nofen|nofk|nofkmap|nofoldenable|nogd|nogdefault|noguipty|nohid|nohidden|nohk|nohkmap|nohkmapp|nohkp|nohls|noic|noicon|noignorecase|noim|noimc|noimcmdline|noimd|noincsearch|noinf|noinfercase|noinsertmode|nois|nojoinspaces|nojs|nolazyredraw|nolbr|nolinebreak|nolisp|nolist|noloadplugins|nolpl|nolz|noma|nomacatsui|nomagic|nomh|noml|nomod|nomodeline|nomodifiable|nomodified|nomore|nomousef|nomousefocus|nomousehide|nonu|nonumber|noodev|noopendevice|nopaste|nopi|nopreserveindent|nopreviewwindow|noprompt|nopvw|noreadonly|noremap|norestorescreen|norevins|nori|norightleft|norightleftcmd|norl|norlc|noro|nors|noru|noruler|nosb|nosc|noscb|noscrollbind|noscs|nosecure|nosft|noshellslash|noshelltemp|noshiftround|noshortname|noshowcmd|noshowfulltag|noshowmatch|noshowmode|nosi|nosm|nosmartcase|nosmartindent|nosmarttab|nosmd|nosn|nosol|nospell|nosplitbelow|nosplitright|nospr|nosr|nossl|nosta|nostartofline|nostmp|noswapfile|noswf|nota|notagbsearch|notagrelative|notagstack|notbi|notbidi|notbs|notermbidi|noterse|notextauto|notextmode|notf|notgst|notildeop|notimeout|notitle|noto|notop|notr|nottimeout|nottybuiltin|nottyfast|notx|novb|novisualbell|nowa|nowarn|nowb|noweirdinvert|nowfh|nowfw|nowildmenu|nowinfixheight|nowinfixwidth|nowiv|nowmnu|nowrap|nowrapscan|nowrite|nowriteany|nowritebackup|nows|nrformats|numberwidth|nuw|odev|oft|ofu|omnifunc|opendevice|operatorfunc|opfunc|osfiletype|pa|para|paragraphs|paste|pastetoggle|patchexpr|patchmode|path|pdev|penc|pex|pexpr|pfn|ph|pheader|pi|pm|pmbcs|pmbfn|popt|preserveindent|previewheight|previewwindow|printdevice|printencoding|printexpr|printfont|printheader|printmbcharset|printmbfont|printoptions|prompt|pt|pumheight|pvh|pvw|qe|quoteescape|readonly|remap|report|restorescreen|revins|rightleft|rightleftcmd|rl|rlc|ro|rs|rtp|ruf|ruler|rulerformat|runtimepath|sbo|sc|scb|scr|scroll|scrollbind|scrolljump|scrolloff|scrollopt|scs|sect|sections|secure|sel|selection|selectmode|sessionoptions|sft|shcf|shellcmdflag|shellpipe|shellquote|shellredir|shellslash|shelltemp|shelltype|shellxquote|shiftround|shiftwidth|shm|shortmess|shortname|showbreak|showcmd|showfulltag|showmatch|showmode|showtabline|shq|si|sidescroll|sidescrolloff|siso|sj|slm|smartcase|smartindent|smarttab|smc|smd|softtabstop|sol|spc|spell|spellcapcheck|spellfile|spelllang|spellsuggest|spf|spl|splitbelow|splitright|sps|sr|srr|ss|ssl|ssop|stal|startofline|statusline|stl|stmp|su|sua|suffixes|suffixesadd|sw|swapfile|swapsync|swb|swf|switchbuf|sws|sxq|syn|synmaxcol|syntax|t_AB|t_AF|t_AL|t_CS|t_CV|t_Ce|t_Co|t_Cs|t_DL|t_EI|t_F1|t_F2|t_F3|t_F4|t_F5|t_F6|t_F7|t_F8|t_F9|t_IE|t_IS|t_K1|t_K3|t_K4|t_K5|t_K6|t_K7|t_K8|t_K9|t_KA|t_KB|t_KC|t_KD|t_KE|t_KF|t_KG|t_KH|t_KI|t_KJ|t_KK|t_KL|t_RI|t_RV|t_SI|t_Sb|t_Sf|t_WP|t_WS|t_ZH|t_ZR|t_al|t_bc|t_cd|t_ce|t_cl|t_cm|t_cs|t_da|t_db|t_dl|t_fs|t_k1|t_k2|t_k3|t_k4|t_k5|t_k6|t_k7|t_k8|t_k9|t_kB|t_kD|t_kI|t_kN|t_kP|t_kb|t_kd|t_ke|t_kh|t_kl|t_kr|t_ks|t_ku|t_le|t_mb|t_md|t_me|t_mr|t_ms|t_nd|t_op|t_se|t_so|t_sr|t_te|t_ti|t_ts|t_ue|t_us|t_ut|t_vb|t_ve|t_vi|t_vs|t_xs|tabline|tabpagemax|tabstop|tagbsearch|taglength|tagrelative|tagstack|tal|tb|tbi|tbidi|tbis|tbs|tenc|term|termbidi|termencoding|terse|textauto|textmode|textwidth|tgst|thesaurus|tildeop|timeout|timeoutlen|title|titlelen|titleold|titlestring|toolbar|toolbariconsize|top|tpm|tsl|tsr|ttimeout|ttimeoutlen|ttm|tty|ttybuiltin|ttyfast|ttym|ttymouse|ttyscroll|ttytype|tw|tx|uc|ul|undolevels|updatecount|updatetime|ut|vb|vbs|vdir|verbosefile|vfile|viewdir|viewoptions|viminfo|virtualedit|visualbell|vop|wak|warn|wb|wc|wcm|wd|weirdinvert|wfh|wfw|whichwrap|wi|wig|wildchar|wildcharm|wildignore|wildmenu|wildmode|wildoptions|wim|winaltkeys|window|winfixheight|winfixwidth|winheight|winminheight|winminwidth|winwidth|wiv|wiw|wm|wmh|wmnu|wmw|wop|wrap|wrapmargin|wrapscan|writeany|writebackup|writedelay|ww)\b/,
          number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?)\b/i,
          operator: /\|\||&&|[-+.]=?|[=!](?:[=~][#?]?)?|[<>]=?[#?]?|[*\/%?]|\b(?:is(?:not)?)\b/,
          punctuation: /[{}[\](),;:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/visual-basic.js
  var require_visual_basic = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/visual-basic.js"(exports, module) {
      "use strict";
      module.exports = visualBasic;
      visualBasic.displayName = "visualBasic";
      visualBasic.aliases = [];
      function visualBasic(Prism) {
        Prism.languages["visual-basic"] = {
          comment: {
            pattern: /(?:['‘’]|REM\b)(?:[^\r\n_]|_(?:\r\n?|\n)?)*/i,
            inside: {
              keyword: /^REM/i
            }
          },
          directive: {
            pattern: /#(?:Const|Else|ElseIf|End|ExternalChecksum|ExternalSource|If|Region)(?:\b_[ \t]*(?:\r\n?|\n)|.)+/i,
            alias: "property",
            greedy: true
          },
          string: {
            pattern: /\$?["“”](?:["“”]{2}|[^"“”])*["“”]C?/i,
            greedy: true
          },
          date: {
            pattern: /#[ \t]*(?:\d+([/-])\d+\1\d+(?:[ \t]+(?:\d+[ \t]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[ \t]*(?:AM|PM))?))?|\d+[ \t]*(?:AM|PM)|\d+:\d+(?::\d+)?(?:[ \t]*(?:AM|PM))?)[ \t]*#/i,
            alias: "number"
          },
          number: /(?:(?:\b\d+(?:\.\d+)?|\.\d+)(?:E[+-]?\d+)?|&[HO][\dA-F]+)(?:[FRD]|U?[ILS])?/i,
          boolean: /\b(?:False|Nothing|True)\b/i,
          keyword: /\b(?:AddHandler|AddressOf|Alias|And(?:Also)?|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|C(?:Bool|Byte|Char|Date|Dbl|Dec|Int|Lng|Obj|SByte|Short|Sng|Str|Type|UInt|ULng|UShort)|Char|Class|Const|Continue|Currency|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else(?:If)?|End(?:If)?|Enum|Erase|Error|Event|Exit|Finally|For|Friend|Function|Get(?:Type|XMLNamespace)?|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|Must(?:Inherit|Override)|My(?:Base|Class)|Namespace|Narrowing|New|Next|Not(?:Inheritable|Overridable)?|Object|Of|On|Operator|Option(?:al)?|Or(?:Else)?|Out|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|Try|TryCast|Type|TypeOf|U(?:Integer|Long|Short)|Until|Using|Variant|Wend|When|While|Widening|With(?:Events)?|WriteOnly|Xor)\b/i,
          operator: /[+\-*/\\^<=>&#@$%!]|\b_(?=[ \t]*[\r\n])/,
          punctuation: /[{}().,:?]/
        };
        Prism.languages.vb = Prism.languages["visual-basic"];
        Prism.languages.vba = Prism.languages["visual-basic"];
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/warpscript.js
  var require_warpscript = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/warpscript.js"(exports, module) {
      "use strict";
      module.exports = warpscript;
      warpscript.displayName = "warpscript";
      warpscript.aliases = [];
      function warpscript(Prism) {
        Prism.languages.warpscript = {
          comment: /#.*|\/\/.*|\/\*[\s\S]*?\*\//,
          string: {
            pattern: /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'|<'(?:[^\\']|'(?!>)|\\.)*'>/,
            greedy: true
          },
          variable: /\$\S+/,
          macro: {
            pattern: /@\S+/,
            alias: "property"
          },
          keyword: /\b(?:BREAK|CHECKMACRO|CONTINUE|CUDF|DEFINED|DEFINEDMACRO|EVAL|FAIL|FOR|FOREACH|FORSTEP|IFT|IFTE|MSGFAIL|NRETURN|RETHROW|RETURN|SWITCH|TRY|UDF|UNTIL|WHILE)\b/,
          number: /[+-]?\b(?:NaN|Infinity|\d+(?:\.\d*)?(?:[Ee][+-]?\d+)?|0x[\da-fA-F]+|0b[01]+)\b/,
          boolean: /\b(?:F|T|false|true)\b/,
          punctuation: /<%|%>|[{}[\]()]/,
          operator: /==|&&?|\|\|?|\*\*?|>>>?|<<|[<>!~]=?|[-/%^]|\+!?|\b(?:AND|NOT|OR)\b/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/wasm.js
  var require_wasm = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/wasm.js"(exports, module) {
      "use strict";
      module.exports = wasm;
      wasm.displayName = "wasm";
      wasm.aliases = [];
      function wasm(Prism) {
        Prism.languages.wasm = {
          comment: [
            /\(;[\s\S]*?;\)/,
            {
              pattern: /;;.*/,
              greedy: true
            }
          ],
          string: {
            pattern: /"(?:\\[\s\S]|[^"\\])*"/,
            greedy: true
          },
          keyword: [
            {
              pattern: /\b(?:align|offset)=/,
              inside: {
                operator: /=/
              }
            },
            {
              pattern: /\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,
              inside: {
                punctuation: /\./
              }
            },
            /\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/
          ],
          variable: /\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,
          number: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,
          punctuation: /[()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/web-idl.js
  var require_web_idl = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/web-idl.js"(exports, module) {
      "use strict";
      module.exports = webIdl;
      webIdl.displayName = "webIdl";
      webIdl.aliases = [];
      function webIdl(Prism) {
        ;
        (function(Prism2) {
          var id4 = /(?:\B-|\b_|\b)[A-Za-z][\w-]*(?![\w-])/.source;
          var type = "(?:" + /\b(?:unsigned\s+)?long\s+long(?![\w-])/.source + "|" + /\b(?:unrestricted|unsigned)\s+[a-z]+(?![\w-])/.source + "|" + /(?!(?:unrestricted|unsigned)\b)/.source + id4 + /(?:\s*<(?:[^<>]|<[^<>]*>)*>)?/.source + ")" + /(?:\s*\?)?/.source;
          var typeInside = {};
          Prism2.languages["web-idl"] = {
            comment: {
              pattern: /\/\/.*|\/\*[\s\S]*?\*\//,
              greedy: true
            },
            string: {
              pattern: /"[^"]*"/,
              greedy: true
            },
            namespace: {
              pattern: RegExp(/(\bnamespace\s+)/.source + id4),
              lookbehind: true
            },
            "class-name": [
              {
                pattern: /(^|[^\w-])(?:iterable|maplike|setlike)\s*<(?:[^<>]|<[^<>]*>)*>/,
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: RegExp(
                  /(\b(?:attribute|const|deleter|getter|optional|setter)\s+)/.source + type
                ),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: RegExp(
                  "(" + /\bcallback\s+/.source + id4 + /\s*=\s*/.source + ")" + type
                ),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: RegExp(/(\btypedef\b\s*)/.source + type),
                lookbehind: true,
                inside: typeInside
              },
              {
                pattern: RegExp(
                  /(\b(?:callback|dictionary|enum|interface(?:\s+mixin)?)\s+)(?!(?:interface|mixin)\b)/.source + id4
                ),
                lookbehind: true
              },
              {
                pattern: RegExp(/(:\s*)/.source + id4),
                lookbehind: true
              },
              RegExp(id4 + /(?=\s+(?:implements|includes)\b)/.source),
              {
                pattern: RegExp(/(\b(?:implements|includes)\s+)/.source + id4),
                lookbehind: true
              },
              {
                pattern: RegExp(
                  type + "(?=" + /\s*(?:\.{3}\s*)?/.source + id4 + /\s*[(),;=]/.source + ")"
                ),
                inside: typeInside
              }
            ],
            builtin: /\b(?:ArrayBuffer|BigInt64Array|BigUint64Array|ByteString|DOMString|DataView|Float32Array|Float64Array|FrozenArray|Int16Array|Int32Array|Int8Array|ObservableArray|Promise|USVString|Uint16Array|Uint32Array|Uint8Array|Uint8ClampedArray)\b/,
            keyword: [
              /\b(?:async|attribute|callback|const|constructor|deleter|dictionary|enum|getter|implements|includes|inherit|interface|mixin|namespace|null|optional|or|partial|readonly|required|setter|static|stringifier|typedef|unrestricted)\b/,
              /\b(?:any|bigint|boolean|byte|double|float|iterable|long|maplike|object|octet|record|sequence|setlike|short|symbol|undefined|unsigned|void)\b/
            ],
            boolean: /\b(?:false|true)\b/,
            number: {
              pattern: /(^|[^\w-])-?(?:0x[0-9a-f]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|NaN|Infinity)(?![\w-])/i,
              lookbehind: true
            },
            operator: /\.{3}|[=:?<>-]/,
            punctuation: /[(){}[\].,;]/
          };
          for (var key in Prism2.languages["web-idl"]) {
            if (key !== "class-name") {
              typeInside[key] = Prism2.languages["web-idl"][key];
            }
          }
          Prism2.languages["webidl"] = Prism2.languages["web-idl"];
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/wiki.js
  var require_wiki = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/wiki.js"(exports, module) {
      "use strict";
      module.exports = wiki;
      wiki.displayName = "wiki";
      wiki.aliases = [];
      function wiki(Prism) {
        Prism.languages.wiki = Prism.languages.extend("markup", {
          "block-comment": {
            pattern: /(^|[^\\])\/\*[\s\S]*?\*\//,
            lookbehind: true,
            alias: "comment"
          },
          heading: {
            pattern: /^(=+)[^=\r\n].*?\1/m,
            inside: {
              punctuation: /^=+|=+$/,
              important: /.+/
            }
          },
          emphasis: {
            pattern: /('{2,5}).+?\1/,
            inside: {
              "bold-italic": {
                pattern: /(''''').+?(?=\1)/,
                lookbehind: true,
                alias: ["bold", "italic"]
              },
              bold: {
                pattern: /(''')[^'](?:.*?[^'])?(?=\1)/,
                lookbehind: true
              },
              italic: {
                pattern: /('')[^'](?:.*?[^'])?(?=\1)/,
                lookbehind: true
              },
              punctuation: /^''+|''+$/
            }
          },
          hr: {
            pattern: /^-{4,}/m,
            alias: "punctuation"
          },
          url: [
            /ISBN +(?:97[89][ -]?)?(?:\d[ -]?){9}[\dx]\b|(?:PMID|RFC) +\d+/i,
            /\[\[.+?\]\]|\[.+?\]/
          ],
          variable: [
            /__[A-Z]+__/,
            /\{{3}.+?\}{3}/,
            /\{\{.+?\}\}/
          ],
          symbol: [/^#redirect/im, /~{3,5}/],
          "table-tag": {
            pattern: /((?:^|[|!])[|!])[^|\r\n]+\|(?!\|)/m,
            lookbehind: true,
            inside: {
              "table-bar": {
                pattern: /\|$/,
                alias: "punctuation"
              },
              rest: Prism.languages.markup["tag"].inside
            }
          },
          punctuation: /^(?:\{\||\|\}|\|-|[*#:;!|])|\|\||!!/m
        });
        Prism.languages.insertBefore("wiki", "tag", {
          nowiki: {
            pattern: /<(nowiki|pre|source)\b[^>]*>[\s\S]*?<\/\1>/i,
            inside: {
              tag: {
                pattern: /<(?:nowiki|pre|source)\b[^>]*>|<\/(?:nowiki|pre|source)>/i,
                inside: Prism.languages.markup["tag"].inside
              }
            }
          }
        });
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/wolfram.js
  var require_wolfram = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/wolfram.js"(exports, module) {
      "use strict";
      module.exports = wolfram;
      wolfram.displayName = "wolfram";
      wolfram.aliases = ["mathematica", "wl", "nb"];
      function wolfram(Prism) {
        Prism.languages.wolfram = {
          comment: /\(\*(?:\(\*(?:[^*]|\*(?!\)))*\*\)|(?!\(\*)[\s\S])*?\*\)/,
          string: {
            pattern: /"(?:\\.|[^"\\\r\n])*"/,
            greedy: true
          },
          keyword: /\b(?:Abs|AbsArg|Accuracy|Block|Do|For|Function|If|Manipulate|Module|Nest|NestList|None|Return|Switch|Table|Which|While)\b/,
          context: {
            pattern: /\b\w+`+\w*/,
            alias: "class-name"
          },
          blank: {
            pattern: /\b\w+_\b/,
            alias: "regex"
          },
          "global-variable": {
            pattern: /\$\w+/,
            alias: "variable"
          },
          boolean: /\b(?:False|True)\b/,
          number: /(?:\b(?=\d)|\B(?=\.))(?:0[bo])?(?:(?:\d|0x[\da-f])[\da-f]*(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?j?\b/i,
          operator: /\/\.|;|=\.|\^=|\^:=|:=|<<|>>|<\||\|>|:>|\|->|->|<-|@@@|@@|@|\/@|=!=|===|==|=|\+|-|\^|\[\/-+%=\]=?|!=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
          punctuation: /[{}[\];(),.:]/
        };
        Prism.languages.mathematica = Prism.languages.wolfram;
        Prism.languages.wl = Prism.languages.wolfram;
        Prism.languages.nb = Prism.languages.wolfram;
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/wren.js
  var require_wren = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/wren.js"(exports, module) {
      "use strict";
      module.exports = wren;
      wren.displayName = "wren";
      wren.aliases = [];
      function wren(Prism) {
        Prism.languages.wren = {
          comment: [
            {
              pattern: /\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*)|\/\*(?:[^*/]|\*(?!\/)|\/(?!\*))*\*\/)*\*\/)*\*\//,
              greedy: true
            },
            {
              pattern: /(^|[^\\:])\/\/.*/,
              lookbehind: true,
              greedy: true
            }
          ],
          "triple-quoted-string": {
            pattern: /"""[\s\S]*?"""/,
            greedy: true,
            alias: "string"
          },
          "string-literal": null,
          hashbang: {
            pattern: /^#!\/.+/,
            greedy: true,
            alias: "comment"
          },
          attribute: {
            pattern: /#!?[ \t\u3000]*\w+/,
            alias: "keyword"
          },
          "class-name": [
            {
              pattern: /(\bclass\s+)\w+/,
              lookbehind: true
            },
            /\b[A-Z][a-z\d_]*\b/
          ],
          constant: /\b[A-Z][A-Z\d_]*\b/,
          null: {
            pattern: /\bnull\b/,
            alias: "keyword"
          },
          keyword: /\b(?:as|break|class|construct|continue|else|for|foreign|if|import|in|is|return|static|super|this|var|while)\b/,
          boolean: /\b(?:false|true)\b/,
          number: /\b(?:0x[\da-f]+|\d+(?:\.\d+)?(?:e[+-]?\d+)?)\b/i,
          function: /\b[a-z_]\w*(?=\s*[({])/i,
          operator: /<<|>>|[=!<>]=?|&&|\|\||[-+*/%~^&|?:]|\.{2,3}/,
          punctuation: /[\[\](){}.,;]/
        };
        Prism.languages.wren["string-literal"] = {
          pattern: /(^|[^\\"])"(?:[^\\"%]|\\[\s\S]|%(?!\()|%\((?:[^()]|\((?:[^()]|\([^)]*\))*\))*\))*"/,
          lookbehind: true,
          greedy: true,
          inside: {
            interpolation: {
              pattern: /((?:^|[^\\])(?:\\{2})*)%\((?:[^()]|\((?:[^()]|\([^)]*\))*\))*\)/,
              lookbehind: true,
              inside: {
                expression: {
                  pattern: /^(%\()[\s\S]+(?=\)$)/,
                  lookbehind: true,
                  inside: Prism.languages.wren
                },
                "interpolation-punctuation": {
                  pattern: /^%\(|\)$/,
                  alias: "punctuation"
                }
              }
            },
            string: /[\s\S]+/
          }
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/xeora.js
  var require_xeora = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/xeora.js"(exports, module) {
      "use strict";
      module.exports = xeora;
      xeora.displayName = "xeora";
      xeora.aliases = ["xeoracube"];
      function xeora(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.xeora = Prism2.languages.extend("markup", {
            constant: {
              pattern: /\$(?:DomainContents|PageRenderDuration)\$/,
              inside: {
                punctuation: {
                  pattern: /\$/
                }
              }
            },
            variable: {
              pattern: /\$@?(?:#+|[-+*~=^])?[\w.]+\$/,
              inside: {
                punctuation: {
                  pattern: /[$.]/
                },
                operator: {
                  pattern: /#+|[-+*~=^@]/
                }
              }
            },
            "function-inline": {
              pattern: /\$F:[-\w.]+\?[-\w.]+(?:,(?:(?:@[-#]*\w+\.[\w+.]\.*)*\|)*(?:(?:[\w+]|[-#*.~^]+[\w+]|=\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\w+\.[\w+.]\.*)+(?:(?:[\w+]|[-#*~^][-#*.~^]*[\w+]|=\S)(?:[^$=]|=+[^=])*=*)?)?)?\$/,
              inside: {
                variable: {
                  pattern: /(?:[,|])@?(?:#+|[-+*~=^])?[\w.]+/,
                  inside: {
                    punctuation: {
                      pattern: /[,.|]/
                    },
                    operator: {
                      pattern: /#+|[-+*~=^@]/
                    }
                  }
                },
                punctuation: {
                  pattern: /\$\w:|[$:?.,|]/
                }
              },
              alias: "function"
            },
            "function-block": {
              pattern: /\$XF:\{[-\w.]+\?[-\w.]+(?:,(?:(?:@[-#]*\w+\.[\w+.]\.*)*\|)*(?:(?:[\w+]|[-#*.~^]+[\w+]|=\S)(?:[^$=]|=+[^=])*=*|(?:@[-#]*\w+\.[\w+.]\.*)+(?:(?:[\w+]|[-#*~^][-#*.~^]*[\w+]|=\S)(?:[^$=]|=+[^=])*=*)?)?)?\}:XF\$/,
              inside: {
                punctuation: {
                  pattern: /[$:{}?.,|]/
                }
              },
              alias: "function"
            },
            "directive-inline": {
              pattern: /\$\w(?:#\d+\+?)?(?:\[[-\w.]+\])?:[-\/\w.]+\$/,
              inside: {
                punctuation: {
                  pattern: /\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,
                  inside: {
                    tag: {
                      pattern: /#\d/
                    }
                  }
                }
              },
              alias: "function"
            },
            "directive-block-open": {
              pattern: /\$\w+:\{|\$\w(?:#\d+\+?)?(?:\[[-\w.]+\])?:[-\w.]+:\{(?:![A-Z]+)?/,
              inside: {
                punctuation: {
                  pattern: /\$(?:\w:|C(?:\[|#\d))?|[:{[\]]/,
                  inside: {
                    tag: {
                      pattern: /#\d/
                    }
                  }
                },
                attribute: {
                  pattern: /![A-Z]+$/,
                  inside: {
                    punctuation: {
                      pattern: /!/
                    }
                  },
                  alias: "keyword"
                }
              },
              alias: "function"
            },
            "directive-block-separator": {
              pattern: /\}:[-\w.]+:\{/,
              inside: {
                punctuation: {
                  pattern: /[:{}]/
                }
              },
              alias: "function"
            },
            "directive-block-close": {
              pattern: /\}:[-\w.]+\$/,
              inside: {
                punctuation: {
                  pattern: /[:{}$]/
                }
              },
              alias: "function"
            }
          });
          Prism2.languages.insertBefore(
            "inside",
            "punctuation",
            {
              variable: Prism2.languages.xeora["function-inline"].inside["variable"]
            },
            Prism2.languages.xeora["function-block"]
          );
          Prism2.languages.xeoracube = Prism2.languages.xeora;
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/xml-doc.js
  var require_xml_doc = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/xml-doc.js"(exports, module) {
      "use strict";
      module.exports = xmlDoc;
      xmlDoc.displayName = "xmlDoc";
      xmlDoc.aliases = [];
      function xmlDoc(Prism) {
        ;
        (function(Prism2) {
          function insertDocComment(lang, docComment) {
            if (Prism2.languages[lang]) {
              Prism2.languages.insertBefore(lang, "comment", {
                "doc-comment": docComment
              });
            }
          }
          var tag = Prism2.languages.markup.tag;
          var slashDocComment = {
            pattern: /\/\/\/.*/,
            greedy: true,
            alias: "comment",
            inside: {
              tag
            }
          };
          var tickDocComment = {
            pattern: /'''.*/,
            greedy: true,
            alias: "comment",
            inside: {
              tag
            }
          };
          insertDocComment("csharp", slashDocComment);
          insertDocComment("fsharp", slashDocComment);
          insertDocComment("vbnet", tickDocComment);
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/xojo.js
  var require_xojo = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/xojo.js"(exports, module) {
      "use strict";
      module.exports = xojo;
      xojo.displayName = "xojo";
      xojo.aliases = [];
      function xojo(Prism) {
        Prism.languages.xojo = {
          comment: {
            pattern: /(?:'|\/\/|Rem\b).+/i,
            greedy: true
          },
          string: {
            pattern: /"(?:""|[^"])*"/,
            greedy: true
          },
          number: [/(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:E[+-]?\d+)?/i, /&[bchou][a-z\d]+/i],
          directive: {
            pattern: /#(?:Else|ElseIf|Endif|If|Pragma)\b/i,
            alias: "property"
          },
          keyword: /\b(?:AddHandler|App|Array|As(?:signs)?|Auto|Boolean|Break|By(?:Ref|Val)|Byte|Call|Case|Catch|CFStringRef|CGFloat|Class|Color|Const|Continue|CString|Currency|CurrentMethodName|Declare|Delegate|Dim|Do(?:uble|wnTo)?|Each|Else(?:If)?|End|Enumeration|Event|Exception|Exit|Extends|False|Finally|For|Function|Get|GetTypeInfo|Global|GOTO|If|Implements|In|Inherits|Int(?:8|16|32|64|eger|erface)?|Lib|Loop|Me|Module|Next|Nil|Object|Optional|OSType|ParamArray|Private|Property|Protected|PString|Ptr|Raise(?:Event)?|ReDim|RemoveHandler|Return|Select(?:or)?|Self|Set|Shared|Short|Single|Soft|Static|Step|String|Sub|Super|Text|Then|To|True|Try|Ubound|UInt(?:8|16|32|64|eger)?|Until|Using|Var(?:iant)?|Wend|While|WindowPtr|WString)\b/i,
          operator: /<[=>]?|>=?|[+\-*\/\\^=]|\b(?:AddressOf|And|Ctype|IsA?|Mod|New|Not|Or|WeakAddressOf|Xor)\b/i,
          punctuation: /[.,;:()]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/xquery.js
  var require_xquery = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/xquery.js"(exports, module) {
      "use strict";
      module.exports = xquery;
      xquery.displayName = "xquery";
      xquery.aliases = [];
      function xquery(Prism) {
        ;
        (function(Prism2) {
          Prism2.languages.xquery = Prism2.languages.extend("markup", {
            "xquery-comment": {
              pattern: /\(:[\s\S]*?:\)/,
              greedy: true,
              alias: "comment"
            },
            string: {
              pattern: /(["'])(?:\1\1|(?!\1)[\s\S])*\1/,
              greedy: true
            },
            extension: {
              pattern: /\(#.+?#\)/,
              alias: "symbol"
            },
            variable: /\$[-\w:]+/,
            axis: {
              pattern: /(^|[^-])(?:ancestor(?:-or-self)?|attribute|child|descendant(?:-or-self)?|following(?:-sibling)?|parent|preceding(?:-sibling)?|self)(?=::)/,
              lookbehind: true,
              alias: "operator"
            },
            "keyword-operator": {
              pattern: /(^|[^:-])\b(?:and|castable as|div|eq|except|ge|gt|idiv|instance of|intersect|is|le|lt|mod|ne|or|union)\b(?=$|[^:-])/,
              lookbehind: true,
              alias: "operator"
            },
            keyword: {
              pattern: /(^|[^:-])\b(?:as|ascending|at|base-uri|boundary-space|case|cast as|collation|construction|copy-namespaces|declare|default|descending|else|empty (?:greatest|least)|encoding|every|external|for|function|if|import|in|inherit|lax|let|map|module|namespace|no-inherit|no-preserve|option|order(?: by|ed|ing)?|preserve|return|satisfies|schema|some|stable|strict|strip|then|to|treat as|typeswitch|unordered|validate|variable|version|where|xquery)\b(?=$|[^:-])/,
              lookbehind: true
            },
            function: /[\w-]+(?::[\w-]+)*(?=\s*\()/,
            "xquery-element": {
              pattern: /(element\s+)[\w-]+(?::[\w-]+)*/,
              lookbehind: true,
              alias: "tag"
            },
            "xquery-attribute": {
              pattern: /(attribute\s+)[\w-]+(?::[\w-]+)*/,
              lookbehind: true,
              alias: "attr-name"
            },
            builtin: {
              pattern: /(^|[^:-])\b(?:attribute|comment|document|element|processing-instruction|text|xs:(?:ENTITIES|ENTITY|ID|IDREFS?|NCName|NMTOKENS?|NOTATION|Name|QName|anyAtomicType|anyType|anyURI|base64Binary|boolean|byte|date|dateTime|dayTimeDuration|decimal|double|duration|float|gDay|gMonth|gMonthDay|gYear|gYearMonth|hexBinary|int|integer|language|long|negativeInteger|nonNegativeInteger|nonPositiveInteger|normalizedString|positiveInteger|short|string|time|token|unsigned(?:Byte|Int|Long|Short)|untyped(?:Atomic)?|yearMonthDuration))\b(?=$|[^:-])/,
              lookbehind: true
            },
            number: /\b\d+(?:\.\d+)?(?:E[+-]?\d+)?/,
            operator: [
              /[+*=?|@]|\.\.?|:=|!=|<[=<]?|>[=>]?/,
              {
                pattern: /(\s)-(?=\s)/,
                lookbehind: true
              }
            ],
            punctuation: /[[\](){},;:/]/
          });
          Prism2.languages.xquery.tag.pattern = /<\/?(?!\d)[^\s>\/=$<%]+(?:\s+[^\s>\/=]+(?:=(?:("|')(?:\\[\s\S]|\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}|(?!\1)[^\\])*\1|[^\s'">=]+))?)*\s*\/?>/;
          Prism2.languages.xquery["tag"].inside["attr-value"].pattern = /=(?:("|')(?:\\[\s\S]|\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}|(?!\1)[^\\])*\1|[^\s'">=]+)/;
          Prism2.languages.xquery["tag"].inside["attr-value"].inside["punctuation"] = /^="|"$/;
          Prism2.languages.xquery["tag"].inside["attr-value"].inside["expression"] = {
            pattern: /\{(?!\{)(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])+\}/,
            inside: Prism2.languages.xquery,
            alias: "language-xquery"
          };
          var stringifyToken = function(token) {
            if (typeof token === "string") {
              return token;
            }
            if (typeof token.content === "string") {
              return token.content;
            }
            return token.content.map(stringifyToken).join("");
          };
          var walkTokens = function(tokens2) {
            var openedTags = [];
            for (var i = 0; i < tokens2.length; i++) {
              var token = tokens2[i];
              var notTagNorBrace = false;
              if (typeof token !== "string") {
                if (token.type === "tag" && token.content[0] && token.content[0].type === "tag") {
                  if (token.content[0].content[0].content === "</") {
                    if (openedTags.length > 0 && openedTags[openedTags.length - 1].tagName === stringifyToken(token.content[0].content[1])) {
                      openedTags.pop();
                    }
                  } else {
                    if (token.content[token.content.length - 1].content === "/>") {
                    } else {
                      openedTags.push({
                        tagName: stringifyToken(token.content[0].content[1]),
                        openedBraces: 0
                      });
                    }
                  }
                } else if (openedTags.length > 0 && token.type === "punctuation" && token.content === "{" && (!tokens2[i + 1] || tokens2[i + 1].type !== "punctuation" || tokens2[i + 1].content !== "{") && (!tokens2[i - 1] || tokens2[i - 1].type !== "plain-text" || tokens2[i - 1].content !== "{")) {
                  openedTags[openedTags.length - 1].openedBraces++;
                } else if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces > 0 && token.type === "punctuation" && token.content === "}") {
                  openedTags[openedTags.length - 1].openedBraces--;
                } else if (token.type !== "comment") {
                  notTagNorBrace = true;
                }
              }
              if (notTagNorBrace || typeof token === "string") {
                if (openedTags.length > 0 && openedTags[openedTags.length - 1].openedBraces === 0) {
                  var plainText = stringifyToken(token);
                  if (i < tokens2.length - 1 && (typeof tokens2[i + 1] === "string" || tokens2[i + 1].type === "plain-text")) {
                    plainText += stringifyToken(tokens2[i + 1]);
                    tokens2.splice(i + 1, 1);
                  }
                  if (i > 0 && (typeof tokens2[i - 1] === "string" || tokens2[i - 1].type === "plain-text")) {
                    plainText = stringifyToken(tokens2[i - 1]) + plainText;
                    tokens2.splice(i - 1, 1);
                    i--;
                  }
                  if (/^\s+$/.test(plainText)) {
                    tokens2[i] = plainText;
                  } else {
                    tokens2[i] = new Prism2.Token(
                      "plain-text",
                      plainText,
                      null,
                      plainText
                    );
                  }
                }
              }
              if (token.content && typeof token.content !== "string") {
                walkTokens(token.content);
              }
            }
          };
          Prism2.hooks.add("after-tokenize", function(env) {
            if (env.language !== "xquery") {
              return;
            }
            walkTokens(env.tokens);
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/yang.js
  var require_yang = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/yang.js"(exports, module) {
      "use strict";
      module.exports = yang;
      yang.displayName = "yang";
      yang.aliases = [];
      function yang(Prism) {
        Prism.languages.yang = {
          comment: /\/\*[\s\S]*?\*\/|\/\/.*/,
          string: {
            pattern: /"(?:[^\\"]|\\.)*"|'[^']*'/,
            greedy: true
          },
          keyword: {
            pattern: /(^|[{};\r\n][ \t]*)[a-z_][\w.-]*/i,
            lookbehind: true
          },
          namespace: {
            pattern: /(\s)[a-z_][\w.-]*(?=:)/i,
            lookbehind: true
          },
          boolean: /\b(?:false|true)\b/,
          operator: /\+/,
          punctuation: /[{};:]/
        };
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/lang/zig.js
  var require_zig = __commonJS({
    "../ecopan_bot/node_modules/refractor/lang/zig.js"(exports, module) {
      "use strict";
      module.exports = zig;
      zig.displayName = "zig";
      zig.aliases = [];
      function zig(Prism) {
        ;
        (function(Prism2) {
          function literal(str) {
            return function() {
              return str;
            };
          }
          var keyword = /\b(?:align|allowzero|and|anyframe|anytype|asm|async|await|break|cancel|catch|comptime|const|continue|defer|else|enum|errdefer|error|export|extern|fn|for|if|inline|linksection|nakedcc|noalias|nosuspend|null|or|orelse|packed|promise|pub|resume|return|stdcallcc|struct|suspend|switch|test|threadlocal|try|undefined|union|unreachable|usingnamespace|var|volatile|while)\b/;
          var IDENTIFIER = "\\b(?!" + keyword.source + ")(?!\\d)\\w+\\b";
          var ALIGN = /align\s*\((?:[^()]|\([^()]*\))*\)/.source;
          var PREFIX_TYPE_OP = /(?:\?|\bpromise->|(?:\[[^[\]]*\]|\*(?!\*)|\*\*)(?:\s*<ALIGN>|\s*const\b|\s*volatile\b|\s*allowzero\b)*)/.source.replace(
            /<ALIGN>/g,
            literal(ALIGN)
          );
          var SUFFIX_EXPR = /(?:\bpromise\b|(?:\berror\.)?<ID>(?:\.<ID>)*(?!\s+<ID>))/.source.replace(
            /<ID>/g,
            literal(IDENTIFIER)
          );
          var TYPE = "(?!\\s)(?:!?\\s*(?:" + PREFIX_TYPE_OP + "\\s*)*" + SUFFIX_EXPR + ")+";
          Prism2.languages.zig = {
            comment: [
              {
                pattern: /\/\/[/!].*/,
                alias: "doc-comment"
              },
              /\/{2}.*/
            ],
            string: [
              {
                pattern: /(^|[^\\@])c?"(?:[^"\\\r\n]|\\.)*"/,
                lookbehind: true,
                greedy: true
              },
              {
                pattern: /([\r\n])([ \t]+c?\\{2}).*(?:(?:\r\n?|\n)\2.*)*/,
                lookbehind: true,
                greedy: true
              }
            ],
            char: {
              pattern: /(^|[^\\])'(?:[^'\\\r\n]|[\uD800-\uDFFF]{2}|\\(?:.|x[a-fA-F\d]{2}|u\{[a-fA-F\d]{1,6}\}))'/,
              lookbehind: true,
              greedy: true
            },
            builtin: /\B@(?!\d)\w+(?=\s*\()/,
            label: {
              pattern: /(\b(?:break|continue)\s*:\s*)\w+\b|\b(?!\d)\w+\b(?=\s*:\s*(?:\{|while\b))/,
              lookbehind: true
            },
            "class-name": [
              /\b(?!\d)\w+(?=\s*=\s*(?:(?:extern|packed)\s+)?(?:enum|struct|union)\s*[({])/,
              {
                pattern: RegExp(
                  /(:\s*)<TYPE>(?=\s*(?:<ALIGN>\s*)?[=;,)])|<TYPE>(?=\s*(?:<ALIGN>\s*)?\{)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))
                ),
                lookbehind: true,
                inside: null
              },
              {
                pattern: RegExp(
                  /(\)\s*)<TYPE>(?=\s*(?:<ALIGN>\s*)?;)/.source.replace(/<TYPE>/g, literal(TYPE)).replace(/<ALIGN>/g, literal(ALIGN))
                ),
                lookbehind: true,
                inside: null
              }
            ],
            "builtin-type": {
              pattern: /\b(?:anyerror|bool|c_u?(?:int|long|longlong|short)|c_longdouble|c_void|comptime_(?:float|int)|f(?:16|32|64|128)|[iu](?:8|16|32|64|128|size)|noreturn|type|void)\b/,
              alias: "keyword"
            },
            keyword,
            function: /\b(?!\d)\w+(?=\s*\()/,
            number: /\b(?:0b[01]+|0o[0-7]+|0x[a-fA-F\d]+(?:\.[a-fA-F\d]*)?(?:[pP][+-]?[a-fA-F\d]+)?|\d+(?:\.\d*)?(?:[eE][+-]?\d+)?)\b/,
            boolean: /\b(?:false|true)\b/,
            operator: /\.[*?]|\.{2,3}|[-=]>|\*\*|\+\+|\|\||(?:<<|>>|[-+*]%|[-+*/%^&|<>!=])=?|[?~]/,
            punctuation: /[.:,;(){}[\]]/
          };
          Prism2.languages.zig["class-name"].forEach(function(obj) {
            if (obj.inside === null) {
              obj.inside = Prism2.languages.zig;
            }
          });
        })(Prism);
      }
    }
  });

  // ../ecopan_bot/node_modules/refractor/index.js
  var require_refractor = __commonJS({
    "../ecopan_bot/node_modules/refractor/index.js"(exports, module) {
      "use strict";
      var refractor2 = require_core();
      module.exports = refractor2;
      refractor2.register(require_abap());
      refractor2.register(require_abnf());
      refractor2.register(require_actionscript());
      refractor2.register(require_ada());
      refractor2.register(require_agda());
      refractor2.register(require_al());
      refractor2.register(require_antlr4());
      refractor2.register(require_apacheconf());
      refractor2.register(require_apex());
      refractor2.register(require_apl());
      refractor2.register(require_applescript());
      refractor2.register(require_aql());
      refractor2.register(require_arduino());
      refractor2.register(require_arff());
      refractor2.register(require_asciidoc());
      refractor2.register(require_asm6502());
      refractor2.register(require_asmatmel());
      refractor2.register(require_aspnet());
      refractor2.register(require_autohotkey());
      refractor2.register(require_autoit());
      refractor2.register(require_avisynth());
      refractor2.register(require_avro_idl());
      refractor2.register(require_bash());
      refractor2.register(require_basic());
      refractor2.register(require_batch());
      refractor2.register(require_bbcode());
      refractor2.register(require_bicep());
      refractor2.register(require_birb());
      refractor2.register(require_bison());
      refractor2.register(require_bnf());
      refractor2.register(require_brainfuck());
      refractor2.register(require_brightscript());
      refractor2.register(require_bro());
      refractor2.register(require_bsl());
      refractor2.register(require_c());
      refractor2.register(require_cfscript());
      refractor2.register(require_chaiscript());
      refractor2.register(require_cil());
      refractor2.register(require_clojure());
      refractor2.register(require_cmake());
      refractor2.register(require_cobol());
      refractor2.register(require_coffeescript());
      refractor2.register(require_concurnas());
      refractor2.register(require_coq());
      refractor2.register(require_cpp());
      refractor2.register(require_crystal());
      refractor2.register(require_csharp());
      refractor2.register(require_cshtml());
      refractor2.register(require_csp());
      refractor2.register(require_css_extras());
      refractor2.register(require_csv());
      refractor2.register(require_cypher());
      refractor2.register(require_d());
      refractor2.register(require_dart());
      refractor2.register(require_dataweave());
      refractor2.register(require_dax());
      refractor2.register(require_dhall());
      refractor2.register(require_diff());
      refractor2.register(require_django());
      refractor2.register(require_dns_zone_file());
      refractor2.register(require_docker());
      refractor2.register(require_dot());
      refractor2.register(require_ebnf());
      refractor2.register(require_editorconfig());
      refractor2.register(require_eiffel());
      refractor2.register(require_ejs());
      refractor2.register(require_elixir());
      refractor2.register(require_elm());
      refractor2.register(require_erb());
      refractor2.register(require_erlang());
      refractor2.register(require_etlua());
      refractor2.register(require_excel_formula());
      refractor2.register(require_factor());
      refractor2.register(require_false());
      refractor2.register(require_firestore_security_rules());
      refractor2.register(require_flow());
      refractor2.register(require_fortran());
      refractor2.register(require_fsharp());
      refractor2.register(require_ftl());
      refractor2.register(require_gap());
      refractor2.register(require_gcode());
      refractor2.register(require_gdscript());
      refractor2.register(require_gedcom());
      refractor2.register(require_gherkin());
      refractor2.register(require_git());
      refractor2.register(require_glsl());
      refractor2.register(require_gml());
      refractor2.register(require_gn());
      refractor2.register(require_go_module());
      refractor2.register(require_go());
      refractor2.register(require_graphql());
      refractor2.register(require_groovy());
      refractor2.register(require_haml());
      refractor2.register(require_handlebars());
      refractor2.register(require_haskell());
      refractor2.register(require_haxe());
      refractor2.register(require_hcl());
      refractor2.register(require_hlsl());
      refractor2.register(require_hoon());
      refractor2.register(require_hpkp());
      refractor2.register(require_hsts());
      refractor2.register(require_http());
      refractor2.register(require_ichigojam());
      refractor2.register(require_icon());
      refractor2.register(require_icu_message_format());
      refractor2.register(require_idris());
      refractor2.register(require_iecst());
      refractor2.register(require_ignore());
      refractor2.register(require_inform7());
      refractor2.register(require_ini());
      refractor2.register(require_io());
      refractor2.register(require_j());
      refractor2.register(require_java());
      refractor2.register(require_javadoc());
      refractor2.register(require_javadoclike());
      refractor2.register(require_javastacktrace());
      refractor2.register(require_jexl());
      refractor2.register(require_jolie());
      refractor2.register(require_jq());
      refractor2.register(require_js_extras());
      refractor2.register(require_js_templates());
      refractor2.register(require_jsdoc());
      refractor2.register(require_json());
      refractor2.register(require_json5());
      refractor2.register(require_jsonp());
      refractor2.register(require_jsstacktrace());
      refractor2.register(require_jsx());
      refractor2.register(require_julia());
      refractor2.register(require_keepalived());
      refractor2.register(require_keyman());
      refractor2.register(require_kotlin());
      refractor2.register(require_kumir());
      refractor2.register(require_kusto());
      refractor2.register(require_latex());
      refractor2.register(require_latte());
      refractor2.register(require_less());
      refractor2.register(require_lilypond());
      refractor2.register(require_liquid());
      refractor2.register(require_lisp());
      refractor2.register(require_livescript());
      refractor2.register(require_llvm());
      refractor2.register(require_log());
      refractor2.register(require_lolcode());
      refractor2.register(require_lua());
      refractor2.register(require_magma());
      refractor2.register(require_makefile());
      refractor2.register(require_markdown());
      refractor2.register(require_markup_templating());
      refractor2.register(require_matlab());
      refractor2.register(require_maxscript());
      refractor2.register(require_mel());
      refractor2.register(require_mermaid());
      refractor2.register(require_mizar());
      refractor2.register(require_mongodb());
      refractor2.register(require_monkey());
      refractor2.register(require_moonscript());
      refractor2.register(require_n1ql());
      refractor2.register(require_n4js());
      refractor2.register(require_nand2tetris_hdl());
      refractor2.register(require_naniscript());
      refractor2.register(require_nasm());
      refractor2.register(require_neon());
      refractor2.register(require_nevod());
      refractor2.register(require_nginx());
      refractor2.register(require_nim());
      refractor2.register(require_nix());
      refractor2.register(require_nsis());
      refractor2.register(require_objectivec());
      refractor2.register(require_ocaml());
      refractor2.register(require_opencl());
      refractor2.register(require_openqasm());
      refractor2.register(require_oz());
      refractor2.register(require_parigp());
      refractor2.register(require_parser2());
      refractor2.register(require_pascal());
      refractor2.register(require_pascaligo());
      refractor2.register(require_pcaxis());
      refractor2.register(require_peoplecode());
      refractor2.register(require_perl());
      refractor2.register(require_php_extras());
      refractor2.register(require_php());
      refractor2.register(require_phpdoc());
      refractor2.register(require_plsql());
      refractor2.register(require_powerquery());
      refractor2.register(require_powershell());
      refractor2.register(require_processing());
      refractor2.register(require_prolog());
      refractor2.register(require_promql());
      refractor2.register(require_properties());
      refractor2.register(require_protobuf());
      refractor2.register(require_psl());
      refractor2.register(require_pug());
      refractor2.register(require_puppet());
      refractor2.register(require_pure());
      refractor2.register(require_purebasic());
      refractor2.register(require_purescript());
      refractor2.register(require_python());
      refractor2.register(require_q());
      refractor2.register(require_qml());
      refractor2.register(require_qore());
      refractor2.register(require_qsharp());
      refractor2.register(require_r());
      refractor2.register(require_racket());
      refractor2.register(require_reason());
      refractor2.register(require_regex());
      refractor2.register(require_rego());
      refractor2.register(require_renpy());
      refractor2.register(require_rest());
      refractor2.register(require_rip());
      refractor2.register(require_roboconf());
      refractor2.register(require_robotframework());
      refractor2.register(require_ruby());
      refractor2.register(require_rust());
      refractor2.register(require_sas());
      refractor2.register(require_sass());
      refractor2.register(require_scala());
      refractor2.register(require_scheme());
      refractor2.register(require_scss());
      refractor2.register(require_shell_session());
      refractor2.register(require_smali());
      refractor2.register(require_smalltalk());
      refractor2.register(require_smarty());
      refractor2.register(require_sml());
      refractor2.register(require_solidity());
      refractor2.register(require_solution_file());
      refractor2.register(require_soy());
      refractor2.register(require_sparql());
      refractor2.register(require_splunk_spl());
      refractor2.register(require_sqf());
      refractor2.register(require_sql());
      refractor2.register(require_squirrel());
      refractor2.register(require_stan());
      refractor2.register(require_stylus());
      refractor2.register(require_swift());
      refractor2.register(require_systemd());
      refractor2.register(require_t4_cs());
      refractor2.register(require_t4_templating());
      refractor2.register(require_t4_vb());
      refractor2.register(require_tap());
      refractor2.register(require_tcl());
      refractor2.register(require_textile());
      refractor2.register(require_toml());
      refractor2.register(require_tremor());
      refractor2.register(require_tsx());
      refractor2.register(require_tt2());
      refractor2.register(require_turtle());
      refractor2.register(require_twig());
      refractor2.register(require_typescript());
      refractor2.register(require_typoscript());
      refractor2.register(require_unrealscript());
      refractor2.register(require_uorazor());
      refractor2.register(require_uri());
      refractor2.register(require_v());
      refractor2.register(require_vala());
      refractor2.register(require_vbnet());
      refractor2.register(require_velocity());
      refractor2.register(require_verilog());
      refractor2.register(require_vhdl());
      refractor2.register(require_vim());
      refractor2.register(require_visual_basic());
      refractor2.register(require_warpscript());
      refractor2.register(require_wasm());
      refractor2.register(require_web_idl());
      refractor2.register(require_wiki());
      refractor2.register(require_wolfram());
      refractor2.register(require_wren());
      refractor2.register(require_xeora());
      refractor2.register(require_xml_doc());
      refractor2.register(require_xojo());
      refractor2.register(require_xquery());
      refractor2.register(require_yaml());
      refractor2.register(require_yang());
      refractor2.register(require_zig());
    }
  });

  // ../ecopan_bot/ecopan_bot/public/js/PublicChatUI.jsx
  var React16 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // ../ecopan_bot/node_modules/@chakra-ui/css-reset/dist/chunk-ZGCVOC2V.mjs
  var import_react = __toESM(require_emotion_react_cjs(), 1);
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var css = String.raw;
  var vhPolyfill = css`
  :root,
  :host {
    --chakra-vh: 100vh;
  }

  @supports (height: -webkit-fill-available) {
    :root,
    :host {
      --chakra-vh: -webkit-fill-available;
    }
  }

  @supports (height: -moz-fill-available) {
    :root,
    :host {
      --chakra-vh: -moz-fill-available;
    }
  }

  @supports (height: 100dvh) {
    :root,
    :host {
      --chakra-vh: 100dvh;
    }
  }
`;
  var CSSPolyfill = () => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.Global, { styles: vhPolyfill });
  var CSSReset = ({ scope = "" }) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_react.Global,
    {
      styles: css`
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
        -moz-osx-font-smoothing: grayscale;
        touch-action: manipulation;
      }

      body {
        position: relative;
        min-height: 100%;
        margin: 0;
        font-feature-settings: "kern";
      }

      ${scope} :where(*, *::before, *::after) {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
        word-wrap: break-word;
      }

      main {
        display: block;
      }

      ${scope} hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      ${scope} :where(pre, code, kbd,samp) {
        font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      ${scope} a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      ${scope} abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      ${scope} :where(b, strong) {
        font-weight: bold;
      }

      ${scope} small {
        font-size: 80%;
      }

      ${scope} :where(sub,sup) {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      ${scope} sub {
        bottom: -0.25em;
      }

      ${scope} sup {
        top: -0.5em;
      }

      ${scope} img {
        border-style: none;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      ${scope} :where(button, input) {
        overflow: visible;
      }

      ${scope} :where(button, select) {
        text-transform: none;
      }

      ${scope} :where(
          button::-moz-focus-inner,
          [type="button"]::-moz-focus-inner,
          [type="reset"]::-moz-focus-inner,
          [type="submit"]::-moz-focus-inner
        ) {
        border-style: none;
        padding: 0;
      }

      ${scope} fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      ${scope} legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      ${scope} progress {
        vertical-align: baseline;
      }

      ${scope} textarea {
        overflow: auto;
      }

      ${scope} :where([type="checkbox"], [type="radio"]) {
        box-sizing: border-box;
        padding: 0;
      }

      ${scope} input[type="number"]::-webkit-inner-spin-button,
      ${scope} input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      ${scope} input[type="number"] {
        -moz-appearance: textfield;
      }

      ${scope} input[type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      ${scope} input[type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ${scope} ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      ${scope} details {
        display: block;
      }

      ${scope} summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      ${scope} :where(
          blockquote,
          dl,
          dd,
          h1,
          h2,
          h3,
          h4,
          h5,
          h6,
          hr,
          figure,
          p,
          pre
        ) {
        margin: 0;
      }

      ${scope} button {
        background: transparent;
        padding: 0;
      }

      ${scope} fieldset {
        margin: 0;
        padding: 0;
      }

      ${scope} :where(ol, ul) {
        margin: 0;
        padding: 0;
      }

      ${scope} textarea {
        resize: vertical;
      }

      ${scope} :where(button, [role="button"]) {
        cursor: pointer;
      }

      ${scope} button::-moz-focus-inner {
        border: 0 !important;
      }

      ${scope} table {
        border-collapse: collapse;
      }

      ${scope} :where(h1, h2, h3, h4, h5, h6) {
        font-size: inherit;
        font-weight: inherit;
      }

      ${scope} :where(button, input, optgroup, select, textarea) {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      ${scope} :where(img, svg, video, canvas, audio, iframe, embed, object) {
        display: block;
      }

      ${scope} :where(img, video) {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible]
        :focus:not([data-focus-visible-added]):not(
          [data-focus-visible-disabled]
        ) {
        outline: none;
        box-shadow: none;
      }

      ${scope} select::-ms-expand {
        display: none;
      }

      ${vhPolyfill}
    `
    }
  );

  // ../ecopan_bot/node_modules/@chakra-ui/react-context/dist/index.mjs
  var import_react2 = __toESM(require_react(), 1);
  function getErrorMessage(hook, provider) {
    return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
  }
  function createContext(options = {}) {
    const {
      name,
      strict = true,
      hookName = "useContext",
      providerName = "Provider",
      errorMessage,
      defaultValue
    } = options;
    const Context = (0, import_react2.createContext)(defaultValue);
    Context.displayName = name;
    function useContext11() {
      var _a7;
      const context = (0, import_react2.useContext)(Context);
      if (!context && strict) {
        const error2 = new Error(
          errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName)
        );
        error2.name = "ContextError";
        (_a7 = Error.captureStackTrace) == null ? void 0 : _a7.call(Error, error2, useContext11);
        throw error2;
      }
      return context;
    }
    return [Context.Provider, useContext11, Context];
  }

  // ../ecopan_bot/node_modules/@chakra-ui/portal/dist/chunk-EJ37EVSP.mjs
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  var [PortalManagerContextProvider, usePortalManager] = createContext({
    strict: false,
    name: "PortalManagerContext"
  });
  function PortalManager(props) {
    const { children, zIndex } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(PortalManagerContextProvider, { value: { zIndex }, children });
  }
  PortalManager.displayName = "PortalManager";

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-safe-layout-effect/dist/index.mjs
  var import_react3 = __toESM(require_react(), 1);
  var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react3.useLayoutEffect : import_react3.useEffect;

  // ../ecopan_bot/node_modules/@chakra-ui/portal/dist/chunk-YLCZP3C4.mjs
  var import_react_dom = __toESM(require_react_dom(), 1);
  var import_react4 = __toESM(require_react(), 1);
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  var [PortalContextProvider, usePortalContext] = createContext({
    strict: false,
    name: "PortalContext"
  });
  var PORTAL_CLASSNAME = "chakra-portal";
  var PORTAL_SELECTOR = `.chakra-portal`;
  var Container = (props) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
    "div",
    {
      className: "chakra-portal-zIndex",
      style: {
        position: "absolute",
        zIndex: props.zIndex,
        top: 0,
        left: 0,
        right: 0
      },
      children: props.children
    }
  );
  var DefaultPortal = (props) => {
    const { appendToParentPortal, children } = props;
    const [tempNode, setTempNode] = (0, import_react4.useState)(null);
    const portal = (0, import_react4.useRef)(null);
    const [, forceUpdate] = (0, import_react4.useState)({});
    (0, import_react4.useEffect)(() => forceUpdate({}), []);
    const parentPortal = usePortalContext();
    const manager = usePortalManager();
    useSafeLayoutEffect(() => {
      if (!tempNode)
        return;
      const doc = tempNode.ownerDocument;
      const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
      if (!host)
        return;
      portal.current = doc.createElement("div");
      portal.current.className = PORTAL_CLASSNAME;
      host.appendChild(portal.current);
      forceUpdate({});
      const portalNode = portal.current;
      return () => {
        if (host.contains(portalNode)) {
          host.removeChild(portalNode);
        }
      };
    }, [tempNode]);
    const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Container, { zIndex: manager == null ? void 0 : manager.zIndex, children }) : children;
    return portal.current ? (0, import_react_dom.createPortal)(
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PortalContextProvider, { value: portal.current, children: _children }),
      portal.current
    ) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "span",
      {
        ref: (el) => {
          if (el)
            setTempNode(el);
        }
      }
    );
  };
  var ContainerPortal = (props) => {
    const { children, containerRef, appendToParentPortal } = props;
    const containerEl = containerRef.current;
    const host = containerEl != null ? containerEl : typeof window !== "undefined" ? document.body : void 0;
    const portal = (0, import_react4.useMemo)(() => {
      const node2 = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
      if (node2)
        node2.className = PORTAL_CLASSNAME;
      return node2;
    }, [containerEl]);
    const [, forceUpdate] = (0, import_react4.useState)({});
    useSafeLayoutEffect(() => forceUpdate({}), []);
    useSafeLayoutEffect(() => {
      if (!portal || !host)
        return;
      host.appendChild(portal);
      return () => {
        host.removeChild(portal);
      };
    }, [portal, host]);
    if (host && portal) {
      return (0, import_react_dom.createPortal)(
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PortalContextProvider, { value: appendToParentPortal ? portal : null, children }),
        portal
      );
    }
    return null;
  };
  function Portal(props) {
    const portalProps = __spreadValues({
      appendToParentPortal: true
    }, props);
    const _a7 = portalProps, { containerRef } = _a7, rest = __objRest(_a7, ["containerRef"]);
    return containerRef ? /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ContainerPortal, __spreadValues({ containerRef }, rest)) : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(DefaultPortal, __spreadValues({}, rest));
  }
  Portal.className = PORTAL_CLASSNAME;
  Portal.selector = PORTAL_SELECTOR;
  Portal.displayName = "Portal";

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-NLMMK76H.mjs
  var import_react5 = __toESM(require_emotion_react_cjs(), 1);
  var import_react6 = __toESM(require_react(), 1);
  function useTheme() {
    const theme2 = (0, import_react6.useContext)(
      import_react5.ThemeContext
    );
    if (!theme2) {
      throw Error(
        "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
      );
    }
    return theme2;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/color-mode/dist/chunk-7NLW6UB6.mjs
  var import_react7 = __toESM(require_react(), 1);
  var ColorModeContext = (0, import_react7.createContext)({});
  ColorModeContext.displayName = "ColorModeContext";
  function useColorMode() {
    const context = (0, import_react7.useContext)(ColorModeContext);
    if (context === void 0) {
      throw new Error("useColorMode must be used within a ColorModeProvider");
    }
    return context;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/color-mode/dist/chunk-QTTMAIIW.mjs
  var classNames = {
    light: "chakra-ui-light",
    dark: "chakra-ui-dark"
  };
  function getColorModeUtils(options = {}) {
    const { preventTransition = true } = options;
    const utils = {
      setDataset: (value) => {
        const cleanup = preventTransition ? utils.preventTransition() : void 0;
        document.documentElement.dataset.theme = value;
        document.documentElement.style.colorScheme = value;
        cleanup == null ? void 0 : cleanup();
      },
      setClassName(dark) {
        document.body.classList.add(dark ? classNames.dark : classNames.light);
        document.body.classList.remove(dark ? classNames.light : classNames.dark);
      },
      query() {
        return window.matchMedia("(prefers-color-scheme: dark)");
      },
      getSystemTheme(fallback) {
        var _a7;
        const dark = (_a7 = utils.query().matches) != null ? _a7 : fallback === "dark";
        return dark ? "dark" : "light";
      },
      addListener(fn) {
        const mql = utils.query();
        const listener = (e) => {
          fn(e.matches ? "dark" : "light");
        };
        if (typeof mql.addListener === "function")
          mql.addListener(listener);
        else
          mql.addEventListener("change", listener);
        return () => {
          if (typeof mql.removeListener === "function")
            mql.removeListener(listener);
          else
            mql.removeEventListener("change", listener);
        };
      },
      preventTransition() {
        const css3 = document.createElement("style");
        css3.appendChild(
          document.createTextNode(
            `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
          )
        );
        document.head.appendChild(css3);
        return () => {
          ;
          (() => window.getComputedStyle(document.body))();
          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              document.head.removeChild(css3);
            });
          });
        };
      }
    };
    return utils;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/color-mode/dist/chunk-BWTZURQV.mjs
  var STORAGE_KEY = "chakra-ui-color-mode";
  function createLocalStorageManager(key) {
    return {
      ssr: false,
      type: "localStorage",
      get(init) {
        if (!(globalThis == null ? void 0 : globalThis.document))
          return init;
        let value;
        try {
          value = localStorage.getItem(key) || init;
        } catch (e) {
        }
        return value || init;
      },
      set(value) {
        try {
          localStorage.setItem(key, value);
        } catch (e) {
        }
      }
    };
  }
  var localStorageManager = createLocalStorageManager(STORAGE_KEY);
  function parseCookie(cookie, key) {
    const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));
    return match == null ? void 0 : match[2];
  }
  function createCookieStorageManager(key, cookie) {
    return {
      ssr: !!cookie,
      type: "cookie",
      get(init) {
        if (cookie)
          return parseCookie(cookie, key);
        if (!(globalThis == null ? void 0 : globalThis.document))
          return init;
        return parseCookie(document.cookie, key) || init;
      },
      set(value) {
        document.cookie = `${key}=${value}; max-age=31536000; path=/`;
      }
    };
  }
  var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);

  // ../ecopan_bot/node_modules/@chakra-ui/color-mode/dist/chunk-4DEUOPYU.mjs
  var import_react8 = __toESM(require_react(), 1);
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  var noop = () => {
  };
  function getTheme(manager, fallback) {
    return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
  }
  function ColorModeProvider(props) {
    const {
      value,
      children,
      options: {
        useSystemColorMode,
        initialColorMode,
        disableTransitionOnChange
      } = {},
      colorModeManager = localStorageManager
    } = props;
    const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
    const [colorMode, rawSetColorMode] = (0, import_react8.useState)(
      () => getTheme(colorModeManager, defaultColorMode)
    );
    const [resolvedColorMode, setResolvedColorMode] = (0, import_react8.useState)(
      () => getTheme(colorModeManager)
    );
    const { getSystemTheme, setClassName, setDataset, addListener } = (0, import_react8.useMemo)(
      () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),
      [disableTransitionOnChange]
    );
    const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
    const setColorMode = (0, import_react8.useCallback)(
      (value2) => {
        const resolved = value2 === "system" ? getSystemTheme() : value2;
        rawSetColorMode(resolved);
        setClassName(resolved === "dark");
        setDataset(resolved);
        colorModeManager.set(resolved);
      },
      [colorModeManager, getSystemTheme, setClassName, setDataset]
    );
    useSafeLayoutEffect(() => {
      if (initialColorMode === "system") {
        setResolvedColorMode(getSystemTheme());
      }
    }, []);
    (0, import_react8.useEffect)(() => {
      const managerValue = colorModeManager.get();
      if (managerValue) {
        setColorMode(managerValue);
        return;
      }
      if (initialColorMode === "system") {
        setColorMode("system");
        return;
      }
      setColorMode(defaultColorMode);
    }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
    const toggleColorMode = (0, import_react8.useCallback)(() => {
      setColorMode(resolvedValue === "dark" ? "light" : "dark");
    }, [resolvedValue, setColorMode]);
    (0, import_react8.useEffect)(() => {
      if (!useSystemColorMode)
        return;
      return addListener(setColorMode);
    }, [useSystemColorMode, addListener, setColorMode]);
    const context = (0, import_react8.useMemo)(
      () => ({
        colorMode: value != null ? value : resolvedValue,
        toggleColorMode: value ? noop : toggleColorMode,
        setColorMode: value ? noop : setColorMode,
        forced: value !== void 0
      }),
      [resolvedValue, toggleColorMode, setColorMode, value]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, { value: context, children });
  }
  ColorModeProvider.displayName = "ColorModeProvider";
  function DarkMode(props) {
    const context = (0, import_react8.useMemo)(
      () => ({
        colorMode: "dark",
        toggleColorMode: noop,
        setColorMode: noop,
        forced: true
      }),
      []
    );
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, __spreadValues({ value: context }, props));
  }
  DarkMode.displayName = "DarkMode";
  function LightMode(props) {
    const context = (0, import_react8.useMemo)(
      () => ({
        colorMode: "light",
        toggleColorMode: noop,
        setColorMode: noop,
        forced: true
      }),
      []
    );
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ColorModeContext.Provider, __spreadValues({ value: context }, props));
  }
  LightMode.displayName = "LightMode";

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-7V3ZYTH7.mjs
  function useChakra() {
    const colorModeResult = useColorMode();
    const theme2 = useTheme();
    return __spreadProps(__spreadValues({}, colorModeResult), { theme: theme2 });
  }
  function getBreakpointValue(theme2, value, fallback) {
    var _a7, _b5;
    if (value == null)
      return value;
    const getValue = (val) => {
      var _a24, _b22;
      return (_b22 = (_a24 = theme2.__breakpoints) == null ? void 0 : _a24.asArray) == null ? void 0 : _b22[val];
    };
    return (_b5 = (_a7 = getValue(value)) != null ? _a7 : getValue(fallback)) != null ? _b5 : fallback;
  }
  function getTokenValue(theme2, value, fallback) {
    var _a7, _b5;
    if (value == null)
      return value;
    const getValue = (val) => {
      var _a24, _b22;
      return (_b22 = (_a24 = theme2.__cssMap) == null ? void 0 : _a24[val]) == null ? void 0 : _b22.value;
    };
    return (_b5 = (_a7 = getValue(value)) != null ? _a7 : getValue(fallback)) != null ? _b5 : fallback;
  }
  function useToken(scale2, token, fallback) {
    const theme2 = useTheme();
    return getToken(scale2, token, fallback)(theme2);
  }
  function getToken(scale2, token, fallback) {
    const _token = Array.isArray(token) ? token : [token];
    const _fallback = Array.isArray(fallback) ? fallback : [fallback];
    return (theme2) => {
      const fallbackArr = _fallback.filter(Boolean);
      const result = _token.map((token2, index2) => {
        var _a7, _b5;
        if (scale2 === "breakpoints") {
          return getBreakpointValue(theme2, token2, (_a7 = fallbackArr[index2]) != null ? _a7 : token2);
        }
        const path3 = `${scale2}.${token2}`;
        return getTokenValue(theme2, path3, (_b5 = fallbackArr[index2]) != null ? _b5 : token2);
      });
      return Array.isArray(token) ? result : result[0];
    };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/shared-utils/dist/index.mjs
  var cx = (...classNames2) => classNames2.filter(Boolean).join(" ");
  function isObject(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function") && !Array.isArray(value);
  }
  function runIfFn(valueOrFn, ...args) {
    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }
  var isFunction = (value) => typeof value === "function";
  var dataAttr = (condition) => condition ? "" : void 0;
  var ariaAttr = (condition) => condition ? true : void 0;
  function callAllHandlers(...fns) {
    return function func(event) {
      fns.some((fn) => {
        fn == null ? void 0 : fn(event);
        return event == null ? void 0 : event.defaultPrevented;
      });
    };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/styled-system/dist/index.mjs
  var import_lodash = __toESM(require_lodash(), 1);
  var import_lodash2 = __toESM(require_lodash(), 1);
  var import_lodash3 = __toESM(require_lodash(), 1);
  var import_lodash4 = __toESM(require_lodash(), 1);
  var isImportant = (value) => /!(important)?$/.test(value);
  var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
  var tokenToCSSVar = (scale2, value) => (theme2) => {
    const valueStr = String(value);
    const important = isImportant(valueStr);
    const valueWithoutImportant = withoutImportant(valueStr);
    const key = scale2 ? `${scale2}.${valueWithoutImportant}` : valueWithoutImportant;
    let transformed = isObject(theme2.__cssMap) && key in theme2.__cssMap ? theme2.__cssMap[key].varRef : value;
    transformed = withoutImportant(transformed);
    return important ? `${transformed} !important` : transformed;
  };
  function createTransform(options) {
    const { scale: scale2, transform: transform2, compose: compose2 } = options;
    const fn = (value, theme2) => {
      var _a7;
      const _value = tokenToCSSVar(scale2, value)(theme2);
      let result = (_a7 = transform2 == null ? void 0 : transform2(_value, theme2)) != null ? _a7 : _value;
      if (compose2) {
        result = compose2(result, theme2);
      }
      return result;
    };
    return fn;
  }
  var pipe = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
  function toConfig(scale2, transform2) {
    return (property) => {
      const result = { property, scale: scale2 };
      result.transform = createTransform({
        scale: scale2,
        transform: transform2
      });
      return result;
    };
  }
  var getRtl = ({ rtl, ltr }) => (theme2) => theme2.direction === "rtl" ? rtl : ltr;
  function logical(options) {
    const { property, scale: scale2, transform: transform2 } = options;
    return {
      scale: scale2,
      property: getRtl(property),
      transform: scale2 ? createTransform({
        scale: scale2,
        compose: transform2
      }) : transform2
    };
  }
  var transformTemplate = [
    "rotate(var(--chakra-rotate, 0))",
    "scaleX(var(--chakra-scale-x, 1))",
    "scaleY(var(--chakra-scale-y, 1))",
    "skewX(var(--chakra-skew-x, 0))",
    "skewY(var(--chakra-skew-y, 0))"
  ];
  function getTransformTemplate() {
    return [
      "translateX(var(--chakra-translate-x, 0))",
      "translateY(var(--chakra-translate-y, 0))",
      ...transformTemplate
    ].join(" ");
  }
  function getTransformGpuTemplate() {
    return [
      "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
      ...transformTemplate
    ].join(" ");
  }
  var filterTemplate = {
    "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
    filter: [
      "var(--chakra-blur)",
      "var(--chakra-brightness)",
      "var(--chakra-contrast)",
      "var(--chakra-grayscale)",
      "var(--chakra-hue-rotate)",
      "var(--chakra-invert)",
      "var(--chakra-saturate)",
      "var(--chakra-sepia)",
      "var(--chakra-drop-shadow)"
    ].join(" ")
  };
  var backdropFilterTemplate = {
    backdropFilter: [
      "var(--chakra-backdrop-blur)",
      "var(--chakra-backdrop-brightness)",
      "var(--chakra-backdrop-contrast)",
      "var(--chakra-backdrop-grayscale)",
      "var(--chakra-backdrop-hue-rotate)",
      "var(--chakra-backdrop-invert)",
      "var(--chakra-backdrop-opacity)",
      "var(--chakra-backdrop-saturate)",
      "var(--chakra-backdrop-sepia)"
    ].join(" "),
    "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
  };
  function getRingTemplate(value) {
    return {
      "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
      "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
      "--chakra-ring-width": value,
      boxShadow: [
        `var(--chakra-ring-offset-shadow)`,
        `var(--chakra-ring-shadow)`,
        `var(--chakra-shadow, 0 0 #0000)`
      ].join(", ")
    };
  }
  var flexDirectionTemplate = {
    "row-reverse": {
      space: "--chakra-space-x-reverse",
      divide: "--chakra-divide-x-reverse"
    },
    "column-reverse": {
      space: "--chakra-space-y-reverse",
      divide: "--chakra-divide-y-reverse"
    }
  };
  var directionMap = {
    "to-t": "to top",
    "to-tr": "to top right",
    "to-r": "to right",
    "to-br": "to bottom right",
    "to-b": "to bottom",
    "to-bl": "to bottom left",
    "to-l": "to left",
    "to-tl": "to top left"
  };
  var valueSet = new Set(Object.values(directionMap));
  var globalSet = /* @__PURE__ */ new Set([
    "none",
    "-moz-initial",
    "inherit",
    "initial",
    "revert",
    "unset"
  ]);
  var trimSpace = (str) => str.trim();
  function parseGradient(value, theme2) {
    if (value == null || globalSet.has(value))
      return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    if (!prevent)
      return `url('${value}')`;
    const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
    const results2 = regex.exec(value);
    const type = results2 == null ? void 0 : results2[1];
    const values = results2 == null ? void 0 : results2[2];
    if (!type || !values)
      return value;
    const _type = type.includes("-gradient") ? type : `${type}-gradient`;
    const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
    if ((stops == null ? void 0 : stops.length) === 0)
      return value;
    const direction2 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
    stops.unshift(direction2);
    const _values = stops.map((stop) => {
      if (valueSet.has(stop))
        return stop;
      const firstStop = stop.indexOf(" ");
      const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
      const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
      const key = `colors.${_color}`;
      const color22 = key in theme2.__cssMap ? theme2.__cssMap[key].varRef : _color;
      return _stopOrFunc ? [
        color22,
        ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
      ].join(" ") : color22;
    });
    return `${_type}(${_values.join(", ")})`;
  }
  var isCSSFunction = (value) => {
    return typeof value === "string" && value.includes("(") && value.includes(")");
  };
  var gradientTransform = (value, theme2) => parseGradient(value, theme2 != null ? theme2 : {});
  function isCssVar(value) {
    return /^var\(--.+\)$/.test(value);
  }
  var analyzeCSSValue = (value) => {
    const num = parseFloat(value.toString());
    const unit = value.toString().replace(String(num), "");
    return { unitless: !unit, value: num, unit };
  };
  var wrap = (str) => (value) => `${str}(${value})`;
  var transformFunctions = {
    filter(value) {
      return value !== "auto" ? value : filterTemplate;
    },
    backdropFilter(value) {
      return value !== "auto" ? value : backdropFilterTemplate;
    },
    ring(value) {
      return getRingTemplate(transformFunctions.px(value));
    },
    bgClip(value) {
      return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
    },
    transform(value) {
      if (value === "auto")
        return getTransformTemplate();
      if (value === "auto-gpu")
        return getTransformGpuTemplate();
      return value;
    },
    vh(value) {
      return value === "$100vh" ? "var(--chakra-vh)" : value;
    },
    px(value) {
      if (value == null)
        return value;
      const { unitless } = analyzeCSSValue(value);
      return unitless || typeof value === "number" ? `${value}px` : value;
    },
    fraction(value) {
      return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
    },
    float(value, theme2) {
      const map2 = { left: "right", right: "left" };
      return theme2.direction === "rtl" ? map2[value] : value;
    },
    degree(value) {
      if (isCssVar(value) || value == null)
        return value;
      const unitless = typeof value === "string" && !value.endsWith("deg");
      return typeof value === "number" || unitless ? `${value}deg` : value;
    },
    gradient: gradientTransform,
    blur: wrap("blur"),
    opacity: wrap("opacity"),
    brightness: wrap("brightness"),
    contrast: wrap("contrast"),
    dropShadow: wrap("drop-shadow"),
    grayscale: wrap("grayscale"),
    hueRotate: wrap("hue-rotate"),
    invert: wrap("invert"),
    saturate: wrap("saturate"),
    sepia: wrap("sepia"),
    bgImage(value) {
      if (value == null)
        return value;
      const prevent = isCSSFunction(value) || globalSet.has(value);
      return !prevent ? `url(${value})` : value;
    },
    outline(value) {
      const isNoneOrZero = String(value) === "0" || String(value) === "none";
      return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
    },
    flexDirection(value) {
      var _a7;
      const { space: space22, divide: divide22 } = (_a7 = flexDirectionTemplate[value]) != null ? _a7 : {};
      const result = { flexDirection: value };
      if (space22)
        result[space22] = 1;
      if (divide22)
        result[divide22] = 1;
      return result;
    }
  };
  var t = {
    borderWidths: toConfig("borderWidths"),
    borderStyles: toConfig("borderStyles"),
    colors: toConfig("colors"),
    borders: toConfig("borders"),
    gradients: toConfig("gradients", transformFunctions.gradient),
    radii: toConfig("radii", transformFunctions.px),
    space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
    spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
    degreeT(property) {
      return { property, transform: transformFunctions.degree };
    },
    prop(property, scale2, transform2) {
      return __spreadValues({
        property,
        scale: scale2
      }, scale2 && {
        transform: createTransform({ scale: scale2, transform: transform2 })
      });
    },
    propT(property, transform2) {
      return { property, transform: transform2 };
    },
    sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
    sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
    shadows: toConfig("shadows"),
    logical,
    blur: toConfig("blur", transformFunctions.blur)
  };
  var background = {
    background: t.colors("background"),
    backgroundColor: t.colors("backgroundColor"),
    backgroundImage: t.gradients("backgroundImage"),
    backgroundSize: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundAttachment: true,
    backgroundClip: { transform: transformFunctions.bgClip },
    bgSize: t.prop("backgroundSize"),
    bgPosition: t.prop("backgroundPosition"),
    bg: t.colors("background"),
    bgColor: t.colors("backgroundColor"),
    bgPos: t.prop("backgroundPosition"),
    bgRepeat: t.prop("backgroundRepeat"),
    bgAttachment: t.prop("backgroundAttachment"),
    bgGradient: t.gradients("backgroundImage"),
    bgClip: { transform: transformFunctions.bgClip }
  };
  Object.assign(background, {
    bgImage: background.backgroundImage,
    bgImg: background.backgroundImage
  });
  var border = {
    border: t.borders("border"),
    borderWidth: t.borderWidths("borderWidth"),
    borderStyle: t.borderStyles("borderStyle"),
    borderColor: t.colors("borderColor"),
    borderRadius: t.radii("borderRadius"),
    borderTop: t.borders("borderTop"),
    borderBlockStart: t.borders("borderBlockStart"),
    borderTopLeftRadius: t.radii("borderTopLeftRadius"),
    borderStartStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderTopLeftRadius",
        rtl: "borderTopRightRadius"
      }
    }),
    borderEndStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderBottomLeftRadius",
        rtl: "borderBottomRightRadius"
      }
    }),
    borderTopRightRadius: t.radii("borderTopRightRadius"),
    borderStartEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderTopRightRadius",
        rtl: "borderTopLeftRadius"
      }
    }),
    borderEndEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: "borderBottomRightRadius",
        rtl: "borderBottomLeftRadius"
      }
    }),
    borderRight: t.borders("borderRight"),
    borderInlineEnd: t.borders("borderInlineEnd"),
    borderBottom: t.borders("borderBottom"),
    borderBlockEnd: t.borders("borderBlockEnd"),
    borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
    borderBottomRightRadius: t.radii("borderBottomRightRadius"),
    borderLeft: t.borders("borderLeft"),
    borderInlineStart: {
      property: "borderInlineStart",
      scale: "borders"
    },
    borderInlineStartRadius: t.logical({
      scale: "radii",
      property: {
        ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
        rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
      }
    }),
    borderInlineEndRadius: t.logical({
      scale: "radii",
      property: {
        ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
        rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
      }
    }),
    borderX: t.borders(["borderLeft", "borderRight"]),
    borderInline: t.borders("borderInline"),
    borderY: t.borders(["borderTop", "borderBottom"]),
    borderBlock: t.borders("borderBlock"),
    borderTopWidth: t.borderWidths("borderTopWidth"),
    borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
    borderTopColor: t.colors("borderTopColor"),
    borderBlockStartColor: t.colors("borderBlockStartColor"),
    borderTopStyle: t.borderStyles("borderTopStyle"),
    borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
    borderBottomWidth: t.borderWidths("borderBottomWidth"),
    borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
    borderBottomColor: t.colors("borderBottomColor"),
    borderBlockEndColor: t.colors("borderBlockEndColor"),
    borderBottomStyle: t.borderStyles("borderBottomStyle"),
    borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
    borderLeftWidth: t.borderWidths("borderLeftWidth"),
    borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
    borderLeftColor: t.colors("borderLeftColor"),
    borderInlineStartColor: t.colors("borderInlineStartColor"),
    borderLeftStyle: t.borderStyles("borderLeftStyle"),
    borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
    borderRightWidth: t.borderWidths("borderRightWidth"),
    borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
    borderRightColor: t.colors("borderRightColor"),
    borderInlineEndColor: t.colors("borderInlineEndColor"),
    borderRightStyle: t.borderStyles("borderRightStyle"),
    borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
    borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
    borderBottomRadius: t.radii([
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ]),
    borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
    borderRightRadius: t.radii([
      "borderTopRightRadius",
      "borderBottomRightRadius"
    ])
  };
  Object.assign(border, {
    rounded: border.borderRadius,
    roundedTop: border.borderTopRadius,
    roundedTopLeft: border.borderTopLeftRadius,
    roundedTopRight: border.borderTopRightRadius,
    roundedTopStart: border.borderStartStartRadius,
    roundedTopEnd: border.borderStartEndRadius,
    roundedBottom: border.borderBottomRadius,
    roundedBottomLeft: border.borderBottomLeftRadius,
    roundedBottomRight: border.borderBottomRightRadius,
    roundedBottomStart: border.borderEndStartRadius,
    roundedBottomEnd: border.borderEndEndRadius,
    roundedLeft: border.borderLeftRadius,
    roundedRight: border.borderRightRadius,
    roundedStart: border.borderInlineStartRadius,
    roundedEnd: border.borderInlineEndRadius,
    borderStart: border.borderInlineStart,
    borderEnd: border.borderInlineEnd,
    borderTopStartRadius: border.borderStartStartRadius,
    borderTopEndRadius: border.borderStartEndRadius,
    borderBottomStartRadius: border.borderEndStartRadius,
    borderBottomEndRadius: border.borderEndEndRadius,
    borderStartRadius: border.borderInlineStartRadius,
    borderEndRadius: border.borderInlineEndRadius,
    borderStartWidth: border.borderInlineStartWidth,
    borderEndWidth: border.borderInlineEndWidth,
    borderStartColor: border.borderInlineStartColor,
    borderEndColor: border.borderInlineEndColor,
    borderStartStyle: border.borderInlineStartStyle,
    borderEndStyle: border.borderInlineEndStyle
  });
  var color = {
    color: t.colors("color"),
    textColor: t.colors("color"),
    fill: t.colors("fill"),
    stroke: t.colors("stroke")
  };
  var effect = {
    boxShadow: t.shadows("boxShadow"),
    mixBlendMode: true,
    blendMode: t.prop("mixBlendMode"),
    backgroundBlendMode: true,
    bgBlendMode: t.prop("backgroundBlendMode"),
    opacity: true
  };
  Object.assign(effect, {
    shadow: effect.boxShadow
  });
  var filter = {
    filter: { transform: transformFunctions.filter },
    blur: t.blur("--chakra-blur"),
    brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
    contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
    hueRotate: t.degreeT("--chakra-hue-rotate"),
    invert: t.propT("--chakra-invert", transformFunctions.invert),
    saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
    dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
    backdropFilter: { transform: transformFunctions.backdropFilter },
    backdropBlur: t.blur("--chakra-backdrop-blur"),
    backdropBrightness: t.propT(
      "--chakra-backdrop-brightness",
      transformFunctions.brightness
    ),
    backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
    backdropHueRotate: t.degreeT("--chakra-backdrop-hue-rotate"),
    backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
    backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
  };
  var flexbox = {
    alignItems: true,
    alignContent: true,
    justifyItems: true,
    justifyContent: true,
    flexWrap: true,
    flexDirection: { transform: transformFunctions.flexDirection },
    flex: true,
    flexFlow: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: t.sizes("flexBasis"),
    justifySelf: true,
    alignSelf: true,
    order: true,
    placeItems: true,
    placeContent: true,
    placeSelf: true,
    gap: t.space("gap"),
    rowGap: t.space("rowGap"),
    columnGap: t.space("columnGap")
  };
  Object.assign(flexbox, {
    flexDir: flexbox.flexDirection
  });
  var grid = {
    gridGap: t.space("gridGap"),
    gridColumnGap: t.space("gridColumnGap"),
    gridRowGap: t.space("gridRowGap"),
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    gridRowStart: true,
    gridRowEnd: true,
    gridAutoRows: true,
    gridTemplate: true,
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridTemplateAreas: true,
    gridArea: true
  };
  var interactivity = {
    appearance: true,
    cursor: true,
    resize: true,
    userSelect: true,
    pointerEvents: true,
    outline: { transform: transformFunctions.outline },
    outlineOffset: true,
    outlineColor: t.colors("outlineColor")
  };
  var layout = {
    width: t.sizesT("width"),
    inlineSize: t.sizesT("inlineSize"),
    height: t.sizes("height"),
    blockSize: t.sizes("blockSize"),
    boxSize: t.sizes(["width", "height"]),
    minWidth: t.sizes("minWidth"),
    minInlineSize: t.sizes("minInlineSize"),
    minHeight: t.sizes("minHeight"),
    minBlockSize: t.sizes("minBlockSize"),
    maxWidth: t.sizes("maxWidth"),
    maxInlineSize: t.sizes("maxInlineSize"),
    maxHeight: t.sizes("maxHeight"),
    maxBlockSize: t.sizes("maxBlockSize"),
    overflow: true,
    overflowX: true,
    overflowY: true,
    overscrollBehavior: true,
    overscrollBehaviorX: true,
    overscrollBehaviorY: true,
    display: true,
    hideFrom: {
      scale: "breakpoints",
      transform: (value, theme2) => {
        var _a7, _b5, _c3;
        const breakpoint = (_c3 = (_b5 = (_a7 = theme2.__breakpoints) == null ? void 0 : _a7.get(value)) == null ? void 0 : _b5.minW) != null ? _c3 : value;
        const mq = `@media screen and (min-width: ${breakpoint})`;
        return { [mq]: { display: "none" } };
      }
    },
    hideBelow: {
      scale: "breakpoints",
      transform: (value, theme2) => {
        var _a7, _b5, _c3;
        const breakpoint = (_c3 = (_b5 = (_a7 = theme2.__breakpoints) == null ? void 0 : _a7.get(value)) == null ? void 0 : _b5._minW) != null ? _c3 : value;
        const mq = `@media screen and (max-width: ${breakpoint})`;
        return { [mq]: { display: "none" } };
      }
    },
    verticalAlign: true,
    boxSizing: true,
    boxDecorationBreak: true,
    float: t.propT("float", transformFunctions.float),
    objectFit: true,
    objectPosition: true,
    visibility: true,
    isolation: true
  };
  Object.assign(layout, {
    w: layout.width,
    h: layout.height,
    minW: layout.minWidth,
    maxW: layout.maxWidth,
    minH: layout.minHeight,
    maxH: layout.maxHeight,
    overscroll: layout.overscrollBehavior,
    overscrollX: layout.overscrollBehaviorX,
    overscrollY: layout.overscrollBehaviorY
  });
  var list = {
    listStyleType: true,
    listStylePosition: true,
    listStylePos: t.prop("listStylePosition"),
    listStyleImage: true,
    listStyleImg: t.prop("listStyleImage")
  };
  function get(obj, path3, fallback, index2) {
    const key = typeof path3 === "string" ? path3.split(".") : [path3];
    for (index2 = 0; index2 < key.length; index2 += 1) {
      if (!obj)
        break;
      obj = obj[key[index2]];
    }
    return obj === void 0 ? fallback : obj;
  }
  var memoize = (fn) => {
    const cache = /* @__PURE__ */ new WeakMap();
    const memoizedFn = (obj, path3, fallback, index2) => {
      if (typeof obj === "undefined") {
        return fn(obj, path3, fallback);
      }
      if (!cache.has(obj)) {
        cache.set(obj, /* @__PURE__ */ new Map());
      }
      const map2 = cache.get(obj);
      if (map2.has(path3)) {
        return map2.get(path3);
      }
      const value = fn(obj, path3, fallback, index2);
      map2.set(path3, value);
      return value;
    };
    return memoizedFn;
  };
  var memoizedGet = memoize(get);
  var srOnly = {
    border: "0px",
    clip: "rect(0, 0, 0, 0)",
    width: "1px",
    height: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
  };
  var srFocusable = {
    position: "static",
    width: "auto",
    height: "auto",
    clip: "auto",
    padding: "0",
    margin: "0",
    overflow: "visible",
    whiteSpace: "normal"
  };
  var getWithPriority = (theme2, key, styles2) => {
    const result = {};
    const obj = memoizedGet(theme2, key, {});
    for (const prop in obj) {
      const isInStyles = prop in styles2 && styles2[prop] != null;
      if (!isInStyles)
        result[prop] = obj[prop];
    }
    return result;
  };
  var others = {
    srOnly: {
      transform(value) {
        if (value === true)
          return srOnly;
        if (value === "focusable")
          return srFocusable;
        return {};
      }
    },
    layerStyle: {
      processResult: true,
      transform: (value, theme2, styles2) => getWithPriority(theme2, `layerStyles.${value}`, styles2)
    },
    textStyle: {
      processResult: true,
      transform: (value, theme2, styles2) => getWithPriority(theme2, `textStyles.${value}`, styles2)
    },
    apply: {
      processResult: true,
      transform: (value, theme2, styles2) => getWithPriority(theme2, value, styles2)
    }
  };
  var position = {
    position: true,
    pos: t.prop("position"),
    zIndex: t.prop("zIndex", "zIndices"),
    inset: t.spaceT("inset"),
    insetX: t.spaceT(["left", "right"]),
    insetInline: t.spaceT("insetInline"),
    insetY: t.spaceT(["top", "bottom"]),
    insetBlock: t.spaceT("insetBlock"),
    top: t.spaceT("top"),
    insetBlockStart: t.spaceT("insetBlockStart"),
    bottom: t.spaceT("bottom"),
    insetBlockEnd: t.spaceT("insetBlockEnd"),
    left: t.spaceT("left"),
    insetInlineStart: t.logical({
      scale: "space",
      property: { ltr: "left", rtl: "right" }
    }),
    right: t.spaceT("right"),
    insetInlineEnd: t.logical({
      scale: "space",
      property: { ltr: "right", rtl: "left" }
    })
  };
  Object.assign(position, {
    insetStart: position.insetInlineStart,
    insetEnd: position.insetInlineEnd
  });
  var ring = {
    ring: { transform: transformFunctions.ring },
    ringColor: t.colors("--chakra-ring-color"),
    ringOffset: t.prop("--chakra-ring-offset-width"),
    ringOffsetColor: t.colors("--chakra-ring-offset-color"),
    ringInset: t.prop("--chakra-ring-inset")
  };
  var space = {
    margin: t.spaceT("margin"),
    marginTop: t.spaceT("marginTop"),
    marginBlockStart: t.spaceT("marginBlockStart"),
    marginRight: t.spaceT("marginRight"),
    marginInlineEnd: t.spaceT("marginInlineEnd"),
    marginBottom: t.spaceT("marginBottom"),
    marginBlockEnd: t.spaceT("marginBlockEnd"),
    marginLeft: t.spaceT("marginLeft"),
    marginInlineStart: t.spaceT("marginInlineStart"),
    marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
    marginInline: t.spaceT("marginInline"),
    marginY: t.spaceT(["marginTop", "marginBottom"]),
    marginBlock: t.spaceT("marginBlock"),
    padding: t.space("padding"),
    paddingTop: t.space("paddingTop"),
    paddingBlockStart: t.space("paddingBlockStart"),
    paddingRight: t.space("paddingRight"),
    paddingBottom: t.space("paddingBottom"),
    paddingBlockEnd: t.space("paddingBlockEnd"),
    paddingLeft: t.space("paddingLeft"),
    paddingInlineStart: t.space("paddingInlineStart"),
    paddingInlineEnd: t.space("paddingInlineEnd"),
    paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
    paddingInline: t.space("paddingInline"),
    paddingY: t.space(["paddingTop", "paddingBottom"]),
    paddingBlock: t.space("paddingBlock")
  };
  Object.assign(space, {
    m: space.margin,
    mt: space.marginTop,
    mr: space.marginRight,
    me: space.marginInlineEnd,
    marginEnd: space.marginInlineEnd,
    mb: space.marginBottom,
    ml: space.marginLeft,
    ms: space.marginInlineStart,
    marginStart: space.marginInlineStart,
    mx: space.marginX,
    my: space.marginY,
    p: space.padding,
    pt: space.paddingTop,
    py: space.paddingY,
    px: space.paddingX,
    pb: space.paddingBottom,
    pl: space.paddingLeft,
    ps: space.paddingInlineStart,
    paddingStart: space.paddingInlineStart,
    pr: space.paddingRight,
    pe: space.paddingInlineEnd,
    paddingEnd: space.paddingInlineEnd
  });
  var textDecoration = {
    textDecorationColor: t.colors("textDecorationColor"),
    textDecoration: true,
    textDecor: { property: "textDecoration" },
    textDecorationLine: true,
    textDecorationStyle: true,
    textDecorationThickness: true,
    textUnderlineOffset: true,
    textShadow: t.shadows("textShadow")
  };
  var transform = {
    clipPath: true,
    transform: t.propT("transform", transformFunctions.transform),
    transformOrigin: true,
    translateX: t.spaceT("--chakra-translate-x"),
    translateY: t.spaceT("--chakra-translate-y"),
    skewX: t.degreeT("--chakra-skew-x"),
    skewY: t.degreeT("--chakra-skew-y"),
    scaleX: t.prop("--chakra-scale-x"),
    scaleY: t.prop("--chakra-scale-y"),
    scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
    rotate: t.degreeT("--chakra-rotate")
  };
  var transition = {
    transition: true,
    transitionDelay: true,
    animation: true,
    willChange: true,
    transitionDuration: t.prop("transitionDuration", "transition.duration"),
    transitionProperty: t.prop("transitionProperty", "transition.property"),
    transitionTimingFunction: t.prop(
      "transitionTimingFunction",
      "transition.easing"
    )
  };
  var typography = {
    fontFamily: t.prop("fontFamily", "fonts"),
    fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
    fontWeight: t.prop("fontWeight", "fontWeights"),
    lineHeight: t.prop("lineHeight", "lineHeights"),
    letterSpacing: t.prop("letterSpacing", "letterSpacings"),
    textAlign: true,
    fontStyle: true,
    textIndent: true,
    wordBreak: true,
    overflowWrap: true,
    textOverflow: true,
    textTransform: true,
    whiteSpace: true,
    isTruncated: {
      transform(value) {
        if (value === true) {
          return {
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap"
          };
        }
      }
    },
    noOfLines: {
      static: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        display: "-webkit-box",
        WebkitBoxOrient: "vertical",
        WebkitLineClamp: "var(--chakra-line-clamp)"
      },
      property: "--chakra-line-clamp"
    }
  };
  var scroll = {
    scrollBehavior: true,
    scrollSnapAlign: true,
    scrollSnapStop: true,
    scrollSnapType: true,
    scrollMargin: t.spaceT("scrollMargin"),
    scrollMarginTop: t.spaceT("scrollMarginTop"),
    scrollMarginBottom: t.spaceT("scrollMarginBottom"),
    scrollMarginLeft: t.spaceT("scrollMarginLeft"),
    scrollMarginRight: t.spaceT("scrollMarginRight"),
    scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
    scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
    scrollPadding: t.spaceT("scrollPadding"),
    scrollPaddingTop: t.spaceT("scrollPaddingTop"),
    scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
    scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
    scrollPaddingRight: t.spaceT("scrollPaddingRight"),
    scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
    scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
  };
  function resolveReference(operand) {
    if (isObject(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
  var add = (...operands) => `calc(${toExpression("+", ...operands)})`;
  var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
  var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
  var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
  var negate = (x) => {
    const value = resolveReference(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    }
    return multiply(value, -1);
  };
  var calc = Object.assign(
    (x) => ({
      add: (...operands) => calc(add(x, ...operands)),
      subtract: (...operands) => calc(subtract(x, ...operands)),
      multiply: (...operands) => calc(multiply(x, ...operands)),
      divide: (...operands) => calc(divide(x, ...operands)),
      negate: () => calc(negate(x)),
      toString: () => x.toString()
    }),
    {
      add,
      subtract,
      multiply,
      divide,
      negate
    }
  );
  function replaceWhiteSpace(value, replaceValue = "-") {
    return value.replace(/\s+/g, replaceValue);
  }
  function escape(value) {
    const valueStr = replaceWhiteSpace(value.toString());
    return escapeSymbol(escapeDot(valueStr));
  }
  function escapeDot(value) {
    if (value.includes("\\."))
      return value;
    const isDecimal2 = !Number.isInteger(parseFloat(value.toString()));
    return isDecimal2 ? value.replace(".", `\\.`) : value;
  }
  function escapeSymbol(value) {
    return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
  }
  function addPrefix(value, prefix = "") {
    return [prefix, value].filter(Boolean).join("-");
  }
  function toVarReference(name, fallback) {
    return `var(${name}${fallback ? `, ${fallback}` : ""})`;
  }
  function toVarDefinition(value, prefix = "") {
    return escape(`--${addPrefix(value, prefix)}`);
  }
  function cssVar(name, fallback, cssVarPrefix) {
    const cssVariable = toVarDefinition(name, cssVarPrefix);
    return {
      variable: cssVariable,
      reference: toVarReference(cssVariable, fallback)
    };
  }
  function defineCssVars(scope, keys22) {
    const vars2 = {};
    for (const key of keys22) {
      if (Array.isArray(key)) {
        const [name, fallback] = key;
        vars2[name] = cssVar(`${scope}-${name}`, fallback);
        continue;
      }
      vars2[key] = cssVar(`${scope}-${key}`);
    }
    return vars2;
  }
  function getLastItem(array) {
    const length = array == null ? 0 : array.length;
    return length ? array[length - 1] : void 0;
  }
  function analyzeCSSValue2(value) {
    const num = parseFloat(value.toString());
    const unit = value.toString().replace(String(num), "");
    return { unitless: !unit, value: num, unit };
  }
  function px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue2(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  }
  var sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;
  var sortBps = (breakpoints3) => Object.fromEntries(Object.entries(breakpoints3).sort(sortByBreakpointValue));
  function normalize(breakpoints3) {
    const sorted = sortBps(breakpoints3);
    return Object.assign(Object.values(sorted), sorted);
  }
  function keys(breakpoints3) {
    const value = Object.keys(sortBps(breakpoints3));
    return new Set(value);
  }
  function subtract2(value) {
    var _a7;
    if (!value)
      return value;
    value = (_a7 = px(value)) != null ? _a7 : value;
    const OFFSET = -0.02;
    return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m) => `${parseFloat(m) + OFFSET}`);
  }
  function toMediaQueryString(min, max) {
    const query = ["@media screen"];
    if (min)
      query.push("and", `(min-width: ${px(min)})`);
    if (max)
      query.push("and", `(max-width: ${px(max)})`);
    return query.join(" ");
  }
  function analyzeBreakpoints(breakpoints3) {
    var _a7;
    if (!breakpoints3)
      return null;
    breakpoints3.base = (_a7 = breakpoints3.base) != null ? _a7 : "0px";
    const normalized = normalize(breakpoints3);
    const queries = Object.entries(breakpoints3).sort(sortByBreakpointValue).map(([breakpoint, minW], index2, entry) => {
      var _a24;
      let [, maxW] = (_a24 = entry[index2 + 1]) != null ? _a24 : [];
      maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
      return {
        _minW: subtract2(minW),
        breakpoint,
        minW,
        maxW,
        maxWQuery: toMediaQueryString(null, maxW),
        minWQuery: toMediaQueryString(minW),
        minMaxQuery: toMediaQueryString(minW, maxW)
      };
    });
    const _keys = keys(breakpoints3);
    const _keysArr = Array.from(_keys.values());
    return {
      keys: _keys,
      normalized,
      isResponsive(test2) {
        const keys22 = Object.keys(test2);
        return keys22.length > 0 && keys22.every((key) => _keys.has(key));
      },
      asObject: sortBps(breakpoints3),
      asArray: normalize(breakpoints3),
      details: queries,
      get(key) {
        return queries.find((q) => q.breakpoint === key);
      },
      media: [
        null,
        ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
      ],
      toArrayValue(test2) {
        if (!isObject(test2)) {
          throw new Error("toArrayValue: value must be an object");
        }
        const result = _keysArr.map((bp) => {
          var _a24;
          return (_a24 = test2[bp]) != null ? _a24 : null;
        });
        while (getLastItem(result) === null) {
          result.pop();
        }
        return result;
      },
      toObjectValue(test2) {
        if (!Array.isArray(test2)) {
          throw new Error("toObjectValue: value must be an array");
        }
        return test2.reduce((acc, value, index2) => {
          const key = _keysArr[index2];
          if (key != null && value != null)
            acc[key] = value;
          return acc;
        }, {});
      }
    };
  }
  var state = {
    hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
    focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
    focusVisible: (str, post) => `${str}:focus-visible ${post}`,
    focusWithin: (str, post) => `${str}:focus-within ${post}`,
    active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
    disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
    invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
    checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
    indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
    readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
    expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
    placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
  };
  var toGroup = (fn) => merge((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
  var toPeer = (fn) => merge((v) => fn(v, "~ &"), "[data-peer]", ".peer");
  var merge = (fn, ...selectors) => selectors.map(fn).join(", ");
  var pseudoSelectors = {
    _hover: "&:hover, &[data-hover]",
    _active: "&:active, &[data-active]",
    _focus: "&:focus, &[data-focus]",
    _highlighted: "&[data-highlighted]",
    _focusWithin: "&:focus-within",
    _focusVisible: "&:focus-visible, &[data-focus-visible]",
    _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
    _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
    _before: "&::before",
    _after: "&::after",
    _empty: "&:empty",
    _expanded: "&[aria-expanded=true], &[data-expanded]",
    _checked: "&[aria-checked=true], &[data-checked]",
    _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
    _pressed: "&[aria-pressed=true], &[data-pressed]",
    _invalid: "&[aria-invalid=true], &[data-invalid]",
    _valid: "&[data-valid], &[data-state=valid]",
    _loading: "&[data-loading], &[aria-busy=true]",
    _selected: "&[aria-selected=true], &[data-selected]",
    _hidden: "&[hidden], &[data-hidden]",
    _autofill: "&:-webkit-autofill",
    _even: "&:nth-of-type(even)",
    _odd: "&:nth-of-type(odd)",
    _first: "&:first-of-type",
    _firstLetter: "&::first-letter",
    _last: "&:last-of-type",
    _notFirst: "&:not(:first-of-type)",
    _notLast: "&:not(:last-of-type)",
    _visited: "&:visited",
    _activeLink: "&[aria-current=page]",
    _activeStep: "&[aria-current=step]",
    _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
    _groupHover: toGroup(state.hover),
    _peerHover: toPeer(state.hover),
    _groupFocus: toGroup(state.focus),
    _peerFocus: toPeer(state.focus),
    _groupFocusVisible: toGroup(state.focusVisible),
    _peerFocusVisible: toPeer(state.focusVisible),
    _groupActive: toGroup(state.active),
    _peerActive: toPeer(state.active),
    _groupDisabled: toGroup(state.disabled),
    _peerDisabled: toPeer(state.disabled),
    _groupInvalid: toGroup(state.invalid),
    _peerInvalid: toPeer(state.invalid),
    _groupChecked: toGroup(state.checked),
    _peerChecked: toPeer(state.checked),
    _groupFocusWithin: toGroup(state.focusWithin),
    _peerFocusWithin: toPeer(state.focusWithin),
    _peerPlaceholderShown: toPeer(state.placeholderShown),
    _placeholder: "&::placeholder",
    _placeholderShown: "&:placeholder-shown",
    _fullScreen: "&:fullscreen",
    _selection: "&::selection",
    _rtl: "[dir=rtl] &, &[dir=rtl]",
    _ltr: "[dir=ltr] &, &[dir=ltr]",
    _mediaDark: "@media (prefers-color-scheme: dark)",
    _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
    _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
    _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]"
  };
  var pseudoPropNames = Object.keys(
    pseudoSelectors
  );
  function tokenToCssVar(token, prefix) {
    return cssVar(String(token).replace(/\./g, "-"), void 0, prefix);
  }
  function createThemeVars(flatTokens, options) {
    let cssVars = {};
    const cssMap = {};
    for (const [token, tokenValue] of Object.entries(flatTokens)) {
      const { isSemantic, value } = tokenValue;
      const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);
      if (!isSemantic) {
        if (token.startsWith("space")) {
          const keys22 = token.split(".");
          const [firstKey, ...referenceKeys] = keys22;
          const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
          const negativeValue = calc.negate(value);
          const negatedReference = calc.negate(reference);
          cssMap[negativeLookupKey] = {
            value: negativeValue,
            var: variable,
            varRef: negatedReference
          };
        }
        cssVars[variable] = value;
        cssMap[token] = {
          value,
          var: variable,
          varRef: reference
        };
        continue;
      }
      const lookupToken = (maybeToken) => {
        const scale2 = String(token).split(".")[0];
        const withScale = [scale2, maybeToken].join(".");
        const resolvedTokenValue = flatTokens[withScale];
        if (!resolvedTokenValue)
          return maybeToken;
        const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);
        return reference2;
      };
      const normalizedValue = isObject(value) ? value : { default: value };
      cssVars = (0, import_lodash.default)(
        cssVars,
        Object.entries(normalizedValue).reduce(
          (acc, [conditionAlias, conditionValue]) => {
            var _a7, _b5;
            const maybeReference = lookupToken(conditionValue.toString());
            if (conditionAlias === "default") {
              acc[variable] = maybeReference;
              return acc;
            }
            const conditionSelector = (_b5 = (_a7 = pseudoSelectors) == null ? void 0 : _a7[conditionAlias]) != null ? _b5 : conditionAlias;
            acc[conditionSelector] = { [variable]: maybeReference };
            return acc;
          },
          {}
        )
      );
      cssMap[token] = {
        value: reference,
        var: variable,
        varRef: reference
      };
    }
    return {
      cssVars,
      cssMap
    };
  }
  function omit(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit) {
      if (key in clone) {
        delete clone[key];
      }
    }
    return clone;
  }
  function pick(object, keysToPick) {
    const result = {};
    for (const key of keysToPick) {
      if (key in object) {
        result[key] = object[key];
      }
    }
    return result;
  }
  var tokens = [
    "colors",
    "borders",
    "borderWidths",
    "borderStyles",
    "fonts",
    "fontSizes",
    "fontWeights",
    "gradients",
    "letterSpacings",
    "lineHeights",
    "radii",
    "space",
    "shadows",
    "sizes",
    "zIndices",
    "transition",
    "blur",
    "breakpoints"
  ];
  function extractTokens(theme2) {
    const _tokens = tokens;
    return pick(theme2, _tokens);
  }
  function extractSemanticTokens(theme2) {
    return theme2.semanticTokens;
  }
  function omitVars(rawTheme) {
    const _a7 = rawTheme, { __cssMap, __cssVars, __breakpoints } = _a7, cleanTheme = __objRest(_a7, ["__cssMap", "__cssVars", "__breakpoints"]);
    return cleanTheme;
  }
  function flattenTokens({
    tokens: tokens2,
    semanticTokens: semanticTokens2
  }) {
    var _a7, _b5;
    const tokenEntries = Object.entries((_a7 = flatten(tokens2)) != null ? _a7 : {}).map(
      ([token, value]) => {
        const enhancedToken = { isSemantic: false, value };
        return [token, enhancedToken];
      }
    );
    const semanticTokenEntries = Object.entries(
      (_b5 = flatten(semanticTokens2, 1)) != null ? _b5 : {}
    ).map(([token, value]) => {
      const enhancedToken = { isSemantic: true, value };
      return [token, enhancedToken];
    });
    return Object.fromEntries([
      ...tokenEntries,
      ...semanticTokenEntries
    ]);
  }
  function flatten(target, maxDepth2 = Infinity) {
    if (!isObject(target) && !Array.isArray(target) || !maxDepth2) {
      return target;
    }
    return Object.entries(target).reduce((result, [key, value]) => {
      if (isObject(value) || Array.isArray(value)) {
        Object.entries(flatten(value, maxDepth2 - 1)).forEach(
          ([childKey, childValue]) => {
            result[`${key}.${childKey}`] = childValue;
          }
        );
      } else {
        result[key] = value;
      }
      return result;
    }, {});
  }
  function toCSSVar(rawTheme) {
    var _a7;
    const theme2 = omitVars(rawTheme);
    const tokens2 = extractTokens(theme2);
    const semanticTokens2 = extractSemanticTokens(theme2);
    const flatTokens = flattenTokens({ tokens: tokens2, semanticTokens: semanticTokens2 });
    const cssVarPrefix = (_a7 = theme2.config) == null ? void 0 : _a7.cssVarPrefix;
    const {
      cssMap,
      cssVars
    } = createThemeVars(flatTokens, { cssVarPrefix });
    const defaultCssVars = {
      "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
      "--chakra-ring-offset-width": "0px",
      "--chakra-ring-offset-color": "#fff",
      "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
      "--chakra-ring-offset-shadow": "0 0 #0000",
      "--chakra-ring-shadow": "0 0 #0000",
      "--chakra-space-x-reverse": "0",
      "--chakra-space-y-reverse": "0"
    };
    Object.assign(theme2, {
      __cssVars: __spreadValues(__spreadValues({}, defaultCssVars), cssVars),
      __cssMap: cssMap,
      __breakpoints: analyzeBreakpoints(theme2.breakpoints)
    });
    return theme2;
  }
  var systemProps = (0, import_lodash3.default)(
    {},
    background,
    border,
    color,
    flexbox,
    layout,
    filter,
    ring,
    interactivity,
    grid,
    others,
    position,
    effect,
    space,
    scroll,
    typography,
    textDecoration,
    transform,
    list,
    transition
  );
  var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);
  var layoutPropNames = Object.keys(
    layoutSystem
  );
  var propNames = [...Object.keys(systemProps), ...pseudoPropNames];
  var styleProps = __spreadValues(__spreadValues({}, systemProps), pseudoSelectors);
  var isStyleProp = (prop) => prop in styleProps;
  var expandResponsive = (styles2) => (theme2) => {
    if (!theme2.__breakpoints)
      return styles2;
    const { isResponsive, toArrayValue, media: medias } = theme2.__breakpoints;
    const computedStyles = {};
    for (const key in styles2) {
      let value = runIfFn(styles2[key], theme2);
      if (value == null)
        continue;
      value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
      if (!Array.isArray(value)) {
        computedStyles[key] = value;
        continue;
      }
      const queries = value.slice(0, medias.length).length;
      for (let index2 = 0; index2 < queries; index2 += 1) {
        const media = medias == null ? void 0 : medias[index2];
        if (!media) {
          computedStyles[key] = value[index2];
          continue;
        }
        computedStyles[media] = computedStyles[media] || {};
        if (value[index2] == null) {
          continue;
        }
        computedStyles[media][key] = value[index2];
      }
    }
    return computedStyles;
  };
  function splitByComma(value) {
    const chunks = [];
    let chunk = "";
    let inParens = false;
    for (let i = 0; i < value.length; i++) {
      const char = value[i];
      if (char === "(") {
        inParens = true;
        chunk += char;
      } else if (char === ")") {
        inParens = false;
        chunk += char;
      } else if (char === "," && !inParens) {
        chunks.push(chunk);
        chunk = "";
      } else {
        chunk += char;
      }
    }
    chunk = chunk.trim();
    if (chunk) {
      chunks.push(chunk);
    }
    return chunks;
  }
  function isCssVar2(value) {
    return /^var\(--.+\)$/.test(value);
  }
  var isCSSVariableTokenValue = (key, value) => key.startsWith("--") && typeof value === "string" && !isCssVar2(value);
  var resolveTokenValue = (theme2, value) => {
    var _a7, _b5;
    if (value == null)
      return value;
    const getVar = (val) => {
      var _a24, _b22;
      return (_b22 = (_a24 = theme2.__cssMap) == null ? void 0 : _a24[val]) == null ? void 0 : _b22.varRef;
    };
    const getValue = (val) => {
      var _a24;
      return (_a24 = getVar(val)) != null ? _a24 : val;
    };
    const [tokenValue, fallbackValue] = splitByComma(value);
    value = (_b5 = (_a7 = getVar(tokenValue)) != null ? _a7 : getValue(fallbackValue)) != null ? _b5 : getValue(value);
    return value;
  };
  function getCss(options) {
    const { configs = {}, pseudos = {}, theme: theme2 } = options;
    const css22 = (stylesOrFn, nested = false) => {
      var _a7, _b5, _c3;
      const _styles = runIfFn(stylesOrFn, theme2);
      const styles2 = expandResponsive(_styles)(theme2);
      let computedStyles = {};
      for (let key in styles2) {
        const valueOrFn = styles2[key];
        let value = runIfFn(valueOrFn, theme2);
        if (key in pseudos) {
          key = pseudos[key];
        }
        if (isCSSVariableTokenValue(key, value)) {
          value = resolveTokenValue(theme2, value);
        }
        let config2 = configs[key];
        if (config2 === true) {
          config2 = { property: key };
        }
        if (isObject(value)) {
          computedStyles[key] = (_a7 = computedStyles[key]) != null ? _a7 : {};
          computedStyles[key] = (0, import_lodash2.default)(
            {},
            computedStyles[key],
            css22(value, true)
          );
          continue;
        }
        let rawValue = (_c3 = (_b5 = config2 == null ? void 0 : config2.transform) == null ? void 0 : _b5.call(config2, value, theme2, _styles)) != null ? _c3 : value;
        rawValue = (config2 == null ? void 0 : config2.processResult) ? css22(rawValue, true) : rawValue;
        const configProperty = runIfFn(config2 == null ? void 0 : config2.property, theme2);
        if (!nested && (config2 == null ? void 0 : config2.static)) {
          const staticStyles = runIfFn(config2.static, theme2);
          computedStyles = (0, import_lodash2.default)({}, computedStyles, staticStyles);
        }
        if (configProperty && Array.isArray(configProperty)) {
          for (const property of configProperty) {
            computedStyles[property] = rawValue;
          }
          continue;
        }
        if (configProperty) {
          if (configProperty === "&" && isObject(rawValue)) {
            computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
          } else {
            computedStyles[configProperty] = rawValue;
          }
          continue;
        }
        if (isObject(rawValue)) {
          computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
          continue;
        }
        computedStyles[key] = rawValue;
      }
      return computedStyles;
    };
    return css22;
  }
  var css2 = (styles2) => (theme2) => {
    const cssFn = getCss({
      theme: theme2,
      pseudos: pseudoSelectors,
      configs: systemProps
    });
    return cssFn(styles2);
  };
  function defineStyle(styles2) {
    return styles2;
  }
  function defineStyleConfig(config2) {
    return config2;
  }
  function createMultiStyleConfigHelpers(parts) {
    return {
      definePartsStyle(config2) {
        return config2;
      },
      defineMultiStyleConfig(config2) {
        return __spreadValues({ parts }, config2);
      }
    };
  }
  function normalize2(value, toArray) {
    if (Array.isArray(value))
      return value;
    if (isObject(value))
      return toArray(value);
    if (value != null)
      return [value];
  }
  function getNextIndex(values, i) {
    for (let j = i + 1; j < values.length; j++) {
      if (values[j] != null)
        return j;
    }
    return -1;
  }
  function createResolver(theme2) {
    const breakpointUtil = theme2.__breakpoints;
    return function resolver2(config2, prop, value, props) {
      var _a7, _b5;
      if (!breakpointUtil)
        return;
      const result = {};
      const normalized = normalize2(value, breakpointUtil.toArrayValue);
      if (!normalized)
        return result;
      const len = normalized.length;
      const isSingle = len === 1;
      const isMultipart = !!config2.parts;
      for (let i = 0; i < len; i++) {
        const key = breakpointUtil.details[i];
        const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
        const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);
        const styles2 = runIfFn((_a7 = config2[prop]) == null ? void 0 : _a7[normalized[i]], props);
        if (!styles2)
          continue;
        if (isMultipart) {
          (_b5 = config2.parts) == null ? void 0 : _b5.forEach((part) => {
            (0, import_lodash4.default)(result, {
              [part]: isSingle ? styles2[part] : { [query]: styles2[part] }
            });
          });
          continue;
        }
        if (!isMultipart) {
          if (isSingle)
            (0, import_lodash4.default)(result, styles2);
          else
            result[query] = styles2;
          continue;
        }
        result[query] = styles2;
      }
      return result;
    };
  }
  function resolveStyleConfig(config2) {
    return (props) => {
      var _a7;
      const { variant, size: size2, theme: theme2 } = props;
      const recipe = createResolver(theme2);
      return (0, import_lodash4.default)(
        {},
        runIfFn((_a7 = config2.baseStyle) != null ? _a7 : {}, props),
        recipe(config2, "sizes", size2, props),
        recipe(config2, "variants", variant, props)
      );
    };
  }
  function omitThemingProps(props) {
    return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-A6NK776R.mjs
  var requiredChakraThemeKeys = [
    "borders",
    "breakpoints",
    "colors",
    "components",
    "config",
    "direction",
    "fonts",
    "fontSizes",
    "fontWeights",
    "letterSpacings",
    "lineHeights",
    "radii",
    "shadows",
    "sizes",
    "space",
    "styles",
    "transition",
    "zIndices"
  ];
  function isChakraTheme(unit) {
    if (!isObject(unit)) {
      return false;
    }
    return requiredChakraThemeKeys.every(
      (propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName)
    );
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-7OKLMD4V.mjs
  var zIndices = {
    hide: -1,
    auto: "auto",
    base: 0,
    docked: 10,
    dropdown: 1e3,
    sticky: 1100,
    banner: 1200,
    overlay: 1300,
    modal: 1400,
    popover: 1500,
    skipLink: 1600,
    toast: 1700,
    tooltip: 1800
  };
  var z_index_default = zIndices;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-DDAHWWWN.mjs
  var breakpoints = {
    base: "0em",
    sm: "30em",
    md: "48em",
    lg: "62em",
    xl: "80em",
    "2xl": "96em"
  };
  var breakpoints_default = breakpoints;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-C7H5GWRZ.mjs
  var colors = {
    transparent: "transparent",
    current: "currentColor",
    black: "#000000",
    white: "#FFFFFF",
    whiteAlpha: {
      50: "rgba(255, 255, 255, 0.04)",
      100: "rgba(255, 255, 255, 0.06)",
      200: "rgba(255, 255, 255, 0.08)",
      300: "rgba(255, 255, 255, 0.16)",
      400: "rgba(255, 255, 255, 0.24)",
      500: "rgba(255, 255, 255, 0.36)",
      600: "rgba(255, 255, 255, 0.48)",
      700: "rgba(255, 255, 255, 0.64)",
      800: "rgba(255, 255, 255, 0.80)",
      900: "rgba(255, 255, 255, 0.92)"
    },
    blackAlpha: {
      50: "rgba(0, 0, 0, 0.04)",
      100: "rgba(0, 0, 0, 0.06)",
      200: "rgba(0, 0, 0, 0.08)",
      300: "rgba(0, 0, 0, 0.16)",
      400: "rgba(0, 0, 0, 0.24)",
      500: "rgba(0, 0, 0, 0.36)",
      600: "rgba(0, 0, 0, 0.48)",
      700: "rgba(0, 0, 0, 0.64)",
      800: "rgba(0, 0, 0, 0.80)",
      900: "rgba(0, 0, 0, 0.92)"
    },
    gray: {
      50: "#F7FAFC",
      100: "#EDF2F7",
      200: "#E2E8F0",
      300: "#CBD5E0",
      400: "#A0AEC0",
      500: "#718096",
      600: "#4A5568",
      700: "#2D3748",
      800: "#1A202C",
      900: "#171923"
    },
    red: {
      50: "#FFF5F5",
      100: "#FED7D7",
      200: "#FEB2B2",
      300: "#FC8181",
      400: "#F56565",
      500: "#E53E3E",
      600: "#C53030",
      700: "#9B2C2C",
      800: "#822727",
      900: "#63171B"
    },
    orange: {
      50: "#FFFAF0",
      100: "#FEEBC8",
      200: "#FBD38D",
      300: "#F6AD55",
      400: "#ED8936",
      500: "#DD6B20",
      600: "#C05621",
      700: "#9C4221",
      800: "#7B341E",
      900: "#652B19"
    },
    yellow: {
      50: "#FFFFF0",
      100: "#FEFCBF",
      200: "#FAF089",
      300: "#F6E05E",
      400: "#ECC94B",
      500: "#D69E2E",
      600: "#B7791F",
      700: "#975A16",
      800: "#744210",
      900: "#5F370E"
    },
    green: {
      50: "#F0FFF4",
      100: "#C6F6D5",
      200: "#9AE6B4",
      300: "#68D391",
      400: "#48BB78",
      500: "#38A169",
      600: "#2F855A",
      700: "#276749",
      800: "#22543D",
      900: "#1C4532"
    },
    teal: {
      50: "#E6FFFA",
      100: "#B2F5EA",
      200: "#81E6D9",
      300: "#4FD1C5",
      400: "#38B2AC",
      500: "#319795",
      600: "#2C7A7B",
      700: "#285E61",
      800: "#234E52",
      900: "#1D4044"
    },
    blue: {
      50: "#ebf8ff",
      100: "#bee3f8",
      200: "#90cdf4",
      300: "#63b3ed",
      400: "#4299e1",
      500: "#3182ce",
      600: "#2b6cb0",
      700: "#2c5282",
      800: "#2a4365",
      900: "#1A365D"
    },
    cyan: {
      50: "#EDFDFD",
      100: "#C4F1F9",
      200: "#9DECF9",
      300: "#76E4F7",
      400: "#0BC5EA",
      500: "#00B5D8",
      600: "#00A3C4",
      700: "#0987A0",
      800: "#086F83",
      900: "#065666"
    },
    purple: {
      50: "#FAF5FF",
      100: "#E9D8FD",
      200: "#D6BCFA",
      300: "#B794F4",
      400: "#9F7AEA",
      500: "#805AD5",
      600: "#6B46C1",
      700: "#553C9A",
      800: "#44337A",
      900: "#322659"
    },
    pink: {
      50: "#FFF5F7",
      100: "#FED7E2",
      200: "#FBB6CE",
      300: "#F687B3",
      400: "#ED64A6",
      500: "#D53F8C",
      600: "#B83280",
      700: "#97266D",
      800: "#702459",
      900: "#521B41"
    },
    linkedin: {
      50: "#E8F4F9",
      100: "#CFEDFB",
      200: "#9BDAF3",
      300: "#68C7EC",
      400: "#34B3E4",
      500: "#00A0DC",
      600: "#008CC9",
      700: "#0077B5",
      800: "#005E93",
      900: "#004471"
    },
    facebook: {
      50: "#E8F4F9",
      100: "#D9DEE9",
      200: "#B7C2DA",
      300: "#6482C0",
      400: "#4267B2",
      500: "#385898",
      600: "#314E89",
      700: "#29487D",
      800: "#223B67",
      900: "#1E355B"
    },
    messenger: {
      50: "#D0E6FF",
      100: "#B9DAFF",
      200: "#A2CDFF",
      300: "#7AB8FF",
      400: "#2E90FF",
      500: "#0078FF",
      600: "#0063D1",
      700: "#0052AC",
      800: "#003C7E",
      900: "#002C5C"
    },
    whatsapp: {
      50: "#dffeec",
      100: "#b9f5d0",
      200: "#90edb3",
      300: "#65e495",
      400: "#3cdd78",
      500: "#22c35e",
      600: "#179848",
      700: "#0c6c33",
      800: "#01421c",
      900: "#001803"
    },
    twitter: {
      50: "#E5F4FD",
      100: "#C8E9FB",
      200: "#A8DCFA",
      300: "#83CDF7",
      400: "#57BBF5",
      500: "#1DA1F2",
      600: "#1A94DA",
      700: "#1681BF",
      800: "#136B9E",
      900: "#0D4D71"
    },
    telegram: {
      50: "#E3F2F9",
      100: "#C5E4F3",
      200: "#A2D4EC",
      300: "#7AC1E4",
      400: "#47A9DA",
      500: "#0088CC",
      600: "#007AB8",
      700: "#006BA1",
      800: "#005885",
      900: "#003F5E"
    }
  };
  var colors_default = colors;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-4REDROSM.mjs
  var radii = {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
  };
  var radius_default = radii;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-DJNGX4VH.mjs
  var shadows = {
    xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
    sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
    base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
    md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
    lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
    xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
    "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
    outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
    inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
    none: "none",
    "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
  };
  var shadows_default = shadows;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-AU77DZXY.mjs
  var transitionProperty = {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
  };
  var transitionTimingFunction = {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
  };
  var transitionDuration = {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
  };
  var transition2 = {
    property: transitionProperty,
    easing: transitionTimingFunction,
    duration: transitionDuration
  };
  var transition_default = transition2;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-OLDNEXT6.mjs
  var blur = {
    none: 0,
    sm: "4px",
    base: "8px",
    md: "12px",
    lg: "16px",
    xl: "24px",
    "2xl": "40px",
    "3xl": "64px"
  };
  var blur_default = blur;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-ZV5E32CG.mjs
  var borders = {
    none: 0,
    "1px": "1px solid",
    "2px": "2px solid",
    "4px": "4px solid",
    "8px": "8px solid"
  };
  var borders_default = borders;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-HOOF7HHD.mjs
  var typography2 = {
    letterSpacings: {
      tighter: "-0.05em",
      tight: "-0.025em",
      normal: "0",
      wide: "0.025em",
      wider: "0.05em",
      widest: "0.1em"
    },
    lineHeights: {
      normal: "normal",
      none: 1,
      shorter: 1.25,
      short: 1.375,
      base: 1.5,
      tall: 1.625,
      taller: "2",
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem"
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900
    },
    fonts: {
      heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
      body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
      mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
    },
    fontSizes: {
      "3xs": "0.45rem",
      "2xs": "0.625rem",
      xs: "0.75rem",
      sm: "0.875rem",
      md: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
      "2xl": "1.5rem",
      "3xl": "1.875rem",
      "4xl": "2.25rem",
      "5xl": "3rem",
      "6xl": "3.75rem",
      "7xl": "4.5rem",
      "8xl": "6rem",
      "9xl": "8rem"
    }
  };
  var typography_default = typography2;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-G3IFUAY5.mjs
  var spacing = {
    px: "1px",
    0.5: "0.125rem",
    1: "0.25rem",
    1.5: "0.375rem",
    2: "0.5rem",
    2.5: "0.625rem",
    3: "0.75rem",
    3.5: "0.875rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
  };

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-X4JBRTE2.mjs
  var largeSizes = {
    max: "max-content",
    min: "min-content",
    full: "100%",
    "3xs": "14rem",
    "2xs": "16rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem",
    "8xl": "90rem",
    prose: "60ch"
  };
  var container = {
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px"
  };
  var sizes = __spreadProps(__spreadValues(__spreadValues({}, spacing), largeSizes), {
    container
  });
  var sizes_default = sizes;

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-6S44RLTW.mjs
  var foundations = __spreadProps(__spreadValues({
    breakpoints: breakpoints_default,
    zIndices: z_index_default,
    radii: radius_default,
    blur: blur_default,
    colors: colors_default
  }, typography_default), {
    sizes: sizes_default,
    shadows: shadows_default,
    space: spacing,
    borders: borders_default,
    transition: transition_default
  });

  // ../ecopan_bot/node_modules/@chakra-ui/anatomy/dist/chunk-ZN6IUO2A.mjs
  function anatomy(name, map2 = {}) {
    let called = false;
    function assert() {
      if (!called) {
        called = true;
        return;
      }
      throw new Error(
        "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
      );
    }
    function parts(...values) {
      assert();
      for (const part of values) {
        ;
        map2[part] = toPart(part);
      }
      return anatomy(name, map2);
    }
    function extend2(...parts2) {
      for (const part of parts2) {
        if (part in map2)
          continue;
        map2[part] = toPart(part);
      }
      return anatomy(name, map2);
    }
    function selectors() {
      const value = Object.fromEntries(
        Object.entries(map2).map(([key, part]) => [key, part.selector])
      );
      return value;
    }
    function classnames() {
      const value = Object.fromEntries(
        Object.entries(map2).map(([key, part]) => [key, part.className])
      );
      return value;
    }
    function toPart(part) {
      const el = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
      const attr = el.filter(Boolean).join("__");
      const className = `chakra-${attr}`;
      const partObj = {
        className,
        selector: `.${className}`,
        toString: () => part
      };
      return partObj;
    }
    const __type = {};
    return {
      parts,
      toPart,
      extend: extend2,
      selectors,
      classnames,
      get keys() {
        return Object.keys(map2);
      },
      __type
    };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/anatomy/dist/chunk-HAKT6JCA.mjs
  var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
  var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
  var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
  var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
  var buttonAnatomy = anatomy("button").parts();
  var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
  var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
  var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
  var editableAnatomy = anatomy("editable").parts(
    "preview",
    "input",
    "textarea"
  );
  var formAnatomy = anatomy("form").parts(
    "container",
    "requiredIndicator",
    "helperText"
  );
  var formErrorAnatomy = anatomy("formError").parts("text", "icon");
  var inputAnatomy = anatomy("input").parts("addon", "field", "element");
  var listAnatomy = anatomy("list").parts("container", "item", "icon");
  var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "command", "divider");
  var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
  var numberInputAnatomy = anatomy("numberinput").parts(
    "root",
    "field",
    "stepperGroup",
    "stepper"
  );
  var pinInputAnatomy = anatomy("pininput").parts("field");
  var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
  var progressAnatomy = anatomy("progress").parts(
    "label",
    "filledTrack",
    "track"
  );
  var radioAnatomy = anatomy("radio").parts(
    "container",
    "control",
    "label"
  );
  var selectAnatomy = anatomy("select").parts("field", "icon");
  var sliderAnatomy = anatomy("slider").parts(
    "container",
    "track",
    "thumb",
    "filledTrack",
    "mark"
  );
  var statAnatomy = anatomy("stat").parts(
    "container",
    "label",
    "helpText",
    "number",
    "icon"
  );
  var switchAnatomy = anatomy("switch").parts(
    "container",
    "track",
    "thumb"
  );
  var tableAnatomy = anatomy("table").parts(
    "table",
    "thead",
    "tbody",
    "tr",
    "th",
    "td",
    "tfoot",
    "caption"
  );
  var tabsAnatomy = anatomy("tabs").parts(
    "root",
    "tab",
    "tablist",
    "tabpanel",
    "tabpanels",
    "indicator"
  );
  var tagAnatomy = anatomy("tag").parts(
    "container",
    "label",
    "closeButton"
  );
  var cardAnatomy = anatomy("card").parts(
    "container",
    "header",
    "body",
    "footer"
  );

  // ../ecopan_bot/node_modules/color2k/dist/index.exports.import.es.mjs
  function guard(low, high, value) {
    return Math.min(Math.max(low, value), high);
  }
  var ColorError = class extends Error {
    constructor(color4) {
      super(`Failed to parse color: "${color4}"`);
    }
  };
  var ColorError$1 = ColorError;
  function parseToRgba(color4) {
    if (typeof color4 !== "string")
      throw new ColorError$1(color4);
    if (color4.trim().toLowerCase() === "transparent")
      return [0, 0, 0, 0];
    let normalizedColor = color4.trim();
    normalizedColor = namedColorRegex.test(color4) ? nameToHex(color4) : color4;
    const reducedHexMatch = reducedHexRegex.exec(normalizedColor);
    if (reducedHexMatch) {
      const arr = Array.from(reducedHexMatch).slice(1);
      return [...arr.slice(0, 3).map((x) => parseInt(r(x, 2), 16)), parseInt(r(arr[3] || "f", 2), 16) / 255];
    }
    const hexMatch = hexRegex.exec(normalizedColor);
    if (hexMatch) {
      const arr = Array.from(hexMatch).slice(1);
      return [...arr.slice(0, 3).map((x) => parseInt(x, 16)), parseInt(arr[3] || "ff", 16) / 255];
    }
    const rgbaMatch = rgbaRegex.exec(normalizedColor);
    if (rgbaMatch) {
      const arr = Array.from(rgbaMatch).slice(1);
      return [...arr.slice(0, 3).map((x) => parseInt(x, 10)), parseFloat(arr[3] || "1")];
    }
    const hslaMatch = hslaRegex.exec(normalizedColor);
    if (hslaMatch) {
      const [h2, s2, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);
      if (guard(0, 100, s2) !== s2)
        throw new ColorError$1(color4);
      if (guard(0, 100, l) !== l)
        throw new ColorError$1(color4);
      return [...hslToRgb(h2, s2, l), Number.isNaN(a) ? 1 : a];
    }
    throw new ColorError$1(color4);
  }
  function hash(str) {
    let hash2 = 5381;
    let i = str.length;
    while (i) {
      hash2 = hash2 * 33 ^ str.charCodeAt(--i);
    }
    return (hash2 >>> 0) % 2341;
  }
  var colorToInt = (x) => parseInt(x.replace(/_/g, ""), 36);
  var compressedColorMap = "1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm".split(" ").reduce((acc, next) => {
    const key = colorToInt(next.substring(0, 3));
    const hex2 = colorToInt(next.substring(3)).toString(16);
    let prefix = "";
    for (let i = 0; i < 6 - hex2.length; i++) {
      prefix += "0";
    }
    acc[key] = `${prefix}${hex2}`;
    return acc;
  }, {});
  function nameToHex(color4) {
    const normalizedColorName = color4.toLowerCase().trim();
    const result = compressedColorMap[hash(normalizedColorName)];
    if (!result)
      throw new ColorError$1(color4);
    return `#${result}`;
  }
  var r = (str, amount) => Array.from(Array(amount)).map(() => str).join("");
  var reducedHexRegex = new RegExp(`^#${r("([a-f0-9])", 3)}([a-f0-9])?$`, "i");
  var hexRegex = new RegExp(`^#${r("([a-f0-9]{2})", 3)}([a-f0-9]{2})?$`, "i");
  var rgbaRegex = new RegExp(`^rgba?\\(\\s*(\\d+)\\s*${r(",\\s*(\\d+)\\s*", 2)}(?:,\\s*([\\d.]+))?\\s*\\)$`, "i");
  var hslaRegex = /^hsla?\(\s*([\d.]+)\s*,\s*([\d.]+)%\s*,\s*([\d.]+)%(?:\s*,\s*([\d.]+))?\s*\)$/i;
  var namedColorRegex = /^[a-z]+$/i;
  var roundColor = (color4) => {
    return Math.round(color4 * 255);
  };
  var hslToRgb = (hue, saturation, lightness) => {
    let l = lightness / 100;
    if (saturation === 0) {
      return [l, l, l].map(roundColor);
    }
    const huePrime = (hue % 360 + 360) % 360 / 60;
    const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);
    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
    let red = 0;
    let green = 0;
    let blue = 0;
    if (huePrime >= 0 && huePrime < 1) {
      red = chroma;
      green = secondComponent;
    } else if (huePrime >= 1 && huePrime < 2) {
      red = secondComponent;
      green = chroma;
    } else if (huePrime >= 2 && huePrime < 3) {
      green = chroma;
      blue = secondComponent;
    } else if (huePrime >= 3 && huePrime < 4) {
      green = secondComponent;
      blue = chroma;
    } else if (huePrime >= 4 && huePrime < 5) {
      red = secondComponent;
      blue = chroma;
    } else if (huePrime >= 5 && huePrime < 6) {
      red = chroma;
      blue = secondComponent;
    }
    const lightnessModification = l - chroma / 2;
    const finalRed = red + lightnessModification;
    const finalGreen = green + lightnessModification;
    const finalBlue = blue + lightnessModification;
    return [finalRed, finalGreen, finalBlue].map(roundColor);
  };
  function rgba(red, green, blue, alpha2) {
    return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha2).toFixed(3))})`;
  }
  function transparentize(color4, amount) {
    const [r2, g, b, a] = parseToRgba(color4);
    return rgba(r2, g, b, a - amount);
  }
  function toHex(color4) {
    const [r2, g, b, a] = parseToRgba(color4);
    let hex2 = (x) => {
      const h2 = guard(0, 255, x).toString(16);
      return h2.length === 1 ? `0${h2}` : h2;
    };
    return `#${hex2(r2)}${hex2(g)}${hex2(b)}${a < 1 ? hex2(Math.round(a * 255)) : ""}`;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme-tools/dist/chunk-H4E5VM26.mjs
  function dlv_es_default(t2, e, l, n, r2) {
    for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
      t2 = t2 ? t2[e[n]] : r2;
    return t2 === r2 ? l : t2;
  }
  var isEmptyObject = (obj) => Object.keys(obj).length === 0;
  var getColor = (theme2, color4, fallback) => {
    const hex2 = dlv_es_default(theme2, `colors.${color4}`, color4);
    try {
      toHex(hex2);
      return hex2;
    } catch (e) {
      return fallback != null ? fallback : "#000000";
    }
  };
  var getBrightness = (color4) => {
    const [r2, g, b] = parseToRgba(color4);
    return (r2 * 299 + g * 587 + b * 114) / 1e3;
  };
  var tone = (color4) => (theme2) => {
    const hex2 = getColor(theme2, color4);
    const brightness = getBrightness(hex2);
    const isDark2 = brightness < 128;
    return isDark2 ? "dark" : "light";
  };
  var isDark = (color4) => (theme2) => tone(color4)(theme2) === "dark";
  var transparentize2 = (color4, opacity) => (theme2) => {
    const raw2 = getColor(theme2, color4);
    return transparentize(raw2, 1 - opacity);
  };
  function generateStripe(size2 = "1rem", color4 = "rgba(255, 255, 255, 0.15)") {
    return {
      backgroundImage: `linear-gradient(
    45deg,
    ${color4} 25%,
    transparent 25%,
    transparent 50%,
    ${color4} 50%,
    ${color4} 75%,
    transparent 75%,
    transparent
  )`,
      backgroundSize: `${size2} ${size2}`
    };
  }
  var randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
  function randomColor(opts) {
    const fallback = randomHex();
    if (!opts || isEmptyObject(opts)) {
      return fallback;
    }
    if (opts.string && opts.colors) {
      return randomColorFromList(opts.string, opts.colors);
    }
    if (opts.string && !opts.colors) {
      return randomColorFromString(opts.string);
    }
    if (opts.colors && !opts.string) {
      return randomFromList(opts.colors);
    }
    return fallback;
  }
  function randomColorFromString(str) {
    let hash2 = 0;
    if (str.length === 0)
      return hash2.toString();
    for (let i = 0; i < str.length; i += 1) {
      hash2 = str.charCodeAt(i) + ((hash2 << 5) - hash2);
      hash2 = hash2 & hash2;
    }
    let color4 = "#";
    for (let j = 0; j < 3; j += 1) {
      const value = hash2 >> j * 8 & 255;
      color4 += `00${value.toString(16)}`.substr(-2);
    }
    return color4;
  }
  function randomColorFromList(str, list4) {
    let index2 = 0;
    if (str.length === 0)
      return list4[0];
    for (let i = 0; i < str.length; i += 1) {
      index2 = str.charCodeAt(i) + ((index2 << 5) - index2);
      index2 = index2 & index2;
    }
    index2 = (index2 % list4.length + list4.length) % list4.length;
    return list4[index2];
  }
  function randomFromList(list4) {
    return list4[Math.floor(Math.random() * list4.length)];
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme-tools/dist/chunk-7P3W45AB.mjs
  function mode(light, dark) {
    return (props) => props.colorMode === "dark" ? dark : light;
  }
  function orient(options) {
    const { orientation, vertical, horizontal } = options;
    if (!orientation)
      return {};
    return orientation === "vertical" ? vertical : horizontal;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme-tools/dist/chunk-E3OBLH5E.mjs
  function toRef(operand) {
    if (isObject(operand) && operand.reference) {
      return operand.reference;
    }
    return String(operand);
  }
  var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
  var add2 = (...operands) => `calc(${toExpr("+", ...operands)})`;
  var subtract3 = (...operands) => `calc(${toExpr("-", ...operands)})`;
  var multiply2 = (...operands) => `calc(${toExpr("*", ...operands)})`;
  var divide2 = (...operands) => `calc(${toExpr("/", ...operands)})`;
  var negate2 = (x) => {
    const value = toRef(x);
    if (value != null && !Number.isNaN(parseFloat(value))) {
      return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
    }
    return multiply2(value, -1);
  };
  var calc2 = Object.assign(
    (x) => ({
      add: (...operands) => calc2(add2(x, ...operands)),
      subtract: (...operands) => calc2(subtract3(x, ...operands)),
      multiply: (...operands) => calc2(multiply2(x, ...operands)),
      divide: (...operands) => calc2(divide2(x, ...operands)),
      negate: () => calc2(negate2(x)),
      toString: () => x.toString()
    }),
    {
      add: add2,
      subtract: subtract3,
      multiply: multiply2,
      divide: divide2,
      negate: negate2
    }
  );

  // ../ecopan_bot/node_modules/@chakra-ui/theme-tools/dist/chunk-7SOXEYKO.mjs
  function isDecimal(value) {
    return !Number.isInteger(parseFloat(value.toString()));
  }
  function replaceWhiteSpace2(value, replaceValue = "-") {
    return value.replace(/\s+/g, replaceValue);
  }
  function escape2(value) {
    const valueStr = replaceWhiteSpace2(value.toString());
    if (valueStr.includes("\\."))
      return value;
    return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
  }
  function addPrefix2(value, prefix = "") {
    return [prefix, escape2(value)].filter(Boolean).join("-");
  }
  function toVarRef(name, fallback) {
    return `var(${escape2(name)}${fallback ? `, ${fallback}` : ""})`;
  }
  function toVar(value, prefix = "") {
    return `--${addPrefix2(value, prefix)}`;
  }
  function cssVar2(name, options) {
    const cssVariable = toVar(name, options == null ? void 0 : options.prefix);
    return {
      variable: cssVariable,
      reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
    };
  }
  function getFallback(fallback) {
    if (typeof fallback === "string")
      return fallback;
    return fallback == null ? void 0 : fallback.reference;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-KGFPXNP4.mjs
  var { defineMultiStyleConfig, definePartsStyle } = createMultiStyleConfigHelpers(switchAnatomy.keys);
  var $width = cssVar2("switch-track-width");
  var $height = cssVar2("switch-track-height");
  var $diff = cssVar2("switch-track-diff");
  var diffValue = calc2.subtract($width, $height);
  var $translateX = cssVar2("switch-thumb-x");
  var $bg = cssVar2("switch-bg");
  var baseStyleTrack = defineStyle((props) => {
    const { colorScheme: c } = props;
    return {
      borderRadius: "full",
      p: "0.5",
      width: [$width.reference],
      height: [$height.reference],
      transitionProperty: "common",
      transitionDuration: "fast",
      [$bg.variable]: "colors.gray.300",
      _dark: {
        [$bg.variable]: "colors.whiteAlpha.400"
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _checked: {
        [$bg.variable]: `colors.${c}.500`,
        _dark: {
          [$bg.variable]: `colors.${c}.200`
        }
      },
      bg: $bg.reference
    };
  });
  var baseStyleThumb = defineStyle({
    bg: "white",
    transitionProperty: "transform",
    transitionDuration: "normal",
    borderRadius: "inherit",
    width: [$height.reference],
    height: [$height.reference],
    _checked: {
      transform: `translateX(${$translateX.reference})`
    }
  });
  var baseStyle = definePartsStyle((props) => ({
    container: {
      [$diff.variable]: diffValue,
      [$translateX.variable]: $diff.reference,
      _rtl: {
        [$translateX.variable]: calc2($diff).negate().toString()
      }
    },
    track: baseStyleTrack(props),
    thumb: baseStyleThumb
  }));
  var sizes2 = {
    sm: definePartsStyle({
      container: {
        [$width.variable]: "1.375rem",
        [$height.variable]: "sizes.3"
      }
    }),
    md: definePartsStyle({
      container: {
        [$width.variable]: "1.875rem",
        [$height.variable]: "sizes.4"
      }
    }),
    lg: definePartsStyle({
      container: {
        [$width.variable]: "2.875rem",
        [$height.variable]: "sizes.6"
      }
    })
  };
  var switchTheme = defineMultiStyleConfig({
    baseStyle,
    sizes: sizes2,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-WHSEAAWU.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig2, definePartsStyle: definePartsStyle2 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
  var baseStyle2 = definePartsStyle2({
    table: {
      fontVariantNumeric: "lining-nums tabular-nums",
      borderCollapse: "collapse",
      width: "full"
    },
    th: {
      fontFamily: "heading",
      fontWeight: "bold",
      textTransform: "uppercase",
      letterSpacing: "wider",
      textAlign: "start"
    },
    td: {
      textAlign: "start"
    },
    caption: {
      mt: 4,
      fontFamily: "heading",
      textAlign: "center",
      fontWeight: "medium"
    }
  });
  var numericStyles = defineStyle({
    "&[data-is-numeric=true]": {
      textAlign: "end"
    }
  });
  var variantSimple = definePartsStyle2((props) => {
    const { colorScheme: c } = props;
    return {
      th: __spreadValues({
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(`${c}.100`, `${c}.700`)(props)
      }, numericStyles),
      td: __spreadValues({
        borderBottom: "1px",
        borderColor: mode(`${c}.100`, `${c}.700`)(props)
      }, numericStyles),
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: { borderBottomWidth: 0 }
          }
        }
      }
    };
  });
  var variantStripe = definePartsStyle2((props) => {
    const { colorScheme: c } = props;
    return {
      th: __spreadValues({
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(`${c}.100`, `${c}.700`)(props)
      }, numericStyles),
      td: __spreadValues({
        borderBottom: "1px",
        borderColor: mode(`${c}.100`, `${c}.700`)(props)
      }, numericStyles),
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tbody: {
        tr: {
          "&:nth-of-type(odd)": {
            "th, td": {
              borderBottomWidth: "1px",
              borderColor: mode(`${c}.100`, `${c}.700`)(props)
            },
            td: {
              background: mode(`${c}.100`, `${c}.700`)(props)
            }
          }
        }
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: { borderBottomWidth: 0 }
          }
        }
      }
    };
  });
  var variants = {
    simple: variantSimple,
    striped: variantStripe,
    unstyled: defineStyle({})
  };
  var sizes3 = {
    sm: definePartsStyle2({
      th: {
        px: "4",
        py: "1",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "4",
        py: "2",
        fontSize: "sm",
        lineHeight: "4"
      },
      caption: {
        px: "4",
        py: "2",
        fontSize: "xs"
      }
    }),
    md: definePartsStyle2({
      th: {
        px: "6",
        py: "3",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "6",
        py: "4",
        lineHeight: "5"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "sm"
      }
    }),
    lg: definePartsStyle2({
      th: {
        px: "8",
        py: "4",
        lineHeight: "5",
        fontSize: "sm"
      },
      td: {
        px: "8",
        py: "5",
        lineHeight: "6"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "md"
      }
    })
  };
  var tableTheme = defineMultiStyleConfig2({
    baseStyle: baseStyle2,
    variants,
    sizes: sizes3,
    defaultProps: {
      variant: "simple",
      size: "md",
      colorScheme: "gray"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-RBQSCDLK.mjs
  var $fg = cssVar("tabs-color");
  var $bg2 = cssVar("tabs-bg");
  var $border = cssVar("tabs-border-color");
  var { defineMultiStyleConfig: defineMultiStyleConfig3, definePartsStyle: definePartsStyle3 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
  var baseStyleRoot = defineStyle((props) => {
    const { orientation } = props;
    return {
      display: orientation === "vertical" ? "flex" : "block"
    };
  });
  var baseStyleTab = defineStyle((props) => {
    const { isFitted } = props;
    return {
      flex: isFitted ? 1 : void 0,
      transitionProperty: "common",
      transitionDuration: "normal",
      _focusVisible: {
        zIndex: 1,
        boxShadow: "outline"
      },
      _disabled: {
        cursor: "not-allowed",
        opacity: 0.4
      }
    };
  });
  var baseStyleTablist = defineStyle((props) => {
    const { align = "start", orientation } = props;
    const alignments = {
      end: "flex-end",
      center: "center",
      start: "flex-start"
    };
    return {
      justifyContent: alignments[align],
      flexDirection: orientation === "vertical" ? "column" : "row"
    };
  });
  var baseStyleTabpanel = defineStyle({
    p: 4
  });
  var baseStyle3 = definePartsStyle3((props) => ({
    root: baseStyleRoot(props),
    tab: baseStyleTab(props),
    tablist: baseStyleTablist(props),
    tabpanel: baseStyleTabpanel
  }));
  var sizes4 = {
    sm: definePartsStyle3({
      tab: {
        py: 1,
        px: 4,
        fontSize: "sm"
      }
    }),
    md: definePartsStyle3({
      tab: {
        fontSize: "md",
        py: 2,
        px: 4
      }
    }),
    lg: definePartsStyle3({
      tab: {
        fontSize: "lg",
        py: 3,
        px: 4
      }
    })
  };
  var variantLine = definePartsStyle3((props) => {
    const { colorScheme: c, orientation } = props;
    const isVertical = orientation === "vertical";
    const borderProp = orientation === "vertical" ? "borderStart" : "borderBottom";
    const marginProp = isVertical ? "marginStart" : "marginBottom";
    return {
      tablist: {
        [borderProp]: "2px solid",
        borderColor: "inherit"
      },
      tab: {
        [borderProp]: "2px solid",
        borderColor: "transparent",
        [marginProp]: "-2px",
        _selected: {
          [$fg.variable]: `colors.${c}.600`,
          _dark: {
            [$fg.variable]: `colors.${c}.300`
          },
          borderColor: "currentColor"
        },
        _active: {
          [$bg2.variable]: "colors.gray.200",
          _dark: {
            [$bg2.variable]: "colors.whiteAlpha.300"
          }
        },
        _disabled: {
          _active: { bg: "none" }
        },
        color: $fg.reference,
        bg: $bg2.reference
      }
    };
  });
  var variantEnclosed = definePartsStyle3((props) => {
    const { colorScheme: c } = props;
    return {
      tab: {
        borderTopRadius: "md",
        border: "1px solid",
        borderColor: "transparent",
        mb: "-1px",
        [$border.variable]: "transparent",
        _selected: {
          [$fg.variable]: `colors.${c}.600`,
          [$border.variable]: `colors.white`,
          _dark: {
            [$fg.variable]: `colors.${c}.300`,
            [$border.variable]: `colors.gray.800`
          },
          borderColor: "inherit",
          borderBottomColor: $border.reference
        },
        color: $fg.reference
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  });
  var variantEnclosedColored = definePartsStyle3((props) => {
    const { colorScheme: c } = props;
    return {
      tab: {
        border: "1px solid",
        borderColor: "inherit",
        [$bg2.variable]: "colors.gray.50",
        _dark: {
          [$bg2.variable]: "colors.whiteAlpha.50"
        },
        mb: "-1px",
        _notLast: {
          marginEnd: "-1px"
        },
        _selected: {
          [$bg2.variable]: "colors.white",
          [$fg.variable]: `colors.${c}.600`,
          _dark: {
            [$bg2.variable]: "colors.gray.800",
            [$fg.variable]: `colors.${c}.300`
          },
          borderColor: "inherit",
          borderTopColor: "currentColor",
          borderBottomColor: "transparent"
        },
        color: $fg.reference,
        bg: $bg2.reference
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  });
  var variantSoftRounded = definePartsStyle3((props) => {
    const { colorScheme: c, theme: theme2 } = props;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: "gray.600",
        _selected: {
          color: getColor(theme2, `${c}.700`),
          bg: getColor(theme2, `${c}.100`)
        }
      }
    };
  });
  var variantSolidRounded = definePartsStyle3((props) => {
    const { colorScheme: c } = props;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        [$fg.variable]: "colors.gray.600",
        _dark: {
          [$fg.variable]: "inherit"
        },
        _selected: {
          [$fg.variable]: "colors.white",
          [$bg2.variable]: `colors.${c}.600`,
          _dark: {
            [$fg.variable]: "colors.gray.800",
            [$bg2.variable]: `colors.${c}.300`
          }
        },
        color: $fg.reference,
        bg: $bg2.reference
      }
    };
  });
  var variantUnstyled = definePartsStyle3({});
  var variants2 = {
    line: variantLine,
    enclosed: variantEnclosed,
    "enclosed-colored": variantEnclosedColored,
    "soft-rounded": variantSoftRounded,
    "solid-rounded": variantSolidRounded,
    unstyled: variantUnstyled
  };
  var tabsTheme = defineMultiStyleConfig3({
    baseStyle: baseStyle3,
    sizes: sizes4,
    variants: variants2,
    defaultProps: {
      size: "md",
      variant: "line",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-IBJP6BGU.mjs
  var vars = defineCssVars("badge", ["bg", "color", "shadow"]);
  var baseStyle4 = defineStyle({
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold",
    bg: vars.bg.reference,
    color: vars.color.reference,
    boxShadow: vars.shadow.reference
  });
  var variantSolid = defineStyle((props) => {
    const { colorScheme: c, theme: theme2 } = props;
    const dark = transparentize2(`${c}.500`, 0.6)(theme2);
    return {
      [vars.bg.variable]: `colors.${c}.500`,
      [vars.color.variable]: `colors.white`,
      _dark: {
        [vars.bg.variable]: dark,
        [vars.color.variable]: `colors.whiteAlpha.800`
      }
    };
  });
  var variantSubtle = defineStyle((props) => {
    const { colorScheme: c, theme: theme2 } = props;
    const darkBg = transparentize2(`${c}.200`, 0.16)(theme2);
    return {
      [vars.bg.variable]: `colors.${c}.100`,
      [vars.color.variable]: `colors.${c}.800`,
      _dark: {
        [vars.bg.variable]: darkBg,
        [vars.color.variable]: `colors.${c}.200`
      }
    };
  });
  var variantOutline = defineStyle((props) => {
    const { colorScheme: c, theme: theme2 } = props;
    const darkColor = transparentize2(`${c}.200`, 0.8)(theme2);
    return {
      [vars.color.variable]: `colors.${c}.500`,
      _dark: {
        [vars.color.variable]: darkColor
      },
      [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
    };
  });
  var variants3 = {
    solid: variantSolid,
    subtle: variantSubtle,
    outline: variantOutline
  };
  var badgeTheme = defineStyleConfig({
    baseStyle: baseStyle4,
    variants: variants3,
    defaultProps: {
      variant: "subtle",
      colorScheme: "gray"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-CZP5TVGH.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig4, definePartsStyle: definePartsStyle4 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
  var baseStyleContainer = defineStyle({
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    color: vars.color.reference,
    bg: vars.bg.reference,
    boxShadow: vars.shadow.reference,
    borderRadius: "md",
    _focusVisible: {
      boxShadow: "outline"
    }
  });
  var baseStyleLabel = defineStyle({
    lineHeight: 1.2,
    overflow: "visible"
  });
  var baseStyleCloseButton = defineStyle({
    fontSize: "lg",
    w: "5",
    h: "5",
    transitionProperty: "common",
    transitionDuration: "normal",
    borderRadius: "full",
    marginStart: "1.5",
    marginEnd: "-1",
    opacity: 0.5,
    _disabled: {
      opacity: 0.4
    },
    _focusVisible: {
      boxShadow: "outline",
      bg: "rgba(0, 0, 0, 0.14)"
    },
    _hover: {
      opacity: 0.8
    },
    _active: {
      opacity: 1
    }
  });
  var baseStyle5 = definePartsStyle4({
    container: baseStyleContainer,
    label: baseStyleLabel,
    closeButton: baseStyleCloseButton
  });
  var sizes5 = {
    sm: definePartsStyle4({
      container: {
        minH: "5",
        minW: "5",
        fontSize: "xs",
        px: "2"
      },
      closeButton: {
        marginEnd: "-2px",
        marginStart: "0.35rem"
      }
    }),
    md: definePartsStyle4({
      container: {
        minH: "6",
        minW: "6",
        fontSize: "sm",
        px: "2"
      }
    }),
    lg: definePartsStyle4({
      container: {
        minH: "8",
        minW: "8",
        fontSize: "md",
        px: "3"
      }
    })
  };
  var variants4 = {
    subtle: definePartsStyle4((props) => {
      var _a7;
      return {
        container: (_a7 = badgeTheme.variants) == null ? void 0 : _a7.subtle(props)
      };
    }),
    solid: definePartsStyle4((props) => {
      var _a7;
      return {
        container: (_a7 = badgeTheme.variants) == null ? void 0 : _a7.solid(props)
      };
    }),
    outline: definePartsStyle4((props) => {
      var _a7;
      return {
        container: (_a7 = badgeTheme.variants) == null ? void 0 : _a7.outline(props)
      };
    })
  };
  var tagTheme = defineMultiStyleConfig4({
    variants: variants4,
    baseStyle: baseStyle5,
    sizes: sizes5,
    defaultProps: {
      size: "md",
      variant: "subtle",
      colorScheme: "gray"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-WFLWAEKG.mjs
  var { definePartsStyle: definePartsStyle5, defineMultiStyleConfig: defineMultiStyleConfig5 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
  var baseStyle6 = definePartsStyle5({
    field: {
      width: "100%",
      minWidth: 0,
      outline: 0,
      position: "relative",
      appearance: "none",
      transitionProperty: "common",
      transitionDuration: "normal",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    }
  });
  var size = {
    lg: defineStyle({
      fontSize: "lg",
      px: "4",
      h: "12",
      borderRadius: "md"
    }),
    md: defineStyle({
      fontSize: "md",
      px: "4",
      h: "10",
      borderRadius: "md"
    }),
    sm: defineStyle({
      fontSize: "sm",
      px: "3",
      h: "8",
      borderRadius: "sm"
    }),
    xs: defineStyle({
      fontSize: "xs",
      px: "2",
      h: "6",
      borderRadius: "sm"
    })
  };
  var sizes6 = {
    lg: definePartsStyle5({
      field: size.lg,
      addon: size.lg
    }),
    md: definePartsStyle5({
      field: size.md,
      addon: size.md
    }),
    sm: definePartsStyle5({
      field: size.sm,
      addon: size.sm
    }),
    xs: definePartsStyle5({
      field: size.xs,
      addon: size.xs
    })
  };
  function getDefaults(props) {
    const { focusBorderColor: fc, errorBorderColor: ec } = props;
    return {
      focusBorderColor: fc || mode("blue.500", "blue.300")(props),
      errorBorderColor: ec || mode("red.500", "red.300")(props)
    };
  }
  var variantOutline2 = definePartsStyle5((props) => {
    const { theme: theme2 } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
      field: {
        border: "1px solid",
        borderColor: "inherit",
        bg: "inherit",
        _hover: {
          borderColor: mode("gray.300", "whiteAlpha.400")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme2, ec),
          boxShadow: `0 0 0 1px ${getColor(theme2, ec)}`
        },
        _focusVisible: {
          zIndex: 1,
          borderColor: getColor(theme2, fc),
          boxShadow: `0 0 0 1px ${getColor(theme2, fc)}`
        }
      },
      addon: {
        border: "1px solid",
        borderColor: mode("inherit", "whiteAlpha.50")(props),
        bg: mode("gray.100", "whiteAlpha.300")(props)
      }
    };
  });
  var variantFilled = definePartsStyle5((props) => {
    const { theme: theme2 } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
      field: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props),
        _hover: {
          bg: mode("gray.200", "whiteAlpha.100")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme2, ec)
        },
        _focusVisible: {
          bg: "transparent",
          borderColor: getColor(theme2, fc)
        }
      },
      addon: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props)
      }
    };
  });
  var variantFlushed = definePartsStyle5((props) => {
    const { theme: theme2 } = props;
    const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
    return {
      field: {
        borderBottom: "1px solid",
        borderColor: "inherit",
        borderRadius: "0",
        px: "0",
        bg: "transparent",
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _invalid: {
          borderColor: getColor(theme2, ec),
          boxShadow: `0px 1px 0px 0px ${getColor(theme2, ec)}`
        },
        _focusVisible: {
          borderColor: getColor(theme2, fc),
          boxShadow: `0px 1px 0px 0px ${getColor(theme2, fc)}`
        }
      },
      addon: {
        borderBottom: "2px solid",
        borderColor: "inherit",
        borderRadius: "0",
        px: "0",
        bg: "transparent"
      }
    };
  });
  var variantUnstyled2 = definePartsStyle5({
    field: {
      bg: "transparent",
      px: "0",
      height: "auto"
    },
    addon: {
      bg: "transparent",
      px: "0",
      height: "auto"
    }
  });
  var variants5 = {
    outline: variantOutline2,
    filled: variantFilled,
    flushed: variantFlushed,
    unstyled: variantUnstyled2
  };
  var inputTheme = defineMultiStyleConfig5({
    baseStyle: baseStyle6,
    sizes: sizes6,
    variants: variants5,
    defaultProps: {
      size: "md",
      variant: "outline"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-OIGZPHLT.mjs
  var _a;
  var baseStyle7 = defineStyle(__spreadProps(__spreadValues({}, (_a = inputTheme.baseStyle) == null ? void 0 : _a.field), {
    paddingY: "2",
    minHeight: "20",
    lineHeight: "short",
    verticalAlign: "top"
  }));
  var _a2;
  var _b;
  var variants6 = {
    outline: defineStyle(
      (props) => {
        var _a42, _b32;
        return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
      }
    ),
    flushed: defineStyle(
      (props) => {
        var _a42, _b32;
        return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
      }
    ),
    filled: defineStyle(
      (props) => {
        var _a42, _b32;
        return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
      }
    ),
    unstyled: (_b = (_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
  };
  var _a3;
  var _b2;
  var _c;
  var _d;
  var _e;
  var _f;
  var _g;
  var _h;
  var sizes7 = {
    xs: (_b2 = (_a3 = inputTheme.sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
    sm: (_d = (_c = inputTheme.sizes) == null ? void 0 : _c.sm.field) != null ? _d : {},
    md: (_f = (_e = inputTheme.sizes) == null ? void 0 : _e.md.field) != null ? _f : {},
    lg: (_h = (_g = inputTheme.sizes) == null ? void 0 : _g.lg.field) != null ? _h : {}
  };
  var textareaTheme = defineStyleConfig({
    baseStyle: baseStyle7,
    sizes: sizes7,
    variants: variants6,
    defaultProps: {
      size: "md",
      variant: "outline"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-6Y3UQESG.mjs
  var $bg3 = cssVar2("tooltip-bg");
  var $fg2 = cssVar2("tooltip-fg");
  var $arrowBg = cssVar2("popper-arrow-bg");
  var baseStyle8 = defineStyle({
    bg: $bg3.reference,
    color: $fg2.reference,
    [$bg3.variable]: "colors.gray.700",
    [$fg2.variable]: "colors.whiteAlpha.900",
    _dark: {
      [$bg3.variable]: "colors.gray.300",
      [$fg2.variable]: "colors.gray.900"
    },
    [$arrowBg.variable]: $bg3.reference,
    px: "2",
    py: "0.5",
    borderRadius: "sm",
    fontWeight: "medium",
    fontSize: "sm",
    boxShadow: "md",
    maxW: "xs",
    zIndex: "tooltip"
  });
  var tooltipTheme = defineStyleConfig({
    baseStyle: baseStyle8
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-VGCCECBM.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig6, definePartsStyle: definePartsStyle6 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
  var filledStyle = defineStyle((props) => {
    const { colorScheme: c, theme: t2, isIndeterminate, hasStripe } = props;
    const stripeStyle = mode(
      generateStripe(),
      generateStripe("1rem", "rgba(0,0,0,0.1)")
    )(props);
    const bgColor = mode(`${c}.500`, `${c}.200`)(props);
    const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t2, bgColor)} 50%,
    transparent 100%
  )`;
    const addStripe = !isIndeterminate && hasStripe;
    return __spreadValues(__spreadValues({}, addStripe && stripeStyle), isIndeterminate ? { bgImage: gradient } : { bgColor });
  });
  var baseStyleLabel2 = defineStyle({
    lineHeight: "1",
    fontSize: "0.25em",
    fontWeight: "bold",
    color: "white"
  });
  var baseStyleTrack2 = defineStyle((props) => {
    return {
      bg: mode("gray.100", "whiteAlpha.300")(props)
    };
  });
  var baseStyleFilledTrack = defineStyle((props) => {
    return __spreadValues({
      transitionProperty: "common",
      transitionDuration: "slow"
    }, filledStyle(props));
  });
  var baseStyle9 = definePartsStyle6((props) => ({
    label: baseStyleLabel2,
    filledTrack: baseStyleFilledTrack(props),
    track: baseStyleTrack2(props)
  }));
  var sizes8 = {
    xs: definePartsStyle6({
      track: { h: "1" }
    }),
    sm: definePartsStyle6({
      track: { h: "2" }
    }),
    md: definePartsStyle6({
      track: { h: "3" }
    }),
    lg: definePartsStyle6({
      track: { h: "4" }
    })
  };
  var progressTheme = defineMultiStyleConfig6({
    sizes: sizes8,
    baseStyle: baseStyle9,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-EBS47JIL.mjs
  var isFunction2 = (value) => typeof value === "function";
  function runIfFn2(valueOrFn, ...args) {
    return isFunction2(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-3XG4KRSA.mjs
  var { definePartsStyle: definePartsStyle7, defineMultiStyleConfig: defineMultiStyleConfig7 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
  var $size = cssVar("checkbox-size");
  var baseStyleControl = defineStyle((props) => {
    const { colorScheme: c } = props;
    return {
      w: $size.reference,
      h: $size.reference,
      transitionProperty: "box-shadow",
      transitionDuration: "normal",
      border: "2px solid",
      borderRadius: "sm",
      borderColor: "inherit",
      color: "white",
      _checked: {
        bg: mode(`${c}.500`, `${c}.200`)(props),
        borderColor: mode(`${c}.500`, `${c}.200`)(props),
        color: mode("white", "gray.900")(props),
        _hover: {
          bg: mode(`${c}.600`, `${c}.300`)(props),
          borderColor: mode(`${c}.600`, `${c}.300`)(props)
        },
        _disabled: {
          borderColor: mode("gray.200", "transparent")(props),
          bg: mode("gray.200", "whiteAlpha.300")(props),
          color: mode("gray.500", "whiteAlpha.500")(props)
        }
      },
      _indeterminate: {
        bg: mode(`${c}.500`, `${c}.200`)(props),
        borderColor: mode(`${c}.500`, `${c}.200`)(props),
        color: mode("white", "gray.900")(props)
      },
      _disabled: {
        bg: mode("gray.100", "whiteAlpha.100")(props),
        borderColor: mode("gray.100", "transparent")(props)
      },
      _focusVisible: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: mode("red.500", "red.300")(props)
      }
    };
  });
  var baseStyleContainer2 = defineStyle({
    _disabled: { cursor: "not-allowed" }
  });
  var baseStyleLabel3 = defineStyle({
    userSelect: "none",
    _disabled: { opacity: 0.4 }
  });
  var baseStyleIcon = defineStyle({
    transitionProperty: "transform",
    transitionDuration: "normal"
  });
  var baseStyle10 = definePartsStyle7((props) => ({
    icon: baseStyleIcon,
    container: baseStyleContainer2,
    control: runIfFn2(baseStyleControl, props),
    label: baseStyleLabel3
  }));
  var sizes9 = {
    sm: definePartsStyle7({
      control: { [$size.variable]: "sizes.3" },
      label: { fontSize: "sm" },
      icon: { fontSize: "3xs" }
    }),
    md: definePartsStyle7({
      control: { [$size.variable]: "sizes.4" },
      label: { fontSize: "md" },
      icon: { fontSize: "2xs" }
    }),
    lg: definePartsStyle7({
      control: { [$size.variable]: "sizes.5" },
      label: { fontSize: "lg" },
      icon: { fontSize: "2xs" }
    })
  };
  var checkboxTheme = defineMultiStyleConfig7({
    baseStyle: baseStyle10,
    sizes: sizes9,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-JDPWIQ7H.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig8, definePartsStyle: definePartsStyle8 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
  var baseStyleControl2 = defineStyle((props) => {
    var _a7;
    const controlStyle = (_a7 = runIfFn2(checkboxTheme.baseStyle, props)) == null ? void 0 : _a7.control;
    return __spreadProps(__spreadValues({}, controlStyle), {
      borderRadius: "full",
      _checked: __spreadProps(__spreadValues({}, controlStyle == null ? void 0 : controlStyle["_checked"]), {
        _before: {
          content: `""`,
          display: "inline-block",
          pos: "relative",
          w: "50%",
          h: "50%",
          borderRadius: "50%",
          bg: "currentColor"
        }
      })
    });
  });
  var baseStyle11 = definePartsStyle8((props) => {
    var _a7, _b5, _c3, _d3;
    return {
      label: (_b5 = (_a7 = checkboxTheme).baseStyle) == null ? void 0 : _b5.call(_a7, props).label,
      container: (_d3 = (_c3 = checkboxTheme).baseStyle) == null ? void 0 : _d3.call(_c3, props).container,
      control: baseStyleControl2(props)
    };
  });
  var sizes10 = {
    md: definePartsStyle8({
      control: { w: "4", h: "4" },
      label: { fontSize: "md" }
    }),
    lg: definePartsStyle8({
      control: { w: "5", h: "5" },
      label: { fontSize: "lg" }
    }),
    sm: definePartsStyle8({
      control: { width: "3", height: "3" },
      label: { fontSize: "sm" }
    })
  };
  var radioTheme = defineMultiStyleConfig8({
    baseStyle: baseStyle11,
    sizes: sizes10,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-V3RHVDKJ.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig9, definePartsStyle: definePartsStyle9 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
  var $bg4 = cssVar("select-bg");
  var _a4;
  var baseStyleField = defineStyle(__spreadProps(__spreadValues({}, (_a4 = inputTheme.baseStyle) == null ? void 0 : _a4.field), {
    appearance: "none",
    paddingBottom: "1px",
    lineHeight: "normal",
    bg: $bg4.reference,
    [$bg4.variable]: "colors.white",
    _dark: {
      [$bg4.variable]: "colors.gray.700"
    },
    "> option, > optgroup": {
      bg: $bg4.reference
    }
  }));
  var baseStyleIcon2 = defineStyle({
    width: "6",
    height: "100%",
    insetEnd: "2",
    position: "relative",
    color: "currentColor",
    fontSize: "xl",
    _disabled: {
      opacity: 0.5
    }
  });
  var baseStyle12 = definePartsStyle9({
    field: baseStyleField,
    icon: baseStyleIcon2
  });
  var iconSpacing = defineStyle({
    paddingInlineEnd: "8"
  });
  var _a22;
  var _b3;
  var _c2;
  var _d2;
  var _e2;
  var _f2;
  var _g2;
  var _h2;
  var sizes11 = {
    lg: __spreadProps(__spreadValues({}, (_a22 = inputTheme.sizes) == null ? void 0 : _a22.lg), {
      field: __spreadValues(__spreadValues({}, (_b3 = inputTheme.sizes) == null ? void 0 : _b3.lg.field), iconSpacing)
    }),
    md: __spreadProps(__spreadValues({}, (_c2 = inputTheme.sizes) == null ? void 0 : _c2.md), {
      field: __spreadValues(__spreadValues({}, (_d2 = inputTheme.sizes) == null ? void 0 : _d2.md.field), iconSpacing)
    }),
    sm: __spreadProps(__spreadValues({}, (_e2 = inputTheme.sizes) == null ? void 0 : _e2.sm), {
      field: __spreadValues(__spreadValues({}, (_f2 = inputTheme.sizes) == null ? void 0 : _f2.sm.field), iconSpacing)
    }),
    xs: __spreadProps(__spreadValues({}, (_g2 = inputTheme.sizes) == null ? void 0 : _g2.xs), {
      field: __spreadValues(__spreadValues({}, (_h2 = inputTheme.sizes) == null ? void 0 : _h2.xs.field), iconSpacing),
      icon: {
        insetEnd: "1"
      }
    })
  };
  var selectTheme = defineMultiStyleConfig9({
    baseStyle: baseStyle12,
    sizes: sizes11,
    variants: inputTheme.variants,
    defaultProps: inputTheme.defaultProps
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-YSULOCDF.mjs
  var $startColor = cssVar("skeleton-start-color");
  var $endColor = cssVar("skeleton-end-color");
  var baseStyle13 = defineStyle({
    [$startColor.variable]: "colors.gray.100",
    [$endColor.variable]: "colors.gray.400",
    _dark: {
      [$startColor.variable]: "colors.gray.800",
      [$endColor.variable]: "colors.gray.600"
    },
    background: $startColor.reference,
    borderColor: $endColor.reference,
    opacity: 0.7,
    borderRadius: "sm"
  });
  var skeletonTheme = defineStyleConfig({
    baseStyle: baseStyle13
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-RSEFU3LC.mjs
  var $bg5 = cssVar("skip-link-bg");
  var baseStyle14 = defineStyle({
    borderRadius: "md",
    fontWeight: "semibold",
    _focusVisible: {
      boxShadow: "outline",
      padding: "4",
      position: "fixed",
      top: "6",
      insetStart: "6",
      [$bg5.variable]: "colors.white",
      _dark: {
        [$bg5.variable]: "colors.gray.700"
      },
      bg: $bg5.reference
    }
  });
  var skipLinkTheme = defineStyleConfig({
    baseStyle: baseStyle14
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-IBL46MNN.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig10, definePartsStyle: definePartsStyle10 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
  var $thumbSize = cssVar("slider-thumb-size");
  var $trackSize = cssVar("slider-track-size");
  var $bg6 = cssVar("slider-bg");
  var baseStyleContainer3 = defineStyle((props) => {
    const { orientation } = props;
    return __spreadValues({
      display: "inline-block",
      position: "relative",
      cursor: "pointer",
      _disabled: {
        opacity: 0.6,
        cursor: "default",
        pointerEvents: "none"
      }
    }, orient({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    }));
  });
  var baseStyleTrack3 = defineStyle((props) => {
    const orientationStyles = orient({
      orientation: props.orientation,
      horizontal: { h: $trackSize.reference },
      vertical: { w: $trackSize.reference }
    });
    return __spreadProps(__spreadValues({}, orientationStyles), {
      overflow: "hidden",
      borderRadius: "sm",
      [$bg6.variable]: "colors.gray.200",
      _dark: {
        [$bg6.variable]: "colors.whiteAlpha.200"
      },
      _disabled: {
        [$bg6.variable]: "colors.gray.300",
        _dark: {
          [$bg6.variable]: "colors.whiteAlpha.300"
        }
      },
      bg: $bg6.reference
    });
  });
  var baseStyleThumb2 = defineStyle((props) => {
    const { orientation } = props;
    const orientationStyle = orient({
      orientation,
      vertical: {
        left: "50%",
        transform: `translateX(-50%)`,
        _active: {
          transform: `translateX(-50%) scale(1.15)`
        }
      },
      horizontal: {
        top: "50%",
        transform: `translateY(-50%)`,
        _active: {
          transform: `translateY(-50%) scale(1.15)`
        }
      }
    });
    return __spreadProps(__spreadValues({}, orientationStyle), {
      w: $thumbSize.reference,
      h: $thumbSize.reference,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      position: "absolute",
      outline: 0,
      zIndex: 1,
      borderRadius: "full",
      bg: "white",
      boxShadow: "base",
      border: "1px solid",
      borderColor: "transparent",
      transitionProperty: "transform",
      transitionDuration: "normal",
      _focusVisible: {
        boxShadow: "outline"
      },
      _disabled: {
        bg: "gray.300"
      }
    });
  });
  var baseStyleFilledTrack2 = defineStyle((props) => {
    const { colorScheme: c } = props;
    return {
      width: "inherit",
      height: "inherit",
      [$bg6.variable]: `colors.${c}.500`,
      _dark: {
        [$bg6.variable]: `colors.${c}.200`
      },
      bg: $bg6.reference
    };
  });
  var baseStyle15 = definePartsStyle10((props) => ({
    container: baseStyleContainer3(props),
    track: baseStyleTrack3(props),
    thumb: baseStyleThumb2(props),
    filledTrack: baseStyleFilledTrack2(props)
  }));
  var sizeLg = definePartsStyle10({
    container: {
      [$thumbSize.variable]: `sizes.4`,
      [$trackSize.variable]: `sizes.1`
    }
  });
  var sizeMd = definePartsStyle10({
    container: {
      [$thumbSize.variable]: `sizes.3.5`,
      [$trackSize.variable]: `sizes.1`
    }
  });
  var sizeSm = definePartsStyle10({
    container: {
      [$thumbSize.variable]: `sizes.2.5`,
      [$trackSize.variable]: `sizes.0.5`
    }
  });
  var sizes12 = {
    lg: sizeLg,
    md: sizeMd,
    sm: sizeSm
  };
  var sliderTheme = defineMultiStyleConfig10({
    baseStyle: baseStyle15,
    sizes: sizes12,
    defaultProps: {
      size: "md",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-Y6RR3LE6.mjs
  var $size2 = cssVar2("spinner-size");
  var baseStyle16 = defineStyle({
    width: [$size2.reference],
    height: [$size2.reference]
  });
  var sizes13 = {
    xs: defineStyle({
      [$size2.variable]: "sizes.3"
    }),
    sm: defineStyle({
      [$size2.variable]: "sizes.4"
    }),
    md: defineStyle({
      [$size2.variable]: "sizes.6"
    }),
    lg: defineStyle({
      [$size2.variable]: "sizes.8"
    }),
    xl: defineStyle({
      [$size2.variable]: "sizes.12"
    })
  };
  var spinnerTheme = defineStyleConfig({
    baseStyle: baseStyle16,
    sizes: sizes13,
    defaultProps: {
      size: "md"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-EY6ACYQS.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig11, definePartsStyle: definePartsStyle11 } = createMultiStyleConfigHelpers(statAnatomy.keys);
  var baseStyleLabel4 = defineStyle({
    fontWeight: "medium"
  });
  var baseStyleHelpText = defineStyle({
    opacity: 0.8,
    marginBottom: "2"
  });
  var baseStyleNumber = defineStyle({
    verticalAlign: "baseline",
    fontWeight: "semibold"
  });
  var baseStyleIcon3 = defineStyle({
    marginEnd: 1,
    w: "3.5",
    h: "3.5",
    verticalAlign: "middle"
  });
  var baseStyle17 = definePartsStyle11({
    container: {},
    label: baseStyleLabel4,
    helpText: baseStyleHelpText,
    number: baseStyleNumber,
    icon: baseStyleIcon3
  });
  var sizes14 = {
    md: definePartsStyle11({
      label: { fontSize: "sm" },
      helpText: { fontSize: "sm" },
      number: { fontSize: "2xl" }
    })
  };
  var statTheme = defineMultiStyleConfig11({
    baseStyle: baseStyle17,
    sizes: sizes14,
    defaultProps: {
      size: "md"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-VQ2DUS6J.mjs
  var $bg7 = cssVar("kbd-bg");
  var baseStyle18 = defineStyle({
    [$bg7.variable]: "colors.gray.100",
    _dark: {
      [$bg7.variable]: "colors.whiteAlpha.100"
    },
    bg: $bg7.reference,
    borderRadius: "md",
    borderWidth: "1px",
    borderBottomWidth: "3px",
    fontSize: "0.8em",
    fontWeight: "bold",
    lineHeight: "normal",
    px: "0.4em",
    whiteSpace: "nowrap"
  });
  var kbdTheme = defineStyleConfig({
    baseStyle: baseStyle18
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-2T5TO72C.mjs
  var baseStyle19 = defineStyle({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  });
  var linkTheme = defineStyleConfig({
    baseStyle: baseStyle19
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-AQJ6AIMN.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig12, definePartsStyle: definePartsStyle12 } = createMultiStyleConfigHelpers(listAnatomy.keys);
  var baseStyleIcon4 = defineStyle({
    marginEnd: "2",
    display: "inline",
    verticalAlign: "text-bottom"
  });
  var baseStyle20 = definePartsStyle12({
    icon: baseStyleIcon4
  });
  var listTheme = defineMultiStyleConfig12({
    baseStyle: baseStyle20
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-FIWRYWVW.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig13, definePartsStyle: definePartsStyle13 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
  var $bg8 = cssVar("menu-bg");
  var $shadow = cssVar("menu-shadow");
  var baseStyleList = defineStyle({
    [$bg8.variable]: "#fff",
    [$shadow.variable]: "shadows.sm",
    _dark: {
      [$bg8.variable]: "colors.gray.700",
      [$shadow.variable]: "shadows.dark-lg"
    },
    color: "inherit",
    minW: "3xs",
    py: "2",
    zIndex: 1,
    borderRadius: "md",
    borderWidth: "1px",
    bg: $bg8.reference,
    boxShadow: $shadow.reference
  });
  var baseStyleItem = defineStyle({
    py: "1.5",
    px: "3",
    transitionProperty: "background",
    transitionDuration: "ultra-fast",
    transitionTimingFunction: "ease-in",
    _focus: {
      [$bg8.variable]: "colors.gray.100",
      _dark: {
        [$bg8.variable]: "colors.whiteAlpha.100"
      }
    },
    _active: {
      [$bg8.variable]: "colors.gray.200",
      _dark: {
        [$bg8.variable]: "colors.whiteAlpha.200"
      }
    },
    _expanded: {
      [$bg8.variable]: "colors.gray.100",
      _dark: {
        [$bg8.variable]: "colors.whiteAlpha.100"
      }
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    bg: $bg8.reference
  });
  var baseStyleGroupTitle = defineStyle({
    mx: 4,
    my: 2,
    fontWeight: "semibold",
    fontSize: "sm"
  });
  var baseStyleCommand = defineStyle({
    opacity: 0.6
  });
  var baseStyleDivider = defineStyle({
    border: 0,
    borderBottom: "1px solid",
    borderColor: "inherit",
    my: "2",
    opacity: 0.6
  });
  var baseStyleButton = defineStyle({
    transitionProperty: "common",
    transitionDuration: "normal"
  });
  var baseStyle21 = definePartsStyle13({
    button: baseStyleButton,
    list: baseStyleList,
    item: baseStyleItem,
    groupTitle: baseStyleGroupTitle,
    command: baseStyleCommand,
    divider: baseStyleDivider
  });
  var menuTheme = defineMultiStyleConfig13({
    baseStyle: baseStyle21
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-LYECXC4E.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig14, definePartsStyle: definePartsStyle14 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
  var $bg9 = cssVar("modal-bg");
  var $shadow2 = cssVar("modal-shadow");
  var baseStyleOverlay = defineStyle({
    bg: "blackAlpha.600",
    zIndex: "modal"
  });
  var baseStyleDialogContainer = defineStyle((props) => {
    const { isCentered, scrollBehavior } = props;
    return {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      alignItems: isCentered ? "center" : "flex-start",
      overflow: scrollBehavior === "inside" ? "hidden" : "auto",
      overscrollBehaviorY: "none"
    };
  });
  var baseStyleDialog = defineStyle((props) => {
    const { scrollBehavior } = props;
    return {
      borderRadius: "md",
      color: "inherit",
      my: "16",
      zIndex: "modal",
      maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
      [$bg9.variable]: "colors.white",
      [$shadow2.variable]: "shadows.lg",
      _dark: {
        [$bg9.variable]: "colors.gray.700",
        [$shadow2.variable]: "shadows.dark-lg"
      },
      bg: $bg9.reference,
      boxShadow: $shadow2.reference
    };
  });
  var baseStyleHeader = defineStyle({
    px: "6",
    py: "4",
    fontSize: "xl",
    fontWeight: "semibold"
  });
  var baseStyleCloseButton2 = defineStyle({
    position: "absolute",
    top: "2",
    insetEnd: "3"
  });
  var baseStyleBody = defineStyle((props) => {
    const { scrollBehavior } = props;
    return {
      px: "6",
      py: "2",
      flex: "1",
      overflow: scrollBehavior === "inside" ? "auto" : void 0
    };
  });
  var baseStyleFooter = defineStyle({
    px: "6",
    py: "4"
  });
  var baseStyle22 = definePartsStyle14((props) => ({
    overlay: baseStyleOverlay,
    dialogContainer: runIfFn2(baseStyleDialogContainer, props),
    dialog: runIfFn2(baseStyleDialog, props),
    header: baseStyleHeader,
    closeButton: baseStyleCloseButton2,
    body: runIfFn2(baseStyleBody, props),
    footer: baseStyleFooter
  }));
  function getSize(value) {
    if (value === "full") {
      return definePartsStyle14({
        dialog: {
          maxW: "100vw",
          minH: "$100vh",
          my: "0",
          borderRadius: "0"
        }
      });
    }
    return definePartsStyle14({
      dialog: { maxW: value }
    });
  }
  var sizes15 = {
    xs: getSize("xs"),
    sm: getSize("sm"),
    md: getSize("md"),
    lg: getSize("lg"),
    xl: getSize("xl"),
    "2xl": getSize("2xl"),
    "3xl": getSize("3xl"),
    "4xl": getSize("4xl"),
    "5xl": getSize("5xl"),
    "6xl": getSize("6xl"),
    full: getSize("full")
  };
  var modalTheme = defineMultiStyleConfig14({
    baseStyle: baseStyle22,
    sizes: sizes15,
    defaultProps: { size: "md" }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-XNRZTTJ2.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig15, definePartsStyle: definePartsStyle15 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
  var $stepperWidth = cssVar2("number-input-stepper-width");
  var $inputPadding = cssVar2("number-input-input-padding");
  var inputPaddingValue = calc2($stepperWidth).add("0.5rem").toString();
  var $bg10 = cssVar2("number-input-bg");
  var $fg3 = cssVar2("number-input-color");
  var $border2 = cssVar2("number-input-border-color");
  var baseStyleRoot2 = defineStyle({
    [$stepperWidth.variable]: "sizes.6",
    [$inputPadding.variable]: inputPaddingValue
  });
  var baseStyleField2 = defineStyle(
    (props) => {
      var _a7, _b5;
      return (_b5 = (_a7 = runIfFn2(inputTheme.baseStyle, props)) == null ? void 0 : _a7.field) != null ? _b5 : {};
    }
  );
  var baseStyleStepperGroup = defineStyle({
    width: $stepperWidth.reference
  });
  var baseStyleStepper = defineStyle({
    borderStart: "1px solid",
    borderStartColor: $border2.reference,
    color: $fg3.reference,
    bg: $bg10.reference,
    [$fg3.variable]: "colors.chakra-body-text",
    [$border2.variable]: "colors.chakra-border-color",
    _dark: {
      [$fg3.variable]: "colors.whiteAlpha.800",
      [$border2.variable]: "colors.whiteAlpha.300"
    },
    _active: {
      [$bg10.variable]: "colors.gray.200",
      _dark: {
        [$bg10.variable]: "colors.whiteAlpha.300"
      }
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  });
  var baseStyle23 = definePartsStyle15((props) => {
    var _a7;
    return {
      root: baseStyleRoot2,
      field: (_a7 = runIfFn2(baseStyleField2, props)) != null ? _a7 : {},
      stepperGroup: baseStyleStepperGroup,
      stepper: baseStyleStepper
    };
  });
  function getSize2(size2) {
    var _a7, _b5, _c3;
    const sizeStyle = (_a7 = inputTheme.sizes) == null ? void 0 : _a7[size2];
    const radius = {
      lg: "md",
      md: "md",
      sm: "sm",
      xs: "sm"
    };
    const _fontSize = (_c3 = (_b5 = sizeStyle.field) == null ? void 0 : _b5.fontSize) != null ? _c3 : "md";
    const fontSize = typography_default.fontSizes[_fontSize];
    return definePartsStyle15({
      field: __spreadProps(__spreadValues({}, sizeStyle.field), {
        paddingInlineEnd: $inputPadding.reference,
        verticalAlign: "top"
      }),
      stepper: {
        fontSize: calc2(fontSize).multiply(0.75).toString(),
        _first: {
          borderTopEndRadius: radius[size2]
        },
        _last: {
          borderBottomEndRadius: radius[size2],
          mt: "-1px",
          borderTopWidth: 1
        }
      }
    });
  }
  var sizes16 = {
    xs: getSize2("xs"),
    sm: getSize2("sm"),
    md: getSize2("md"),
    lg: getSize2("lg")
  };
  var numberInputTheme = defineMultiStyleConfig15({
    baseStyle: baseStyle23,
    sizes: sizes16,
    variants: inputTheme.variants,
    defaultProps: inputTheme.defaultProps
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-QW3Z4V42.mjs
  var _a5;
  var baseStyle24 = defineStyle(__spreadProps(__spreadValues({}, (_a5 = inputTheme.baseStyle) == null ? void 0 : _a5.field), {
    textAlign: "center"
  }));
  var sizes17 = {
    lg: defineStyle({
      fontSize: "lg",
      w: 12,
      h: 12,
      borderRadius: "md"
    }),
    md: defineStyle({
      fontSize: "md",
      w: 10,
      h: 10,
      borderRadius: "md"
    }),
    sm: defineStyle({
      fontSize: "sm",
      w: 8,
      h: 8,
      borderRadius: "sm"
    }),
    xs: defineStyle({
      fontSize: "xs",
      w: 6,
      h: 6,
      borderRadius: "sm"
    })
  };
  var _a23;
  var _b4;
  var variants7 = {
    outline: defineStyle(
      (props) => {
        var _a32, _b22, _c3;
        return (_c3 = (_b22 = runIfFn2((_a32 = inputTheme.variants) == null ? void 0 : _a32.outline, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
      }
    ),
    flushed: defineStyle(
      (props) => {
        var _a32, _b22, _c3;
        return (_c3 = (_b22 = runIfFn2((_a32 = inputTheme.variants) == null ? void 0 : _a32.flushed, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
      }
    ),
    filled: defineStyle(
      (props) => {
        var _a32, _b22, _c3;
        return (_c3 = (_b22 = runIfFn2((_a32 = inputTheme.variants) == null ? void 0 : _a32.filled, props)) == null ? void 0 : _b22.field) != null ? _c3 : {};
      }
    ),
    unstyled: (_b4 = (_a23 = inputTheme.variants) == null ? void 0 : _a23.unstyled.field) != null ? _b4 : {}
  };
  var pinInputTheme = defineStyleConfig({
    baseStyle: baseStyle24,
    sizes: sizes17,
    variants: variants7,
    defaultProps: inputTheme.defaultProps
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-YJYMWHG4.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig16, definePartsStyle: definePartsStyle16 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
  var $popperBg = cssVar2("popper-bg");
  var $arrowBg2 = cssVar2("popper-arrow-bg");
  var $arrowShadowColor = cssVar2("popper-arrow-shadow-color");
  var baseStylePopper = defineStyle({ zIndex: 10 });
  var baseStyleContent = defineStyle({
    [$popperBg.variable]: `colors.white`,
    bg: $popperBg.reference,
    [$arrowBg2.variable]: $popperBg.reference,
    [$arrowShadowColor.variable]: `colors.gray.200`,
    _dark: {
      [$popperBg.variable]: `colors.gray.700`,
      [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
    },
    width: "xs",
    border: "1px solid",
    borderColor: "inherit",
    borderRadius: "md",
    boxShadow: "sm",
    zIndex: "inherit",
    _focusVisible: {
      outline: 0,
      boxShadow: "outline"
    }
  });
  var baseStyleHeader2 = defineStyle({
    px: 3,
    py: 2,
    borderBottomWidth: "1px"
  });
  var baseStyleBody2 = defineStyle({
    px: 3,
    py: 2
  });
  var baseStyleFooter2 = defineStyle({
    px: 3,
    py: 2,
    borderTopWidth: "1px"
  });
  var baseStyleCloseButton3 = defineStyle({
    position: "absolute",
    borderRadius: "md",
    top: 1,
    insetEnd: 2,
    padding: 2
  });
  var baseStyle25 = definePartsStyle16({
    popper: baseStylePopper,
    content: baseStyleContent,
    header: baseStyleHeader2,
    body: baseStyleBody2,
    footer: baseStyleFooter2,
    closeButton: baseStyleCloseButton3
  });
  var popoverTheme = defineMultiStyleConfig16({
    baseStyle: baseStyle25
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-PQSF5PVS.mjs
  var { definePartsStyle: definePartsStyle17, defineMultiStyleConfig: defineMultiStyleConfig17 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
  var $bg11 = cssVar("drawer-bg");
  var $bs = cssVar("drawer-box-shadow");
  function getSize3(value) {
    if (value === "full") {
      return definePartsStyle17({
        dialog: { maxW: "100vw", h: "100vh" }
      });
    }
    return definePartsStyle17({
      dialog: { maxW: value }
    });
  }
  var baseStyleOverlay2 = defineStyle({
    bg: "blackAlpha.600",
    zIndex: "overlay"
  });
  var baseStyleDialogContainer2 = defineStyle({
    display: "flex",
    zIndex: "modal",
    justifyContent: "center"
  });
  var baseStyleDialog2 = defineStyle((props) => {
    const { isFullHeight } = props;
    return __spreadProps(__spreadValues({}, isFullHeight && { height: "100vh" }), {
      zIndex: "modal",
      maxH: "100vh",
      color: "inherit",
      [$bg11.variable]: "colors.white",
      [$bs.variable]: "shadows.lg",
      _dark: {
        [$bg11.variable]: "colors.gray.700",
        [$bs.variable]: "shadows.dark-lg"
      },
      bg: $bg11.reference,
      boxShadow: $bs.reference
    });
  });
  var baseStyleHeader3 = defineStyle({
    px: "6",
    py: "4",
    fontSize: "xl",
    fontWeight: "semibold"
  });
  var baseStyleCloseButton4 = defineStyle({
    position: "absolute",
    top: "2",
    insetEnd: "3"
  });
  var baseStyleBody3 = defineStyle({
    px: "6",
    py: "2",
    flex: "1",
    overflow: "auto"
  });
  var baseStyleFooter3 = defineStyle({
    px: "6",
    py: "4"
  });
  var baseStyle26 = definePartsStyle17((props) => ({
    overlay: baseStyleOverlay2,
    dialogContainer: baseStyleDialogContainer2,
    dialog: runIfFn2(baseStyleDialog2, props),
    header: baseStyleHeader3,
    closeButton: baseStyleCloseButton4,
    body: baseStyleBody3,
    footer: baseStyleFooter3
  }));
  var sizes18 = {
    xs: getSize3("xs"),
    sm: getSize3("md"),
    md: getSize3("lg"),
    lg: getSize3("2xl"),
    xl: getSize3("4xl"),
    full: getSize3("full")
  };
  var drawerTheme = defineMultiStyleConfig17({
    baseStyle: baseStyle26,
    sizes: sizes18,
    defaultProps: {
      size: "xs"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-YZVOF4MP.mjs
  var { definePartsStyle: definePartsStyle18, defineMultiStyleConfig: defineMultiStyleConfig18 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
  var baseStylePreview = defineStyle({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal"
  });
  var baseStyleInput = defineStyle({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focusVisible: { boxShadow: "outline" },
    _placeholder: { opacity: 0.6 }
  });
  var baseStyleTextarea = defineStyle({
    borderRadius: "md",
    py: "1",
    transitionProperty: "common",
    transitionDuration: "normal",
    width: "full",
    _focusVisible: { boxShadow: "outline" },
    _placeholder: { opacity: 0.6 }
  });
  var baseStyle27 = definePartsStyle18({
    preview: baseStylePreview,
    input: baseStyleInput,
    textarea: baseStyleTextarea
  });
  var editableTheme = defineMultiStyleConfig18({
    baseStyle: baseStyle27
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-RUW3STUO.mjs
  var { definePartsStyle: definePartsStyle19, defineMultiStyleConfig: defineMultiStyleConfig19 } = createMultiStyleConfigHelpers(formAnatomy.keys);
  var $fg4 = cssVar("form-control-color");
  var baseStyleRequiredIndicator = defineStyle({
    marginStart: "1",
    [$fg4.variable]: "colors.red.500",
    _dark: {
      [$fg4.variable]: "colors.red.300"
    },
    color: $fg4.reference
  });
  var baseStyleHelperText = defineStyle({
    mt: "2",
    [$fg4.variable]: "colors.gray.600",
    _dark: {
      [$fg4.variable]: "colors.whiteAlpha.600"
    },
    color: $fg4.reference,
    lineHeight: "normal",
    fontSize: "sm"
  });
  var baseStyle28 = definePartsStyle19({
    container: {
      width: "100%",
      position: "relative"
    },
    requiredIndicator: baseStyleRequiredIndicator,
    helperText: baseStyleHelperText
  });
  var formTheme = defineMultiStyleConfig19({
    baseStyle: baseStyle28
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-D55YRTLZ.mjs
  var { definePartsStyle: definePartsStyle20, defineMultiStyleConfig: defineMultiStyleConfig20 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
  var $fg5 = cssVar("form-error-color");
  var baseStyleText = defineStyle({
    [$fg5.variable]: `colors.red.500`,
    _dark: {
      [$fg5.variable]: `colors.red.300`
    },
    color: $fg5.reference,
    mt: "2",
    fontSize: "sm",
    lineHeight: "normal"
  });
  var baseStyleIcon5 = defineStyle({
    marginEnd: "0.5em",
    [$fg5.variable]: `colors.red.500`,
    _dark: {
      [$fg5.variable]: `colors.red.300`
    },
    color: $fg5.reference
  });
  var baseStyle29 = definePartsStyle20({
    text: baseStyleText,
    icon: baseStyleIcon5
  });
  var formErrorTheme = defineMultiStyleConfig20({
    baseStyle: baseStyle29
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-OYCZTG3L.mjs
  var baseStyle30 = defineStyle({
    fontSize: "md",
    marginEnd: "3",
    mb: "2",
    fontWeight: "medium",
    transitionProperty: "common",
    transitionDuration: "normal",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  });
  var formLabelTheme = defineStyleConfig({
    baseStyle: baseStyle30
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-X4O3JXYB.mjs
  var baseStyle31 = defineStyle({
    fontFamily: "heading",
    fontWeight: "bold"
  });
  var sizes19 = {
    "4xl": defineStyle({
      fontSize: ["6xl", null, "7xl"],
      lineHeight: 1
    }),
    "3xl": defineStyle({
      fontSize: ["5xl", null, "6xl"],
      lineHeight: 1
    }),
    "2xl": defineStyle({
      fontSize: ["4xl", null, "5xl"],
      lineHeight: [1.2, null, 1]
    }),
    xl: defineStyle({
      fontSize: ["3xl", null, "4xl"],
      lineHeight: [1.33, null, 1.2]
    }),
    lg: defineStyle({
      fontSize: ["2xl", null, "3xl"],
      lineHeight: [1.33, null, 1.2]
    }),
    md: defineStyle({
      fontSize: "xl",
      lineHeight: 1.2
    }),
    sm: defineStyle({
      fontSize: "md",
      lineHeight: 1.2
    }),
    xs: defineStyle({
      fontSize: "sm",
      lineHeight: 1.2
    })
  };
  var headingTheme = defineStyleConfig({
    baseStyle: baseStyle31,
    sizes: sizes19,
    defaultProps: {
      size: "xl"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-GLS227WS.mjs
  var { defineMultiStyleConfig: defineMultiStyleConfig21, definePartsStyle: definePartsStyle21 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
  var baseStyleLink = defineStyle({
    transitionProperty: "common",
    transitionDuration: "fast",
    transitionTimingFunction: "ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  });
  var baseStyle32 = definePartsStyle21({
    link: baseStyleLink
  });
  var breadcrumbTheme = defineMultiStyleConfig21({
    baseStyle: baseStyle32
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-AP3MTUHH.mjs
  var baseStyle33 = defineStyle({
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      _disabled: {
        bg: "initial"
      }
    }
  });
  var variantGhost = defineStyle((props) => {
    const { colorScheme: c, theme: theme2 } = props;
    if (c === "gray") {
      return {
        color: mode(`inherit`, `whiteAlpha.900`)(props),
        _hover: {
          bg: mode(`gray.100`, `whiteAlpha.200`)(props)
        },
        _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
      };
    }
    const darkHoverBg = transparentize2(`${c}.200`, 0.12)(theme2);
    const darkActiveBg = transparentize2(`${c}.200`, 0.24)(theme2);
    return {
      color: mode(`${c}.600`, `${c}.200`)(props),
      bg: "transparent",
      _hover: {
        bg: mode(`${c}.50`, darkHoverBg)(props)
      },
      _active: {
        bg: mode(`${c}.100`, darkActiveBg)(props)
      }
    };
  });
  var variantOutline3 = defineStyle((props) => {
    const { colorScheme: c } = props;
    const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
    return __spreadValues({
      border: "1px solid",
      borderColor: c === "gray" ? borderColor : "currentColor",
      ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
      ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" }
    }, runIfFn2(variantGhost, props));
  });
  var accessibleColorMap = {
    yellow: {
      bg: "yellow.400",
      color: "black",
      hoverBg: "yellow.500",
      activeBg: "yellow.600"
    },
    cyan: {
      bg: "cyan.400",
      color: "black",
      hoverBg: "cyan.500",
      activeBg: "cyan.600"
    }
  };
  var variantSolid2 = defineStyle((props) => {
    var _a7;
    const { colorScheme: c } = props;
    if (c === "gray") {
      const bg2 = mode(`gray.100`, `whiteAlpha.200`)(props);
      return {
        bg: bg2,
        _hover: {
          bg: mode(`gray.200`, `whiteAlpha.300`)(props),
          _disabled: {
            bg: bg2
          }
        },
        _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
      };
    }
    const {
      bg = `${c}.500`,
      color: color4 = "white",
      hoverBg = `${c}.600`,
      activeBg = `${c}.700`
    } = (_a7 = accessibleColorMap[c]) != null ? _a7 : {};
    const background2 = mode(bg, `${c}.200`)(props);
    return {
      bg: background2,
      color: mode(color4, `gray.800`)(props),
      _hover: {
        bg: mode(hoverBg, `${c}.300`)(props),
        _disabled: {
          bg: background2
        }
      },
      _active: { bg: mode(activeBg, `${c}.400`)(props) }
    };
  });
  var variantLink = defineStyle((props) => {
    const { colorScheme: c } = props;
    return {
      padding: 0,
      height: "auto",
      lineHeight: "normal",
      verticalAlign: "baseline",
      color: mode(`${c}.500`, `${c}.200`)(props),
      _hover: {
        textDecoration: "underline",
        _disabled: {
          textDecoration: "none"
        }
      },
      _active: {
        color: mode(`${c}.700`, `${c}.500`)(props)
      }
    };
  });
  var variantUnstyled3 = defineStyle({
    bg: "none",
    color: "inherit",
    display: "inline",
    lineHeight: "inherit",
    m: "0",
    p: "0"
  });
  var variants8 = {
    ghost: variantGhost,
    outline: variantOutline3,
    solid: variantSolid2,
    link: variantLink,
    unstyled: variantUnstyled3
  };
  var sizes20 = {
    lg: defineStyle({
      h: "12",
      minW: "12",
      fontSize: "lg",
      px: "6"
    }),
    md: defineStyle({
      h: "10",
      minW: "10",
      fontSize: "md",
      px: "4"
    }),
    sm: defineStyle({
      h: "8",
      minW: "8",
      fontSize: "sm",
      px: "3"
    }),
    xs: defineStyle({
      h: "6",
      minW: "6",
      fontSize: "xs",
      px: "2"
    })
  };
  var buttonTheme = defineStyleConfig({
    baseStyle: baseStyle33,
    variants: variants8,
    sizes: sizes20,
    defaultProps: {
      variant: "solid",
      size: "md",
      colorScheme: "gray"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-PZHBQTKY.mjs
  var { definePartsStyle: definePartsStyle22, defineMultiStyleConfig: defineMultiStyleConfig22 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
  var $bg12 = cssVar("card-bg");
  var $padding = cssVar("card-padding");
  var $shadow3 = cssVar("card-shadow");
  var $radius = cssVar("card-radius");
  var $border3 = cssVar("card-border-width", "0");
  var $borderColor = cssVar("card-border-color");
  var baseStyle34 = definePartsStyle22({
    container: {
      [$bg12.variable]: "colors.chakra-body-bg",
      backgroundColor: $bg12.reference,
      boxShadow: $shadow3.reference,
      borderRadius: $radius.reference,
      color: "chakra-body-text",
      borderWidth: $border3.reference,
      borderColor: $borderColor.reference
    },
    body: {
      padding: $padding.reference,
      flex: "1 1 0%"
    },
    header: {
      padding: $padding.reference
    },
    footer: {
      padding: $padding.reference
    }
  });
  var sizes21 = {
    sm: definePartsStyle22({
      container: {
        [$radius.variable]: "radii.base",
        [$padding.variable]: "space.3"
      }
    }),
    md: definePartsStyle22({
      container: {
        [$radius.variable]: "radii.md",
        [$padding.variable]: "space.5"
      }
    }),
    lg: definePartsStyle22({
      container: {
        [$radius.variable]: "radii.xl",
        [$padding.variable]: "space.7"
      }
    })
  };
  var variants9 = {
    elevated: definePartsStyle22({
      container: {
        [$shadow3.variable]: "shadows.base",
        _dark: {
          [$bg12.variable]: "colors.gray.700"
        }
      }
    }),
    outline: definePartsStyle22({
      container: {
        [$border3.variable]: "1px",
        [$borderColor.variable]: "colors.chakra-border-color"
      }
    }),
    filled: definePartsStyle22({
      container: {
        [$bg12.variable]: "colors.chakra-subtle-bg"
      }
    }),
    unstyled: {
      body: {
        [$padding.variable]: 0
      },
      header: {
        [$padding.variable]: 0
      },
      footer: {
        [$padding.variable]: 0
      }
    }
  };
  var cardTheme = defineMultiStyleConfig22({
    baseStyle: baseStyle34,
    variants: variants9,
    sizes: sizes21,
    defaultProps: {
      variant: "elevated",
      size: "md"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-C4P5PUHY.mjs
  var $size3 = cssVar2("close-button-size");
  var $bg13 = cssVar2("close-button-bg");
  var baseStyle35 = defineStyle({
    w: [$size3.reference],
    h: [$size3.reference],
    borderRadius: "md",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      [$bg13.variable]: "colors.blackAlpha.100",
      _dark: {
        [$bg13.variable]: "colors.whiteAlpha.100"
      }
    },
    _active: {
      [$bg13.variable]: "colors.blackAlpha.200",
      _dark: {
        [$bg13.variable]: "colors.whiteAlpha.200"
      }
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    bg: $bg13.reference
  });
  var sizes22 = {
    lg: defineStyle({
      [$size3.variable]: "sizes.10",
      fontSize: "md"
    }),
    md: defineStyle({
      [$size3.variable]: "sizes.8",
      fontSize: "xs"
    }),
    sm: defineStyle({
      [$size3.variable]: "sizes.6",
      fontSize: "2xs"
    })
  };
  var closeButtonTheme = defineStyleConfig({
    baseStyle: baseStyle35,
    sizes: sizes22,
    defaultProps: {
      size: "md"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-CAKKPKRW.mjs
  var { variants: variants10, defaultProps } = badgeTheme;
  var baseStyle36 = defineStyle({
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm",
    bg: vars.bg.reference,
    color: vars.color.reference,
    boxShadow: vars.shadow.reference
  });
  var codeTheme = defineStyleConfig({
    baseStyle: baseStyle36,
    variants: variants10,
    defaultProps
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-NDGGJV23.mjs
  var baseStyle37 = defineStyle({
    w: "100%",
    mx: "auto",
    maxW: "prose",
    px: "4"
  });
  var containerTheme = defineStyleConfig({
    baseStyle: baseStyle37
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-5Z4IVOU3.mjs
  var baseStyle38 = defineStyle({
    opacity: 0.6,
    borderColor: "inherit"
  });
  var variantSolid3 = defineStyle({
    borderStyle: "solid"
  });
  var variantDashed = defineStyle({
    borderStyle: "dashed"
  });
  var variants11 = {
    solid: variantSolid3,
    dashed: variantDashed
  };
  var dividerTheme = defineStyleConfig({
    baseStyle: baseStyle38,
    variants: variants11,
    defaultProps: {
      variant: "solid"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-T276HDLM.mjs
  var { definePartsStyle: definePartsStyle23, defineMultiStyleConfig: defineMultiStyleConfig23 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
  var baseStyleContainer4 = defineStyle({
    borderTopWidth: "1px",
    borderColor: "inherit",
    _last: {
      borderBottomWidth: "1px"
    }
  });
  var baseStyleButton2 = defineStyle({
    transitionProperty: "common",
    transitionDuration: "normal",
    fontSize: "md",
    _focusVisible: {
      boxShadow: "outline"
    },
    _hover: {
      bg: "blackAlpha.50"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    px: "4",
    py: "2"
  });
  var baseStylePanel = defineStyle({
    pt: "2",
    px: "4",
    pb: "5"
  });
  var baseStyleIcon6 = defineStyle({
    fontSize: "1.25em"
  });
  var baseStyle39 = definePartsStyle23({
    container: baseStyleContainer4,
    button: baseStyleButton2,
    panel: baseStylePanel,
    icon: baseStyleIcon6
  });
  var accordionTheme = defineMultiStyleConfig23({ baseStyle: baseStyle39 });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-YOXAUO7A.mjs
  var { definePartsStyle: definePartsStyle24, defineMultiStyleConfig: defineMultiStyleConfig24 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
  var $fg6 = cssVar("alert-fg");
  var $bg14 = cssVar("alert-bg");
  var baseStyle40 = definePartsStyle24({
    container: {
      bg: $bg14.reference,
      px: "4",
      py: "3"
    },
    title: {
      fontWeight: "bold",
      lineHeight: "6",
      marginEnd: "2"
    },
    description: {
      lineHeight: "6"
    },
    icon: {
      color: $fg6.reference,
      flexShrink: 0,
      marginEnd: "3",
      w: "5",
      h: "6"
    },
    spinner: {
      color: $fg6.reference,
      flexShrink: 0,
      marginEnd: "3",
      w: "5",
      h: "5"
    }
  });
  function getBg(props) {
    const { theme: theme2, colorScheme: c } = props;
    const darkBg = transparentize2(`${c}.200`, 0.16)(theme2);
    return {
      light: `colors.${c}.100`,
      dark: darkBg
    };
  }
  var variantSubtle2 = definePartsStyle24((props) => {
    const { colorScheme: c } = props;
    const bg = getBg(props);
    return {
      container: {
        [$fg6.variable]: `colors.${c}.500`,
        [$bg14.variable]: bg.light,
        _dark: {
          [$fg6.variable]: `colors.${c}.200`,
          [$bg14.variable]: bg.dark
        }
      }
    };
  });
  var variantLeftAccent = definePartsStyle24((props) => {
    const { colorScheme: c } = props;
    const bg = getBg(props);
    return {
      container: {
        [$fg6.variable]: `colors.${c}.500`,
        [$bg14.variable]: bg.light,
        _dark: {
          [$fg6.variable]: `colors.${c}.200`,
          [$bg14.variable]: bg.dark
        },
        paddingStart: "3",
        borderStartWidth: "4px",
        borderStartColor: $fg6.reference
      }
    };
  });
  var variantTopAccent = definePartsStyle24((props) => {
    const { colorScheme: c } = props;
    const bg = getBg(props);
    return {
      container: {
        [$fg6.variable]: `colors.${c}.500`,
        [$bg14.variable]: bg.light,
        _dark: {
          [$fg6.variable]: `colors.${c}.200`,
          [$bg14.variable]: bg.dark
        },
        pt: "2",
        borderTopWidth: "4px",
        borderTopColor: $fg6.reference
      }
    };
  });
  var variantSolid4 = definePartsStyle24((props) => {
    const { colorScheme: c } = props;
    return {
      container: {
        [$fg6.variable]: `colors.white`,
        [$bg14.variable]: `colors.${c}.500`,
        _dark: {
          [$fg6.variable]: `colors.gray.900`,
          [$bg14.variable]: `colors.${c}.200`
        },
        color: $fg6.reference
      }
    };
  });
  var variants12 = {
    subtle: variantSubtle2,
    "left-accent": variantLeftAccent,
    "top-accent": variantTopAccent,
    solid: variantSolid4
  };
  var alertTheme = defineMultiStyleConfig24({
    baseStyle: baseStyle40,
    variants: variants12,
    defaultProps: {
      variant: "subtle",
      colorScheme: "blue"
    }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-O7XTKHT6.mjs
  var { definePartsStyle: definePartsStyle25, defineMultiStyleConfig: defineMultiStyleConfig25 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
  var $border4 = cssVar("avatar-border-color");
  var $bg15 = cssVar("avatar-bg");
  var baseStyleBadge = defineStyle({
    borderRadius: "full",
    border: "0.2em solid",
    [$border4.variable]: "white",
    _dark: {
      [$border4.variable]: "colors.gray.800"
    },
    borderColor: $border4.reference
  });
  var baseStyleExcessLabel = defineStyle({
    [$bg15.variable]: "colors.gray.200",
    _dark: {
      [$bg15.variable]: "colors.whiteAlpha.400"
    },
    bgColor: $bg15.reference
  });
  var $avatarBg = cssVar("avatar-background");
  var baseStyleContainer5 = defineStyle((props) => {
    const { name, theme: theme2 } = props;
    const bg = name ? randomColor({ string: name }) : "colors.gray.400";
    const isBgDark = isDark(bg)(theme2);
    let color4 = "white";
    if (!isBgDark)
      color4 = "gray.800";
    return {
      bg: $avatarBg.reference,
      "&:not([data-loaded])": {
        [$avatarBg.variable]: bg
      },
      color: color4,
      [$border4.variable]: "colors.white",
      _dark: {
        [$border4.variable]: "colors.gray.800"
      },
      borderColor: $border4.reference,
      verticalAlign: "top"
    };
  });
  var baseStyle41 = definePartsStyle25((props) => ({
    badge: runIfFn2(baseStyleBadge, props),
    excessLabel: runIfFn2(baseStyleExcessLabel, props),
    container: runIfFn2(baseStyleContainer5, props)
  }));
  function getSize4(size2) {
    const themeSize = size2 !== "100%" ? sizes_default[size2] : void 0;
    return definePartsStyle25({
      container: {
        width: size2,
        height: size2,
        fontSize: `calc(${themeSize != null ? themeSize : size2} / 2.5)`
      },
      excessLabel: {
        width: size2,
        height: size2
      },
      label: {
        fontSize: `calc(${themeSize != null ? themeSize : size2} / 2.5)`,
        lineHeight: size2 !== "100%" ? themeSize != null ? themeSize : size2 : void 0
      }
    });
  }
  var sizes23 = {
    "2xs": getSize4(4),
    xs: getSize4(6),
    sm: getSize4(8),
    md: getSize4(12),
    lg: getSize4(16),
    xl: getSize4(24),
    "2xl": getSize4(32),
    full: getSize4("100%")
  };
  var avatarTheme = defineMultiStyleConfig25({
    baseStyle: baseStyle41,
    sizes: sizes23,
    defaultProps: { size: "md" }
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-EO2YJNI2.mjs
  var components = {
    Accordion: accordionTheme,
    Alert: alertTheme,
    Avatar: avatarTheme,
    Badge: badgeTheme,
    Breadcrumb: breadcrumbTheme,
    Button: buttonTheme,
    Checkbox: checkboxTheme,
    CloseButton: closeButtonTheme,
    Code: codeTheme,
    Container: containerTheme,
    Divider: dividerTheme,
    Drawer: drawerTheme,
    Editable: editableTheme,
    Form: formTheme,
    FormError: formErrorTheme,
    FormLabel: formLabelTheme,
    Heading: headingTheme,
    Input: inputTheme,
    Kbd: kbdTheme,
    Link: linkTheme,
    List: listTheme,
    Menu: menuTheme,
    Modal: modalTheme,
    NumberInput: numberInputTheme,
    PinInput: pinInputTheme,
    Popover: popoverTheme,
    Progress: progressTheme,
    Radio: radioTheme,
    Select: selectTheme,
    Skeleton: skeletonTheme,
    SkipLink: skipLinkTheme,
    Slider: sliderTheme,
    Spinner: spinnerTheme,
    Stat: statTheme,
    Switch: switchTheme,
    Table: tableTheme,
    Tabs: tabsTheme,
    Tag: tagTheme,
    Textarea: textareaTheme,
    Tooltip: tooltipTheme,
    Card: cardTheme
  };

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-HZX2OI7F.mjs
  var semanticTokens = {
    colors: {
      "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
      "chakra-body-bg": { _light: "white", _dark: "gray.800" },
      "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
      "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
      "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
    }
  };

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/chunk-VHIIIDDT.mjs
  var styles = {
    global: {
      body: {
        fontFamily: "body",
        color: "chakra-body-text",
        bg: "chakra-body-bg",
        transitionProperty: "background-color",
        transitionDuration: "normal",
        lineHeight: "base"
      },
      "*::placeholder": {
        color: "chakra-placeholder-color"
      },
      "*, *::before, &::after": {
        borderColor: "chakra-border-color"
      }
    }
  };

  // ../ecopan_bot/node_modules/@chakra-ui/theme/dist/index.mjs
  var direction = "ltr";
  var config = {
    useSystemColorMode: false,
    initialColorMode: "light",
    cssVarPrefix: "chakra"
  };
  var theme = __spreadProps(__spreadValues({
    semanticTokens,
    direction
  }, foundations), {
    components,
    styles,
    config
  });
  var baseTheme = __spreadProps(__spreadValues({
    semanticTokens,
    direction,
    components: {}
  }, foundations), {
    styles,
    config
  });

  // ../ecopan_bot/node_modules/@chakra-ui/theme-utils/dist/chunk-AQYX3YP4.mjs
  var import_lodash5 = __toESM(require_lodash(), 1);
  function isFunction3(value) {
    return typeof value === "function";
  }
  function pipe2(...fns) {
    return (v) => fns.reduce((a, b) => b(a), v);
  }
  var createExtendTheme = (theme2) => {
    return function extendTheme2(...extensions) {
      let overrides = [...extensions];
      let activeTheme = extensions[extensions.length - 1];
      if (isChakraTheme(activeTheme) && overrides.length > 1) {
        overrides = overrides.slice(0, overrides.length - 1);
      } else {
        activeTheme = theme2;
      }
      return pipe2(
        ...overrides.map(
          (extension2) => (prevTheme) => isFunction3(extension2) ? extension2(prevTheme) : mergeThemeOverride(prevTheme, extension2)
        )
      )(activeTheme);
    };
  };
  var extendTheme = createExtendTheme(theme);
  var extendBaseTheme = createExtendTheme(baseTheme);
  function mergeThemeOverride(...overrides) {
    return (0, import_lodash5.default)({}, ...overrides, mergeThemeCustomizer);
  }
  function mergeThemeCustomizer(source, override, key, object) {
    if ((isFunction3(source) || isFunction3(override)) && Object.prototype.hasOwnProperty.call(object, key)) {
      return (...args) => {
        const sourceValue = isFunction3(source) ? source(...args) : source;
        const overrideValue = isFunction3(override) ? override(...args) : override;
        return (0, import_lodash5.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
      };
    }
    return void 0;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/theme-utils/dist/chunk-DFL6DXJX.mjs
  function withDefaultColorScheme({
    colorScheme,
    components: components2
  }) {
    return (theme2) => {
      let names = Object.keys(theme2.components || {});
      if (Array.isArray(components2)) {
        names = components2;
      } else if (isObject(components2)) {
        names = Object.keys(components2);
      }
      return mergeThemeOverride(theme2, {
        components: Object.fromEntries(
          names.map((componentName) => {
            const withColorScheme = {
              defaultProps: {
                colorScheme
              }
            };
            return [componentName, withColorScheme];
          })
        )
      });
    };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
  var import_lodash6 = __toESM(require_lodash(), 1);
  function omit2(object, keys3) {
    const result = {};
    Object.keys(object).forEach((key) => {
      if (keys3.includes(key))
        return;
      result[key] = object[key];
    });
    return result;
  }
  function get2(obj, path3, fallback, index2) {
    const key = typeof path3 === "string" ? path3.split(".") : [path3];
    for (index2 = 0; index2 < key.length; index2 += 1) {
      if (!obj)
        break;
      obj = obj[key[index2]];
    }
    return obj === void 0 ? fallback : obj;
  }
  var memoize2 = (fn) => {
    const cache = /* @__PURE__ */ new WeakMap();
    const memoizedFn = (obj, path3, fallback, index2) => {
      if (typeof obj === "undefined") {
        return fn(obj, path3, fallback);
      }
      if (!cache.has(obj)) {
        cache.set(obj, /* @__PURE__ */ new Map());
      }
      const map2 = cache.get(obj);
      if (map2.has(path3)) {
        return map2.get(path3);
      }
      const value = fn(obj, path3, fallback, index2);
      map2.set(path3, value);
      return value;
    };
    return memoizedFn;
  };
  var memoizedGet2 = memoize2(get2);
  function objectFilter(object, fn) {
    const result = {};
    Object.keys(object).forEach((key) => {
      const value = object[key];
      const shouldPass = fn(value, key, object);
      if (shouldPass) {
        result[key] = value;
      }
    });
    return result;
  }
  var filterUndefined = (object) => objectFilter(object, (val) => val !== null && val !== void 0);

  // ../ecopan_bot/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
  function isFunction4(value) {
    return typeof value === "function";
  }

  // ../ecopan_bot/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
  function runIfFn3(valueOrFn, ...args) {
    return isFunction4(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-T2VHL7RE.mjs
  var import_react9 = __toESM(require_react(), 1);
  var import_react_fast_compare = __toESM(require_react_fast_compare(), 1);
  function useStyleConfigImpl(themeKey, props = {}) {
    var _a7;
    const _a8 = props, { styleConfig: styleConfigProp } = _a8, rest = __objRest(_a8, ["styleConfig"]);
    const { theme: theme2, colorMode } = useChakra();
    const themeStyleConfig = themeKey ? memoizedGet2(theme2, `components.${themeKey}`) : void 0;
    const styleConfig = styleConfigProp || themeStyleConfig;
    const mergedProps = (0, import_lodash6.default)(
      { theme: theme2, colorMode },
      (_a7 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a7 : {},
      filterUndefined(omit2(rest, ["children"]))
    );
    const stylesRef = (0, import_react9.useRef)({});
    if (styleConfig) {
      const getStyles = resolveStyleConfig(styleConfig);
      const styles2 = getStyles(mergedProps);
      const isStyleEqual = (0, import_react_fast_compare.default)(stylesRef.current, styles2);
      if (!isStyleEqual) {
        stylesRef.current = styles2;
      }
    }
    return stylesRef.current;
  }
  function useStyleConfig(themeKey, props = {}) {
    return useStyleConfigImpl(themeKey, props);
  }
  function useMultiStyleConfig(themeKey, props = {}) {
    return useStyleConfigImpl(themeKey, props);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-NAGWYFCH.mjs
  var allPropNames = /* @__PURE__ */ new Set([
    ...propNames,
    "textStyle",
    "layerStyle",
    "apply",
    "noOfLines",
    "focusBorderColor",
    "errorBorderColor",
    "as",
    "__css",
    "css",
    "sx"
  ]);
  var validHTMLProps = /* @__PURE__ */ new Set([
    "htmlWidth",
    "htmlHeight",
    "htmlSize",
    "htmlTranslate"
  ]);
  function shouldForwardProp(prop) {
    return validHTMLProps.has(prop) || !allPropNames.has(prop);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/object-utils/dist/index.mjs
  function compact(object) {
    const clone = Object.assign({}, object);
    for (let key in clone) {
      if (clone[key] === void 0)
        delete clone[key];
    }
    return clone;
  }
  function assignAfter(target, ...sources) {
    if (target == null) {
      throw new TypeError("Cannot convert undefined or null to object");
    }
    const result = __spreadValues({}, target);
    for (const nextSource of sources) {
      if (nextSource == null)
        continue;
      for (const nextKey in nextSource) {
        if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey))
          continue;
        if (nextKey in result)
          delete result[nextKey];
        result[nextKey] = nextSource[nextKey];
      }
    }
    return result;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-E32MZNBA.mjs
  var import_styled = __toESM(require_emotion_styled_cjs(), 1);
  var import_react10 = __toESM(require_react(), 1);
  var _a6;
  var emotion_styled = (_a6 = import_styled.default.default) != null ? _a6 : import_styled.default;
  var toCSSObject = ({ baseStyle: baseStyle43 }) => (props) => {
    const _a7 = props, { theme: theme2, css: cssProp, __css, sx } = _a7, rest = __objRest(_a7, ["theme", "css", "__css", "sx"]);
    const styleProps2 = objectFilter(rest, (_, prop) => isStyleProp(prop));
    const finalBaseStyle = runIfFn3(baseStyle43, props);
    const finalStyles = assignAfter(
      {},
      __css,
      finalBaseStyle,
      filterUndefined(styleProps2),
      sx
    );
    const computedCSS = css2(finalStyles)(props.theme);
    return cssProp ? [computedCSS, cssProp] : computedCSS;
  };
  function styled(component, options) {
    const _a7 = options != null ? options : {}, { baseStyle: baseStyle43 } = _a7, styledOptions = __objRest(_a7, ["baseStyle"]);
    if (!styledOptions.shouldForwardProp) {
      styledOptions.shouldForwardProp = shouldForwardProp;
    }
    const styleObject = toCSSObject({ baseStyle: baseStyle43 });
    const Component2 = emotion_styled(
      component,
      styledOptions
    )(styleObject);
    const chakraComponent = import_react10.default.forwardRef(function ChakraComponent(props, ref) {
      const { colorMode, forced } = useColorMode();
      return import_react10.default.createElement(Component2, __spreadValues({
        ref,
        "data-theme": forced ? colorMode : void 0
      }, props));
    });
    return chakraComponent;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-3LE6AY5Q.mjs
  function factory() {
    const cache = /* @__PURE__ */ new Map();
    return new Proxy(styled, {
      apply(target, thisArg, argArray) {
        return styled(...argArray);
      },
      get(_, element4) {
        if (!cache.has(element4)) {
          cache.set(element4, styled(element4));
        }
        return cache.get(element4);
      }
    });
  }
  var chakra = factory();

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-QEVFQ4EU.mjs
  var import_react11 = __toESM(require_react(), 1);
  function forwardRef(component) {
    return (0, import_react11.forwardRef)(component);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
  var import_react12 = __toESM(require_react(), 1);
  function createContext3(options = {}) {
    const {
      strict = true,
      errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
      name
    } = options;
    const Context = (0, import_react12.createContext)(void 0);
    Context.displayName = name;
    function useContext11() {
      var _a7;
      const context = (0, import_react12.useContext)(Context);
      if (!context && strict) {
        const error2 = new Error(errorMessage);
        error2.name = "ContextError";
        (_a7 = Error.captureStackTrace) == null ? void 0 : _a7.call(Error, error2, useContext11);
        throw error2;
      }
      return context;
    }
    return [
      Context.Provider,
      useContext11,
      Context
    ];
  }

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/chunk-3ZTTLJBV.mjs
  var import_react13 = __toESM(require_emotion_react_cjs(), 1);
  var import_react14 = __toESM(require_react(), 1);
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  function ThemeProvider(props) {
    const { cssVarsRoot, theme: theme2, children } = props;
    const computedTheme = (0, import_react14.useMemo)(() => toCSSVar(theme2), [theme2]);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_react13.ThemeProvider, { theme: computedTheme, children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CSSVars, { root: cssVarsRoot }),
      children
    ] });
  }
  function CSSVars({ root: root3 = ":host, :root" }) {
    const selector2 = [root3, `[data-theme]`].join(",");
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_react13.Global, { styles: (theme2) => ({ [selector2]: theme2.__cssVars }) });
  }
  var [StylesProvider, useStyles] = createContext3({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
  });
  function createStylesContext(componentName) {
    return createContext3({
      name: `${componentName}StylesContext`,
      errorMessage: `useStyles: "styles" is undefined. Seems you forgot to wrap the components in "<${componentName} />" `
    });
  }
  function GlobalStyle() {
    const { colorMode } = useColorMode();
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      import_react13.Global,
      {
        styles: (theme2) => {
          const styleObjectOrFn = memoizedGet2(theme2, "styles.global");
          const globalStyles = runIfFn3(styleObjectOrFn, { theme: theme2, colorMode });
          if (!globalStyles)
            return void 0;
          const styles2 = css2(globalStyles)(theme2);
          return styles2;
        }
      }
    );
  }

  // ../ecopan_bot/node_modules/@chakra-ui/system/dist/index.mjs
  var import_react15 = __toESM(require_emotion_react_cjs(), 1);

  // ../ecopan_bot/node_modules/@chakra-ui/react-env/dist/chunk-23XYWYLU.mjs
  var import_react16 = __toESM(require_react(), 1);
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var EnvironmentContext = (0, import_react16.createContext)({
    getDocument() {
      return document;
    },
    getWindow() {
      return window;
    }
  });
  EnvironmentContext.displayName = "EnvironmentContext";
  function useEnvironment({ defer } = {}) {
    const [, forceUpdate] = (0, import_react16.useReducer)((c) => c + 1, 0);
    useSafeLayoutEffect(() => {
      if (!defer)
        return;
      forceUpdate();
    }, [defer]);
    return (0, import_react16.useContext)(EnvironmentContext);
  }
  function EnvironmentProvider(props) {
    const { children, environment: environmentProp, disabled } = props;
    const ref = (0, import_react16.useRef)(null);
    const context = (0, import_react16.useMemo)(() => {
      if (environmentProp)
        return environmentProp;
      return {
        getDocument: () => {
          var _a7, _b5;
          return (_b5 = (_a7 = ref.current) == null ? void 0 : _a7.ownerDocument) != null ? _b5 : document;
        },
        getWindow: () => {
          var _a7, _b5;
          return (_b5 = (_a7 = ref.current) == null ? void 0 : _a7.ownerDocument.defaultView) != null ? _b5 : window;
        }
      };
    }, [environmentProp]);
    const showSpan = !disabled || !environmentProp;
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(EnvironmentContext.Provider, { value: context, children: [
      children,
      showSpan && /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { id: "__chakra_env", hidden: true, ref })
    ] });
  }
  EnvironmentProvider.displayName = "EnvironmentProvider";

  // ../ecopan_bot/node_modules/@chakra-ui/provider/dist/chunk-5PBJXT35.mjs
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  var ChakraProvider = (props) => {
    const {
      children,
      colorModeManager,
      portalZIndex,
      resetScope,
      resetCSS = true,
      theme: theme2 = {},
      environment,
      cssVarsRoot,
      disableEnvironment
    } = props;
    const _children = /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
      EnvironmentProvider,
      {
        environment,
        disabled: disableEnvironment,
        children
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(ThemeProvider, { theme: theme2, cssVarsRoot, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
      ColorModeProvider,
      {
        colorModeManager,
        options: theme2.config,
        children: [
          resetCSS ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CSSReset, { scope: resetScope }) : /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CSSPolyfill, {}),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(GlobalStyle, {}),
          portalZIndex ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(PortalManager, { zIndex: portalZIndex, children: _children }) : _children
        ]
      }
    ) });
  };

  // ../ecopan_bot/node_modules/@chakra-ui/toast/dist/chunk-LQP773TK.mjs
  var findById = (arr, id4) => arr.find((toast) => toast.id === id4);
  function findToast(toasts, id4) {
    const position5 = getToastPosition(toasts, id4);
    const index2 = position5 ? toasts[position5].findIndex((toast) => toast.id === id4) : -1;
    return {
      position: position5,
      index: index2
    };
  }
  function getToastPosition(toasts, id4) {
    for (const [position5, values] of Object.entries(toasts)) {
      if (findById(values, id4)) {
        return position5;
      }
    }
  }
  function getToastStyle(position5) {
    const isRighty = position5.includes("right");
    const isLefty = position5.includes("left");
    let alignItems = "center";
    if (isRighty)
      alignItems = "flex-end";
    if (isLefty)
      alignItems = "flex-start";
    return {
      display: "flex",
      flexDirection: "column",
      alignItems
    };
  }
  function getToastListStyle(position5) {
    const isTopOrBottom = position5 === "top" || position5 === "bottom";
    const margin = isTopOrBottom ? "0 auto" : void 0;
    const top = position5.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
    const bottom = position5.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
    const right = !position5.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
    const left = !position5.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
    return {
      position: "fixed",
      zIndex: "var(--toast-z-index, 5500)",
      pointerEvents: "none",
      display: "flex",
      flexDirection: "column",
      margin,
      top,
      bottom,
      right,
      left
    };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
  var import_react18 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-callback-ref/dist/index.mjs
  var import_react17 = __toESM(require_react(), 1);
  function useCallbackRef(callback, deps = []) {
    const callbackRef = (0, import_react17.useRef)(callback);
    (0, import_react17.useEffect)(() => {
      callbackRef.current = callback;
    });
    return (0, import_react17.useCallback)((...args) => {
      var _a7;
      return (_a7 = callbackRef.current) == null ? void 0 : _a7.call(callbackRef, ...args);
    }, deps);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
  function useTimeout(callback, delay2) {
    const fn = useCallbackRef(callback);
    (0, import_react18.useEffect)(() => {
      if (delay2 == null)
        return void 0;
      let timeoutId = null;
      timeoutId = window.setTimeout(() => {
        fn();
      }, delay2);
      return () => {
        if (timeoutId) {
          window.clearTimeout(timeoutId);
        }
      };
    }, [delay2, fn]);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-update-effect/dist/index.mjs
  var import_react19 = __toESM(require_react(), 1);
  function useUpdateEffect(callback, deps) {
    const renderCycleRef = (0, import_react19.useRef)(false);
    const effectCycleRef = (0, import_react19.useRef)(false);
    (0, import_react19.useEffect)(() => {
      const mounted = renderCycleRef.current;
      const run = mounted && effectCycleRef.current;
      if (run) {
        return callback();
      }
      effectCycleRef.current = true;
    }, deps);
    (0, import_react19.useEffect)(() => {
      renderCycleRef.current = true;
      return () => {
        renderCycleRef.current = false;
      };
    }, []);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/index.mjs
  var React2 = __toESM(require_react(), 1);
  var import_react31 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
  var import_react20 = __toESM(require_react(), 1);
  var MotionConfigContext = (0, import_react20.createContext)({
    transformPagePoint: (p) => p,
    isStatic: false,
    reducedMotion: "never"
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
  var import_react21 = __toESM(require_react(), 1);
  var MotionContext = (0, import_react21.createContext)({});

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  var import_react25 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/PresenceContext.mjs
  var import_react22 = __toESM(require_react(), 1);
  var PresenceContext = (0, import_react22.createContext)(null);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var import_react23 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/is-browser.mjs
  var isBrowser = typeof document !== "undefined";

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var useIsomorphicLayoutEffect = isBrowser ? import_react23.useLayoutEffect : import_react23.useEffect;

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/LazyContext.mjs
  var import_react24 = __toESM(require_react(), 1);
  var LazyContext = (0, import_react24.createContext)({ strict: false });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  function useVisualElement(Component2, visualState, props, createVisualElement) {
    const { visualElement: parent } = (0, import_react25.useContext)(MotionContext);
    const lazyContext = (0, import_react25.useContext)(LazyContext);
    const presenceContext = (0, import_react25.useContext)(PresenceContext);
    const reducedMotionConfig = (0, import_react25.useContext)(MotionConfigContext).reducedMotion;
    const visualElementRef = (0, import_react25.useRef)();
    createVisualElement = createVisualElement || lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) {
      visualElementRef.current = createVisualElement(Component2, {
        visualState,
        parent,
        props,
        presenceContext,
        blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
        reducedMotionConfig
      });
    }
    const visualElement = visualElementRef.current;
    (0, import_react25.useInsertionEffect)(() => {
      visualElement && visualElement.update(props, presenceContext);
    });
    useIsomorphicLayoutEffect(() => {
      visualElement && visualElement.render();
    });
    (0, import_react25.useEffect)(() => {
      visualElement && visualElement.updateFeatures();
    });
    const useAnimateChangesEffect = window.HandoffAppearAnimations ? useIsomorphicLayoutEffect : import_react25.useEffect;
    useAnimateChangesEffect(() => {
      if (visualElement && visualElement.animationState) {
        visualElement.animationState.animateChanges();
      }
    });
    return visualElement;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  var import_react26 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
  function isRefObject(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  function useMotionRef(visualState, visualElement, externalRef) {
    return (0, import_react26.useCallback)(
      (instance) => {
        instance && visualState.mount && visualState.mount(instance);
        if (visualElement) {
          instance ? visualElement.mount(instance) : visualElement.unmount();
        }
        if (externalRef) {
          if (typeof externalRef === "function") {
            externalRef(instance);
          } else if (isRefObject(externalRef)) {
            externalRef.current = instance;
          }
        }
      },
      [visualElement]
    );
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  var import_react27 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
  function isVariantLabel(v) {
    return typeof v === "string" || Array.isArray(v);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
  function isAnimationControls(v) {
    return typeof v === "object" && typeof v.start === "function";
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
  var variantPriorityOrder = [
    "animate",
    "whileInView",
    "whileFocus",
    "whileHover",
    "whileTap",
    "whileDrag",
    "exit"
  ];
  var variantProps = ["initial", ...variantPriorityOrder];

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
  function isControllingVariants(props) {
    return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
  }
  function isVariantNode(props) {
    return Boolean(isControllingVariants(props) || props.variants);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  function getCurrentTreeVariants(props, context) {
    if (isControllingVariants(props)) {
      const { initial, animate } = props;
      return {
        initial: initial === false || isVariantLabel(initial) ? initial : void 0,
        animate: isVariantLabel(animate) ? animate : void 0
      };
    }
    return props.inherit !== false ? context : {};
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  function useCreateMotionContext(props) {
    const { initial, animate } = getCurrentTreeVariants(props, (0, import_react27.useContext)(MotionContext));
    return (0, import_react27.useMemo)(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
  }
  function variantLabelsAsDependency(prop) {
    return Array.isArray(prop) ? prop.join(" ") : prop;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/definitions.mjs
  var featureProps = {
    animation: [
      "animate",
      "variants",
      "whileHover",
      "whileTap",
      "exit",
      "whileInView",
      "whileFocus",
      "whileDrag"
    ],
    exit: ["exit"],
    drag: ["drag", "dragControls"],
    focus: ["whileFocus"],
    hover: ["whileHover", "onHoverStart", "onHoverEnd"],
    tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
    pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
    inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
    layout: ["layout", "layoutId"]
  };
  var featureDefinitions = {};
  for (const key in featureProps) {
    featureDefinitions[key] = {
      isEnabled: (props) => featureProps[key].some((name) => !!props[name])
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/load-features.mjs
  function loadFeatures(features) {
    for (const key in features) {
      featureDefinitions[key] = __spreadValues(__spreadValues({}, featureDefinitions[key]), features[key]);
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-constant.mjs
  var import_react28 = __toESM(require_react(), 1);
  function useConstant(init) {
    const ref = (0, import_react28.useRef)(null);
    if (ref.current === null) {
      ref.current = init();
    }
    return ref.current;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/node/state.mjs
  var globalProjectionState = {
    hasAnimatedSinceResize: true,
    hasEverUpdated: false
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/node/id.mjs
  var id = 1;
  function useProjectionId() {
    return useConstant(() => {
      if (globalProjectionState.hasEverUpdated) {
        return id++;
      }
    });
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
  var import_react29 = __toESM(require_react(), 1);
  var LayoutGroupContext = (0, import_react29.createContext)({});

  // ../ecopan_bot/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
  var import_react30 = __toESM(require_react(), 1);
  var SwitchLayoutGroupContext = (0, import_react30.createContext)({});

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
  var motionComponentSymbol = Symbol.for("motionComponentSymbol");

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/index.mjs
  function createMotionComponent({ preloadedFeatures: preloadedFeatures2, createVisualElement, useRender, useVisualState, Component: Component2 }) {
    preloadedFeatures2 && loadFeatures(preloadedFeatures2);
    function MotionComponent(props, externalRef) {
      let MeasureLayout2;
      const configAndProps = __spreadProps(__spreadValues(__spreadValues({}, (0, import_react31.useContext)(MotionConfigContext)), props), {
        layoutId: useLayoutId(props)
      });
      const { isStatic } = configAndProps;
      const context = useCreateMotionContext(props);
      const projectionId = isStatic ? void 0 : useProjectionId();
      const visualState = useVisualState(props, isStatic);
      if (!isStatic && isBrowser) {
        context.visualElement = useVisualElement(Component2, visualState, configAndProps, createVisualElement);
        const initialLayoutGroupConfig = (0, import_react31.useContext)(SwitchLayoutGroupContext);
        const isStrict = (0, import_react31.useContext)(LazyContext).strict;
        if (context.visualElement) {
          MeasureLayout2 = context.visualElement.loadFeatures(
            configAndProps,
            isStrict,
            preloadedFeatures2,
            projectionId,
            initialLayoutGroupConfig
          );
        }
      }
      return React2.createElement(
        MotionContext.Provider,
        { value: context },
        MeasureLayout2 && context.visualElement ? React2.createElement(MeasureLayout2, __spreadValues({ visualElement: context.visualElement }, configAndProps)) : null,
        useRender(Component2, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)
      );
    }
    const ForwardRefComponent = (0, import_react31.forwardRef)(MotionComponent);
    ForwardRefComponent[motionComponentSymbol] = Component2;
    return ForwardRefComponent;
  }
  function useLayoutId({ layoutId }) {
    const layoutGroupId = (0, import_react31.useContext)(LayoutGroupContext).id;
    return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
  function createMotionProxy(createConfig) {
    function custom(Component2, customMotionComponentConfig = {}) {
      return createMotionComponent(createConfig(Component2, customMotionComponentConfig));
    }
    if (typeof Proxy === "undefined") {
      return custom;
    }
    const componentCache = /* @__PURE__ */ new Map();
    return new Proxy(custom, {
      get: (_target, key) => {
        if (!componentCache.has(key)) {
          componentCache.set(key, custom(key));
        }
        return componentCache.get(key);
      }
    });
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
  var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "switch",
    "symbol",
    "svg",
    "text",
    "tspan",
    "use",
    "view"
  ];

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  function isSVGComponent(Component2) {
    if (typeof Component2 !== "string" || Component2.includes("-")) {
      return false;
    } else if (lowercaseSVGElements.indexOf(Component2) > -1 || /[A-Z]/.test(Component2)) {
      return true;
    }
    return false;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  var import_react34 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/use-props.mjs
  var import_react32 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
  var scaleCorrectors = {};
  function addScaleCorrector(correctors) {
    Object.assign(scaleCorrectors, correctors);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
  var transformPropOrder = [
    "transformPerspective",
    "x",
    "y",
    "z",
    "translateX",
    "translateY",
    "translateZ",
    "scale",
    "scaleX",
    "scaleY",
    "rotate",
    "rotateX",
    "rotateY",
    "rotateZ",
    "skew",
    "skewX",
    "skewY"
  ];
  var transformProps = new Set(transformPropOrder);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  function isForcedMotionValue(key, { layout: layout3, layoutId }) {
    return transformProps.has(key) || key.startsWith("origin") || (layout3 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
  var isMotionValue = (value) => Boolean(value && value.getVelocity);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
  var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
  };
  var numTransforms = transformPropOrder.length;
  function buildTransform(transform2, { enableHardwareAcceleration = true, allowTransformNone = true }, transformIsDefault, transformTemplate2) {
    let transformString = "";
    for (let i = 0; i < numTransforms; i++) {
      const key = transformPropOrder[i];
      if (transform2[key] !== void 0) {
        const transformName = translateAlias[key] || key;
        transformString += `${transformName}(${transform2[key]}) `;
      }
    }
    if (enableHardwareAcceleration && !transform2.z) {
      transformString += "translateZ(0)";
    }
    transformString = transformString.trim();
    if (transformTemplate2) {
      transformString = transformTemplate2(transform2, transformIsDefault ? "" : transformString);
    } else if (allowTransformNone && transformIsDefault) {
      transformString = "none";
    }
    return transformString;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
  var checkStringStartsWith = (token) => (key) => typeof key === "string" && key.startsWith(token);
  var isCSSVariableName = checkStringStartsWith("--");
  var isCSSVariableToken = checkStringStartsWith("var(--");

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
  var getValueAsType = (value, type) => {
    return type && typeof value === "number" ? type.transform(value) : value;
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/clamp.mjs
  var clamp = (min, max, v) => Math.min(Math.max(v, min), max);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
  var number = {
    test: (v) => typeof v === "number",
    parse: parseFloat,
    transform: (v) => v
  };
  var alpha = __spreadProps(__spreadValues({}, number), {
    transform: (v) => clamp(0, 1, v)
  });
  var scale = __spreadProps(__spreadValues({}, number), {
    default: 1
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/utils.mjs
  var sanitize = (v) => Math.round(v * 1e5) / 1e5;
  var floatRegex = /(-)?([\d]*\.?[\d])+/g;
  var colorRegex = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
  var singleColorRegex = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
  function isString(v) {
    return typeof v === "string";
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
  var createUnitType = (unit) => ({
    test: (v) => isString(v) && v.endsWith(unit) && v.split(" ").length === 1,
    parse: parseFloat,
    transform: (v) => `${v}${unit}`
  });
  var degrees = createUnitType("deg");
  var percent = createUnitType("%");
  var px2 = createUnitType("px");
  var vh = createUnitType("vh");
  var vw = createUnitType("vw");
  var progressPercentage = __spreadProps(__spreadValues({}, percent), {
    parse: (v) => percent.parse(v) / 100,
    transform: (v) => percent.transform(v * 100)
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
  var int = __spreadProps(__spreadValues({}, number), {
    transform: Math.round
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  var numberValueTypes = {
    borderWidth: px2,
    borderTopWidth: px2,
    borderRightWidth: px2,
    borderBottomWidth: px2,
    borderLeftWidth: px2,
    borderRadius: px2,
    radius: px2,
    borderTopLeftRadius: px2,
    borderTopRightRadius: px2,
    borderBottomRightRadius: px2,
    borderBottomLeftRadius: px2,
    width: px2,
    maxWidth: px2,
    height: px2,
    maxHeight: px2,
    size: px2,
    top: px2,
    right: px2,
    bottom: px2,
    left: px2,
    padding: px2,
    paddingTop: px2,
    paddingRight: px2,
    paddingBottom: px2,
    paddingLeft: px2,
    margin: px2,
    marginTop: px2,
    marginRight: px2,
    marginBottom: px2,
    marginLeft: px2,
    rotate: degrees,
    rotateX: degrees,
    rotateY: degrees,
    rotateZ: degrees,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees,
    skewX: degrees,
    skewY: degrees,
    distance: px2,
    translateX: px2,
    translateY: px2,
    translateZ: px2,
    x: px2,
    y: px2,
    z: px2,
    perspective: px2,
    transformPerspective: px2,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px2,
    zIndex: int,
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  function buildHTMLStyles(state2, latestValues, options, transformTemplate2) {
    const { style: style2, vars: vars2, transform: transform2, transformOrigin } = state2;
    let hasTransform2 = false;
    let hasTransformOrigin = false;
    let transformIsNone = true;
    for (const key in latestValues) {
      const value = latestValues[key];
      if (isCSSVariableName(key)) {
        vars2[key] = value;
        continue;
      }
      const valueType = numberValueTypes[key];
      const valueAsType = getValueAsType(value, valueType);
      if (transformProps.has(key)) {
        hasTransform2 = true;
        transform2[key] = valueAsType;
        if (!transformIsNone)
          continue;
        if (value !== (valueType.default || 0))
          transformIsNone = false;
      } else if (key.startsWith("origin")) {
        hasTransformOrigin = true;
        transformOrigin[key] = valueAsType;
      } else {
        style2[key] = valueAsType;
      }
    }
    if (!latestValues.transform) {
      if (hasTransform2 || transformTemplate2) {
        style2.transform = buildTransform(state2.transform, options, transformIsNone, transformTemplate2);
      } else if (style2.transform) {
        style2.transform = "none";
      }
    }
    if (hasTransformOrigin) {
      const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
      style2.transformOrigin = `${originX} ${originY} ${originZ}`;
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
  var createHtmlRenderState = () => ({
    style: {},
    transform: {},
    transformOrigin: {},
    vars: {}
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/use-props.mjs
  function copyRawValuesOnly(target, source, props) {
    for (const key in source) {
      if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
        target[key] = source[key];
      }
    }
  }
  function useInitialMotionValues({ transformTemplate: transformTemplate2 }, visualState, isStatic) {
    return (0, import_react32.useMemo)(() => {
      const state2 = createHtmlRenderState();
      buildHTMLStyles(state2, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate2);
      return Object.assign({}, state2.vars, state2.style);
    }, [visualState]);
  }
  function useStyle(props, visualState, isStatic) {
    const styleProp = props.style || {};
    const style2 = {};
    copyRawValuesOnly(style2, styleProp, props);
    Object.assign(style2, useInitialMotionValues(props, visualState, isStatic));
    return props.transformValues ? props.transformValues(style2) : style2;
  }
  function useHTMLProps(props, visualState, isStatic) {
    const htmlProps = {};
    const style2 = useStyle(props, visualState, isStatic);
    if (props.drag && props.dragListener !== false) {
      htmlProps.draggable = false;
      style2.userSelect = style2.WebkitUserSelect = style2.WebkitTouchCallout = "none";
      style2.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
    }
    if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
      htmlProps.tabIndex = 0;
    }
    htmlProps.style = style2;
    return htmlProps;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
  var validMotionProps = /* @__PURE__ */ new Set([
    "animate",
    "exit",
    "variants",
    "initial",
    "style",
    "values",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "onLayoutAnimationStart",
    "onLayoutAnimationComplete",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "_dragX",
    "_dragY",
    "onHoverStart",
    "onHoverEnd",
    "onViewportEnter",
    "onViewportLeave",
    "ignoreStrict",
    "viewport"
  ]);
  function isValidMotionProp(key) {
    return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || validMotionProps.has(key);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  var shouldForward = (key) => !isValidMotionProp(key);
  function loadExternalIsValidProp(isValidProp) {
    if (!isValidProp)
      return;
    shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
  }
  try {
    loadExternalIsValidProp(require_is_prop_valid_browser_cjs().default);
  } catch (_a7) {
  }
  function filterProps(props, isDom, forwardMotionProps) {
    const filteredProps = {};
    for (const key in props) {
      if (key === "values" && typeof props.values === "object")
        continue;
      if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  var import_react33 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
  function calcOrigin(origin, offset, size2) {
    return typeof origin === "string" ? origin : px2.transform(offset + size2 * origin);
  }
  function calcSVGTransformOrigin(dimensions, originX, originY) {
    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return `${pxOriginX} ${pxOriginY}`;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
  var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
  };
  var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
  };
  function buildSVGPath(attrs, length, spacing2 = 1, offset = 0, useDashCase = true) {
    attrs.pathLength = 1;
    const keys3 = useDashCase ? dashKeys : camelKeys;
    attrs[keys3.offset] = px2.transform(-offset);
    const pathLength = px2.transform(length);
    const pathSpacing = px2.transform(spacing2);
    attrs[keys3.array] = `${pathLength} ${pathSpacing}`;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  function buildSVGAttrs(state2, _a7, options, isSVGTag2, transformTemplate2) {
    var _b5 = _a7, {
      attrX,
      attrY,
      originX,
      originY,
      pathLength,
      pathSpacing = 1,
      pathOffset = 0
    } = _b5, latest = __objRest(_b5, [
      "attrX",
      "attrY",
      "originX",
      "originY",
      "pathLength",
      "pathSpacing",
      "pathOffset"
    ]);
    buildHTMLStyles(state2, latest, options, transformTemplate2);
    if (isSVGTag2) {
      if (state2.style.viewBox) {
        state2.attrs.viewBox = state2.style.viewBox;
      }
      return;
    }
    state2.attrs = state2.style;
    state2.style = {};
    const { attrs, style: style2, dimensions } = state2;
    if (attrs.transform) {
      if (dimensions)
        style2.transform = attrs.transform;
      delete attrs.transform;
    }
    if (dimensions && (originX !== void 0 || originY !== void 0 || style2.transform)) {
      style2.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
    }
    if (attrX !== void 0)
      attrs.x = attrX;
    if (attrY !== void 0)
      attrs.y = attrY;
    if (pathLength !== void 0) {
      buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
  var createSvgRenderState = () => __spreadProps(__spreadValues({}, createHtmlRenderState()), {
    attrs: {}
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
  var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  function useSVGProps(props, visualState, _isStatic, Component2) {
    const visualProps = (0, import_react33.useMemo)(() => {
      const state2 = createSvgRenderState();
      buildSVGAttrs(state2, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component2), props.transformTemplate);
      return __spreadProps(__spreadValues({}, state2.attrs), {
        style: __spreadValues({}, state2.style)
      });
    }, [visualState]);
    if (props.style) {
      const rawStyles = {};
      copyRawValuesOnly(rawStyles, props.style, props);
      visualProps.style = __spreadValues(__spreadValues({}, rawStyles), visualProps.style);
    }
    return visualProps;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  function createUseRender(forwardMotionProps = false) {
    const useRender = (Component2, props, projectionId, ref, { latestValues }, isStatic) => {
      const useVisualProps = isSVGComponent(Component2) ? useSVGProps : useHTMLProps;
      const visualProps = useVisualProps(props, latestValues, isStatic, Component2);
      const filteredProps = filterProps(props, typeof Component2 === "string", forwardMotionProps);
      const elementProps = __spreadProps(__spreadValues(__spreadValues({}, filteredProps), visualProps), {
        ref
      });
      const { children } = props;
      const renderedChildren = (0, import_react34.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
      if (projectionId) {
        elementProps["data-projection-id"] = projectionId;
      }
      return (0, import_react34.createElement)(Component2, __spreadProps(__spreadValues({}, elementProps), {
        children: renderedChildren
      }));
    };
    return useRender;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
  var camelToDash = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/utils/render.mjs
  function renderHTML(element4, { style: style2, vars: vars2 }, styleProp, projection) {
    Object.assign(element4.style, style2, projection && projection.getProjectionStyles(styleProp));
    for (const key in vars2) {
      element4.style.setProperty(key, vars2[key]);
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
  var camelCaseAttributes = /* @__PURE__ */ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform",
    "pathLength",
    "startOffset",
    "textLength",
    "lengthAdjust"
  ]);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  function renderSVG(element4, renderState, _styleProp, projection) {
    renderHTML(element4, renderState, void 0, projection);
    for (const key in renderState.attrs) {
      element4.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps(props, prevProps) {
    const { style: style2 } = props;
    const newValues = {};
    for (const key in style2) {
      if (isMotionValue(style2[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props)) {
        newValues[key] = style2[key];
      }
    }
    return newValues;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps2(props, prevProps) {
    const newValues = scrapeMotionValuesFromProps(props, prevProps);
    for (const key in props) {
      if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
        const targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
        newValues[targetKey] = props[key];
      }
    }
    return newValues;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  var import_react35 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
  function resolveVariantFromProps(props, definition2, custom, currentValues = {}, currentVelocity = {}) {
    if (typeof definition2 === "function") {
      definition2 = definition2(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
    }
    if (typeof definition2 === "string") {
      definition2 = props.variants && props.variants[definition2];
    }
    if (typeof definition2 === "function") {
      definition2 = definition2(custom !== void 0 ? custom : props.custom, currentValues, currentVelocity);
    }
    return definition2;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
  var isKeyframesTarget = (v) => {
    return Array.isArray(v);
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  var isCustomValue = (v) => {
    return Boolean(v && typeof v === "object" && v.mix && v.toValue);
  };
  var resolveFinalValueInKeyframes = (v) => {
    return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  function resolveMotionValue(value) {
    const unwrappedValue = isMotionValue(value) ? value.get() : value;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onMount }, props, context, presenceContext) {
    const state2 = {
      latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
      renderState: createRenderState()
    };
    if (onMount) {
      state2.mount = (instance) => onMount(props, instance, state2);
    }
    return state2;
  }
  var makeUseVisualState = (config2) => (props, isStatic) => {
    const context = (0, import_react35.useContext)(MotionContext);
    const presenceContext = (0, import_react35.useContext)(PresenceContext);
    const make = () => makeState(config2, props, context, presenceContext);
    return isStatic ? make() : useConstant(make);
  };
  function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    const values = {};
    const motionValues = scrapeMotionValues(props, {});
    for (const key in motionValues) {
      values[key] = resolveMotionValue(motionValues[key]);
    }
    let { initial, animate } = props;
    const isControllingVariants$1 = isControllingVariants(props);
    const isVariantNode$1 = isVariantNode(props);
    if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
      if (initial === void 0)
        initial = context.initial;
      if (animate === void 0)
        animate = context.animate;
    }
    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
    const variantToSet = isInitialAnimationBlocked ? animate : initial;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
      const list4 = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
      list4.forEach((definition2) => {
        const resolved = resolveVariantFromProps(props, definition2);
        if (!resolved)
          return;
        const _a7 = resolved, { transitionEnd, transition: transition3 } = _a7, target = __objRest(_a7, ["transitionEnd", "transition"]);
        for (const key in target) {
          let valueTarget = target[key];
          if (Array.isArray(valueTarget)) {
            const index2 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
            valueTarget = valueTarget[index2];
          }
          if (valueTarget !== null) {
            values[key] = valueTarget;
          }
        }
        for (const key in transitionEnd)
          values[key] = transitionEnd[key];
      });
    }
    return values;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  var svgMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      createRenderState: createSvgRenderState,
      onMount: (props, instance, { renderState, latestValues }) => {
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);
        renderSVG(instance, renderState);
      }
    })
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/config-motion.mjs
  var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps,
      createRenderState: createHtmlRenderState
    })
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
  function createDomMotionConfig(Component2, { forwardMotionProps = false }, preloadedFeatures2, createVisualElement) {
    const baseConfig = isSVGComponent(Component2) ? svgMotionConfig : htmlMotionConfig;
    return __spreadProps(__spreadValues({}, baseConfig), {
      preloadedFeatures: preloadedFeatures2,
      useRender: createUseRender(forwardMotionProps),
      createVisualElement,
      Component: Component2
    });
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/events/add-dom-event.mjs
  function addDomEvent(target, eventName, handler, options = { passive: true }) {
    target.addEventListener(eventName, handler, options);
    return () => target.removeEventListener(eventName, handler);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs
  var isPrimaryPointer = (event) => {
    if (event.pointerType === "mouse") {
      return typeof event.button !== "number" || event.button <= 0;
    } else {
      return event.isPrimary !== false;
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/events/event-info.mjs
  function extractEventInfo(event, pointType = "page") {
    return {
      point: {
        x: event[pointType + "X"],
        y: event[pointType + "Y"]
      }
    };
  }
  var addPointerInfo = (handler) => {
    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
  function addPointerEvent(target, eventName, handler, options) {
    return addDomEvent(target, eventName, addPointerInfo(handler), options);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/pipe.mjs
  var combineFunctions = (a, b) => (v) => b(a(v));
  var pipe4 = (...transformers) => transformers.reduce(combineFunctions);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
  function createLock(name) {
    let lock = null;
    return () => {
      const openLock = () => {
        lock = null;
      };
      if (lock === null) {
        lock = name;
        return openLock;
      }
      return false;
    };
  }
  var globalHorizontalLock = createLock("dragHorizontal");
  var globalVerticalLock = createLock("dragVertical");
  function getGlobalLock(drag2) {
    let lock = false;
    if (drag2 === "y") {
      lock = globalVerticalLock();
    } else if (drag2 === "x") {
      lock = globalHorizontalLock();
    } else {
      const openHorizontal = globalHorizontalLock();
      const openVertical = globalVerticalLock();
      if (openHorizontal && openVertical) {
        lock = () => {
          openHorizontal();
          openVertical();
        };
      } else {
        if (openHorizontal)
          openHorizontal();
        if (openVertical)
          openVertical();
      }
    }
    return lock;
  }
  function isDragActive() {
    const openGestureLock = getGlobalLock(true);
    if (!openGestureLock)
      return true;
    openGestureLock();
    return false;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/Feature.mjs
  var Feature = class {
    constructor(node2) {
      this.isMounted = false;
      this.node = node2;
    }
    update() {
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/frameloop/create-render-step.mjs
  function createRenderStep(runNextFrame2) {
    let toRun = [];
    let toRunNextFrame = [];
    let numToRun = 0;
    let isProcessing = false;
    let flushNextFrame = false;
    const toKeepAlive = /* @__PURE__ */ new WeakSet();
    const step = {
      schedule: (callback, keepAlive = false, immediate = false) => {
        const addToCurrentFrame = immediate && isProcessing;
        const buffer2 = addToCurrentFrame ? toRun : toRunNextFrame;
        if (keepAlive)
          toKeepAlive.add(callback);
        if (buffer2.indexOf(callback) === -1) {
          buffer2.push(callback);
          if (addToCurrentFrame && isProcessing)
            numToRun = toRun.length;
        }
        return callback;
      },
      cancel: (callback) => {
        const index2 = toRunNextFrame.indexOf(callback);
        if (index2 !== -1)
          toRunNextFrame.splice(index2, 1);
        toKeepAlive.delete(callback);
      },
      process: (frameData2) => {
        if (isProcessing) {
          flushNextFrame = true;
          return;
        }
        isProcessing = true;
        [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
        toRunNextFrame.length = 0;
        numToRun = toRun.length;
        if (numToRun) {
          for (let i = 0; i < numToRun; i++) {
            const callback = toRun[i];
            callback(frameData2);
            if (toKeepAlive.has(callback)) {
              step.schedule(callback);
              runNextFrame2();
            }
          }
        }
        isProcessing = false;
        if (flushNextFrame) {
          flushNextFrame = false;
          step.process(frameData2);
        }
      }
    };
    return step;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/frameloop/data.mjs
  var frameData = {
    delta: 0,
    timestamp: 0,
    isProcessing: false
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/frameloop/index.mjs
  var maxElapsed = 40;
  var useDefaultElapsed = true;
  var runNextFrame = false;
  var stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
  ];
  var steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(() => runNextFrame = true);
    return acc;
  }, {});
  var sync = stepsOrder.reduce((acc, key) => {
    const step = steps[key];
    acc[key] = (process2, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        startLoop();
      return step.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  var cancelSync = stepsOrder.reduce((acc, key) => {
    acc[key] = steps[key].cancel;
    return acc;
  }, {});
  var flushSync = stepsOrder.reduce((acc, key) => {
    acc[key] = () => steps[key].process(frameData);
    return acc;
  }, {});
  var processStep = (stepId) => steps[stepId].process(frameData);
  var processFrame = (timestamp) => {
    runNextFrame = false;
    frameData.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);
    frameData.timestamp = timestamp;
    frameData.isProcessing = true;
    stepsOrder.forEach(processStep);
    frameData.isProcessing = false;
    if (runNextFrame) {
      useDefaultElapsed = false;
      requestAnimationFrame(processFrame);
    }
  };
  var startLoop = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!frameData.isProcessing)
      requestAnimationFrame(processFrame);
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/hover.mjs
  function addHoverEvent(node2, isActive) {
    const eventName = "pointer" + (isActive ? "enter" : "leave");
    const callbackName = "onHover" + (isActive ? "Start" : "End");
    const handleEvent = (event, info) => {
      if (event.type === "touch" || isDragActive())
        return;
      const props = node2.getProps();
      if (node2.animationState && props.whileHover) {
        node2.animationState.setActive("whileHover", isActive);
      }
      if (props[callbackName]) {
        sync.update(() => props[callbackName](event, info));
      }
    };
    return addPointerEvent(node2.current, eventName, handleEvent, {
      passive: !node2.getProps()[callbackName]
    });
  }
  var HoverGesture = class extends Feature {
    mount() {
      this.unmount = pipe4(addHoverEvent(this.node, true), addHoverEvent(this.node, false));
    }
    unmount() {
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/focus.mjs
  var FocusGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.isActive = false;
    }
    onFocus() {
      let isFocusVisible = false;
      try {
        isFocusVisible = this.node.current.matches(":focus-visible");
      } catch (e) {
        isFocusVisible = true;
      }
      if (!isFocusVisible || !this.node.animationState)
        return;
      this.node.animationState.setActive("whileFocus", true);
      this.isActive = true;
    }
    onBlur() {
      if (!this.isActive || !this.node.animationState)
        return;
      this.node.animationState.setActive("whileFocus", false);
      this.isActive = false;
    }
    mount() {
      this.unmount = pipe4(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
    }
    unmount() {
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
  var isNodeOrChild = (parent, child) => {
    if (!child) {
      return false;
    } else if (parent === child) {
      return true;
    } else {
      return isNodeOrChild(parent, child.parentElement);
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/noop.mjs
  var noop3 = (any) => any;

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/press.mjs
  function fireSyntheticPointerEvent(name, handler) {
    if (!handler)
      return;
    const syntheticPointerEvent = new PointerEvent("pointer" + name);
    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));
  }
  var PressGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.removeStartListeners = noop3;
      this.removeEndListeners = noop3;
      this.removeAccessibleListeners = noop3;
      this.startPointerPress = (startEvent, startInfo) => {
        this.removeEndListeners();
        if (this.isPressing)
          return;
        const props = this.node.getProps();
        const endPointerPress = (endEvent, endInfo) => {
          if (!this.checkPressEnd())
            return;
          const { onTap, onTapCancel } = this.node.getProps();
          sync.update(() => {
            !isNodeOrChild(this.node.current, endEvent.target) ? onTapCancel && onTapCancel(endEvent, endInfo) : onTap && onTap(endEvent, endInfo);
          });
        };
        const removePointerUpListener = addPointerEvent(window, "pointerup", endPointerPress, { passive: !(props.onTap || props["onPointerUp"]) });
        const removePointerCancelListener = addPointerEvent(window, "pointercancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), { passive: !(props.onTapCancel || props["onPointerCancel"]) });
        this.removeEndListeners = pipe4(removePointerUpListener, removePointerCancelListener);
        this.startPress(startEvent, startInfo);
      };
      this.startAccessiblePress = () => {
        const handleKeydown = (keydownEvent) => {
          if (keydownEvent.key !== "Enter" || this.isPressing)
            return;
          const handleKeyup = (keyupEvent) => {
            if (keyupEvent.key !== "Enter" || !this.checkPressEnd())
              return;
            fireSyntheticPointerEvent("up", (event, info) => {
              const { onTap } = this.node.getProps();
              if (onTap) {
                sync.update(() => onTap(event, info));
              }
            });
          };
          this.removeEndListeners();
          this.removeEndListeners = addDomEvent(this.node.current, "keyup", handleKeyup);
          fireSyntheticPointerEvent("down", (event, info) => {
            this.startPress(event, info);
          });
        };
        const removeKeydownListener = addDomEvent(this.node.current, "keydown", handleKeydown);
        const handleBlur = () => {
          if (!this.isPressing)
            return;
          fireSyntheticPointerEvent("cancel", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));
        };
        const removeBlurListener = addDomEvent(this.node.current, "blur", handleBlur);
        this.removeAccessibleListeners = pipe4(removeKeydownListener, removeBlurListener);
      };
    }
    startPress(event, info) {
      this.isPressing = true;
      const { onTapStart, whileTap } = this.node.getProps();
      if (whileTap && this.node.animationState) {
        this.node.animationState.setActive("whileTap", true);
      }
      if (onTapStart) {
        sync.update(() => onTapStart(event, info));
      }
    }
    checkPressEnd() {
      this.removeEndListeners();
      this.isPressing = false;
      const props = this.node.getProps();
      if (props.whileTap && this.node.animationState) {
        this.node.animationState.setActive("whileTap", false);
      }
      return !isDragActive();
    }
    cancelPress(event, info) {
      if (!this.checkPressEnd())
        return;
      const { onTapCancel } = this.node.getProps();
      if (onTapCancel) {
        sync.update(() => onTapCancel(event, info));
      }
    }
    mount() {
      const props = this.node.getProps();
      const removePointerListener = addPointerEvent(this.node.current, "pointerdown", this.startPointerPress, { passive: !(props.onTapStart || props["onPointerStart"]) });
      const removeFocusListener = addDomEvent(this.node.current, "focus", this.startAccessiblePress);
      this.removeStartListeners = pipe4(removePointerListener, removeFocusListener);
    }
    unmount() {
      this.removeStartListeners();
      this.removeEndListeners();
      this.removeAccessibleListeners();
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
  var observerCallbacks = /* @__PURE__ */ new WeakMap();
  var observers = /* @__PURE__ */ new WeakMap();
  var fireObserverCallback = (entry) => {
    const callback = observerCallbacks.get(entry.target);
    callback && callback(entry);
  };
  var fireAllObserverCallbacks = (entries) => {
    entries.forEach(fireObserverCallback);
  };
  function initIntersectionObserver(_a7) {
    var _b5 = _a7, { root: root3 } = _b5, options = __objRest(_b5, ["root"]);
    const lookupRoot = root3 || document;
    if (!observers.has(lookupRoot)) {
      observers.set(lookupRoot, {});
    }
    const rootObservers = observers.get(lookupRoot);
    const key = JSON.stringify(options);
    if (!rootObservers[key]) {
      rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __spreadValues({ root: root3 }, options));
    }
    return rootObservers[key];
  }
  function observeIntersection(element4, options, callback) {
    const rootInteresectionObserver = initIntersectionObserver(options);
    observerCallbacks.set(element4, callback);
    rootInteresectionObserver.observe(element4);
    return () => {
      observerCallbacks.delete(element4);
      rootInteresectionObserver.unobserve(element4);
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
  var thresholdNames = {
    some: 0,
    all: 1
  };
  var InViewFeature = class extends Feature {
    constructor() {
      super(...arguments);
      this.hasEnteredView = false;
      this.isInView = false;
    }
    startObserver() {
      this.unmount();
      const { viewport = {} } = this.node.getProps();
      const { root: root3, margin: rootMargin, amount = "some", once: once2 } = viewport;
      const options = {
        root: root3 ? root3.current : void 0,
        rootMargin,
        threshold: typeof amount === "number" ? amount : thresholdNames[amount]
      };
      const onIntersectionUpdate = (entry) => {
        const { isIntersecting } = entry;
        if (this.isInView === isIntersecting)
          return;
        this.isInView = isIntersecting;
        if (once2 && !isIntersecting && this.hasEnteredView) {
          return;
        } else if (isIntersecting) {
          this.hasEnteredView = true;
        }
        if (this.node.animationState) {
          this.node.animationState.setActive("whileInView", isIntersecting);
        }
        const { onViewportEnter, onViewportLeave } = this.node.getProps();
        const callback = isIntersecting ? onViewportEnter : onViewportLeave;
        callback && callback(entry);
      };
      return observeIntersection(this.node.current, options, onIntersectionUpdate);
    }
    mount() {
      this.startObserver();
    }
    update() {
      if (typeof IntersectionObserver === "undefined")
        return;
      const { props, prevProps } = this.node;
      const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
      if (hasOptionsChanged) {
        this.startObserver();
      }
    }
    unmount() {
    }
  };
  function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
    return (name) => viewport[name] !== prevViewport[name];
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  var gestureAnimations = {
    inView: {
      Feature: InViewFeature
    },
    tap: {
      Feature: PressGesture
    },
    focus: {
      Feature: FocusGesture
    },
    hover: {
      Feature: HoverGesture
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
  function shallowCompare(next, prev) {
    if (!Array.isArray(prev))
      return false;
    const prevLength = prev.length;
    if (prevLength !== next.length)
      return false;
    for (let i = 0; i < prevLength; i++) {
      if (prev[i] !== next[i])
        return false;
    }
    return true;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
  function getCurrent(visualElement) {
    const current = {};
    visualElement.values.forEach((value, key) => current[key] = value.get());
    return current;
  }
  function getVelocity(visualElement) {
    const velocity = {};
    visualElement.values.forEach((value, key) => velocity[key] = value.getVelocity());
    return velocity;
  }
  function resolveVariant(visualElement, definition2, custom) {
    const props = visualElement.getProps();
    return resolveVariantFromProps(props, definition2, custom !== void 0 ? custom : props.custom, getCurrent(visualElement), getVelocity(visualElement));
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
  var optimizedAppearDataId = "framerAppearId";
  var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/errors.mjs
  var warning = noop3;
  var invariant = noop3;
  if (true) {
    warning = (check, message) => {
      if (!check && typeof console !== "undefined") {
        console.warn(message);
      }
    };
    invariant = (check, message) => {
      if (!check) {
        throw new Error(message);
      }
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/time-conversion.mjs
  var secondsToMilliseconds = (seconds) => seconds * 1e3;
  var millisecondsToSeconds = (milliseconds) => milliseconds / 1e3;

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
  var instantAnimationState = {
    current: false
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs
  var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs
  function isWaapiSupportedEasing(easing) {
    return Boolean(!easing || typeof easing === "string" && supportedWaapiEasing[easing] || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
  }
  var cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;
  var supportedWaapiEasing = {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out",
    circIn: cubicBezierAsString([0, 0.65, 0.55, 1]),
    circOut: cubicBezierAsString([0.55, 0, 1, 0.45]),
    backIn: cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
    backOut: cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
  };
  function mapEasingToNativeEasing(easing) {
    if (!easing)
      return void 0;
    return isBezierDefinition(easing) ? cubicBezierAsString(easing) : Array.isArray(easing) ? easing.map(mapEasingToNativeEasing) : supportedWaapiEasing[easing];
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
  function animateStyle(element4, valueName, keyframes3, { delay: delay2 = 0, duration, repeat = 0, repeatType = "loop", ease: ease2, times } = {}) {
    const keyframeOptions = { [valueName]: keyframes3 };
    if (times)
      keyframeOptions.offset = times;
    const easing = mapEasingToNativeEasing(ease2);
    if (Array.isArray(easing))
      keyframeOptions.easing = easing;
    return element4.animate(keyframeOptions, {
      delay: delay2,
      duration,
      easing: !Array.isArray(easing) ? easing : "linear",
      fill: "both",
      iterations: repeat + 1,
      direction: repeatType === "reverse" ? "alternate" : "normal"
    });
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/waapi/supports.mjs
  var featureTests = {
    waapi: () => Object.hasOwnProperty.call(Element.prototype, "animate")
  };
  var results = {};
  var supports = {};
  for (const key in featureTests) {
    supports[key] = () => {
      if (results[key] === void 0)
        results[key] = featureTests[key]();
      return results[key];
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
  function getFinalKeyframe(keyframes3, { repeat, repeatType = "loop" }) {
    const index2 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : keyframes3.length - 1;
    return keyframes3[index2];
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
  var calcBezier = (t2, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t2 + (3 * a2 - 6 * a1)) * t2 + 3 * a1) * t2;
  var subdivisionPrecision = 1e-7;
  var subdivisionMaxIterations = 12;
  function binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {
    let currentX;
    let currentT;
    let i = 0;
    do {
      currentT = lowerBound + (upperBound - lowerBound) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - x;
      if (currentX > 0) {
        upperBound = currentT;
      } else {
        lowerBound = currentT;
      }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);
    return currentT;
  }
  function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2)
      return noop3;
    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
    return (t2) => t2 === 0 || t2 === 1 ? t2 : calcBezier(getTForX(t2), mY1, mY2);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/ease.mjs
  var easeIn = cubicBezier(0.42, 0, 1, 1);
  var easeOut = cubicBezier(0, 0, 0.58, 1);
  var easeInOut = cubicBezier(0.42, 0, 0.58, 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
  var isEasingArray = (ease2) => {
    return Array.isArray(ease2) && typeof ease2[0] !== "number";
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
  var mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
  var reverseEasing = (easing) => (p) => 1 - easing(1 - p);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/circ.mjs
  var circIn = (p) => 1 - Math.sin(Math.acos(p));
  var circOut = reverseEasing(circIn);
  var circInOut = mirrorEasing(circOut);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/back.mjs
  var backOut = cubicBezier(0.33, 1.53, 0.69, 0.99);
  var backIn = reverseEasing(backOut);
  var backInOut = mirrorEasing(backIn);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/anticipate.mjs
  var anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));

  // ../ecopan_bot/node_modules/framer-motion/dist/es/easing/utils/map.mjs
  var easingLookup = {
    linear: noop3,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate
  };
  var easingDefinitionToFunction = (definition2) => {
    if (Array.isArray(definition2)) {
      invariant(definition2.length === 4, `Cubic bezier arrays must contain four numerical values.`);
      const [x1, y1, x2, y2] = definition2;
      return cubicBezier(x1, y1, x2, y2);
    } else if (typeof definition2 === "string") {
      invariant(easingLookup[definition2] !== void 0, `Invalid easing type '${definition2}'`);
      return easingLookup[definition2];
    }
    return definition2;
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/color/utils.mjs
  var isColorString = (type, testProp) => (v) => {
    return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
  };
  var splitColor = (aName, bName, cName) => (v) => {
    if (!isString(v))
      return v;
    const [a, b, c, alpha2] = v.match(floatRegex);
    return {
      [aName]: parseFloat(a),
      [bName]: parseFloat(b),
      [cName]: parseFloat(c),
      alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
    };
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
  var clampRgbUnit = (v) => clamp(0, 255, v);
  var rgbUnit = __spreadProps(__spreadValues({}, number), {
    transform: (v) => Math.round(clampRgbUnit(v))
  });
  var rgba2 = {
    test: isColorString("rgb", "red"),
    parse: splitColor("red", "green", "blue"),
    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/color/hex.mjs
  function parseHex(v) {
    let r2 = "";
    let g = "";
    let b = "";
    let a = "";
    if (v.length > 5) {
      r2 = v.substring(1, 3);
      g = v.substring(3, 5);
      b = v.substring(5, 7);
      a = v.substring(7, 9);
    } else {
      r2 = v.substring(1, 2);
      g = v.substring(2, 3);
      b = v.substring(3, 4);
      a = v.substring(4, 5);
      r2 += r2;
      g += g;
      b += b;
      a += a;
    }
    return {
      red: parseInt(r2, 16),
      green: parseInt(g, 16),
      blue: parseInt(b, 16),
      alpha: a ? parseInt(a, 16) / 255 : 1
    };
  }
  var hex = {
    test: isColorString("#"),
    parse: parseHex,
    transform: rgba2.transform
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
  var hsla2 = {
    test: isColorString("hsl", "hue"),
    parse: splitColor("hue", "saturation", "lightness"),
    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
      return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/color/index.mjs
  var color2 = {
    test: (v) => rgba2.test(v) || hex.test(v) || hsla2.test(v),
    parse: (v) => {
      if (rgba2.test(v)) {
        return rgba2.parse(v);
      } else if (hsla2.test(v)) {
        return hsla2.parse(v);
      } else {
        return hex.parse(v);
      }
    },
    transform: (v) => {
      return isString(v) ? v : v.hasOwnProperty("red") ? rgba2.transform(v) : hsla2.transform(v);
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/mix.mjs
  var mix2 = (from, to, progress2) => -progress2 * from + progress2 * to + from;

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
  function hueToRgb(p, q, t2) {
    if (t2 < 0)
      t2 += 1;
    if (t2 > 1)
      t2 -= 1;
    if (t2 < 1 / 6)
      return p + (q - p) * 6 * t2;
    if (t2 < 1 / 2)
      return q;
    if (t2 < 2 / 3)
      return p + (q - p) * (2 / 3 - t2) * 6;
    return p;
  }
  function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
    hue /= 360;
    saturation /= 100;
    lightness /= 100;
    let red = 0;
    let green = 0;
    let blue = 0;
    if (!saturation) {
      red = green = blue = lightness;
    } else {
      const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
      const p = 2 * lightness - q;
      red = hueToRgb(p, q, hue + 1 / 3);
      green = hueToRgb(p, q, hue);
      blue = hueToRgb(p, q, hue - 1 / 3);
    }
    return {
      red: Math.round(red * 255),
      green: Math.round(green * 255),
      blue: Math.round(blue * 255),
      alpha: alpha2
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/mix-color.mjs
  var mixLinearColor = (from, to, v) => {
    const fromExpo = from * from;
    return Math.sqrt(Math.max(0, v * (to * to - fromExpo) + fromExpo));
  };
  var colorTypes = [hex, rgba2, hsla2];
  var getColorType = (v) => colorTypes.find((type) => type.test(v));
  function asRGBA(color4) {
    const type = getColorType(color4);
    invariant(Boolean(type), `'${color4}' is not an animatable color. Use the equivalent color code instead.`);
    let model = type.parse(color4);
    if (type === hsla2) {
      model = hslaToRgba(model);
    }
    return model;
  }
  var mixColor = (from, to) => {
    const fromRGBA = asRGBA(from);
    const toRGBA = asRGBA(to);
    const blended = __spreadValues({}, fromRGBA);
    return (v) => {
      blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);
      blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);
      blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);
      blended.alpha = mix2(fromRGBA.alpha, toRGBA.alpha, v);
      return rgba2.transform(blended);
    };
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/complex/index.mjs
  var colorToken = "${c}";
  var numberToken = "${n}";
  function test(v) {
    var _a7, _b5;
    return isNaN(v) && isString(v) && (((_a7 = v.match(floatRegex)) === null || _a7 === void 0 ? void 0 : _a7.length) || 0) + (((_b5 = v.match(colorRegex)) === null || _b5 === void 0 ? void 0 : _b5.length) || 0) > 0;
  }
  function analyseComplexValue(v) {
    if (typeof v === "number")
      v = `${v}`;
    const values = [];
    let numColors = 0;
    let numNumbers = 0;
    const colors2 = v.match(colorRegex);
    if (colors2) {
      numColors = colors2.length;
      v = v.replace(colorRegex, colorToken);
      values.push(...colors2.map(color2.parse));
    }
    const numbers = v.match(floatRegex);
    if (numbers) {
      numNumbers = numbers.length;
      v = v.replace(floatRegex, numberToken);
      values.push(...numbers.map(number.parse));
    }
    return { values, numColors, numNumbers, tokenised: v };
  }
  function parse(v) {
    return analyseComplexValue(v).values;
  }
  function createTransformer(source) {
    const { values, numColors, tokenised } = analyseComplexValue(source);
    const numValues = values.length;
    return (v) => {
      let output = tokenised;
      for (let i = 0; i < numValues; i++) {
        output = output.replace(i < numColors ? colorToken : numberToken, i < numColors ? color2.transform(v[i]) : sanitize(v[i]));
      }
      return output;
    };
  }
  var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
  function getAnimatableNone(v) {
    const parsed = parse(v);
    const transformer = createTransformer(v);
    return transformer(parsed.map(convertNumbersToZero));
  }
  var complex = { test, parse, createTransformer, getAnimatableNone };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/mix-complex.mjs
  function getMixer(origin, target) {
    if (typeof origin === "number") {
      return (v) => mix2(origin, target, v);
    } else if (color2.test(origin)) {
      return mixColor(origin, target);
    } else {
      return mixComplex(origin, target);
    }
  }
  var mixArray = (from, to) => {
    const output = [...from];
    const numValues = output.length;
    const blendValue = from.map((fromThis, i) => getMixer(fromThis, to[i]));
    return (v) => {
      for (let i = 0; i < numValues; i++) {
        output[i] = blendValue[i](v);
      }
      return output;
    };
  };
  var mixObject = (origin, target) => {
    const output = __spreadValues(__spreadValues({}, origin), target);
    const blendValue = {};
    for (const key in output) {
      if (origin[key] !== void 0 && target[key] !== void 0) {
        blendValue[key] = getMixer(origin[key], target[key]);
      }
    }
    return (v) => {
      for (const key in blendValue) {
        output[key] = blendValue[key](v);
      }
      return output;
    };
  };
  var mixComplex = (origin, target) => {
    const template = complex.createTransformer(target);
    const originStats = analyseComplexValue(origin);
    const targetStats = analyseComplexValue(target);
    const canInterpolate = originStats.numColors === targetStats.numColors && originStats.numNumbers >= targetStats.numNumbers;
    if (canInterpolate) {
      return pipe4(mixArray(originStats.values, targetStats.values), template);
    } else {
      warning(true, `Complex values '${origin}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
      return (p) => `${p > 0 ? target : origin}`;
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/progress.mjs
  var progress = (from, to, value) => {
    const toFromDifference = to - from;
    return toFromDifference === 0 ? 1 : (value - from) / toFromDifference;
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/interpolate.mjs
  var mixNumber = (from, to) => (p) => mix2(from, to, p);
  function detectMixerFactory(v) {
    if (typeof v === "number") {
      return mixNumber;
    } else if (typeof v === "string") {
      if (color2.test(v)) {
        return mixColor;
      } else {
        return mixComplex;
      }
    } else if (Array.isArray(v)) {
      return mixArray;
    } else if (typeof v === "object") {
      return mixObject;
    }
    return mixNumber;
  }
  function createMixers(output, ease2, customMixer) {
    const mixers = [];
    const mixerFactory = customMixer || detectMixerFactory(output[0]);
    const numMixers = output.length - 1;
    for (let i = 0; i < numMixers; i++) {
      let mixer = mixerFactory(output[i], output[i + 1]);
      if (ease2) {
        const easingFunction = Array.isArray(ease2) ? ease2[i] || noop3 : ease2;
        mixer = pipe4(easingFunction, mixer);
      }
      mixers.push(mixer);
    }
    return mixers;
  }
  function interpolate(input, output, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
    const inputLength = input.length;
    invariant(inputLength === output.length, "Both input and output ranges must be the same length");
    if (inputLength === 1)
      return () => output[0];
    if (input[0] > input[inputLength - 1]) {
      input = [...input].reverse();
      output = [...output].reverse();
    }
    const mixers = createMixers(output, ease2, mixer);
    const numMixers = mixers.length;
    const interpolator = (v) => {
      let i = 0;
      if (numMixers > 1) {
        for (; i < input.length - 2; i++) {
          if (v < input[i + 1])
            break;
        }
      }
      const progressInRange = progress(input[i], input[i + 1], v);
      return mixers[i](progressInRange);
    };
    return isClamp ? (v) => interpolator(clamp(input[0], input[inputLength - 1], v)) : interpolator;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
  function fillOffset(offset, remaining) {
    const min = offset[offset.length - 1];
    for (let i = 1; i <= remaining; i++) {
      const offsetProgress = progress(0, remaining, i);
      offset.push(mix2(min, 1, offsetProgress));
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/offsets/default.mjs
  function defaultOffset(arr) {
    const offset = [0];
    fillOffset(offset, arr.length - 1);
    return offset;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/offsets/time.mjs
  function convertOffsetToTimes(offset, duration) {
    return offset.map((o) => o * duration);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
  function defaultEasing(values, easing) {
    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
  }
  function keyframes2({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
    const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
    const state2 = {
      done: false,
      value: keyframeValues[0]
    };
    const absoluteTimes = convertOffsetToTimes(
      times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
      duration
    );
    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
    });
    return {
      calculatedDuration: duration,
      next: (t2) => {
        state2.value = mapTimeToKeyframe(t2);
        state2.done = t2 >= duration;
        return state2;
      }
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
  function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1e3 / frameDuration) : 0;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
  var velocitySampleDuration = 5;
  function calcGeneratorVelocity(resolveValue, t2, current) {
    const prevT = Math.max(t2 - velocitySampleDuration, 0);
    return velocityPerSecond(current - resolveValue(prevT), t2 - prevT);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
  var safeMin = 1e-3;
  var minDuration = 0.01;
  var maxDuration = 10;
  var minDamping = 0.05;
  var maxDamping = 1;
  function findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
    let envelope;
    let derivative;
    warning(duration <= secondsToMilliseconds(maxDuration), "Spring duration must be 10 seconds or less");
    let dampingRatio = 1 - bounce;
    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);
    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));
    if (dampingRatio < 1) {
      envelope = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const a = exponentialDecay - velocity;
        const b = calcAngularFreq(undampedFreq2, dampingRatio);
        const c = Math.exp(-delta);
        return safeMin - a / b * c;
      };
      derivative = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const d = delta * velocity + velocity;
        const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
        const f = Math.exp(-delta);
        const g = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
        const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
        return factor * ((d - e) * f) / g;
      };
    } else {
      envelope = (undampedFreq2) => {
        const a = Math.exp(-undampedFreq2 * duration);
        const b = (undampedFreq2 - velocity) * duration + 1;
        return -safeMin + a * b;
      };
      derivative = (undampedFreq2) => {
        const a = Math.exp(-undampedFreq2 * duration);
        const b = (velocity - undampedFreq2) * (duration * duration);
        return a * b;
      };
    }
    const initialGuess = 5 / duration;
    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = secondsToMilliseconds(duration);
    if (isNaN(undampedFreq)) {
      return {
        stiffness: 100,
        damping: 10,
        duration
      };
    } else {
      const stiffness = Math.pow(undampedFreq, 2) * mass;
      return {
        stiffness,
        damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
        duration
      };
    }
  }
  var rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
    let result = initialGuess;
    for (let i = 1; i < rootIterations; i++) {
      result = result - envelope(result) / derivative(result);
    }
    return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
  var durationKeys = ["duration", "bounce"];
  var physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options, keys3) {
    return keys3.some((key) => options[key] !== void 0);
  }
  function getSpringOptions(options) {
    let springOptions = __spreadValues({
      velocity: 0,
      stiffness: 100,
      damping: 10,
      mass: 1,
      isResolvedFromDuration: false
    }, options);
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
      const derived = findSpring(options);
      springOptions = __spreadProps(__spreadValues(__spreadValues({}, springOptions), derived), {
        velocity: 0,
        mass: 1
      });
      springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
  }
  function spring(_a7) {
    var _b5 = _a7, { keyframes: keyframes3, restDelta, restSpeed } = _b5, options = __objRest(_b5, ["keyframes", "restDelta", "restSpeed"]);
    const origin = keyframes3[0];
    const target = keyframes3[keyframes3.length - 1];
    const state2 = { done: false, value: origin };
    const { stiffness, damping, mass, velocity, duration, isResolvedFromDuration } = getSpringOptions(options);
    const initialVelocity = velocity ? -millisecondsToSeconds(velocity) : 0;
    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    const initialDelta = target - origin;
    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
    const isGranularScale = Math.abs(initialDelta) < 5;
    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);
    restDelta || (restDelta = isGranularScale ? 5e-3 : 0.5);
    let resolveSpring;
    if (dampingRatio < 1) {
      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = (t2) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t2) + initialDelta * Math.cos(angularFreq * t2));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = (t2) => target - Math.exp(-undampedAngularFreq * t2) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t2);
    } else {
      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = (t2) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t2);
        const freqForT = Math.min(dampedAngularFreq * t2, 300);
        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
      };
    }
    return {
      calculatedDuration: isResolvedFromDuration ? duration || null : null,
      next: (t2) => {
        const current = resolveSpring(t2);
        if (!isResolvedFromDuration) {
          let currentVelocity = initialVelocity;
          if (t2 !== 0) {
            if (dampingRatio < 1) {
              currentVelocity = calcGeneratorVelocity(resolveSpring, t2, current);
            } else {
              currentVelocity = 0;
            }
          }
          const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
          const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
          state2.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
        } else {
          state2.done = t2 >= duration;
        }
        state2.value = state2.done ? target : current;
        return state2;
      }
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
  function inertia({ keyframes: keyframes3, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed }) {
    const origin = keyframes3[0];
    const state2 = {
      done: false,
      value: origin
    };
    const isOutOfBounds = (v) => min !== void 0 && v < min || max !== void 0 && v > max;
    const nearestBoundary = (v) => {
      if (min === void 0)
        return max;
      if (max === void 0)
        return min;
      return Math.abs(min - v) < Math.abs(max - v) ? min : max;
    };
    let amplitude = power * velocity;
    const ideal = origin + amplitude;
    const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
    if (target !== ideal)
      amplitude = target - origin;
    const calcDelta = (t2) => -amplitude * Math.exp(-t2 / timeConstant);
    const calcLatest = (t2) => target + calcDelta(t2);
    const applyFriction = (t2) => {
      const delta = calcDelta(t2);
      const latest = calcLatest(t2);
      state2.done = Math.abs(delta) <= restDelta;
      state2.value = state2.done ? target : latest;
    };
    let timeReachedBoundary;
    let spring$1;
    const checkCatchBoundary = (t2) => {
      if (!isOutOfBounds(state2.value))
        return;
      timeReachedBoundary = t2;
      spring$1 = spring({
        keyframes: [state2.value, nearestBoundary(state2.value)],
        velocity: calcGeneratorVelocity(calcLatest, t2, state2.value),
        damping: bounceDamping,
        stiffness: bounceStiffness,
        restDelta,
        restSpeed
      });
    };
    checkCatchBoundary(0);
    return {
      calculatedDuration: null,
      next: (t2) => {
        let hasUpdatedFrame = false;
        if (!spring$1 && timeReachedBoundary === void 0) {
          hasUpdatedFrame = true;
          applyFriction(t2);
          checkCatchBoundary(t2);
        }
        if (timeReachedBoundary !== void 0 && t2 > timeReachedBoundary) {
          return spring$1.next(t2 - timeReachedBoundary);
        } else {
          !hasUpdatedFrame && applyFriction(t2);
          return state2;
        }
      }
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.mjs
  var frameloopDriver = (update) => {
    const passTimestamp = ({ timestamp }) => update(timestamp);
    return {
      start: () => sync.update(passTimestamp, true),
      stop: () => cancelSync.update(passTimestamp),
      now: () => frameData.isProcessing ? frameData.timestamp : performance.now()
    };
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs
  var maxGeneratorDuration = 2e4;
  function calcGeneratorDuration(generator) {
    let duration = 0;
    const timeStep = 50;
    let state2 = generator.next(duration);
    while (!state2.done && duration < maxGeneratorDuration) {
      duration += timeStep;
      state2 = generator.next(duration);
    }
    return duration >= maxGeneratorDuration ? Infinity : duration;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs
  var types = {
    decay: inertia,
    inertia,
    tween: keyframes2,
    keyframes: keyframes2,
    spring
  };
  function animateValue(_a7) {
    var _b5 = _a7, { autoplay = true, delay: delay2 = 0, driver = frameloopDriver, keyframes: keyframes$1, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", onPlay, onStop, onComplete, onUpdate } = _b5, options = __objRest(_b5, ["autoplay", "delay", "driver", "keyframes", "type", "repeat", "repeatDelay", "repeatType", "onPlay", "onStop", "onComplete", "onUpdate"]);
    let speed = 1;
    let hasStopped = false;
    let resolveFinishedPromise;
    let currentFinishedPromise;
    const updateFinishedPromise = () => {
      resolveFinishedPromise && resolveFinishedPromise();
      currentFinishedPromise = new Promise((resolve) => {
        resolveFinishedPromise = resolve;
      });
    };
    updateFinishedPromise();
    let animationDriver;
    const generatorFactory = types[type] || keyframes2;
    let mapNumbersToKeyframes;
    if (generatorFactory !== keyframes2 && typeof keyframes$1[0] !== "number") {
      mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {
        clamp: false
      });
      keyframes$1 = [0, 100];
    }
    const generator = generatorFactory(__spreadProps(__spreadValues({}, options), { keyframes: keyframes$1 }));
    let mirroredGenerator;
    if (repeatType === "mirror") {
      mirroredGenerator = generatorFactory(__spreadProps(__spreadValues({}, options), {
        keyframes: [...keyframes$1].reverse(),
        velocity: -(options.velocity || 0)
      }));
    }
    let playState = "idle";
    let holdTime = null;
    let startTime = null;
    let cancelTime = null;
    if (generator.calculatedDuration === null && repeat) {
      generator.calculatedDuration = calcGeneratorDuration(generator);
    }
    const { calculatedDuration } = generator;
    let resolvedDuration = Infinity;
    let totalDuration = Infinity;
    if (calculatedDuration !== null) {
      resolvedDuration = calculatedDuration + repeatDelay;
      totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
    }
    let currentTime = 0;
    const tick = (timestamp) => {
      if (startTime === null)
        return;
      if (speed > 0)
        startTime = Math.min(startTime, timestamp);
      if (holdTime !== null) {
        currentTime = holdTime;
      } else {
        currentTime = (timestamp - startTime) * speed;
      }
      const timeWithoutDelay = currentTime - delay2;
      const isInDelayPhase = timeWithoutDelay < 0;
      currentTime = Math.max(timeWithoutDelay, 0);
      if (playState === "finished" && holdTime === null) {
        currentTime = totalDuration;
      }
      let elapsed = currentTime;
      let frameGenerator = generator;
      if (repeat) {
        const progress2 = currentTime / resolvedDuration;
        let currentIteration = Math.floor(progress2);
        let iterationProgress = progress2 % 1;
        if (!iterationProgress && progress2 >= 1) {
          iterationProgress = 1;
        }
        iterationProgress === 1 && currentIteration--;
        currentIteration = Math.min(currentIteration, repeat + 1);
        const iterationIsOdd = Boolean(currentIteration % 2);
        if (iterationIsOdd) {
          if (repeatType === "reverse") {
            iterationProgress = 1 - iterationProgress;
            if (repeatDelay) {
              iterationProgress -= repeatDelay / resolvedDuration;
            }
          } else if (repeatType === "mirror") {
            frameGenerator = mirroredGenerator;
          }
        }
        let p = clamp(0, 1, iterationProgress);
        if (currentTime > totalDuration) {
          p = repeatType === "reverse" && iterationIsOdd ? 1 : 0;
        }
        elapsed = p * resolvedDuration;
      }
      const state2 = isInDelayPhase ? { done: false, value: keyframes$1[0] } : frameGenerator.next(elapsed);
      if (mapNumbersToKeyframes) {
        state2.value = mapNumbersToKeyframes(state2.value);
      }
      let { done } = state2;
      if (!isInDelayPhase && calculatedDuration !== null) {
        done = currentTime >= totalDuration;
      }
      const isAnimationFinished = holdTime === null && (playState === "finished" || playState === "running" && done || speed < 0 && currentTime <= 0);
      if (onUpdate) {
        onUpdate(state2.value);
      }
      if (isAnimationFinished) {
        finish();
      }
      return state2;
    };
    const stopAnimationDriver = () => {
      animationDriver && animationDriver.stop();
      animationDriver = void 0;
    };
    const cancel = () => {
      playState = "idle";
      stopAnimationDriver();
      updateFinishedPromise();
      startTime = cancelTime = null;
    };
    const finish = () => {
      playState = "finished";
      onComplete && onComplete();
      stopAnimationDriver();
      updateFinishedPromise();
    };
    const play = () => {
      if (hasStopped)
        return;
      if (!animationDriver)
        animationDriver = driver(tick);
      const now = animationDriver.now();
      onPlay && onPlay();
      playState = "running";
      if (holdTime !== null) {
        startTime = now - holdTime;
      } else if (!startTime) {
        startTime = now;
      }
      cancelTime = startTime;
      holdTime = null;
      animationDriver.start();
    };
    if (autoplay) {
      play();
    }
    const controls = {
      then(resolve, reject) {
        return currentFinishedPromise.then(resolve, reject);
      },
      get time() {
        return millisecondsToSeconds(currentTime);
      },
      set time(newTime) {
        newTime = secondsToMilliseconds(newTime);
        currentTime = newTime;
        if (holdTime !== null || !animationDriver || speed === 0) {
          holdTime = newTime;
        } else {
          startTime = animationDriver.now() - newTime / speed;
        }
      },
      get duration() {
        const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;
        return millisecondsToSeconds(duration);
      },
      get speed() {
        return speed;
      },
      set speed(newSpeed) {
        if (newSpeed === speed || !animationDriver)
          return;
        speed = newSpeed;
        controls.time = millisecondsToSeconds(currentTime);
      },
      get state() {
        return playState;
      },
      play,
      pause: () => {
        playState = "paused";
        holdTime = currentTime;
      },
      stop: () => {
        hasStopped = true;
        if (playState === "idle")
          return;
        playState = "idle";
        onStop && onStop();
        cancel();
      },
      cancel: () => {
        if (cancelTime !== null)
          tick(cancelTime);
        cancel();
      },
      complete: () => {
        playState = "finished";
      },
      sample: (elapsed) => {
        startTime = 0;
        return tick(elapsed);
      }
    };
    return controls;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.mjs
  var acceleratedValues = /* @__PURE__ */ new Set([
    "opacity",
    "clipPath",
    "filter",
    "transform",
    "backgroundColor"
  ]);
  var sampleDelta = 10;
  var maxDuration2 = 2e4;
  var requiresPregeneratedKeyframes = (valueName, options) => options.type === "spring" || valueName === "backgroundColor" || !isWaapiSupportedEasing(options.ease);
  function createAcceleratedAnimation(value, valueName, _a7) {
    var _b5 = _a7, { onUpdate, onComplete } = _b5, options = __objRest(_b5, ["onUpdate", "onComplete"]);
    const canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== "mirror" && options.damping !== 0 && options.type !== "inertia";
    if (!canAccelerateAnimation)
      return false;
    let hasStopped = false;
    let resolveFinishedPromise;
    let currentFinishedPromise;
    const updateFinishedPromise = () => {
      currentFinishedPromise = new Promise((resolve) => {
        resolveFinishedPromise = resolve;
      });
    };
    updateFinishedPromise();
    let { keyframes: keyframes3, duration = 300, ease: ease2, times } = options;
    if (requiresPregeneratedKeyframes(valueName, options)) {
      const sampleAnimation = animateValue(__spreadProps(__spreadValues({}, options), {
        repeat: 0,
        delay: 0
      }));
      let state2 = { done: false, value: keyframes3[0] };
      const pregeneratedKeyframes = [];
      let t2 = 0;
      while (!state2.done && t2 < maxDuration2) {
        state2 = sampleAnimation.sample(t2);
        pregeneratedKeyframes.push(state2.value);
        t2 += sampleDelta;
      }
      times = void 0;
      keyframes3 = pregeneratedKeyframes;
      duration = t2 - sampleDelta;
      ease2 = "linear";
    }
    const animation = animateStyle(value.owner.current, valueName, keyframes3, __spreadProps(__spreadValues({}, options), {
      duration,
      ease: ease2,
      times
    }));
    const safeCancel = () => {
      sync.update(() => animation.cancel());
      resolveFinishedPromise();
      updateFinishedPromise();
    };
    animation.onfinish = () => {
      value.set(getFinalKeyframe(keyframes3, options));
      onComplete && onComplete();
      safeCancel();
    };
    return {
      then(resolve, reject) {
        return currentFinishedPromise.then(resolve, reject);
      },
      get time() {
        return millisecondsToSeconds(animation.currentTime || 0);
      },
      set time(newTime) {
        animation.currentTime = secondsToMilliseconds(newTime);
      },
      get speed() {
        return animation.playbackRate;
      },
      set speed(newSpeed) {
        animation.playbackRate = newSpeed;
      },
      get duration() {
        return millisecondsToSeconds(duration);
      },
      play: () => {
        if (hasStopped)
          return;
        animation.play();
      },
      pause: () => animation.pause(),
      stop: () => {
        hasStopped = true;
        if (animation.playState === "idle")
          return;
        const { currentTime } = animation;
        if (currentTime) {
          const sampleAnimation = animateValue(__spreadProps(__spreadValues({}, options), {
            autoplay: false
          }));
          value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);
        }
        safeCancel();
      },
      complete: () => animation.finish(),
      cancel: safeCancel
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/animators/instant.mjs
  function createInstantAnimation({ keyframes: keyframes3, delay: delay2, onUpdate, onComplete }) {
    const setValue = () => {
      onUpdate && onUpdate(keyframes3[keyframes3.length - 1]);
      onComplete && onComplete();
      return {
        time: 0,
        speed: 1,
        duration: 0,
        play: noop3,
        pause: noop3,
        stop: noop3,
        then: (resolve) => {
          resolve();
          return Promise.resolve();
        },
        cancel: noop3,
        complete: noop3
      };
    };
    return delay2 ? animateValue({
      keyframes: [0, 1],
      duration: 0,
      delay: delay2,
      onComplete: setValue
    }) : setValue();
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
  var underDampedSpring = {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
  };
  var criticallyDampedSpring = (target) => ({
    type: "spring",
    stiffness: 550,
    damping: target === 0 ? 2 * Math.sqrt(550) : 30,
    restSpeed: 10
  });
  var keyframesTransition = {
    type: "keyframes",
    duration: 0.8
  };
  var ease = {
    type: "keyframes",
    ease: [0.25, 0.1, 0.35, 1],
    duration: 0.3
  };
  var getDefaultTransition = (valueKey, { keyframes: keyframes3 }) => {
    if (keyframes3.length > 2) {
      return keyframesTransition;
    } else if (transformProps.has(valueKey)) {
      return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes3[1]) : underDampedSpring;
    }
    return ease;
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
  var isAnimatable = (key, value) => {
    if (key === "zIndex")
      return false;
    if (typeof value === "number" || Array.isArray(value))
      return true;
    if (typeof value === "string" && complex.test(value) && !value.startsWith("url(")) {
      return true;
    }
    return false;
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
  var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v) {
    const [name, value] = v.slice(0, -1).split("(");
    if (name === "drop-shadow")
      return v;
    const [number3] = value.match(floatRegex) || [];
    if (!number3)
      return v;
    const unit = value.replace(number3, "");
    let defaultValue = maxDefaults.has(name) ? 1 : 0;
    if (number3 !== value)
      defaultValue *= 100;
    return name + "(" + defaultValue + unit + ")";
  }
  var functionRegex = /([a-z-]*)\(.*?\)/g;
  var filter2 = __spreadProps(__spreadValues({}, complex), {
    getAnimatableNone: (v) => {
      const functions = v.match(functionRegex);
      return functions ? functions.map(applyDefaultFilter).join(" ") : v;
    }
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
  var defaultValueTypes = __spreadProps(__spreadValues({}, numberValueTypes), {
    color: color2,
    backgroundColor: color2,
    outlineColor: color2,
    fill: color2,
    stroke: color2,
    borderColor: color2,
    borderTopColor: color2,
    borderRightColor: color2,
    borderBottomColor: color2,
    borderLeftColor: color2,
    filter: filter2,
    WebkitFilter: filter2
  });
  var getDefaultValueType = (key) => defaultValueTypes[key];

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  function getAnimatableNone2(key, value) {
    let defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== filter2)
      defaultValueType = complex;
    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
  function isTransitionDefined(_a7) {
    var _b5 = _a7, { when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed } = _b5, transition3 = __objRest(_b5, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from", "elapsed"]);
    return !!Object.keys(transition3).length;
  }
  function isZero(value) {
    return value === 0 || typeof value === "string" && parseFloat(value) === 0 && value.indexOf(" ") === -1;
  }
  function getZeroUnit(potentialUnitType) {
    return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
  }
  function getValueTransition(transition3, key) {
    return transition3[key] || transition3["default"] || transition3;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/wildcards.mjs
  function fillWildcardKeyframes(origin, [...keyframes3]) {
    for (let i = 0; i < keyframes3.length; i++) {
      if (keyframes3[i] === null) {
        keyframes3[i] = i === 0 ? origin : keyframes3[i - 1];
      }
    }
    return keyframes3;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/utils/keyframes.mjs
  function getKeyframes(value, valueName, target, transition3) {
    const isTargetAnimatable = isAnimatable(valueName, target);
    let origin = transition3.from !== void 0 ? transition3.from : value.get();
    if (origin === "none" && isTargetAnimatable && typeof target === "string") {
      origin = getAnimatableNone2(valueName, target);
    } else if (isZero(origin) && typeof target === "string") {
      origin = getZeroUnit(target);
    } else if (!Array.isArray(target) && isZero(target) && typeof origin === "string") {
      target = getZeroUnit(origin);
    }
    if (Array.isArray(target)) {
      return fillWildcardKeyframes(origin, target);
    } else {
      return [origin, target];
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
  var animateMotionValue = (valueName, value, target, transition3 = {}) => {
    return (onComplete) => {
      const valueTransition = getValueTransition(transition3, valueName) || {};
      const delay2 = valueTransition.delay || transition3.delay || 0;
      let { elapsed = 0 } = transition3;
      elapsed = elapsed - secondsToMilliseconds(delay2);
      const keyframes3 = getKeyframes(value, valueName, target, valueTransition);
      const originKeyframe = keyframes3[0];
      const targetKeyframe = keyframes3[keyframes3.length - 1];
      const isOriginAnimatable = isAnimatable(valueName, originKeyframe);
      const isTargetAnimatable = isAnimatable(valueName, targetKeyframe);
      warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${valueName} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
      let options = __spreadProps(__spreadValues({
        keyframes: keyframes3,
        velocity: value.getVelocity(),
        ease: "easeOut"
      }, valueTransition), {
        delay: -elapsed,
        onUpdate: (v) => {
          value.set(v);
          valueTransition.onUpdate && valueTransition.onUpdate(v);
        },
        onComplete: () => {
          onComplete();
          valueTransition.onComplete && valueTransition.onComplete();
        }
      });
      if (!isTransitionDefined(valueTransition)) {
        options = __spreadValues(__spreadValues({}, options), getDefaultTransition(valueName, options));
      }
      if (options.duration) {
        options.duration = secondsToMilliseconds(options.duration);
      }
      if (options.repeatDelay) {
        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
      }
      if (!isOriginAnimatable || !isTargetAnimatable || instantAnimationState.current || valueTransition.type === false) {
        return createInstantAnimation(options);
      }
      if (value.owner && value.owner.current instanceof HTMLElement && !value.owner.getProps().onUpdate) {
        const acceleratedAnimation = createAcceleratedAnimation(value, valueName, options);
        if (acceleratedAnimation)
          return acceleratedAnimation;
      }
      return animateValue(options);
    };
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
  function isWillChangeMotionValue(value) {
    return Boolean(isMotionValue(value) && value.add);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
  var isNumericalString = (v) => /^\-?\d*\.?\d+$/.test(v);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
  var isZeroValueString = (v) => /^0[^.\s]+$/.test(v);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/array.mjs
  function addUniqueItem(arr, item) {
    if (arr.indexOf(item) === -1)
      arr.push(item);
  }
  function removeItem(arr, item) {
    const index2 = arr.indexOf(item);
    if (index2 > -1)
      arr.splice(index2, 1);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  var SubscriptionManager = class {
    constructor() {
      this.subscriptions = [];
    }
    add(handler) {
      addUniqueItem(this.subscriptions, handler);
      return () => removeItem(this.subscriptions, handler);
    }
    notify(a, b, c) {
      const numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a, b, c);
      } else {
        for (let i = 0; i < numSubscriptions; i++) {
          const handler = this.subscriptions[i];
          handler && handler(a, b, c);
        }
      }
    }
    getSize() {
      return this.subscriptions.length;
    }
    clear() {
      this.subscriptions.length = 0;
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/warn-once.mjs
  var warned = /* @__PURE__ */ new Set();
  function warnOnce(condition, message, element4) {
    if (condition || warned.has(message))
      return;
    console.warn(message);
    if (element4)
      console.warn(element4);
    warned.add(message);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/value/index.mjs
  var isFloat = (value) => {
    return !isNaN(parseFloat(value));
  };
  var MotionValue = class {
    constructor(init, options = {}) {
      this.version = "10.11.2";
      this.timeDelta = 0;
      this.lastUpdated = 0;
      this.canTrackVelocity = false;
      this.events = {};
      this.updateAndNotify = (v, render = true) => {
        this.prev = this.current;
        this.current = v;
        const { delta, timestamp } = frameData;
        if (this.lastUpdated !== timestamp) {
          this.timeDelta = delta;
          this.lastUpdated = timestamp;
          sync.postRender(this.scheduleVelocityCheck);
        }
        if (this.prev !== this.current && this.events.change) {
          this.events.change.notify(this.current);
        }
        if (this.events.velocityChange) {
          this.events.velocityChange.notify(this.getVelocity());
        }
        if (render && this.events.renderRequest) {
          this.events.renderRequest.notify(this.current);
        }
      };
      this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);
      this.velocityCheck = ({ timestamp }) => {
        if (timestamp !== this.lastUpdated) {
          this.prev = this.current;
          if (this.events.velocityChange) {
            this.events.velocityChange.notify(this.getVelocity());
          }
        }
      };
      this.hasAnimated = false;
      this.prev = this.current = init;
      this.canTrackVelocity = isFloat(this.current);
      this.owner = options.owner;
    }
    onChange(subscription) {
      if (true) {
        warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
      }
      return this.on("change", subscription);
    }
    on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = new SubscriptionManager();
      }
      const unsubscribe = this.events[eventName].add(callback);
      if (eventName === "change") {
        return () => {
          unsubscribe();
          sync.read(() => {
            if (!this.events.change.getSize()) {
              this.stop();
            }
          });
        };
      }
      return unsubscribe;
    }
    clearListeners() {
      for (const eventManagers in this.events) {
        this.events[eventManagers].clear();
      }
    }
    attach(passiveEffect, stopPassiveEffect) {
      this.passiveEffect = passiveEffect;
      this.stopPassiveEffect = stopPassiveEffect;
    }
    set(v, render = true) {
      if (!render || !this.passiveEffect) {
        this.updateAndNotify(v, render);
      } else {
        this.passiveEffect(v, this.updateAndNotify);
      }
    }
    setWithVelocity(prev, current, delta) {
      this.set(current);
      this.prev = prev;
      this.timeDelta = delta;
    }
    jump(v) {
      this.updateAndNotify(v);
      this.prev = v;
      this.stop();
      if (this.stopPassiveEffect)
        this.stopPassiveEffect();
    }
    get() {
      return this.current;
    }
    getPrevious() {
      return this.prev;
    }
    getVelocity() {
      return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
    }
    start(startAnimation) {
      this.stop();
      return new Promise((resolve) => {
        this.hasAnimated = true;
        this.animation = startAnimation(resolve);
        if (this.events.animationStart) {
          this.events.animationStart.notify();
        }
      }).then(() => {
        if (this.events.animationComplete) {
          this.events.animationComplete.notify();
        }
        this.clearAnimation();
      });
    }
    stop() {
      if (this.animation) {
        this.animation.stop();
        if (this.events.animationCancel) {
          this.events.animationCancel.notify();
        }
      }
      this.clearAnimation();
    }
    isAnimating() {
      return !!this.animation;
    }
    clearAnimation() {
      delete this.animation;
    }
    destroy() {
      this.clearListeners();
      this.stop();
      if (this.stopPassiveEffect) {
        this.stopPassiveEffect();
      }
    }
  };
  function motionValue(init, options) {
    return new MotionValue(init, options);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
  var testValueType = (v) => (type) => type.test(v);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
  var auto = {
    test: (v) => v === "auto",
    parse: (v) => v
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  var dimensionValueTypes = [number, px2, percent, degrees, vw, vh, auto];
  var findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  var valueTypes = [...dimensionValueTypes, color2, complex];
  var findValueType = (v) => valueTypes.find(testValueType(v));

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/setters.mjs
  function setMotionValue(visualElement, key, value) {
    if (visualElement.hasValue(key)) {
      visualElement.getValue(key).set(value);
    } else {
      visualElement.addValue(key, motionValue(value));
    }
  }
  function setTarget(visualElement, definition2) {
    const resolved = resolveVariant(visualElement, definition2);
    let _a7 = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {}, { transitionEnd = {}, transition: transition3 = {} } = _a7, target = __objRest(_a7, ["transitionEnd", "transition"]);
    target = __spreadValues(__spreadValues({}, target), transitionEnd);
    for (const key in target) {
      const value = resolveFinalValueInKeyframes(target[key]);
      setMotionValue(visualElement, key, value);
    }
  }
  function checkTargetForNewValues(visualElement, target, origin) {
    var _a7, _b5;
    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));
    const numNewValues = newValueKeys.length;
    if (!numNewValues)
      return;
    for (let i = 0; i < numNewValues; i++) {
      const key = newValueKeys[i];
      const targetValue = target[key];
      let value = null;
      if (Array.isArray(targetValue)) {
        value = targetValue[0];
      }
      if (value === null) {
        value = (_b5 = (_a7 = origin[key]) !== null && _a7 !== void 0 ? _a7 : visualElement.readValue(key)) !== null && _b5 !== void 0 ? _b5 : target[key];
      }
      if (value === void 0 || value === null)
        continue;
      if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
        value = parseFloat(value);
      } else if (!findValueType(value) && complex.test(targetValue)) {
        value = getAnimatableNone2(key, targetValue);
      }
      visualElement.addValue(key, motionValue(value, { owner: visualElement }));
      if (origin[key] === void 0) {
        origin[key] = value;
      }
      if (value !== null)
        visualElement.setBaseTarget(key, value);
    }
  }
  function getOriginFromTransition(key, transition3) {
    if (!transition3)
      return;
    const valueTransition = transition3[key] || transition3["default"] || transition3;
    return valueTransition.from;
  }
  function getOrigin(target, transition3, visualElement) {
    const origin = {};
    for (const key in target) {
      const transitionOrigin = getOriginFromTransition(key, transition3);
      if (transitionOrigin !== void 0) {
        origin[key] = transitionOrigin;
      } else {
        const value = visualElement.getValue(key);
        if (value) {
          origin[key] = value.get();
        }
      }
    }
    return origin;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
  function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
  }
  function animateTarget(visualElement, definition2, { delay: delay2 = 0, transitionOverride, type } = {}) {
    let _a7 = visualElement.makeTargetAnimatable(definition2), { transition: transition3 = visualElement.getDefaultTransition(), transitionEnd } = _a7, target = __objRest(_a7, ["transition", "transitionEnd"]);
    const willChange = visualElement.getValue("willChange");
    if (transitionOverride)
      transition3 = transitionOverride;
    const animations2 = [];
    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
    for (const key in target) {
      const value = visualElement.getValue(key);
      const valueTarget = target[key];
      if (!value || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
        continue;
      }
      const valueTransition = __spreadValues({ delay: delay2, elapsed: 0 }, transition3);
      if (window.HandoffAppearAnimations && !value.hasAnimated) {
        const appearId = visualElement.getProps()[optimizedAppearDataAttribute];
        if (appearId) {
          valueTransition.elapsed = window.HandoffAppearAnimations(appearId, key, value, sync);
        }
      }
      value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key) ? { type: false } : valueTransition));
      const animation = value.animation;
      if (isWillChangeMotionValue(willChange)) {
        willChange.add(key);
        animation.then(() => willChange.remove(key));
      }
      animations2.push(animation);
    }
    if (transitionEnd) {
      Promise.all(animations2).then(() => {
        transitionEnd && setTarget(visualElement, transitionEnd);
      });
    }
    return animations2;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
  function animateVariant(visualElement, variant, options = {}) {
    const resolved = resolveVariant(visualElement, variant, options.custom);
    let { transition: transition3 = visualElement.getDefaultTransition() || {} } = resolved || {};
    if (options.transitionOverride) {
      transition3 = options.transitionOverride;
    }
    const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
      const { delayChildren = 0, staggerChildren, staggerDirection } = transition3;
      return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : () => Promise.resolve();
    const { when } = transition3;
    if (when) {
      const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
      return first().then(() => last());
    } else {
      return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
    }
  }
  function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
    const animations2 = [];
    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
    const generateStaggerDuration = staggerDirection === 1 ? (i = 0) => i * staggerChildren : (i = 0) => maxStaggerDuration - i * staggerChildren;
    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i) => {
      child.notify("AnimationStart", variant);
      animations2.push(animateVariant(child, variant, __spreadProps(__spreadValues({}, options), {
        delay: delayChildren + generateStaggerDuration(i)
      })).then(() => child.notify("AnimationComplete", variant)));
    });
    return Promise.all(animations2);
  }
  function sortByTreeOrder(a, b) {
    return a.sortNodePosition(b);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
  function animateVisualElement(visualElement, definition2, options = {}) {
    visualElement.notify("AnimationStart", definition2);
    let animation;
    if (Array.isArray(definition2)) {
      const animations2 = definition2.map((variant) => animateVariant(visualElement, variant, options));
      animation = Promise.all(animations2);
    } else if (typeof definition2 === "string") {
      animation = animateVariant(visualElement, definition2, options);
    } else {
      const resolvedDefinition = typeof definition2 === "function" ? resolveVariant(visualElement, definition2, options.custom) : definition2;
      animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
    }
    return animation.then(() => visualElement.notify("AnimationComplete", definition2));
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  var reversePriorityOrder = [...variantPriorityOrder].reverse();
  var numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement) {
    return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
  }
  function createAnimationState(visualElement) {
    let animate = animateList(visualElement);
    const state2 = createState();
    let isInitialRender = true;
    const buildResolvedTypeValues = (acc, definition2) => {
      const resolved = resolveVariant(visualElement, definition2);
      if (resolved) {
        const _a7 = resolved, { transition: transition3, transitionEnd } = _a7, target = __objRest(_a7, ["transition", "transitionEnd"]);
        acc = __spreadValues(__spreadValues(__spreadValues({}, acc), target), transitionEnd);
      }
      return acc;
    };
    function setAnimateFunction(makeAnimator) {
      animate = makeAnimator(visualElement);
    }
    function animateChanges(options, changedActiveType) {
      const props = visualElement.getProps();
      const context = visualElement.getVariantContext(true) || {};
      const animations2 = [];
      const removedKeys = /* @__PURE__ */ new Set();
      let encounteredKeys = {};
      let removedVariantIndex = Infinity;
      for (let i = 0; i < numAnimationTypes; i++) {
        const type = reversePriorityOrder[i];
        const typeState = state2[type];
        const prop = props[type] !== void 0 ? props[type] : context[type];
        const propIsVariant = isVariantLabel(prop);
        const activeDelta = type === changedActiveType ? typeState.isActive : null;
        if (activeDelta === false)
          removedVariantIndex = i;
        let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;
        if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
          isInherited = false;
        }
        typeState.protectedKeys = __spreadValues({}, encounteredKeys);
        if (!typeState.isActive && activeDelta === null || !prop && !typeState.prevProp || isAnimationControls(prop) || typeof prop === "boolean") {
          continue;
        }
        const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);
        let shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i > removedVariantIndex && propIsVariant;
        const definitionList = Array.isArray(prop) ? prop : [prop];
        let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
        if (activeDelta === false)
          resolvedValues = {};
        const { prevResolvedValues = {} } = typeState;
        const allKeys = __spreadValues(__spreadValues({}, prevResolvedValues), resolvedValues);
        const markToAnimate = (key) => {
          shouldAnimateType = true;
          removedKeys.delete(key);
          typeState.needsAnimating[key] = true;
        };
        for (const key in allKeys) {
          const next = resolvedValues[key];
          const prev = prevResolvedValues[key];
          if (encounteredKeys.hasOwnProperty(key))
            continue;
          if (next !== prev) {
            if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
              if (!shallowCompare(next, prev) || variantDidChange) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            } else if (next !== void 0) {
              markToAnimate(key);
            } else {
              removedKeys.add(key);
            }
          } else if (next !== void 0 && removedKeys.has(key)) {
            markToAnimate(key);
          } else {
            typeState.protectedKeys[key] = true;
          }
        }
        typeState.prevProp = prop;
        typeState.prevResolvedValues = resolvedValues;
        if (typeState.isActive) {
          encounteredKeys = __spreadValues(__spreadValues({}, encounteredKeys), resolvedValues);
        }
        if (isInitialRender && visualElement.blockInitialAnimation) {
          shouldAnimateType = false;
        }
        if (shouldAnimateType && !isInherited) {
          animations2.push(...definitionList.map((animation) => ({
            animation,
            options: __spreadValues({ type }, options)
          })));
        }
      }
      if (removedKeys.size) {
        const fallbackAnimation = {};
        removedKeys.forEach((key) => {
          const fallbackTarget = visualElement.getBaseTarget(key);
          if (fallbackTarget !== void 0) {
            fallbackAnimation[key] = fallbackTarget;
          }
        });
        animations2.push({ animation: fallbackAnimation });
      }
      let shouldAnimate = Boolean(animations2.length);
      if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {
        shouldAnimate = false;
      }
      isInitialRender = false;
      return shouldAnimate ? animate(animations2) : Promise.resolve();
    }
    function setActive(type, isActive, options) {
      var _a7;
      if (state2[type].isActive === isActive)
        return Promise.resolve();
      (_a7 = visualElement.variantChildren) === null || _a7 === void 0 ? void 0 : _a7.forEach((child) => {
        var _a8;
        return (_a8 = child.animationState) === null || _a8 === void 0 ? void 0 : _a8.setActive(type, isActive);
      });
      state2[type].isActive = isActive;
      const animations2 = animateChanges(options, type);
      for (const key in state2) {
        state2[key].protectedKeys = {};
      }
      return animations2;
    }
    return {
      animateChanges,
      setActive,
      setAnimateFunction,
      getState: () => state2
    };
  }
  function checkVariantsDidChange(prev, next) {
    if (typeof next === "string") {
      return next !== prev;
    } else if (Array.isArray(next)) {
      return !shallowCompare(next, prev);
    }
    return false;
  }
  function createTypeState(isActive = false) {
    return {
      isActive,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {}
    };
  }
  function createState() {
    return {
      animate: createTypeState(true),
      whileInView: createTypeState(),
      whileHover: createTypeState(),
      whileTap: createTypeState(),
      whileDrag: createTypeState(),
      whileFocus: createTypeState(),
      exit: createTypeState()
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
  var AnimationFeature = class extends Feature {
    constructor(node2) {
      super(node2);
      node2.animationState || (node2.animationState = createAnimationState(node2));
    }
    updateAnimationControlsSubscription() {
      const { animate } = this.node.getProps();
      this.unmount();
      if (isAnimationControls(animate)) {
        this.unmount = animate.subscribe(this.node);
      }
    }
    mount() {
      this.updateAnimationControlsSubscription();
    }
    update() {
      const { animate } = this.node.getProps();
      const { animate: prevAnimate } = this.node.prevProps || {};
      if (animate !== prevAnimate) {
        this.updateAnimationControlsSubscription();
      }
    }
    unmount() {
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
  var id2 = 0;
  var ExitAnimationFeature = class extends Feature {
    constructor() {
      super(...arguments);
      this.id = id2++;
    }
    update() {
      if (!this.node.presenceContext)
        return;
      const { isPresent: isPresent2, onExitComplete, custom } = this.node.presenceContext;
      const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
      if (!this.node.animationState || isPresent2 === prevIsPresent) {
        return;
      }
      const exitAnimation = this.node.animationState.setActive("exit", !isPresent2, { custom: custom !== null && custom !== void 0 ? custom : this.node.getProps().custom });
      if (onExitComplete && !isPresent2) {
        exitAnimation.then(() => onExitComplete(this.id));
      }
    }
    mount() {
      const { register } = this.node.presenceContext || {};
      if (register) {
        this.unmount = register(this.id);
      }
    }
    unmount() {
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var animations = {
    animation: {
      Feature: AnimationFeature
    },
    exit: {
      Feature: ExitAnimationFeature
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/distance.mjs
  var distance2 = (a, b) => Math.abs(a - b);
  function distance2D(a, b) {
    const xDelta = distance2(a.x, b.x);
    const yDelta = distance2(a.y, b.y);
    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
  var PanSession = class {
    constructor(event, handlers2, { transformPagePoint } = {}) {
      this.startEvent = null;
      this.lastMoveEvent = null;
      this.lastMoveEventInfo = null;
      this.handlers = {};
      this.updatePoint = () => {
        if (!(this.lastMoveEvent && this.lastMoveEventInfo))
          return;
        const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
        const isPanStarted = this.startEvent !== null;
        const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
        if (!isPanStarted && !isDistancePastThreshold)
          return;
        const { point: point6 } = info2;
        const { timestamp: timestamp2 } = frameData;
        this.history.push(__spreadProps(__spreadValues({}, point6), { timestamp: timestamp2 }));
        const { onStart, onMove } = this.handlers;
        if (!isPanStarted) {
          onStart && onStart(this.lastMoveEvent, info2);
          this.startEvent = this.lastMoveEvent;
        }
        onMove && onMove(this.lastMoveEvent, info2);
      };
      this.handlePointerMove = (event2, info2) => {
        this.lastMoveEvent = event2;
        this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
        sync.update(this.updatePoint, true);
      };
      this.handlePointerUp = (event2, info2) => {
        this.end();
        if (!(this.lastMoveEvent && this.lastMoveEventInfo))
          return;
        const { onEnd, onSessionEnd } = this.handlers;
        const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
        if (this.startEvent && onEnd) {
          onEnd(event2, panInfo);
        }
        onSessionEnd && onSessionEnd(event2, panInfo);
      };
      if (!isPrimaryPointer(event))
        return;
      this.handlers = handlers2;
      this.transformPagePoint = transformPagePoint;
      const info = extractEventInfo(event);
      const initialInfo = transformPoint(info, this.transformPagePoint);
      const { point: point5 } = initialInfo;
      const { timestamp } = frameData;
      this.history = [__spreadProps(__spreadValues({}, point5), { timestamp })];
      const { onSessionStart } = handlers2;
      onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
      this.removeListeners = pipe4(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
    }
    updateHandlers(handlers2) {
      this.handlers = handlers2;
    }
    end() {
      this.removeListeners && this.removeListeners();
      cancelSync.update(this.updatePoint);
    }
  };
  function transformPoint(info, transformPagePoint) {
    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
  }
  function subtractPoint(a, b) {
    return { x: a.x - b.x, y: a.y - b.y };
  }
  function getPanInfo({ point: point5 }, history) {
    return {
      point: point5,
      delta: subtractPoint(point5, lastDevicePoint(history)),
      offset: subtractPoint(point5, startDevicePoint(history)),
      velocity: getVelocity2(history, 0.1)
    };
  }
  function startDevicePoint(history) {
    return history[0];
  }
  function lastDevicePoint(history) {
    return history[history.length - 1];
  }
  function getVelocity2(history, timeDelta) {
    if (history.length < 2) {
      return { x: 0, y: 0 };
    }
    let i = history.length - 1;
    let timestampedPoint = null;
    const lastPoint = lastDevicePoint(history);
    while (i >= 0) {
      timestampedPoint = history[i];
      if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
        break;
      }
      i--;
    }
    if (!timestampedPoint) {
      return { x: 0, y: 0 };
    }
    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
    if (time === 0) {
      return { x: 0, y: 0 };
    }
    const currentVelocity = {
      x: (lastPoint.x - timestampedPoint.x) / time,
      y: (lastPoint.y - timestampedPoint.y) / time
    };
    if (currentVelocity.x === Infinity) {
      currentVelocity.x = 0;
    }
    if (currentVelocity.y === Infinity) {
      currentVelocity.y = 0;
    }
    return currentVelocity;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
  function calcLength(axis) {
    return axis.max - axis.min;
  }
  function isNear(value, target = 0, maxDistance = 0.01) {
    return Math.abs(value - target) <= maxDistance;
  }
  function calcAxisDelta(delta, source, target, origin = 0.5) {
    delta.origin = origin;
    delta.originPoint = mix2(source.min, source.max, delta.origin);
    delta.scale = calcLength(target) / calcLength(source);
    if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
      delta.scale = 1;
    delta.translate = mix2(target.min, target.max, delta.origin) - delta.originPoint;
    if (isNear(delta.translate) || isNaN(delta.translate))
      delta.translate = 0;
  }
  function calcBoxDelta(delta, source, target, origin) {
    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : void 0);
    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : void 0);
  }
  function calcRelativeAxis(target, relative, parent) {
    target.min = parent.min + relative.min;
    target.max = target.min + calcLength(relative);
  }
  function calcRelativeBox(target, relative, parent) {
    calcRelativeAxis(target.x, relative.x, parent.x);
    calcRelativeAxis(target.y, relative.y, parent.y);
  }
  function calcRelativeAxisPosition(target, layout3, parent) {
    target.min = layout3.min - parent.min;
    target.max = target.min + calcLength(layout3);
  }
  function calcRelativePosition(target, layout3, parent) {
    calcRelativeAxisPosition(target.x, layout3.x, parent.x);
    calcRelativeAxisPosition(target.y, layout3.y, parent.y);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
  function applyConstraints(point5, { min, max }, elastic) {
    if (min !== void 0 && point5 < min) {
      point5 = elastic ? mix2(min, point5, elastic.min) : Math.max(point5, min);
    } else if (max !== void 0 && point5 > max) {
      point5 = elastic ? mix2(max, point5, elastic.max) : Math.min(point5, max);
    }
    return point5;
  }
  function calcRelativeAxisConstraints(axis, min, max) {
    return {
      min: min !== void 0 ? axis.min + min : void 0,
      max: max !== void 0 ? axis.max + max - (axis.max - axis.min) : void 0
    };
  }
  function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
    return {
      x: calcRelativeAxisConstraints(layoutBox.x, left, right),
      y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
    };
  }
  function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    let min = constraintsAxis.min - layoutAxis.min;
    let max = constraintsAxis.max - layoutAxis.max;
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
      [min, max] = [max, min];
    }
    return { min, max };
  }
  function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
      x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
      y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
  }
  function calcOrigin2(source, target) {
    let origin = 0.5;
    const sourceLength = calcLength(source);
    const targetLength = calcLength(target);
    if (targetLength > sourceLength) {
      origin = progress(target.min, target.max - sourceLength, source.min);
    } else if (sourceLength > targetLength) {
      origin = progress(source.min, source.max - targetLength, target.min);
    }
    return clamp(0, 1, origin);
  }
  function rebaseAxisConstraints(layout3, constraints) {
    const relativeConstraints = {};
    if (constraints.min !== void 0) {
      relativeConstraints.min = constraints.min - layout3.min;
    }
    if (constraints.max !== void 0) {
      relativeConstraints.max = constraints.max - layout3.min;
    }
    return relativeConstraints;
  }
  var defaultElastic = 0.35;
  function resolveDragElastic(dragElastic = defaultElastic) {
    if (dragElastic === false) {
      dragElastic = 0;
    } else if (dragElastic === true) {
      dragElastic = defaultElastic;
    }
    return {
      x: resolveAxisElastic(dragElastic, "left", "right"),
      y: resolveAxisElastic(dragElastic, "top", "bottom")
    };
  }
  function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
    return {
      min: resolvePointElastic(dragElastic, minLabel),
      max: resolvePointElastic(dragElastic, maxLabel)
    };
  }
  function resolvePointElastic(dragElastic, label) {
    return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/models.mjs
  var createAxisDelta = () => ({
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
  });
  var createDelta = () => ({
    x: createAxisDelta(),
    y: createAxisDelta()
  });
  var createAxis = () => ({ min: 0, max: 0 });
  var createBox = () => ({
    x: createAxis(),
    y: createAxis()
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
  function eachAxis(callback) {
    return [callback("x"), callback("y")];
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
  function convertBoundingBoxToBox({ top, left, right, bottom }) {
    return {
      x: { min: left, max: right },
      y: { min: top, max: bottom }
    };
  }
  function convertBoxToBoundingBox({ x, y }) {
    return { top: y.min, right: x.max, bottom: y.max, left: x.min };
  }
  function transformBoxPoints(point5, transformPoint2) {
    if (!transformPoint2)
      return point5;
    const topLeft = transformPoint2({ x: point5.left, y: point5.top });
    const bottomRight = transformPoint2({ x: point5.right, y: point5.bottom });
    return {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
  function isIdentityScale(scale2) {
    return scale2 === void 0 || scale2 === 1;
  }
  function hasScale({ scale: scale2, scaleX, scaleY }) {
    return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
  }
  function hasTransform(values) {
    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY;
  }
  function has2DTranslate(values) {
    return is2DTranslate(values.x) || is2DTranslate(values.y);
  }
  function is2DTranslate(value) {
    return value && value !== "0%";
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
  function scalePoint(point5, scale2, originPoint) {
    const distanceFromOrigin = point5 - originPoint;
    const scaled = scale2 * distanceFromOrigin;
    return originPoint + scaled;
  }
  function applyPointDelta(point5, translate, scale2, originPoint, boxScale) {
    if (boxScale !== void 0) {
      point5 = scalePoint(point5, boxScale, originPoint);
    }
    return scalePoint(point5, scale2, originPoint) + translate;
  }
  function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
    axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function applyBoxDelta(box, { x, y }) {
    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);
    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);
  }
  function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
    const treeLength = treePath.length;
    if (!treeLength)
      return;
    treeScale.x = treeScale.y = 1;
    let node2;
    let delta;
    for (let i = 0; i < treeLength; i++) {
      node2 = treePath[i];
      delta = node2.projectionDelta;
      const instance = node2.instance;
      if (instance && instance.style && instance.style.display === "contents") {
        continue;
      }
      if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
        transformBox(box, {
          x: -node2.scroll.offset.x,
          y: -node2.scroll.offset.y
        });
      }
      if (delta) {
        treeScale.x *= delta.x.scale;
        treeScale.y *= delta.y.scale;
        applyBoxDelta(box, delta);
      }
      if (isSharedTransition && hasTransform(node2.latestValues)) {
        transformBox(box, node2.latestValues);
      }
    }
    treeScale.x = snapToDefault(treeScale.x);
    treeScale.y = snapToDefault(treeScale.y);
  }
  function snapToDefault(scale2) {
    if (Number.isInteger(scale2))
      return scale2;
    return scale2 > 1.0000000000001 || scale2 < 0.999999999999 ? scale2 : 1;
  }
  function translateAxis(axis, distance3) {
    axis.min = axis.min + distance3;
    axis.max = axis.max + distance3;
  }
  function transformAxis(axis, transforms, [key, scaleKey, originKey]) {
    const axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
    const originPoint = mix2(axis.min, axis.max, axisOrigin);
    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
  }
  var xKeys = ["x", "scaleX", "originX"];
  var yKeys = ["y", "scaleY", "originY"];
  function transformBox(box, transform2) {
    transformAxis(box.x, transform2, xKeys);
    transformAxis(box.y, transform2, yKeys);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  function measureViewportBox(instance, transformPoint2) {
    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
  }
  function measurePageBox(element4, rootProjectionNode2, transformPagePoint) {
    const viewportBox = measureViewportBox(element4, transformPagePoint);
    const { scroll: scroll2 } = rootProjectionNode2;
    if (scroll2) {
      translateAxis(viewportBox.x, scroll2.offset.x);
      translateAxis(viewportBox.y, scroll2.offset.y);
    }
    return viewportBox;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
  var elementDragControls = /* @__PURE__ */ new WeakMap();
  var VisualElementDragControls = class {
    constructor(visualElement) {
      this.openGlobalLock = null;
      this.isDragging = false;
      this.currentDirection = null;
      this.originPoint = { x: 0, y: 0 };
      this.constraints = false;
      this.hasMutatedConstraints = false;
      this.elastic = createBox();
      this.visualElement = visualElement;
    }
    start(originEvent, { snapToCursor = false } = {}) {
      const { presenceContext } = this.visualElement;
      if (presenceContext && presenceContext.isPresent === false)
        return;
      const onSessionStart = (event) => {
        this.stopAnimation();
        if (snapToCursor) {
          this.snapToCursor(extractEventInfo(event, "page").point);
        }
      };
      const onStart = (event, info) => {
        const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
        if (drag2 && !dragPropagation) {
          if (this.openGlobalLock)
            this.openGlobalLock();
          this.openGlobalLock = getGlobalLock(drag2);
          if (!this.openGlobalLock)
            return;
        }
        this.isDragging = true;
        this.currentDirection = null;
        this.resolveConstraints();
        if (this.visualElement.projection) {
          this.visualElement.projection.isAnimationBlocked = true;
          this.visualElement.projection.target = void 0;
        }
        eachAxis((axis) => {
          let current = this.getAxisMotionValue(axis).get() || 0;
          if (percent.test(current)) {
            const { projection } = this.visualElement;
            if (projection && projection.layout) {
              const measuredAxis = projection.layout.layoutBox[axis];
              if (measuredAxis) {
                const length = calcLength(measuredAxis);
                current = length * (parseFloat(current) / 100);
              }
            }
          }
          this.originPoint[axis] = current;
        });
        if (onDragStart) {
          sync.update(() => onDragStart(event, info));
        }
        const { animationState } = this.visualElement;
        animationState && animationState.setActive("whileDrag", true);
      };
      const onMove = (event, info) => {
        const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
        if (!dragPropagation && !this.openGlobalLock)
          return;
        const { offset } = info;
        if (dragDirectionLock && this.currentDirection === null) {
          this.currentDirection = getCurrentDirection(offset);
          if (this.currentDirection !== null) {
            onDirectionLock && onDirectionLock(this.currentDirection);
          }
          return;
        }
        this.updateAxis("x", info.point, offset);
        this.updateAxis("y", info.point, offset);
        this.visualElement.render();
        onDrag && onDrag(event, info);
      };
      const onSessionEnd = (event, info) => this.stop(event, info);
      this.panSession = new PanSession(originEvent, {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd
      }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
    }
    stop(event, info) {
      const isDragging = this.isDragging;
      this.cancel();
      if (!isDragging)
        return;
      const { velocity } = info;
      this.startAnimation(velocity);
      const { onDragEnd } = this.getProps();
      if (onDragEnd) {
        sync.update(() => onDragEnd(event, info));
      }
    }
    cancel() {
      this.isDragging = false;
      const { projection, animationState } = this.visualElement;
      if (projection) {
        projection.isAnimationBlocked = false;
      }
      this.panSession && this.panSession.end();
      this.panSession = void 0;
      const { dragPropagation } = this.getProps();
      if (!dragPropagation && this.openGlobalLock) {
        this.openGlobalLock();
        this.openGlobalLock = null;
      }
      animationState && animationState.setActive("whileDrag", false);
    }
    updateAxis(axis, _point, offset) {
      const { drag: drag2 } = this.getProps();
      if (!offset || !shouldDrag(axis, drag2, this.currentDirection))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      let next = this.originPoint[axis] + offset[axis];
      if (this.constraints && this.constraints[axis]) {
        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
      }
      axisValue.set(next);
    }
    resolveConstraints() {
      const { dragConstraints, dragElastic } = this.getProps();
      const { layout: layout3 } = this.visualElement.projection || {};
      const prevConstraints = this.constraints;
      if (dragConstraints && isRefObject(dragConstraints)) {
        if (!this.constraints) {
          this.constraints = this.resolveRefConstraints();
        }
      } else {
        if (dragConstraints && layout3) {
          this.constraints = calcRelativeConstraints(layout3.layoutBox, dragConstraints);
        } else {
          this.constraints = false;
        }
      }
      this.elastic = resolveDragElastic(dragElastic);
      if (prevConstraints !== this.constraints && layout3 && this.constraints && !this.hasMutatedConstraints) {
        eachAxis((axis) => {
          if (this.getAxisMotionValue(axis)) {
            this.constraints[axis] = rebaseAxisConstraints(layout3.layoutBox[axis], this.constraints[axis]);
          }
        });
      }
    }
    resolveRefConstraints() {
      const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
      if (!constraints || !isRefObject(constraints))
        return false;
      const constraintsElement = constraints.current;
      invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
      const { projection } = this.visualElement;
      if (!projection || !projection.layout)
        return false;
      const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
      let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
      if (onMeasureDragConstraints) {
        const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
        this.hasMutatedConstraints = !!userConstraints;
        if (userConstraints) {
          measuredConstraints = convertBoundingBoxToBox(userConstraints);
        }
      }
      return measuredConstraints;
    }
    startAnimation(velocity) {
      const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
      const constraints = this.constraints || {};
      const momentumAnimations = eachAxis((axis) => {
        if (!shouldDrag(axis, drag2, this.currentDirection)) {
          return;
        }
        let transition3 = constraints && constraints[axis] || {};
        if (dragSnapToOrigin)
          transition3 = { min: 0, max: 0 };
        const bounceStiffness = dragElastic ? 200 : 1e6;
        const bounceDamping = dragElastic ? 40 : 1e7;
        const inertia2 = __spreadValues(__spreadValues({
          type: "inertia",
          velocity: dragMomentum ? velocity[axis] : 0,
          bounceStiffness,
          bounceDamping,
          timeConstant: 750,
          restDelta: 1,
          restSpeed: 10
        }, dragTransition), transition3);
        return this.startAxisValueAnimation(axis, inertia2);
      });
      return Promise.all(momentumAnimations).then(onDragTransitionEnd);
    }
    startAxisValueAnimation(axis, transition3) {
      const axisValue = this.getAxisMotionValue(axis);
      return axisValue.start(animateMotionValue(axis, axisValue, 0, transition3));
    }
    stopAnimation() {
      eachAxis((axis) => this.getAxisMotionValue(axis).stop());
    }
    getAxisMotionValue(axis) {
      const dragKey = "_drag" + axis.toUpperCase();
      const props = this.visualElement.getProps();
      const externalMotionValue = props[dragKey];
      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
    }
    snapToCursor(point5) {
      eachAxis((axis) => {
        const { drag: drag2 } = this.getProps();
        if (!shouldDrag(axis, drag2, this.currentDirection))
          return;
        const { projection } = this.visualElement;
        const axisValue = this.getAxisMotionValue(axis);
        if (projection && projection.layout) {
          const { min, max } = projection.layout.layoutBox[axis];
          axisValue.set(point5[axis] - mix2(min, max, 0.5));
        }
      });
    }
    scalePositionWithinConstraints() {
      if (!this.visualElement.current)
        return;
      const { drag: drag2, dragConstraints } = this.getProps();
      const { projection } = this.visualElement;
      if (!isRefObject(dragConstraints) || !projection || !this.constraints)
        return;
      this.stopAnimation();
      const boxProgress = { x: 0, y: 0 };
      eachAxis((axis) => {
        const axisValue = this.getAxisMotionValue(axis);
        if (axisValue) {
          const latest = axisValue.get();
          boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
        }
      });
      const { transformTemplate: transformTemplate2 } = this.visualElement.getProps();
      this.visualElement.current.style.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
      this.resolveConstraints();
      eachAxis((axis) => {
        if (!shouldDrag(axis, drag2, null))
          return;
        const axisValue = this.getAxisMotionValue(axis);
        const { min, max } = this.constraints[axis];
        axisValue.set(mix2(min, max, boxProgress[axis]));
      });
    }
    addListeners() {
      if (!this.visualElement.current)
        return;
      elementDragControls.set(this.visualElement, this);
      const element4 = this.visualElement.current;
      const stopPointerListener = addPointerEvent(element4, "pointerdown", (event) => {
        const { drag: drag2, dragListener = true } = this.getProps();
        drag2 && dragListener && this.start(event);
      });
      const measureDragConstraints = () => {
        const { dragConstraints } = this.getProps();
        if (isRefObject(dragConstraints)) {
          this.constraints = this.resolveRefConstraints();
        }
      };
      const { projection } = this.visualElement;
      const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
      if (projection && !projection.layout) {
        projection.root && projection.root.updateScroll();
        projection.updateLayout();
      }
      measureDragConstraints();
      const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
      const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
        if (this.isDragging && hasLayoutChanged) {
          eachAxis((axis) => {
            const motionValue2 = this.getAxisMotionValue(axis);
            if (!motionValue2)
              return;
            this.originPoint[axis] += delta[axis].translate;
            motionValue2.set(motionValue2.get() + delta[axis].translate);
          });
          this.visualElement.render();
        }
      });
      return () => {
        stopResizeListener();
        stopPointerListener();
        stopMeasureLayoutListener();
        stopLayoutUpdateListener && stopLayoutUpdateListener();
      };
    }
    getProps() {
      const props = this.visualElement.getProps();
      const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
      return __spreadProps(__spreadValues({}, props), {
        drag: drag2,
        dragDirectionLock,
        dragPropagation,
        dragConstraints,
        dragElastic,
        dragMomentum
      });
    }
  };
  function shouldDrag(direction2, drag2, currentDirection) {
    return (drag2 === true || drag2 === direction2) && (currentDirection === null || currentDirection === direction2);
  }
  function getCurrentDirection(offset, lockThreshold = 10) {
    let direction2 = null;
    if (Math.abs(offset.y) > lockThreshold) {
      direction2 = "y";
    } else if (Math.abs(offset.x) > lockThreshold) {
      direction2 = "x";
    }
    return direction2;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/drag/index.mjs
  var DragGesture = class extends Feature {
    constructor(node2) {
      super(node2);
      this.removeGroupControls = noop3;
      this.removeListeners = noop3;
      this.controls = new VisualElementDragControls(node2);
    }
    mount() {
      const { dragControls } = this.node.getProps();
      if (dragControls) {
        this.removeGroupControls = dragControls.subscribe(this.controls);
      }
      this.removeListeners = this.controls.addListeners() || noop3;
    }
    unmount() {
      this.removeGroupControls();
      this.removeListeners();
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/gestures/pan/index.mjs
  var asyncHandler = (handler) => (event, info) => {
    if (handler) {
      sync.update(() => handler(event, info));
    }
  };
  var PanGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.removePointerDownListener = noop3;
    }
    onPointerDown(pointerDownEvent) {
      this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
    }
    createPanHandlers() {
      const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
      return {
        onSessionStart: asyncHandler(onPanSessionStart),
        onStart: asyncHandler(onPanStart),
        onMove: onPan,
        onEnd: (event, info) => {
          delete this.session;
          if (onPanEnd) {
            sync.update(() => onPanEnd(event, info));
          }
        }
      };
    }
    mount() {
      this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
    }
    update() {
      this.session && this.session.updateHandlers(this.createPanHandlers());
    }
    unmount() {
      this.removePointerDownListener();
      this.session && this.session.end();
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var import_react37 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  var import_react36 = __toESM(require_react(), 1);
  function usePresence() {
    const context = (0, import_react36.useContext)(PresenceContext);
    if (context === null)
      return [true, null];
    const { isPresent: isPresent2, onExitComplete, register } = context;
    const id4 = (0, import_react36.useId)();
    (0, import_react36.useEffect)(() => register(id4), []);
    const safeToRemove = () => onExitComplete && onExitComplete(id4);
    return !isPresent2 && onExitComplete ? [false, safeToRemove] : [true];
  }
  function useIsPresent() {
    return isPresent((0, import_react36.useContext)(PresenceContext));
  }
  function isPresent(context) {
    return context === null ? true : context.isPresent;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
  function pixelsToPercent(pixels, axis) {
    if (axis.max === axis.min)
      return 0;
    return pixels / (axis.max - axis.min) * 100;
  }
  var correctBorderRadius = {
    correct: (latest, node2) => {
      if (!node2.target)
        return latest;
      if (typeof latest === "string") {
        if (px2.test(latest)) {
          latest = parseFloat(latest);
        } else {
          return latest;
        }
      }
      const x = pixelsToPercent(latest, node2.target.x);
      const y = pixelsToPercent(latest, node2.target.y);
      return `${x}% ${y}%`;
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
  var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  function parseCSSVariable(current) {
    const match = cssVariableRegex.exec(current);
    if (!match)
      return [,];
    const [, token, fallback] = match;
    return [token, fallback];
  }
  var maxDepth = 4;
  function getVariableValue(current, element4, depth = 1) {
    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
    const [token, fallback] = parseCSSVariable(current);
    if (!token)
      return;
    const resolved = window.getComputedStyle(element4).getPropertyValue(token);
    if (resolved) {
      return resolved.trim();
    } else if (isCSSVariableToken(fallback)) {
      return getVariableValue(fallback, element4, depth + 1);
    } else {
      return fallback;
    }
  }
  function resolveCSSVariables(visualElement, _a7, transitionEnd) {
    var target = __objRest(_a7, []);
    const element4 = visualElement.current;
    if (!(element4 instanceof Element))
      return { target, transitionEnd };
    if (transitionEnd) {
      transitionEnd = __spreadValues({}, transitionEnd);
    }
    visualElement.values.forEach((value) => {
      const current = value.get();
      if (!isCSSVariableToken(current))
        return;
      const resolved = getVariableValue(current, element4);
      if (resolved)
        value.set(resolved);
    });
    for (const key in target) {
      const current = target[key];
      if (!isCSSVariableToken(current))
        continue;
      const resolved = getVariableValue(current, element4);
      if (!resolved)
        continue;
      target[key] = resolved;
      if (!transitionEnd)
        transitionEnd = {};
      if (transitionEnd[key] === void 0) {
        transitionEnd[key] = current;
      }
    }
    return { target, transitionEnd };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
  var varToken = "_$css";
  var correctBoxShadow = {
    correct: (latest, { treeScale, projectionDelta }) => {
      const original = latest;
      const containsCSSVariables = latest.includes("var(");
      const cssVariables = [];
      if (containsCSSVariables) {
        latest = latest.replace(cssVariableRegex, (match) => {
          cssVariables.push(match);
          return varToken;
        });
      }
      const shadow = complex.parse(latest);
      if (shadow.length > 5)
        return original;
      const template = complex.createTransformer(latest);
      const offset = typeof shadow[0] !== "number" ? 1 : 0;
      const xScale = projectionDelta.x.scale * treeScale.x;
      const yScale = projectionDelta.y.scale * treeScale.y;
      shadow[0 + offset] /= xScale;
      shadow[1 + offset] /= yScale;
      const averageScale = mix2(xScale, yScale, 0.5);
      if (typeof shadow[2 + offset] === "number")
        shadow[2 + offset] /= averageScale;
      if (typeof shadow[3 + offset] === "number")
        shadow[3 + offset] /= averageScale;
      let output = template(shadow);
      if (containsCSSVariables) {
        let i = 0;
        output = output.replace(varToken, () => {
          const cssVariable = cssVariables[i];
          i++;
          return cssVariable;
        });
      }
      return output;
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var MeasureLayoutWithContext = class extends import_react37.default.Component {
    componentDidMount() {
      const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
      const { projection } = visualElement;
      addScaleCorrector(defaultScaleCorrectors);
      if (projection) {
        if (layoutGroup.group)
          layoutGroup.group.add(projection);
        if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
          switchLayoutGroup.register(projection);
        }
        projection.root.didUpdate();
        projection.addEventListener("animationComplete", () => {
          this.safeToRemove();
        });
        projection.setOptions(__spreadProps(__spreadValues({}, projection.options), {
          onExitComplete: () => this.safeToRemove()
        }));
      }
      globalProjectionState.hasEverUpdated = true;
    }
    getSnapshotBeforeUpdate(prevProps) {
      const { layoutDependency, visualElement, drag: drag2, isPresent: isPresent2 } = this.props;
      const projection = visualElement.projection;
      if (!projection)
        return null;
      projection.isPresent = isPresent2;
      if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
        projection.willUpdate();
      } else {
        this.safeToRemove();
      }
      if (prevProps.isPresent !== isPresent2) {
        if (isPresent2) {
          projection.promote();
        } else if (!projection.relegate()) {
          sync.postRender(() => {
            const stack = projection.getStack();
            if (!stack || !stack.members.length) {
              this.safeToRemove();
            }
          });
        }
      }
      return null;
    }
    componentDidUpdate() {
      const { projection } = this.props.visualElement;
      if (projection) {
        projection.root.didUpdate();
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      }
    }
    componentWillUnmount() {
      const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
      const { projection } = visualElement;
      if (projection) {
        projection.scheduleCheckAfterUnmount();
        if (layoutGroup && layoutGroup.group)
          layoutGroup.group.remove(projection);
        if (promoteContext && promoteContext.deregister)
          promoteContext.deregister(projection);
      }
    }
    safeToRemove() {
      const { safeToRemove } = this.props;
      safeToRemove && safeToRemove();
    }
    render() {
      return null;
    }
  };
  function MeasureLayout(props) {
    const [isPresent2, safeToRemove] = usePresence();
    const layoutGroup = (0, import_react37.useContext)(LayoutGroupContext);
    return import_react37.default.createElement(MeasureLayoutWithContext, __spreadProps(__spreadValues({}, props), { layoutGroup, switchLayoutGroup: (0, import_react37.useContext)(SwitchLayoutGroupContext), isPresent: isPresent2, safeToRemove }));
  }
  var defaultScaleCorrectors = {
    borderRadius: __spreadProps(__spreadValues({}, correctBorderRadius), {
      applyTo: [
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderBottomLeftRadius",
        "borderBottomRightRadius"
      ]
    }),
    borderTopLeftRadius: correctBorderRadius,
    borderTopRightRadius: correctBorderRadius,
    borderBottomLeftRadius: correctBorderRadius,
    borderBottomRightRadius: correctBorderRadius,
    boxShadow: correctBoxShadow
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
  var borders2 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
  var numBorders = borders2.length;
  var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
  var isPx = (value) => typeof value === "number" || px2.test(value);
  function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
    if (shouldCrossfadeOpacity) {
      target.opacity = mix2(
        0,
        lead.opacity !== void 0 ? lead.opacity : 1,
        easeCrossfadeIn(progress2)
      );
      target.opacityExit = mix2(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2));
    } else if (isOnlyMember) {
      target.opacity = mix2(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2);
    }
    for (let i = 0; i < numBorders; i++) {
      const borderLabel = `border${borders2[i]}Radius`;
      let followRadius = getRadius(follow, borderLabel);
      let leadRadius = getRadius(lead, borderLabel);
      if (followRadius === void 0 && leadRadius === void 0)
        continue;
      followRadius || (followRadius = 0);
      leadRadius || (leadRadius = 0);
      const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
      if (canMix) {
        target[borderLabel] = Math.max(mix2(asNumber(followRadius), asNumber(leadRadius), progress2), 0);
        if (percent.test(leadRadius) || percent.test(followRadius)) {
          target[borderLabel] += "%";
        }
      } else {
        target[borderLabel] = leadRadius;
      }
    }
    if (follow.rotate || lead.rotate) {
      target.rotate = mix2(follow.rotate || 0, lead.rotate || 0, progress2);
    }
  }
  function getRadius(values, radiusName) {
    return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
  }
  var easeCrossfadeIn = compress(0, 0.5, circOut);
  var easeCrossfadeOut = compress(0.5, 0.95, noop3);
  function compress(min, max, easing) {
    return (p) => {
      if (p < min)
        return 0;
      if (p > max)
        return 1;
      return easing(progress(min, max, p));
    };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
  function copyAxisInto(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
  }
  function copyBoxInto(box, originBox) {
    copyAxisInto(box.x, originBox.x);
    copyAxisInto(box.y, originBox.y);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
  function removePointDelta(point5, translate, scale2, originPoint, boxScale) {
    point5 -= translate;
    point5 = scalePoint(point5, 1 / scale2, originPoint);
    if (boxScale !== void 0) {
      point5 = scalePoint(point5, 1 / boxScale, originPoint);
    }
    return point5;
  }
  function removeAxisDelta(axis, translate = 0, scale2 = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
    if (percent.test(translate)) {
      translate = parseFloat(translate);
      const relativeProgress = mix2(sourceAxis.min, sourceAxis.max, translate / 100);
      translate = relativeProgress - sourceAxis.min;
    }
    if (typeof translate !== "number")
      return;
    let originPoint = mix2(originAxis.min, originAxis.max, origin);
    if (axis === originAxis)
      originPoint -= translate;
    axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);
  }
  var xKeys2 = ["x", "scaleX", "originX"];
  var yKeys2 = ["y", "scaleY", "originY"];
  function removeBoxTransforms(box, transforms, originBox, sourceBox) {
    removeAxisTransforms(box.x, transforms, xKeys2, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
    removeAxisTransforms(box.y, transforms, yKeys2, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
  function isAxisDeltaZero(delta) {
    return delta.translate === 0 && delta.scale === 1;
  }
  function isDeltaZero(delta) {
    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
  }
  function boxEquals(a, b) {
    return a.x.min === b.x.min && a.x.max === b.x.max && a.y.min === b.y.min && a.y.max === b.y.max;
  }
  function aspectRatio(box) {
    return calcLength(box.x) / calcLength(box.y);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/shared/stack.mjs
  var NodeStack = class {
    constructor() {
      this.members = [];
    }
    add(node2) {
      addUniqueItem(this.members, node2);
      node2.scheduleRender();
    }
    remove(node2) {
      removeItem(this.members, node2);
      if (node2 === this.prevLead) {
        this.prevLead = void 0;
      }
      if (node2 === this.lead) {
        const prevLead = this.members[this.members.length - 1];
        if (prevLead) {
          this.promote(prevLead);
        }
      }
    }
    relegate(node2) {
      const indexOfNode = this.members.findIndex((member) => node2 === member);
      if (indexOfNode === 0)
        return false;
      let prevLead;
      for (let i = indexOfNode; i >= 0; i--) {
        const member = this.members[i];
        if (member.isPresent !== false) {
          prevLead = member;
          break;
        }
      }
      if (prevLead) {
        this.promote(prevLead);
        return true;
      } else {
        return false;
      }
    }
    promote(node2, preserveFollowOpacity) {
      const prevLead = this.lead;
      if (node2 === prevLead)
        return;
      this.prevLead = prevLead;
      this.lead = node2;
      node2.show();
      if (prevLead) {
        prevLead.instance && prevLead.scheduleRender();
        node2.scheduleRender();
        node2.resumeFrom = prevLead;
        if (preserveFollowOpacity) {
          node2.resumeFrom.preserveOpacity = true;
        }
        if (prevLead.snapshot) {
          node2.snapshot = prevLead.snapshot;
          node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
        }
        if (node2.root && node2.root.isUpdating) {
          node2.isLayoutDirty = true;
        }
        const { crossfade } = node2.options;
        if (crossfade === false) {
          prevLead.hide();
        }
      }
    }
    exitAnimationComplete() {
      this.members.forEach((node2) => {
        const { options, resumingFrom } = node2;
        options.onExitComplete && options.onExitComplete();
        if (resumingFrom) {
          resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
        }
      });
    }
    scheduleRender() {
      this.members.forEach((node2) => {
        node2.instance && node2.scheduleRender(false);
      });
    }
    removeLeadSnapshot() {
      if (this.lead && this.lead.snapshot) {
        this.lead.snapshot = void 0;
      }
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/styles/transform.mjs
  function buildProjectionTransform(delta, treeScale, latestTransform) {
    let transform2 = "";
    const xTranslate = delta.x.translate / treeScale.x;
    const yTranslate = delta.y.translate / treeScale.y;
    if (xTranslate || yTranslate) {
      transform2 = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;
    }
    if (treeScale.x !== 1 || treeScale.y !== 1) {
      transform2 += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
    }
    if (latestTransform) {
      const { rotate, rotateX, rotateY } = latestTransform;
      if (rotate)
        transform2 += `rotate(${rotate}deg) `;
      if (rotateX)
        transform2 += `rotateX(${rotateX}deg) `;
      if (rotateY)
        transform2 += `rotateY(${rotateY}deg) `;
    }
    const elementScaleX = delta.x.scale * treeScale.x;
    const elementScaleY = delta.y.scale * treeScale.y;
    if (elementScaleX !== 1 || elementScaleY !== 1) {
      transform2 += `scale(${elementScaleX}, ${elementScaleY})`;
    }
    return transform2 || "none";
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
  var compareByDepth = (a, b) => a.depth - b.depth;

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
  var FlatTree = class {
    constructor() {
      this.children = [];
      this.isDirty = false;
    }
    add(child) {
      addUniqueItem(this.children, child);
      this.isDirty = true;
    }
    remove(child) {
      removeItem(this.children, child);
      this.isDirty = true;
    }
    forEach(callback) {
      this.isDirty && this.children.sort(compareByDepth);
      this.isDirty = false;
      this.children.forEach(callback);
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/delay.mjs
  function delay(callback, timeout) {
    const start = performance.now();
    const checkElapsed = ({ timestamp }) => {
      const elapsed = timestamp - start;
      if (elapsed >= timeout) {
        cancelSync.read(checkElapsed);
        callback(elapsed - timeout);
      }
    };
    sync.read(checkElapsed, true);
    return () => cancelSync.read(checkElapsed);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/debug/record.mjs
  function record(data) {
    if (window.MotionDebug) {
      window.MotionDebug.record(data);
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
  function isSVGElement(element4) {
    return element4 instanceof SVGElement && element4.tagName !== "svg";
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs
  function animateSingleValue(value, keyframes3, options) {
    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
    motionValue$1.start(animateMotionValue("", motionValue$1, keyframes3, options));
    return motionValue$1.animation;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
  var transformAxes = ["", "X", "Y", "Z"];
  var animationTarget = 1e3;
  var id3 = 0;
  var projectionFrameData = {
    type: "projectionFrame",
    totalNodes: 0,
    resolvedTargetDeltas: 0,
    recalculatedProjection: 0
  };
  function createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
    return class ProjectionNode {
      constructor(elementId, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
        this.id = id3++;
        this.animationId = 0;
        this.children = /* @__PURE__ */ new Set();
        this.options = {};
        this.isTreeAnimating = false;
        this.isAnimationBlocked = false;
        this.isLayoutDirty = false;
        this.isProjectionDirty = false;
        this.isSharedProjectionDirty = false;
        this.isTransformDirty = false;
        this.updateManuallyBlocked = false;
        this.updateBlockedByResize = false;
        this.isUpdating = false;
        this.isSVG = false;
        this.needsReset = false;
        this.shouldResetTransform = false;
        this.treeScale = { x: 1, y: 1 };
        this.eventHandlers = /* @__PURE__ */ new Map();
        this.potentialNodes = /* @__PURE__ */ new Map();
        this.checkUpdateFailed = () => {
          if (this.isUpdating) {
            this.isUpdating = false;
            this.clearAllSnapshots();
          }
        };
        this.updateProjection = () => {
          projectionFrameData.totalNodes = projectionFrameData.resolvedTargetDeltas = projectionFrameData.recalculatedProjection = 0;
          this.nodes.forEach(propagateDirtyNodes);
          this.nodes.forEach(resolveTargetDelta);
          this.nodes.forEach(calcProjection);
          this.nodes.forEach(cleanDirtyNodes);
          record(projectionFrameData);
        };
        this.hasProjected = false;
        this.isVisible = true;
        this.animationProgress = 0;
        this.sharedNodes = /* @__PURE__ */ new Map();
        this.elementId = elementId;
        this.latestValues = latestValues;
        this.root = parent ? parent.root || parent : this;
        this.path = parent ? [...parent.path, parent] : [];
        this.parent = parent;
        this.depth = parent ? parent.depth + 1 : 0;
        elementId && this.root.registerPotentialNode(elementId, this);
        for (let i = 0; i < this.path.length; i++) {
          this.path[i].shouldResetTransform = true;
        }
        if (this.root === this)
          this.nodes = new FlatTree();
      }
      addEventListener(name, handler) {
        if (!this.eventHandlers.has(name)) {
          this.eventHandlers.set(name, new SubscriptionManager());
        }
        return this.eventHandlers.get(name).add(handler);
      }
      notifyListeners(name, ...args) {
        const subscriptionManager = this.eventHandlers.get(name);
        subscriptionManager && subscriptionManager.notify(...args);
      }
      hasListeners(name) {
        return this.eventHandlers.has(name);
      }
      registerPotentialNode(elementId, node2) {
        this.potentialNodes.set(elementId, node2);
      }
      mount(instance, isLayoutDirty = false) {
        if (this.instance)
          return;
        this.isSVG = isSVGElement(instance);
        this.instance = instance;
        const { layoutId, layout: layout3, visualElement } = this.options;
        if (visualElement && !visualElement.current) {
          visualElement.mount(instance);
        }
        this.root.nodes.add(this);
        this.parent && this.parent.children.add(this);
        this.elementId && this.root.potentialNodes.delete(this.elementId);
        if (isLayoutDirty && (layout3 || layoutId)) {
          this.isLayoutDirty = true;
        }
        if (attachResizeListener) {
          let cancelDelay;
          const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
          attachResizeListener(instance, () => {
            this.root.updateBlockedByResize = true;
            cancelDelay && cancelDelay();
            cancelDelay = delay(resizeUnblockUpdate, 250);
            if (globalProjectionState.hasAnimatedSinceResize) {
              globalProjectionState.hasAnimatedSinceResize = false;
              this.nodes.forEach(finishAnimation);
            }
          });
        }
        if (layoutId) {
          this.root.registerSharedNode(layoutId, this);
        }
        if (this.options.animate !== false && visualElement && (layoutId || layout3)) {
          this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
            if (this.isTreeAnimationBlocked()) {
              this.target = void 0;
              this.relativeTarget = void 0;
              return;
            }
            const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
            const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
            const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;
            const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
            if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
              if (this.resumeFrom) {
                this.resumingFrom = this.resumeFrom;
                this.resumingFrom.resumingFrom = void 0;
              }
              this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
              const animationOptions = __spreadProps(__spreadValues({}, getValueTransition(layoutTransition, "layout")), {
                onPlay: onLayoutAnimationStart,
                onComplete: onLayoutAnimationComplete
              });
              if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
                animationOptions.delay = 0;
                animationOptions.type = false;
              }
              this.startAnimation(animationOptions);
            } else {
              if (!hasLayoutChanged && this.animationProgress === 0) {
                finishAnimation(this);
              }
              if (this.isLead() && this.options.onExitComplete) {
                this.options.onExitComplete();
              }
            }
            this.targetLayout = newLayout;
          });
        }
      }
      unmount() {
        this.options.layoutId && this.willUpdate();
        this.root.nodes.remove(this);
        const stack = this.getStack();
        stack && stack.remove(this);
        this.parent && this.parent.children.delete(this);
        this.instance = void 0;
        cancelSync.preRender(this.updateProjection);
      }
      blockUpdate() {
        this.updateManuallyBlocked = true;
      }
      unblockUpdate() {
        this.updateManuallyBlocked = false;
      }
      isUpdateBlocked() {
        return this.updateManuallyBlocked || this.updateBlockedByResize;
      }
      isTreeAnimationBlocked() {
        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
      }
      startUpdate() {
        if (this.isUpdateBlocked())
          return;
        this.isUpdating = true;
        this.nodes && this.nodes.forEach(resetRotation);
        this.animationId++;
      }
      getTransformTemplate() {
        const { visualElement } = this.options;
        return visualElement && visualElement.getProps().transformTemplate;
      }
      willUpdate(shouldNotifyListeners = true) {
        if (this.root.isUpdateBlocked()) {
          this.options.onExitComplete && this.options.onExitComplete();
          return;
        }
        !this.root.isUpdating && this.root.startUpdate();
        if (this.isLayoutDirty)
          return;
        this.isLayoutDirty = true;
        for (let i = 0; i < this.path.length; i++) {
          const node2 = this.path[i];
          node2.shouldResetTransform = true;
          node2.updateScroll("snapshot");
          if (node2.options.layoutRoot) {
            node2.willUpdate(false);
          }
        }
        const { layoutId, layout: layout3 } = this.options;
        if (layoutId === void 0 && !layout3)
          return;
        const transformTemplate2 = this.getTransformTemplate();
        this.prevTransformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
        this.updateSnapshot();
        shouldNotifyListeners && this.notifyListeners("willUpdate");
      }
      didUpdate() {
        const updateWasBlocked = this.isUpdateBlocked();
        if (updateWasBlocked) {
          this.unblockUpdate();
          this.clearAllSnapshots();
          this.nodes.forEach(clearMeasurements);
          return;
        }
        if (!this.isUpdating)
          return;
        this.isUpdating = false;
        if (this.potentialNodes.size) {
          this.potentialNodes.forEach(mountNodeEarly);
          this.potentialNodes.clear();
        }
        this.nodes.forEach(resetTransformStyle);
        this.nodes.forEach(updateLayout);
        this.nodes.forEach(notifyLayoutUpdate);
        this.clearAllSnapshots();
        flushSync.update();
        flushSync.preRender();
        flushSync.render();
      }
      clearAllSnapshots() {
        this.nodes.forEach(clearSnapshot);
        this.sharedNodes.forEach(removeLeadSnapshots);
      }
      scheduleUpdateProjection() {
        sync.preRender(this.updateProjection, false, true);
      }
      scheduleCheckAfterUnmount() {
        sync.postRender(() => {
          if (this.isLayoutDirty) {
            this.root.didUpdate();
          } else {
            this.root.checkUpdateFailed();
          }
        });
      }
      updateSnapshot() {
        if (this.snapshot || !this.instance)
          return;
        this.snapshot = this.measure();
      }
      updateLayout() {
        if (!this.instance)
          return;
        this.updateScroll();
        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
          return;
        }
        if (this.resumeFrom && !this.resumeFrom.instance) {
          for (let i = 0; i < this.path.length; i++) {
            const node2 = this.path[i];
            node2.updateScroll();
          }
        }
        const prevLayout = this.layout;
        this.layout = this.measure(false);
        this.layoutCorrected = createBox();
        this.isLayoutDirty = false;
        this.projectionDelta = void 0;
        this.notifyListeners("measure", this.layout.layoutBox);
        const { visualElement } = this.options;
        visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
      }
      updateScroll(phase = "measure") {
        let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
          needsMeasurement = false;
        }
        if (needsMeasurement) {
          this.scroll = {
            animationId: this.root.animationId,
            phase,
            isRoot: checkIsScrollRoot(this.instance),
            offset: measureScroll(this.instance)
          };
        }
      }
      resetTransform() {
        if (!resetTransform)
          return;
        const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
        const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
        const transformTemplate2 = this.getTransformTemplate();
        const transformTemplateValue = transformTemplate2 ? transformTemplate2(this.latestValues, "") : void 0;
        const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
          resetTransform(this.instance, transformTemplateValue);
          this.shouldResetTransform = false;
          this.scheduleRender();
        }
      }
      measure(removeTransform = true) {
        const pageBox = this.measurePageBox();
        let layoutBox = this.removeElementScroll(pageBox);
        if (removeTransform) {
          layoutBox = this.removeTransform(layoutBox);
        }
        roundBox(layoutBox);
        return {
          animationId: this.root.animationId,
          measuredBox: pageBox,
          layoutBox,
          latestValues: {},
          source: this.id
        };
      }
      measurePageBox() {
        const { visualElement } = this.options;
        if (!visualElement)
          return createBox();
        const box = visualElement.measureViewportBox();
        const { scroll: scroll2 } = this.root;
        if (scroll2) {
          translateAxis(box.x, scroll2.offset.x);
          translateAxis(box.y, scroll2.offset.y);
        }
        return box;
      }
      removeElementScroll(box) {
        const boxWithoutScroll = createBox();
        copyBoxInto(boxWithoutScroll, box);
        for (let i = 0; i < this.path.length; i++) {
          const node2 = this.path[i];
          const { scroll: scroll2, options } = node2;
          if (node2 !== this.root && scroll2 && options.layoutScroll) {
            if (scroll2.isRoot) {
              copyBoxInto(boxWithoutScroll, box);
              const { scroll: rootScroll } = this.root;
              if (rootScroll) {
                translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);
                translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);
              }
            }
            translateAxis(boxWithoutScroll.x, scroll2.offset.x);
            translateAxis(boxWithoutScroll.y, scroll2.offset.y);
          }
        }
        return boxWithoutScroll;
      }
      applyTransform(box, transformOnly = false) {
        const withTransforms = createBox();
        copyBoxInto(withTransforms, box);
        for (let i = 0; i < this.path.length; i++) {
          const node2 = this.path[i];
          if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
            transformBox(withTransforms, {
              x: -node2.scroll.offset.x,
              y: -node2.scroll.offset.y
            });
          }
          if (!hasTransform(node2.latestValues))
            continue;
          transformBox(withTransforms, node2.latestValues);
        }
        if (hasTransform(this.latestValues)) {
          transformBox(withTransforms, this.latestValues);
        }
        return withTransforms;
      }
      removeTransform(box) {
        const boxWithoutTransform = createBox();
        copyBoxInto(boxWithoutTransform, box);
        for (let i = 0; i < this.path.length; i++) {
          const node2 = this.path[i];
          if (!node2.instance)
            continue;
          if (!hasTransform(node2.latestValues))
            continue;
          hasScale(node2.latestValues) && node2.updateSnapshot();
          const sourceBox = createBox();
          const nodeBox = node2.measurePageBox();
          copyBoxInto(sourceBox, nodeBox);
          removeBoxTransforms(boxWithoutTransform, node2.latestValues, node2.snapshot ? node2.snapshot.layoutBox : void 0, sourceBox);
        }
        if (hasTransform(this.latestValues)) {
          removeBoxTransforms(boxWithoutTransform, this.latestValues);
        }
        return boxWithoutTransform;
      }
      setTargetDelta(delta) {
        this.targetDelta = delta;
        this.root.scheduleUpdateProjection();
        this.isProjectionDirty = true;
      }
      setOptions(options) {
        this.options = __spreadProps(__spreadValues(__spreadValues({}, this.options), options), {
          crossfade: options.crossfade !== void 0 ? options.crossfade : true
        });
      }
      clearMeasurements() {
        this.scroll = void 0;
        this.layout = void 0;
        this.snapshot = void 0;
        this.prevTransformTemplateValue = void 0;
        this.targetDelta = void 0;
        this.target = void 0;
        this.isLayoutDirty = false;
      }
      resolveTargetDelta(forceRecalculation = false) {
        var _a7;
        const lead = this.getLead();
        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
        const isShared = Boolean(this.resumingFrom) || this !== lead;
        const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a7 = this.parent) === null || _a7 === void 0 ? void 0 : _a7.isProjectionDirty) || this.attemptToResolveRelativeTarget);
        if (canSkip)
          return;
        const { layout: layout3, layoutId } = this.options;
        if (!this.layout || !(layout3 || layoutId))
          return;
        this.resolvedRelativeTargetAt = frameData.timestamp;
        if (!this.targetDelta && !this.relativeTarget) {
          const relativeParent = this.getClosestProjectingParent();
          if (relativeParent && relativeParent.layout) {
            this.relativeParent = relativeParent;
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          } else {
            this.relativeParent = this.relativeTarget = void 0;
          }
        }
        if (!this.relativeTarget && !this.targetDelta)
          return;
        if (!this.target) {
          this.target = createBox();
          this.targetWithTransforms = createBox();
        }
        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
          if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
            this.relativeParent.resolveTargetDelta(true);
          }
          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
        } else if (this.targetDelta) {
          if (Boolean(this.resumingFrom)) {
            this.target = this.applyTransform(this.layout.layoutBox);
          } else {
            copyBoxInto(this.target, this.layout.layoutBox);
          }
          applyBoxDelta(this.target, this.targetDelta);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        if (this.attemptToResolveRelativeTarget) {
          this.attemptToResolveRelativeTarget = false;
          const relativeParent = this.getClosestProjectingParent();
          if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target) {
            this.relativeParent = relativeParent;
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          } else {
            this.relativeParent = this.relativeTarget = void 0;
          }
        }
        projectionFrameData.resolvedTargetDeltas++;
      }
      getClosestProjectingParent() {
        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
          return void 0;
        }
        if (this.parent.isProjecting()) {
          return this.parent;
        } else {
          return this.parent.getClosestProjectingParent();
        }
      }
      isProjecting() {
        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
      }
      calcProjection() {
        var _a7;
        const lead = this.getLead();
        const isShared = Boolean(this.resumingFrom) || this !== lead;
        let canSkip = true;
        if (this.isProjectionDirty || ((_a7 = this.parent) === null || _a7 === void 0 ? void 0 : _a7.isProjectionDirty)) {
          canSkip = false;
        }
        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
          canSkip = false;
        }
        if (this.resolvedRelativeTargetAt === frameData.timestamp) {
          canSkip = false;
        }
        if (canSkip)
          return;
        const { layout: layout3, layoutId } = this.options;
        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
        if (!this.isTreeAnimating) {
          this.targetDelta = this.relativeTarget = void 0;
        }
        if (!this.layout || !(layout3 || layoutId))
          return;
        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
        const { target } = lead;
        if (!target)
          return;
        if (!this.projectionDelta) {
          this.projectionDelta = createDelta();
          this.projectionDeltaWithTransform = createDelta();
        }
        const prevTreeScaleX = this.treeScale.x;
        const prevTreeScaleY = this.treeScale.y;
        const prevProjectionTransform = this.projectionTransform;
        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
          this.hasProjected = true;
          this.scheduleRender();
          this.notifyListeners("projectionUpdate", target);
        }
        projectionFrameData.recalculatedProjection++;
      }
      hide() {
        this.isVisible = false;
      }
      show() {
        this.isVisible = true;
      }
      scheduleRender(notifyAll = true) {
        this.options.scheduleRender && this.options.scheduleRender();
        if (notifyAll) {
          const stack = this.getStack();
          stack && stack.scheduleRender();
        }
        if (this.resumingFrom && !this.resumingFrom.instance) {
          this.resumingFrom = void 0;
        }
      }
      setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
        const snapshot = this.snapshot;
        const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
        const mixedValues = __spreadValues({}, this.latestValues);
        const targetDelta = createDelta();
        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
          this.relativeTarget = this.relativeTargetOrigin = void 0;
        }
        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
        const relativeLayout = createBox();
        const snapshotSource = snapshot ? snapshot.source : void 0;
        const layoutSource = this.layout ? this.layout.source : void 0;
        const isSharedLayoutAnimation = snapshotSource !== layoutSource;
        const stack = this.getStack();
        const isOnlyMember = !stack || stack.members.length <= 1;
        const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
        this.animationProgress = 0;
        let prevRelativeTarget;
        this.mixTargetDelta = (latest) => {
          const progress2 = latest / 1e3;
          mixAxisDelta(targetDelta.x, delta.x, progress2);
          mixAxisDelta(targetDelta.y, delta.y, progress2);
          this.setTargetDelta(targetDelta);
          if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
            calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
            mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2);
            if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
              this.isProjectionDirty = false;
            }
            if (!prevRelativeTarget)
              prevRelativeTarget = createBox();
            copyBoxInto(prevRelativeTarget, this.relativeTarget);
          }
          if (isSharedLayoutAnimation) {
            this.animationValues = mixedValues;
            mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember);
          }
          this.root.scheduleUpdateProjection();
          this.scheduleRender();
          this.animationProgress = progress2;
        };
        this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
      }
      startAnimation(options) {
        this.notifyListeners("animationStart");
        this.currentAnimation && this.currentAnimation.stop();
        if (this.resumingFrom && this.resumingFrom.currentAnimation) {
          this.resumingFrom.currentAnimation.stop();
        }
        if (this.pendingAnimation) {
          cancelSync.update(this.pendingAnimation);
          this.pendingAnimation = void 0;
        }
        this.pendingAnimation = sync.update(() => {
          globalProjectionState.hasAnimatedSinceResize = true;
          this.currentAnimation = animateSingleValue(0, animationTarget, __spreadProps(__spreadValues({}, options), {
            onUpdate: (latest) => {
              this.mixTargetDelta(latest);
              options.onUpdate && options.onUpdate(latest);
            },
            onComplete: () => {
              options.onComplete && options.onComplete();
              this.completeAnimation();
            }
          }));
          if (this.resumingFrom) {
            this.resumingFrom.currentAnimation = this.currentAnimation;
          }
          this.pendingAnimation = void 0;
        });
      }
      completeAnimation() {
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = void 0;
          this.resumingFrom.preserveOpacity = void 0;
        }
        const stack = this.getStack();
        stack && stack.exitAnimationComplete();
        this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
        this.notifyListeners("animationComplete");
      }
      finishAnimation() {
        if (this.currentAnimation) {
          this.mixTargetDelta && this.mixTargetDelta(animationTarget);
          this.currentAnimation.stop();
        }
        this.completeAnimation();
      }
      applyTransformsToTarget() {
        const lead = this.getLead();
        let { targetWithTransforms, target, layout: layout3, latestValues } = lead;
        if (!targetWithTransforms || !target || !layout3)
          return;
        if (this !== lead && this.layout && layout3 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout3.layoutBox)) {
          target = this.target || createBox();
          const xLength = calcLength(this.layout.layoutBox.x);
          target.x.min = lead.target.x.min;
          target.x.max = target.x.min + xLength;
          const yLength = calcLength(this.layout.layoutBox.y);
          target.y.min = lead.target.y.min;
          target.y.max = target.y.min + yLength;
        }
        copyBoxInto(targetWithTransforms, target);
        transformBox(targetWithTransforms, latestValues);
        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
      }
      registerSharedNode(layoutId, node2) {
        if (!this.sharedNodes.has(layoutId)) {
          this.sharedNodes.set(layoutId, new NodeStack());
        }
        const stack = this.sharedNodes.get(layoutId);
        stack.add(node2);
        const config2 = node2.options.initialPromotionConfig;
        node2.promote({
          transition: config2 ? config2.transition : void 0,
          preserveFollowOpacity: config2 && config2.shouldPreserveFollowOpacity ? config2.shouldPreserveFollowOpacity(node2) : void 0
        });
      }
      isLead() {
        const stack = this.getStack();
        return stack ? stack.lead === this : true;
      }
      getLead() {
        var _a7;
        const { layoutId } = this.options;
        return layoutId ? ((_a7 = this.getStack()) === null || _a7 === void 0 ? void 0 : _a7.lead) || this : this;
      }
      getPrevLead() {
        var _a7;
        const { layoutId } = this.options;
        return layoutId ? (_a7 = this.getStack()) === null || _a7 === void 0 ? void 0 : _a7.prevLead : void 0;
      }
      getStack() {
        const { layoutId } = this.options;
        if (layoutId)
          return this.root.sharedNodes.get(layoutId);
      }
      promote({ needsReset, transition: transition3, preserveFollowOpacity } = {}) {
        const stack = this.getStack();
        if (stack)
          stack.promote(this, preserveFollowOpacity);
        if (needsReset) {
          this.projectionDelta = void 0;
          this.needsReset = true;
        }
        if (transition3)
          this.setOptions({ transition: transition3 });
      }
      relegate() {
        const stack = this.getStack();
        if (stack) {
          return stack.relegate(this);
        } else {
          return false;
        }
      }
      resetRotation() {
        const { visualElement } = this.options;
        if (!visualElement)
          return;
        let hasRotate = false;
        const { latestValues } = visualElement;
        if (latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ) {
          hasRotate = true;
        }
        if (!hasRotate)
          return;
        const resetValues = {};
        for (let i = 0; i < transformAxes.length; i++) {
          const key = "rotate" + transformAxes[i];
          if (latestValues[key]) {
            resetValues[key] = latestValues[key];
            visualElement.setStaticValue(key, 0);
          }
        }
        visualElement.render();
        for (const key in resetValues) {
          visualElement.setStaticValue(key, resetValues[key]);
        }
        visualElement.scheduleRender();
      }
      getProjectionStyles(styleProp = {}) {
        var _a7, _b5;
        const styles2 = {};
        if (!this.instance || this.isSVG)
          return styles2;
        if (!this.isVisible) {
          return { visibility: "hidden" };
        } else {
          styles2.visibility = "";
        }
        const transformTemplate2 = this.getTransformTemplate();
        if (this.needsReset) {
          this.needsReset = false;
          styles2.opacity = "";
          styles2.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
          styles2.transform = transformTemplate2 ? transformTemplate2(this.latestValues, "") : "none";
          return styles2;
        }
        const lead = this.getLead();
        if (!this.projectionDelta || !this.layout || !lead.target) {
          const emptyStyles = {};
          if (this.options.layoutId) {
            emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
          }
          if (this.hasProjected && !hasTransform(this.latestValues)) {
            emptyStyles.transform = transformTemplate2 ? transformTemplate2({}, "") : "none";
            this.hasProjected = false;
          }
          return emptyStyles;
        }
        const valuesToRender = lead.animationValues || lead.latestValues;
        this.applyTransformsToTarget();
        styles2.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
        if (transformTemplate2) {
          styles2.transform = transformTemplate2(valuesToRender, styles2.transform);
        }
        const { x, y } = this.projectionDelta;
        styles2.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;
        if (lead.animationValues) {
          styles2.opacity = lead === this ? (_b5 = (_a7 = valuesToRender.opacity) !== null && _a7 !== void 0 ? _a7 : this.latestValues.opacity) !== null && _b5 !== void 0 ? _b5 : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
        } else {
          styles2.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
        }
        for (const key in scaleCorrectors) {
          if (valuesToRender[key] === void 0)
            continue;
          const { correct, applyTo } = scaleCorrectors[key];
          const corrected = styles2.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
          if (applyTo) {
            const num = applyTo.length;
            for (let i = 0; i < num; i++) {
              styles2[applyTo[i]] = corrected;
            }
          } else {
            styles2[key] = corrected;
          }
        }
        if (this.options.layoutId) {
          styles2.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
        }
        return styles2;
      }
      clearSnapshot() {
        this.resumeFrom = this.snapshot = void 0;
      }
      resetTree() {
        this.root.nodes.forEach((node2) => {
          var _a7;
          return (_a7 = node2.currentAnimation) === null || _a7 === void 0 ? void 0 : _a7.stop();
        });
        this.root.nodes.forEach(clearMeasurements);
        this.root.sharedNodes.clear();
      }
    };
  }
  function updateLayout(node2) {
    node2.updateLayout();
  }
  function notifyLayoutUpdate(node2) {
    var _a7;
    const snapshot = ((_a7 = node2.resumeFrom) === null || _a7 === void 0 ? void 0 : _a7.snapshot) || node2.snapshot;
    if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
      const { layoutBox: layout3, measuredBox: measuredLayout } = node2.layout;
      const { animationType } = node2.options;
      const isShared = snapshot.source !== node2.layout.source;
      if (animationType === "size") {
        eachAxis((axis) => {
          const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
          const length = calcLength(axisSnapshot);
          axisSnapshot.min = layout3[axis].min;
          axisSnapshot.max = axisSnapshot.min + length;
        });
      } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout3)) {
        eachAxis((axis) => {
          const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
          const length = calcLength(layout3[axis]);
          axisSnapshot.max = axisSnapshot.min + length;
          if (node2.relativeTarget && !node2.currentAnimation) {
            node2.isProjectionDirty = true;
            node2.relativeTarget[axis].max = node2.relativeTarget[axis].min + length;
          }
        });
      }
      const layoutDelta = createDelta();
      calcBoxDelta(layoutDelta, layout3, snapshot.layoutBox);
      const visualDelta = createDelta();
      if (isShared) {
        calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measuredBox);
      } else {
        calcBoxDelta(visualDelta, layout3, snapshot.layoutBox);
      }
      const hasLayoutChanged = !isDeltaZero(layoutDelta);
      let hasRelativeTargetChanged = false;
      if (!node2.resumeFrom) {
        const relativeParent = node2.getClosestProjectingParent();
        if (relativeParent && !relativeParent.resumeFrom) {
          const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
          if (parentSnapshot && parentLayout) {
            const relativeSnapshot = createBox();
            calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
            const relativeLayout = createBox();
            calcRelativePosition(relativeLayout, layout3, parentLayout.layoutBox);
            if (!boxEquals(relativeSnapshot, relativeLayout)) {
              hasRelativeTargetChanged = true;
            }
            if (relativeParent.options.layoutRoot) {
              node2.relativeTarget = relativeLayout;
              node2.relativeTargetOrigin = relativeSnapshot;
              node2.relativeParent = relativeParent;
            }
          }
        }
      }
      node2.notifyListeners("didUpdate", {
        layout: layout3,
        snapshot,
        delta: visualDelta,
        layoutDelta,
        hasLayoutChanged,
        hasRelativeTargetChanged
      });
    } else if (node2.isLead()) {
      const { onExitComplete } = node2.options;
      onExitComplete && onExitComplete();
    }
    node2.options.transition = void 0;
  }
  function propagateDirtyNodes(node2) {
    projectionFrameData.totalNodes++;
    if (!node2.parent)
      return;
    if (!node2.isProjecting()) {
      node2.isProjectionDirty = node2.parent.isProjectionDirty;
    }
    node2.isSharedProjectionDirty || (node2.isSharedProjectionDirty = Boolean(node2.isProjectionDirty || node2.parent.isProjectionDirty || node2.parent.isSharedProjectionDirty));
    node2.isTransformDirty || (node2.isTransformDirty = node2.parent.isTransformDirty);
  }
  function cleanDirtyNodes(node2) {
    node2.isProjectionDirty = node2.isSharedProjectionDirty = node2.isTransformDirty = false;
  }
  function clearSnapshot(node2) {
    node2.clearSnapshot();
  }
  function clearMeasurements(node2) {
    node2.clearMeasurements();
  }
  function resetTransformStyle(node2) {
    const { visualElement } = node2.options;
    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
      visualElement.notify("BeforeLayoutMeasure");
    }
    node2.resetTransform();
  }
  function finishAnimation(node2) {
    node2.finishAnimation();
    node2.targetDelta = node2.relativeTarget = node2.target = void 0;
  }
  function resolveTargetDelta(node2) {
    node2.resolveTargetDelta();
  }
  function calcProjection(node2) {
    node2.calcProjection();
  }
  function resetRotation(node2) {
    node2.resetRotation();
  }
  function removeLeadSnapshots(stack) {
    stack.removeLeadSnapshot();
  }
  function mixAxisDelta(output, delta, p) {
    output.translate = mix2(delta.translate, 0, p);
    output.scale = mix2(delta.scale, 1, p);
    output.origin = delta.origin;
    output.originPoint = delta.originPoint;
  }
  function mixAxis(output, from, to, p) {
    output.min = mix2(from.min, to.min, p);
    output.max = mix2(from.max, to.max, p);
  }
  function mixBox(output, from, to, p) {
    mixAxis(output.x, from.x, to.x, p);
    mixAxis(output.y, from.y, to.y, p);
  }
  function hasOpacityCrossfade(node2) {
    return node2.animationValues && node2.animationValues.opacityExit !== void 0;
  }
  var defaultLayoutTransition = {
    duration: 0.45,
    ease: [0.4, 0, 0.1, 1]
  };
  function mountNodeEarly(node2, elementId) {
    let searchNode = node2.root;
    for (let i = node2.path.length - 1; i >= 0; i--) {
      if (Boolean(node2.path[i].instance)) {
        searchNode = node2.path[i];
        break;
      }
    }
    const searchElement = searchNode && searchNode !== node2.root ? searchNode.instance : document;
    const element4 = searchElement.querySelector(`[data-projection-id="${elementId}"]`);
    if (element4)
      node2.mount(element4, true);
  }
  function roundAxis(axis) {
    axis.min = Math.round(axis.min);
    axis.max = Math.round(axis.max);
  }
  function roundBox(box) {
    roundAxis(box.x);
    roundAxis(box.y);
  }
  function shouldAnimatePositionOnly(animationType, snapshot, layout3) {
    return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout3), 0.2);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
  var DocumentProjectionNode = createProjectionNode({
    attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
    measureScroll: () => ({
      x: document.documentElement.scrollLeft || document.body.scrollLeft,
      y: document.documentElement.scrollTop || document.body.scrollTop
    }),
    checkIsScrollRoot: () => true
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
  var rootProjectionNode = {
    current: void 0
  };
  var HTMLProjectionNode = createProjectionNode({
    measureScroll: (instance) => ({
      x: instance.scrollLeft,
      y: instance.scrollTop
    }),
    defaultParent: () => {
      if (!rootProjectionNode.current) {
        const documentNode = new DocumentProjectionNode(0, {});
        documentNode.mount(window);
        documentNode.setOptions({ layoutScroll: true });
        rootProjectionNode.current = documentNode;
      }
      return rootProjectionNode.current;
    },
    resetTransform: (instance, value) => {
      instance.style.transform = value !== void 0 ? value : "none";
    },
    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
  });

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/drag.mjs
  var drag = {
    pan: {
      Feature: PanGesture
    },
    drag: {
      Feature: DragGesture,
      ProjectionNode: HTMLProjectionNode,
      MeasureLayout
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
  var positionalKeys = /* @__PURE__ */ new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y"
  ]);
  var isPositionalKey = (key) => positionalKeys.has(key);
  var hasPositionalKey = (target) => {
    return Object.keys(target).some(isPositionalKey);
  };
  var isNumOrPxType = (v) => v === number || v === px2;
  var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
  var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform: transform2 }) => {
    if (transform2 === "none" || !transform2)
      return 0;
    const matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) {
      return getPosFromMatrix(matrix3d[1], pos3);
    } else {
      const matrix = transform2.match(/^matrix\((.+)\)$/);
      if (matrix) {
        return getPosFromMatrix(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
  var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
  var nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
  function removeNonTranslationalTransform(visualElement) {
    const removedTransforms = [];
    nonTranslationalTransformKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      if (value !== void 0) {
        removedTransforms.push([key, value.get()]);
        value.set(key.startsWith("scale") ? 1 : 0);
      }
    });
    if (removedTransforms.length)
      visualElement.render();
    return removedTransforms;
  }
  var positionalValues = {
    width: ({ x }, { paddingLeft = "0", paddingRight = "0" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
    height: ({ y }, { paddingTop = "0", paddingBottom = "0" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
    top: (_bbox, { top }) => parseFloat(top),
    left: (_bbox, { left }) => parseFloat(left),
    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),
    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
  };
  var convertChangedValueTypes = (target, visualElement, changedKeys) => {
    const originBbox = visualElement.measureViewportBox();
    const element4 = visualElement.current;
    const elementComputedStyle = getComputedStyle(element4);
    const { display } = elementComputedStyle;
    const origin = {};
    if (display === "none") {
      visualElement.setStaticValue("display", target.display || "block");
    }
    changedKeys.forEach((key) => {
      origin[key] = positionalValues[key](originBbox, elementComputedStyle);
    });
    visualElement.render();
    const targetBbox = visualElement.measureViewportBox();
    changedKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      value && value.jump(origin[key]);
      target[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target;
  };
  var checkAndConvertChangedValueTypes = (visualElement, target, origin = {}, transitionEnd = {}) => {
    target = __spreadValues({}, target);
    transitionEnd = __spreadValues({}, transitionEnd);
    const targetPositionalKeys = Object.keys(target).filter(isPositionalKey);
    let removedTransformValues = [];
    let hasAttemptedToRemoveTransformValues = false;
    const changedValueTypeKeys = [];
    targetPositionalKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      if (!visualElement.hasValue(key))
        return;
      let from = origin[key];
      let fromType = findDimensionValueType(from);
      const to = target[key];
      let toType;
      if (isKeyframesTarget(to)) {
        const numKeyframes = to.length;
        const fromIndex = to[0] === null ? 1 : 0;
        from = to[fromIndex];
        fromType = findDimensionValueType(from);
        for (let i = fromIndex; i < numKeyframes; i++) {
          if (to[i] === null)
            break;
          if (!toType) {
            toType = findDimensionValueType(to[i]);
            invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
          } else {
            invariant(findDimensionValueType(to[i]) === toType, "All keyframes must be of the same type");
          }
        }
      } else {
        toType = findDimensionValueType(to);
      }
      if (fromType !== toType) {
        if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
          const current = value.get();
          if (typeof current === "string") {
            value.set(parseFloat(current));
          }
          if (typeof to === "string") {
            target[key] = parseFloat(to);
          } else if (Array.isArray(to) && toType === px2) {
            target[key] = to.map(parseFloat);
          }
        } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from === 0 || to === 0)) {
          if (from === 0) {
            value.set(toType.transform(from));
          } else {
            target[key] = fromType.transform(to);
          }
        } else {
          if (!hasAttemptedToRemoveTransformValues) {
            removedTransformValues = removeNonTranslationalTransform(visualElement);
            hasAttemptedToRemoveTransformValues = true;
          }
          changedValueTypeKeys.push(key);
          transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target[key];
          value.jump(to);
        }
      }
    });
    if (changedValueTypeKeys.length) {
      const scrollY = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
      const convertedTarget = convertChangedValueTypes(target, visualElement, changedValueTypeKeys);
      if (removedTransformValues.length) {
        removedTransformValues.forEach(([key, value]) => {
          visualElement.getValue(key).set(value);
        });
      }
      visualElement.render();
      if (isBrowser && scrollY !== null) {
        window.scrollTo({ top: scrollY });
      }
      return { target: convertedTarget, transitionEnd };
    } else {
      return { target, transitionEnd };
    }
  };
  function unitConversion(visualElement, target, origin, transitionEnd) {
    return hasPositionalKey(target) ? checkAndConvertChangedValueTypes(visualElement, target, origin, transitionEnd) : { target, transitionEnd };
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
  var parseDomVariant = (visualElement, target, origin, transitionEnd) => {
    const resolved = resolveCSSVariables(visualElement, target, transitionEnd);
    target = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return unitConversion(visualElement, target, origin, transitionEnd);
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
  var prefersReducedMotion = { current: null };
  var hasReducedMotionListener = { current: false };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
  function initPrefersReducedMotion() {
    hasReducedMotionListener.current = true;
    if (!isBrowser)
      return;
    if (window.matchMedia) {
      const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
      const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
      motionMediaQuery.addListener(setReducedMotionPreferences);
      setReducedMotionPreferences();
    } else {
      prefersReducedMotion.current = false;
    }
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
  function updateMotionValuesFromProps(element4, next, prev) {
    const { willChange } = next;
    for (const key in next) {
      const nextValue = next[key];
      const prevValue = prev[key];
      if (isMotionValue(nextValue)) {
        element4.addValue(key, nextValue);
        if (isWillChangeMotionValue(willChange)) {
          willChange.add(key);
        }
        if (true) {
          warnOnce(nextValue.version === "10.11.2", `Attempting to mix Framer Motion versions ${nextValue.version} with 10.11.2 may not work as expected.`);
        }
      } else if (isMotionValue(prevValue)) {
        element4.addValue(key, motionValue(nextValue, { owner: element4 }));
        if (isWillChangeMotionValue(willChange)) {
          willChange.remove(key);
        }
      } else if (prevValue !== nextValue) {
        if (element4.hasValue(key)) {
          const existingValue = element4.getValue(key);
          !existingValue.hasAnimated && existingValue.set(nextValue);
        } else {
          const latestValue = element4.getStaticValue(key);
          element4.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element4 }));
        }
      }
    }
    for (const key in prev) {
      if (next[key] === void 0)
        element4.removeValue(key);
    }
    return next;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/store.mjs
  var visualElementStore = /* @__PURE__ */ new WeakMap();

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/VisualElement.mjs
  var featureNames = Object.keys(featureDefinitions);
  var numFeatures = featureNames.length;
  var propEventHandlers = [
    "AnimationStart",
    "AnimationComplete",
    "Update",
    "BeforeLayoutMeasure",
    "LayoutMeasure",
    "LayoutAnimationStart",
    "LayoutAnimationComplete"
  ];
  var numVariantProps = variantProps.length;
  var VisualElement = class {
    constructor({ parent, props, presenceContext, reducedMotionConfig, visualState }, options = {}) {
      this.current = null;
      this.children = /* @__PURE__ */ new Set();
      this.isVariantNode = false;
      this.isControllingVariants = false;
      this.shouldReduceMotion = null;
      this.values = /* @__PURE__ */ new Map();
      this.features = {};
      this.valueSubscriptions = /* @__PURE__ */ new Map();
      this.prevMotionValues = {};
      this.events = {};
      this.propEventSubscriptions = {};
      this.notifyUpdate = () => this.notify("Update", this.latestValues);
      this.render = () => {
        if (!this.current)
          return;
        this.triggerBuild();
        this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
      };
      this.scheduleRender = () => sync.render(this.render, false, true);
      const { latestValues, renderState } = visualState;
      this.latestValues = latestValues;
      this.baseTarget = __spreadValues({}, latestValues);
      this.initialValues = props.initial ? __spreadValues({}, latestValues) : {};
      this.renderState = renderState;
      this.parent = parent;
      this.props = props;
      this.presenceContext = presenceContext;
      this.depth = parent ? parent.depth + 1 : 0;
      this.reducedMotionConfig = reducedMotionConfig;
      this.options = options;
      this.isControllingVariants = isControllingVariants(props);
      this.isVariantNode = isVariantNode(props);
      if (this.isVariantNode) {
        this.variantChildren = /* @__PURE__ */ new Set();
      }
      this.manuallyAnimateOnMount = Boolean(parent && parent.current);
      const _a7 = this.scrapeMotionValuesFromProps(props, {}), { willChange } = _a7, initialMotionValues = __objRest(_a7, ["willChange"]);
      for (const key in initialMotionValues) {
        const value = initialMotionValues[key];
        if (latestValues[key] !== void 0 && isMotionValue(value)) {
          value.set(latestValues[key], false);
          if (isWillChangeMotionValue(willChange)) {
            willChange.add(key);
          }
        }
      }
    }
    scrapeMotionValuesFromProps(_props, _prevProps) {
      return {};
    }
    mount(instance) {
      this.current = instance;
      visualElementStore.set(instance, this);
      if (this.projection) {
        this.projection.mount(instance);
      }
      if (this.parent && this.isVariantNode && !this.isControllingVariants) {
        this.removeFromVariantTree = this.parent.addVariantChild(this);
      }
      this.values.forEach((value, key) => this.bindToMotionValue(key, value));
      if (!hasReducedMotionListener.current) {
        initPrefersReducedMotion();
      }
      this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
      if (true) {
        warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
      }
      if (this.parent)
        this.parent.children.add(this);
      this.update(this.props, this.presenceContext);
    }
    unmount() {
      visualElementStore.delete(this.current);
      this.projection && this.projection.unmount();
      cancelSync.update(this.notifyUpdate);
      cancelSync.render(this.render);
      this.valueSubscriptions.forEach((remove) => remove());
      this.removeFromVariantTree && this.removeFromVariantTree();
      this.parent && this.parent.children.delete(this);
      for (const key in this.events) {
        this.events[key].clear();
      }
      for (const key in this.features) {
        this.features[key].unmount();
      }
      this.current = null;
    }
    bindToMotionValue(key, value) {
      const valueIsTransform = transformProps.has(key);
      const removeOnChange = value.on("change", (latestValue) => {
        this.latestValues[key] = latestValue;
        this.props.onUpdate && sync.update(this.notifyUpdate, false, true);
        if (valueIsTransform && this.projection) {
          this.projection.isTransformDirty = true;
        }
      });
      const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
      this.valueSubscriptions.set(key, () => {
        removeOnChange();
        removeOnRenderRequest();
      });
    }
    sortNodePosition(other) {
      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
        return 0;
      }
      return this.sortInstanceNodePosition(this.current, other.current);
    }
    loadFeatures(_a7, isStrict, preloadedFeatures2, projectionId, initialLayoutGroupConfig) {
      var _b5 = _a7, { children } = _b5, renderedProps = __objRest(_b5, ["children"]);
      let ProjectionNodeConstructor;
      let MeasureLayout2;
      if (preloadedFeatures2 && isStrict) {
        const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
        renderedProps.ignoreStrict ? warning(false, strictMessage) : invariant(false, strictMessage);
      }
      for (let i = 0; i < numFeatures; i++) {
        const name = featureNames[i];
        const { isEnabled, Feature: FeatureConstructor, ProjectionNode, MeasureLayout: MeasureLayoutComponent } = featureDefinitions[name];
        if (ProjectionNode)
          ProjectionNodeConstructor = ProjectionNode;
        if (isEnabled(renderedProps)) {
          if (!this.features[name] && FeatureConstructor) {
            this.features[name] = new FeatureConstructor(this);
          }
          if (MeasureLayoutComponent) {
            MeasureLayout2 = MeasureLayoutComponent;
          }
        }
      }
      if (!this.projection && ProjectionNodeConstructor) {
        this.projection = new ProjectionNodeConstructor(projectionId, this.latestValues, this.parent && this.parent.projection);
        const { layoutId, layout: layout3, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = renderedProps;
        this.projection.setOptions({
          layoutId,
          layout: layout3,
          alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
          visualElement: this,
          scheduleRender: () => this.scheduleRender(),
          animationType: typeof layout3 === "string" ? layout3 : "both",
          initialPromotionConfig: initialLayoutGroupConfig,
          layoutScroll,
          layoutRoot
        });
      }
      return MeasureLayout2;
    }
    updateFeatures() {
      for (const key in this.features) {
        const feature = this.features[key];
        if (feature.isMounted) {
          feature.update(this.props, this.prevProps);
        } else {
          feature.mount();
          feature.isMounted = true;
        }
      }
    }
    triggerBuild() {
      this.build(this.renderState, this.latestValues, this.options, this.props);
    }
    measureViewportBox() {
      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
    }
    getStaticValue(key) {
      return this.latestValues[key];
    }
    setStaticValue(key, value) {
      this.latestValues[key] = value;
    }
    makeTargetAnimatable(target, canMutate = true) {
      return this.makeTargetAnimatableFromInstance(target, this.props, canMutate);
    }
    update(props, presenceContext) {
      if (props.transformTemplate || this.props.transformTemplate) {
        this.scheduleRender();
      }
      this.prevProps = this.props;
      this.props = props;
      this.prevPresenceContext = this.presenceContext;
      this.presenceContext = presenceContext;
      for (let i = 0; i < propEventHandlers.length; i++) {
        const key = propEventHandlers[i];
        if (this.propEventSubscriptions[key]) {
          this.propEventSubscriptions[key]();
          delete this.propEventSubscriptions[key];
        }
        const listener = props["on" + key];
        if (listener) {
          this.propEventSubscriptions[key] = this.on(key, listener);
        }
      }
      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps), this.prevMotionValues);
      if (this.handleChildMotionValue) {
        this.handleChildMotionValue();
      }
    }
    getProps() {
      return this.props;
    }
    getVariant(name) {
      return this.props.variants ? this.props.variants[name] : void 0;
    }
    getDefaultTransition() {
      return this.props.transition;
    }
    getTransformPagePoint() {
      return this.props.transformPagePoint;
    }
    getClosestVariantNode() {
      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
    }
    getVariantContext(startAtParent = false) {
      if (startAtParent) {
        return this.parent ? this.parent.getVariantContext() : void 0;
      }
      if (!this.isControllingVariants) {
        const context2 = this.parent ? this.parent.getVariantContext() || {} : {};
        if (this.props.initial !== void 0) {
          context2.initial = this.props.initial;
        }
        return context2;
      }
      const context = {};
      for (let i = 0; i < numVariantProps; i++) {
        const name = variantProps[i];
        const prop = this.props[name];
        if (isVariantLabel(prop) || prop === false) {
          context[name] = prop;
        }
      }
      return context;
    }
    addVariantChild(child) {
      const closestVariantNode = this.getClosestVariantNode();
      if (closestVariantNode) {
        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
        return () => closestVariantNode.variantChildren.delete(child);
      }
    }
    addValue(key, value) {
      if (value !== this.values.get(key)) {
        this.removeValue(key);
        this.bindToMotionValue(key, value);
      }
      this.values.set(key, value);
      this.latestValues[key] = value.get();
    }
    removeValue(key) {
      this.values.delete(key);
      const unsubscribe = this.valueSubscriptions.get(key);
      if (unsubscribe) {
        unsubscribe();
        this.valueSubscriptions.delete(key);
      }
      delete this.latestValues[key];
      this.removeValueFromRenderState(key, this.renderState);
    }
    hasValue(key) {
      return this.values.has(key);
    }
    getValue(key, defaultValue) {
      if (this.props.values && this.props.values[key]) {
        return this.props.values[key];
      }
      let value = this.values.get(key);
      if (value === void 0 && defaultValue !== void 0) {
        value = motionValue(defaultValue, { owner: this });
        this.addValue(key, value);
      }
      return value;
    }
    readValue(key) {
      return this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : this.readValueFromInstance(this.current, key, this.options);
    }
    setBaseTarget(key, value) {
      this.baseTarget[key] = value;
    }
    getBaseTarget(key) {
      var _a7;
      const { initial } = this.props;
      const valueFromInitial = typeof initial === "string" || typeof initial === "object" ? (_a7 = resolveVariantFromProps(this.props, initial)) === null || _a7 === void 0 ? void 0 : _a7[key] : void 0;
      if (initial && valueFromInitial !== void 0) {
        return valueFromInitial;
      }
      const target = this.getBaseTargetFromProps(this.props, key);
      if (target !== void 0 && !isMotionValue(target))
        return target;
      return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
    }
    on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = new SubscriptionManager();
      }
      return this.events[eventName].add(callback);
    }
    notify(eventName, ...args) {
      if (this.events[eventName]) {
        this.events[eventName].notify(...args);
      }
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
  var DOMVisualElement = class extends VisualElement {
    sortInstanceNodePosition(a, b) {
      return a.compareDocumentPosition(b) & 2 ? 1 : -1;
    }
    getBaseTargetFromProps(props, key) {
      return props.style ? props.style[key] : void 0;
    }
    removeValueFromRenderState(key, { vars: vars2, style: style2 }) {
      delete vars2[key];
      delete style2[key];
    }
    makeTargetAnimatableFromInstance(_a7, { transformValues }, isMounted) {
      var _b5 = _a7, { transition: transition3, transitionEnd } = _b5, target = __objRest(_b5, ["transition", "transitionEnd"]);
      let origin = getOrigin(target, transition3 || {}, this);
      if (transformValues) {
        if (transitionEnd)
          transitionEnd = transformValues(transitionEnd);
        if (target)
          target = transformValues(target);
        if (origin)
          origin = transformValues(origin);
      }
      if (isMounted) {
        checkTargetForNewValues(this, target, origin);
        const parsed = parseDomVariant(this, target, origin, transitionEnd);
        transitionEnd = parsed.transitionEnd;
        target = parsed.target;
      }
      return __spreadValues({
        transition: transition3,
        transitionEnd
      }, target);
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
  function getComputedStyle2(element4) {
    return window.getComputedStyle(element4);
  }
  var HTMLVisualElement = class extends DOMVisualElement {
    readValueFromInstance(instance, key) {
      if (transformProps.has(key)) {
        const defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      } else {
        const computedStyle = getComputedStyle2(instance);
        const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
        return typeof value === "string" ? value.trim() : value;
      }
    }
    measureInstanceViewportBox(instance, { transformPagePoint }) {
      return measureViewportBox(instance, transformPagePoint);
    }
    build(renderState, latestValues, options, props) {
      buildHTMLStyles(renderState, latestValues, options, props.transformTemplate);
    }
    scrapeMotionValuesFromProps(props, prevProps) {
      return scrapeMotionValuesFromProps(props, prevProps);
    }
    handleChildMotionValue() {
      if (this.childSubscription) {
        this.childSubscription();
        delete this.childSubscription;
      }
      const { children } = this.props;
      if (isMotionValue(children)) {
        this.childSubscription = children.on("change", (latest) => {
          if (this.current)
            this.current.textContent = `${latest}`;
        });
      }
    }
    renderInstance(instance, renderState, styleProp, projection) {
      renderHTML(instance, renderState, styleProp, projection);
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
  var SVGVisualElement = class extends DOMVisualElement {
    constructor() {
      super(...arguments);
      this.isSVGTag = false;
    }
    getBaseTargetFromProps(props, key) {
      return props[key];
    }
    readValueFromInstance(instance, key) {
      if (transformProps.has(key)) {
        const defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      }
      key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
      return instance.getAttribute(key);
    }
    measureInstanceViewportBox() {
      return createBox();
    }
    scrapeMotionValuesFromProps(props, prevProps) {
      return scrapeMotionValuesFromProps2(props, prevProps);
    }
    build(renderState, latestValues, options, props) {
      buildSVGAttrs(renderState, latestValues, options, this.isSVGTag, props.transformTemplate);
    }
    renderInstance(instance, renderState, styleProp, projection) {
      renderSVG(instance, renderState, styleProp, projection);
    }
    mount(instance) {
      this.isSVGTag = isSVGTag(instance.tagName);
      super.mount(instance);
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  var createDomVisualElement = (Component2, options) => {
    return isSVGComponent(Component2) ? new SVGVisualElement(options, { enableHardwareAcceleration: false }) : new HTMLVisualElement(options, { enableHardwareAcceleration: true });
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/motion/features/layout.mjs
  var layout2 = {
    layout: {
      ProjectionNode: HTMLProjectionNode,
      MeasureLayout
    }
  };

  // ../ecopan_bot/node_modules/framer-motion/dist/es/render/dom/motion.mjs
  var preloadedFeatures = __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, animations), gestureAnimations), drag), layout2);
  var motion = /* @__PURE__ */ createMotionProxy((Component2, config2) => createDomMotionConfig(Component2, config2, preloadedFeatures, createDomVisualElement));

  // ../ecopan_bot/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var React5 = __toESM(require_react(), 1);
  var import_react43 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  var import_react39 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
  var import_react38 = __toESM(require_react(), 1);
  function useIsMounted() {
    const isMounted = (0, import_react38.useRef)(false);
    useIsomorphicLayoutEffect(() => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  function useForceUpdate() {
    const isMounted = useIsMounted();
    const [forcedRenderCount, setForcedRenderCount] = (0, import_react39.useState)(0);
    const forceRender = (0, import_react39.useCallback)(() => {
      isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [forcedRenderCount]);
    const deferredForceRender = (0, import_react39.useCallback)(() => sync.postRender(forceRender), [forceRender]);
    return [deferredForceRender, forcedRenderCount];
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
  var React4 = __toESM(require_react(), 1);
  var import_react41 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs
  var React3 = __toESM(require_react(), 1);
  var import_react40 = __toESM(require_react(), 1);
  var PopChildMeasure = class extends React3.Component {
    getSnapshotBeforeUpdate(prevProps) {
      const element4 = this.props.childRef.current;
      if (element4 && prevProps.isPresent && !this.props.isPresent) {
        const size2 = this.props.sizeRef.current;
        size2.height = element4.offsetHeight || 0;
        size2.width = element4.offsetWidth || 0;
        size2.top = element4.offsetTop;
        size2.left = element4.offsetLeft;
      }
      return null;
    }
    componentDidUpdate() {
    }
    render() {
      return this.props.children;
    }
  };
  function PopChild({ children, isPresent: isPresent2 }) {
    const id4 = (0, import_react40.useId)();
    const ref = (0, import_react40.useRef)(null);
    const size2 = (0, import_react40.useRef)({
      width: 0,
      height: 0,
      top: 0,
      left: 0
    });
    (0, import_react40.useInsertionEffect)(() => {
      const { width, height, top, left } = size2.current;
      if (isPresent2 || !ref.current || !width || !height)
        return;
      ref.current.dataset.motionPopId = id4;
      const style2 = document.createElement("style");
      document.head.appendChild(style2);
      if (style2.sheet) {
        style2.sheet.insertRule(`
          [data-motion-pop-id="${id4}"] {
            position: absolute !important;
            width: ${width}px !important;
            height: ${height}px !important;
            top: ${top}px !important;
            left: ${left}px !important;
          }
        `);
      }
      return () => {
        document.head.removeChild(style2);
      };
    }, [isPresent2]);
    return React3.createElement(PopChildMeasure, { isPresent: isPresent2, childRef: ref, sizeRef: size2 }, React3.cloneElement(children, { ref }));
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
  var PresenceChild = ({ children, initial, isPresent: isPresent2, onExitComplete, custom, presenceAffectsLayout, mode: mode2 }) => {
    const presenceChildren = useConstant(newChildrenMap);
    const id4 = (0, import_react41.useId)();
    const context = (0, import_react41.useMemo)(
      () => ({
        id: id4,
        initial,
        isPresent: isPresent2,
        custom,
        onExitComplete: (childId) => {
          presenceChildren.set(childId, true);
          for (const isComplete of presenceChildren.values()) {
            if (!isComplete)
              return;
          }
          onExitComplete && onExitComplete();
        },
        register: (childId) => {
          presenceChildren.set(childId, false);
          return () => presenceChildren.delete(childId);
        }
      }),
      presenceAffectsLayout ? void 0 : [isPresent2]
    );
    (0, import_react41.useMemo)(() => {
      presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
    }, [isPresent2]);
    React4.useEffect(() => {
      !isPresent2 && !presenceChildren.size && onExitComplete && onExitComplete();
    }, [isPresent2]);
    if (mode2 === "popLayout") {
      children = React4.createElement(PopChild, { isPresent: isPresent2 }, children);
    }
    return React4.createElement(PresenceContext.Provider, { value: context }, children);
  };
  function newChildrenMap() {
    return /* @__PURE__ */ new Map();
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
  var import_react42 = __toESM(require_react(), 1);
  function useUnmountEffect(callback) {
    return (0, import_react42.useEffect)(() => () => callback(), []);
  }

  // ../ecopan_bot/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var getChildKey = (child) => child.key || "";
  function updateChildLookup(children, allChildren) {
    children.forEach((child) => {
      const key = getChildKey(child);
      allChildren.set(key, child);
    });
  }
  function onlyElements(children) {
    const filtered = [];
    import_react43.Children.forEach(children, (child) => {
      if ((0, import_react43.isValidElement)(child))
        filtered.push(child);
    });
    return filtered;
  }
  var AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode: mode2 = "sync" }) => {
    invariant(!exitBeforeEnter, "Replace exitBeforeEnter with mode='wait'");
    let [forceRender] = useForceUpdate();
    const forceRenderLayoutGroup = (0, import_react43.useContext)(LayoutGroupContext).forceRender;
    if (forceRenderLayoutGroup)
      forceRender = forceRenderLayoutGroup;
    const isMounted = useIsMounted();
    const filteredChildren = onlyElements(children);
    let childrenToRender = filteredChildren;
    const exiting = /* @__PURE__ */ new Set();
    const presentChildren = (0, import_react43.useRef)(childrenToRender);
    const allChildren = (0, import_react43.useRef)(/* @__PURE__ */ new Map()).current;
    const isInitialRender = (0, import_react43.useRef)(true);
    useIsomorphicLayoutEffect(() => {
      isInitialRender.current = false;
      updateChildLookup(filteredChildren, allChildren);
      presentChildren.current = childrenToRender;
    });
    useUnmountEffect(() => {
      isInitialRender.current = true;
      allChildren.clear();
      exiting.clear();
    });
    if (isInitialRender.current) {
      return React5.createElement(React5.Fragment, null, childrenToRender.map((child) => React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? void 0 : false, presenceAffectsLayout, mode: mode2 }, child)));
    }
    childrenToRender = [...childrenToRender];
    const presentKeys = presentChildren.current.map(getChildKey);
    const targetKeys = filteredChildren.map(getChildKey);
    const numPresent = presentKeys.length;
    for (let i = 0; i < numPresent; i++) {
      const key = presentKeys[i];
      if (targetKeys.indexOf(key) === -1) {
        exiting.add(key);
      }
    }
    if (mode2 === "wait" && exiting.size) {
      childrenToRender = [];
    }
    exiting.forEach((key) => {
      if (targetKeys.indexOf(key) !== -1)
        return;
      const child = allChildren.get(key);
      if (!child)
        return;
      const insertionIndex = presentKeys.indexOf(key);
      const onExit = () => {
        allChildren.delete(key);
        exiting.delete(key);
        const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);
        presentChildren.current.splice(removeIndex, 1);
        if (!exiting.size) {
          presentChildren.current = filteredChildren;
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      childrenToRender.splice(insertionIndex, 0, React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom, presenceAffectsLayout, mode: mode2 }, child));
    });
    childrenToRender = childrenToRender.map((child) => {
      const key = child.key;
      return exiting.has(key) ? child : React5.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout, mode: mode2 }, child);
    });
    if (mode2 === "wait" && childrenToRender.length > 1) {
      console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
    }
    return React5.createElement(React5.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map((child) => (0, import_react43.cloneElement)(child)));
  };

  // ../ecopan_bot/node_modules/@chakra-ui/toast/dist/chunk-GQXYYJJJ.mjs
  var import_react44 = __toESM(require_react(), 1);
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  var toastMotionVariants = {
    initial: (props) => {
      const { position: position5 } = props;
      const dir = ["top", "bottom"].includes(position5) ? "y" : "x";
      let factor = ["top-right", "bottom-right"].includes(position5) ? 1 : -1;
      if (position5 === "bottom")
        factor = 1;
      return {
        opacity: 0,
        [dir]: factor * 24
      };
    },
    animate: {
      opacity: 1,
      y: 0,
      x: 0,
      scale: 1,
      transition: {
        duration: 0.4,
        ease: [0.4, 0, 0.2, 1]
      }
    },
    exit: {
      opacity: 0,
      scale: 0.85,
      transition: {
        duration: 0.2,
        ease: [0.4, 0, 1, 1]
      }
    }
  };
  var ToastComponent = (0, import_react44.memo)((props) => {
    const {
      id: id4,
      message,
      onCloseComplete,
      onRequestRemove,
      requestClose = false,
      position: position5 = "bottom",
      duration = 5e3,
      containerStyle,
      motionVariants = toastMotionVariants,
      toastSpacing = "0.5rem"
    } = props;
    const [delay2, setDelay] = (0, import_react44.useState)(duration);
    const isPresent2 = useIsPresent();
    useUpdateEffect(() => {
      if (!isPresent2) {
        onCloseComplete == null ? void 0 : onCloseComplete();
      }
    }, [isPresent2]);
    useUpdateEffect(() => {
      setDelay(duration);
    }, [duration]);
    const onMouseEnter = () => setDelay(null);
    const onMouseLeave = () => setDelay(duration);
    const close = () => {
      if (isPresent2)
        onRequestRemove();
    };
    (0, import_react44.useEffect)(() => {
      if (isPresent2 && requestClose) {
        onRequestRemove();
      }
    }, [isPresent2, requestClose, onRequestRemove]);
    useTimeout(close, delay2);
    const containerStyles = (0, import_react44.useMemo)(
      () => __spreadValues({
        pointerEvents: "auto",
        maxWidth: 560,
        minWidth: 300,
        margin: toastSpacing
      }, containerStyle),
      [containerStyle, toastSpacing]
    );
    const toastStyle = (0, import_react44.useMemo)(() => getToastStyle(position5), [position5]);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
      motion.li,
      {
        layout: true,
        className: "chakra-toast",
        variants: motionVariants,
        initial: "initial",
        animate: "animate",
        exit: "exit",
        onHoverStart: onMouseEnter,
        onHoverEnd: onMouseLeave,
        custom: { position: position5 },
        style: toastStyle,
        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          chakra.div,
          {
            role: "status",
            "aria-atomic": "true",
            className: "chakra-toast__inner",
            __css: containerStyles,
            children: runIfFn(message, { id: id4, onClose: close })
          }
        )
      }
    );
  });
  ToastComponent.displayName = "ToastComponent";

  // ../ecopan_bot/node_modules/@chakra-ui/toast/dist/chunk-F6QD4NSP.mjs
  function getToastPlacement(position5, dir) {
    var _a7;
    const computedPosition = position5 != null ? position5 : "bottom";
    const logicals = {
      "top-start": { ltr: "top-left", rtl: "top-right" },
      "top-end": { ltr: "top-right", rtl: "top-left" },
      "bottom-start": { ltr: "bottom-left", rtl: "bottom-right" },
      "bottom-end": { ltr: "bottom-right", rtl: "bottom-left" }
    };
    const logical2 = logicals[computedPosition];
    return (_a7 = logical2 == null ? void 0 : logical2[dir]) != null ? _a7 : computedPosition;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/icon/dist/chunk-DKFDJSXF.mjs
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  var fallbackIcon = {
    path: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("g", { stroke: "currentColor", strokeWidth: "1.5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "path",
        {
          strokeLinecap: "round",
          fill: "none",
          d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        "path",
        {
          fill: "currentColor",
          strokeLinecap: "round",
          d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("circle", { fill: "none", strokeMiterlimit: "10", cx: "12", cy: "12", r: "11.25" })
    ] }),
    viewBox: "0 0 24 24"
  };
  var Icon = forwardRef((props, ref) => {
    const _a7 = props, {
      as: element4,
      viewBox,
      color: color4 = "currentColor",
      focusable = false,
      children,
      className,
      __css
    } = _a7, rest = __objRest(_a7, [
      "as",
      "viewBox",
      "color",
      "focusable",
      "children",
      "className",
      "__css"
    ]);
    const _className = cx("chakra-icon", className);
    const customStyles = useStyleConfig("Icon", props);
    const styles2 = __spreadValues(__spreadValues({
      w: "1em",
      h: "1em",
      display: "inline-block",
      lineHeight: "1em",
      flexShrink: 0,
      color: color4
    }, __css), customStyles);
    const shared = {
      ref,
      focusable,
      className: _className,
      __css: styles2
    };
    const _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
    if (element4 && typeof element4 !== "string") {
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(chakra.svg, __spreadValues(__spreadValues({ as: element4 }, shared), rest));
    }
    const _path = children != null ? children : fallbackIcon.path;
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(chakra.svg, __spreadProps(__spreadValues(__spreadValues({ verticalAlign: "middle", viewBox: _viewBox }, shared), rest), { children: _path }));
  });
  Icon.displayName = "Icon";

  // ../ecopan_bot/node_modules/@chakra-ui/alert/dist/chunk-R7JICMEA.mjs
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  function CheckIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Icon, __spreadProps(__spreadValues({ viewBox: "0 0 24 24" }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "path",
      {
        fill: "currentColor",
        d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
      }
    ) }));
  }
  function InfoIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Icon, __spreadProps(__spreadValues({ viewBox: "0 0 24 24" }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "path",
      {
        fill: "currentColor",
        d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
      }
    ) }));
  }
  function WarningIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Icon, __spreadProps(__spreadValues({ viewBox: "0 0 24 24" }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "path",
      {
        fill: "currentColor",
        d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
      }
    ) }));
  }

  // ../ecopan_bot/node_modules/@chakra-ui/spinner/dist/chunk-NO6MRLPK.mjs
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  var spin = (0, import_react15.keyframes)({
    "0%": {
      transform: "rotate(0deg)"
    },
    "100%": {
      transform: "rotate(360deg)"
    }
  });
  var Spinner = forwardRef((props, ref) => {
    const styles2 = useStyleConfig("Spinner", props);
    const _a7 = omitThemingProps(props), {
      label = "Loading...",
      thickness = "2px",
      speed = "0.45s",
      emptyColor = "transparent",
      className
    } = _a7, rest = __objRest(_a7, [
      "label",
      "thickness",
      "speed",
      "emptyColor",
      "className"
    ]);
    const _className = cx("chakra-spinner", className);
    const spinnerStyles = __spreadValues({
      display: "inline-block",
      borderColor: "currentColor",
      borderStyle: "solid",
      borderRadius: "99999px",
      borderWidth: thickness,
      borderBottomColor: emptyColor,
      borderLeftColor: emptyColor,
      animation: `${spin} ${speed} linear infinite`
    }, styles2);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      chakra.div,
      __spreadProps(__spreadValues({
        ref,
        __css: spinnerStyles,
        className: _className
      }, rest), {
        children: label && /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(chakra.span, { srOnly: true, children: label })
      })
    );
  });
  Spinner.displayName = "Spinner";

  // ../ecopan_bot/node_modules/@chakra-ui/alert/dist/chunk-FZCW3KO4.mjs
  var [AlertProvider, useAlertContext] = createContext({
    name: "AlertContext",
    hookName: "useAlertContext",
    providerName: "<Alert />"
  });
  var [AlertStylesProvider, useAlertStyles] = createContext({
    name: `AlertStylesContext`,
    hookName: `useAlertStyles`,
    providerName: "<Alert />"
  });
  var STATUSES = {
    info: { icon: InfoIcon, colorScheme: "blue" },
    warning: { icon: WarningIcon, colorScheme: "orange" },
    success: { icon: CheckIcon, colorScheme: "green" },
    error: { icon: WarningIcon, colorScheme: "red" },
    loading: { icon: Spinner, colorScheme: "blue" }
  };
  function getStatusColorScheme(status) {
    return STATUSES[status].colorScheme;
  }
  function getStatusIcon(status) {
    return STATUSES[status].icon;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/alert/dist/chunk-FBQ6TKVQ.mjs
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var AlertDescription = forwardRef(
    function AlertDescription2(props, ref) {
      const styles2 = useAlertStyles();
      const { status } = useAlertContext();
      const descriptionStyles = __spreadValues({
        display: "inline"
      }, styles2.description);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        chakra.div,
        __spreadProps(__spreadValues({
          ref,
          "data-status": status
        }, props), {
          className: cx("chakra-alert__desc", props.className),
          __css: descriptionStyles
        })
      );
    }
  );
  AlertDescription.displayName = "AlertDescription";

  // ../ecopan_bot/node_modules/@chakra-ui/alert/dist/chunk-TEHNKISS.mjs
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  function AlertIcon(props) {
    const { status } = useAlertContext();
    const BaseIcon = getStatusIcon(status);
    const styles2 = useAlertStyles();
    const css3 = status === "loading" ? styles2.spinner : styles2.icon;
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      chakra.span,
      __spreadProps(__spreadValues({
        display: "inherit",
        "data-status": status
      }, props), {
        className: cx("chakra-alert__icon", props.className),
        __css: css3,
        children: props.children || /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(BaseIcon, { h: "100%", w: "100%" })
      })
    );
  }
  AlertIcon.displayName = "AlertIcon";

  // ../ecopan_bot/node_modules/@chakra-ui/alert/dist/chunk-FRKYNQ2N.mjs
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  var AlertTitle = forwardRef(
    function AlertTitle2(props, ref) {
      const styles2 = useAlertStyles();
      const { status } = useAlertContext();
      return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
        chakra.div,
        __spreadProps(__spreadValues({
          ref,
          "data-status": status
        }, props), {
          className: cx("chakra-alert__title", props.className),
          __css: styles2.title
        })
      );
    }
  );
  AlertTitle.displayName = "AlertTitle";

  // ../ecopan_bot/node_modules/@chakra-ui/alert/dist/chunk-RWQIUCJP.mjs
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var Alert = forwardRef(function Alert2(props, ref) {
    var _a7;
    const _a8 = omitThemingProps(props), { status = "info", addRole = true } = _a8, rest = __objRest(_a8, ["status", "addRole"]);
    const colorScheme = (_a7 = props.colorScheme) != null ? _a7 : getStatusColorScheme(status);
    const styles2 = useMultiStyleConfig("Alert", __spreadProps(__spreadValues({}, props), { colorScheme }));
    const alertStyles = __spreadValues({
      width: "100%",
      display: "flex",
      alignItems: "center",
      position: "relative",
      overflow: "hidden"
    }, styles2.container);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(AlertProvider, { value: { status }, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(AlertStylesProvider, { value: styles2, children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      chakra.div,
      __spreadProps(__spreadValues({
        "data-status": status,
        role: addRole ? "alert" : void 0,
        ref
      }, rest), {
        className: cx("chakra-alert", props.className),
        __css: alertStyles
      })
    ) }) });
  });
  Alert.displayName = "Alert";

  // ../ecopan_bot/node_modules/@chakra-ui/close-button/dist/chunk-DUEJD2BE.mjs
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  function CloseIcon(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Icon, __spreadProps(__spreadValues({ focusable: "false", "aria-hidden": true }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
      "path",
      {
        fill: "currentColor",
        d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
      }
    ) }));
  }
  var CloseButton = forwardRef(
    function CloseButton2(props, ref) {
      const styles2 = useStyleConfig("CloseButton", props);
      const _a7 = omitThemingProps(props), { children, isDisabled, __css } = _a7, rest = __objRest(_a7, ["children", "isDisabled", "__css"]);
      const baseStyle43 = {
        outline: 0,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        flexShrink: 0
      };
      return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        chakra.button,
        __spreadProps(__spreadValues({
          type: "button",
          "aria-label": "Close",
          ref,
          disabled: isDisabled,
          __css: __spreadValues(__spreadValues(__spreadValues({}, baseStyle43), styles2), __css)
        }, rest), {
          children: children || /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CloseIcon, { width: "1em", height: "1em" })
        })
      );
    }
  );
  CloseButton.displayName = "CloseButton";

  // ../ecopan_bot/node_modules/@chakra-ui/toast/dist/chunk-PE6CKLNB.mjs
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  var initialState = {
    top: [],
    "top-left": [],
    "top-right": [],
    "bottom-left": [],
    bottom: [],
    "bottom-right": []
  };
  var toastStore = createStore(initialState);
  function createStore(initialState2) {
    let state2 = initialState2;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (setStateFn) => {
      state2 = setStateFn(state2);
      listeners.forEach((l) => l());
    };
    return {
      getState: () => state2,
      subscribe: (listener) => {
        listeners.add(listener);
        return () => {
          setState(() => initialState2);
          listeners.delete(listener);
        };
      },
      removeToast: (id4, position5) => {
        setState((prevState) => __spreadProps(__spreadValues({}, prevState), {
          [position5]: prevState[position5].filter((toast) => toast.id != id4)
        }));
      },
      notify: (message, options) => {
        const toast = createToast(message, options);
        const { position: position5, id: id4 } = toast;
        setState((prevToasts) => {
          var _a7, _b5;
          const isTop = position5.includes("top");
          const toasts = isTop ? [toast, ...(_a7 = prevToasts[position5]) != null ? _a7 : []] : [...(_b5 = prevToasts[position5]) != null ? _b5 : [], toast];
          return __spreadProps(__spreadValues({}, prevToasts), {
            [position5]: toasts
          });
        });
        return id4;
      },
      update: (id4, options) => {
        if (!id4)
          return;
        setState((prevState) => {
          const nextState = __spreadValues({}, prevState);
          const { position: position5, index: index2 } = findToast(nextState, id4);
          if (position5 && index2 !== -1) {
            nextState[position5][index2] = __spreadProps(__spreadValues(__spreadValues({}, nextState[position5][index2]), options), {
              message: createRenderToast(options)
            });
          }
          return nextState;
        });
      },
      closeAll: ({ positions } = {}) => {
        setState((prev) => {
          const allPositions = [
            "bottom",
            "bottom-right",
            "bottom-left",
            "top",
            "top-left",
            "top-right"
          ];
          const positionsToClose = positions != null ? positions : allPositions;
          return positionsToClose.reduce(
            (acc, position5) => {
              acc[position5] = prev[position5].map((toast) => __spreadProps(__spreadValues({}, toast), {
                requestClose: true
              }));
              return acc;
            },
            __spreadValues({}, prev)
          );
        });
      },
      close: (id4) => {
        setState((prevState) => {
          const position5 = getToastPosition(prevState, id4);
          if (!position5)
            return prevState;
          return __spreadProps(__spreadValues({}, prevState), {
            [position5]: prevState[position5].map((toast) => {
              if (toast.id == id4) {
                return __spreadProps(__spreadValues({}, toast), {
                  requestClose: true
                });
              }
              return toast;
            })
          });
        });
      },
      isActive: (id4) => Boolean(findToast(toastStore.getState(), id4).position)
    };
  }
  var counter = 0;
  function createToast(message, options = {}) {
    var _a7, _b5;
    counter += 1;
    const id4 = (_a7 = options.id) != null ? _a7 : counter;
    const position5 = (_b5 = options.position) != null ? _b5 : "bottom";
    return {
      id: id4,
      message,
      position: position5,
      duration: options.duration,
      onCloseComplete: options.onCloseComplete,
      onRequestRemove: () => toastStore.removeToast(String(id4), position5),
      status: options.status,
      requestClose: false,
      containerStyle: options.containerStyle
    };
  }
  var Toast = (props) => {
    const {
      status,
      variant = "solid",
      id: id4,
      title,
      isClosable,
      onClose,
      description,
      colorScheme,
      icon
    } = props;
    const ids = id4 ? {
      root: `toast-${id4}`,
      title: `toast-${id4}-title`,
      description: `toast-${id4}-description`
    } : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
      Alert,
      {
        addRole: false,
        status,
        variant,
        id: ids == null ? void 0 : ids.root,
        alignItems: "start",
        borderRadius: "md",
        boxShadow: "lg",
        paddingEnd: 8,
        textAlign: "start",
        width: "auto",
        colorScheme,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(AlertIcon, { children: icon }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(chakra.div, { flex: "1", maxWidth: "100%", children: [
            title && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(AlertTitle, { id: ids == null ? void 0 : ids.title, children: title }),
            description && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(AlertDescription, { id: ids == null ? void 0 : ids.description, display: "block", children: description })
          ] }),
          isClosable && /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            CloseButton,
            {
              size: "sm",
              onClick: onClose,
              position: "absolute",
              insetEnd: 1,
              top: 1
            }
          )
        ]
      }
    );
  };
  function createRenderToast(options = {}) {
    const { render, toastComponent: ToastComponent2 = Toast } = options;
    const renderToast = (props) => {
      if (typeof render === "function") {
        return render(__spreadValues(__spreadValues({}, props), options));
      }
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ToastComponent2, __spreadValues(__spreadValues({}, props), options));
    };
    return renderToast;
  }
  function createToastFn(dir, defaultOptions) {
    const normalizeToastOptions = (options) => {
      var _a7;
      return __spreadProps(__spreadValues(__spreadValues({}, defaultOptions), options), {
        position: getToastPlacement(
          (_a7 = options == null ? void 0 : options.position) != null ? _a7 : defaultOptions == null ? void 0 : defaultOptions.position,
          dir
        )
      });
    };
    const toast = (options) => {
      const normalizedToastOptions = normalizeToastOptions(options);
      const Message2 = createRenderToast(normalizedToastOptions);
      return toastStore.notify(Message2, normalizedToastOptions);
    };
    toast.update = (id4, options) => {
      toastStore.update(id4, normalizeToastOptions(options));
    };
    toast.promise = (promise, options) => {
      const id4 = toast(__spreadProps(__spreadValues({}, options.loading), {
        status: "loading",
        duration: null
      }));
      promise.then(
        (data) => toast.update(id4, __spreadValues({
          status: "success",
          duration: 5e3
        }, runIfFn(options.success, data)))
      ).catch(
        (error2) => toast.update(id4, __spreadValues({
          status: "error",
          duration: 5e3
        }, runIfFn(options.error, error2)))
      );
    };
    toast.closeAll = toastStore.closeAll;
    toast.close = toastStore.close;
    toast.isActive = toastStore.isActive;
    return toast;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/toast/dist/chunk-D3Z6CXO7.mjs
  var import_react45 = __toESM(require_react(), 1);
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var [ToastOptionProvider, useToastOptionContext] = createContext({
    name: `ToastOptionsContext`,
    strict: false
  });
  var ToastProvider = (props) => {
    const state2 = (0, import_react45.useSyncExternalStore)(
      toastStore.subscribe,
      toastStore.getState,
      toastStore.getState
    );
    const {
      motionVariants,
      component: Component2 = ToastComponent,
      portalProps
    } = props;
    const stateKeys = Object.keys(state2);
    const toastList = stateKeys.map((position5) => {
      const toasts = state2[position5];
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "ul",
        {
          role: "region",
          "aria-live": "polite",
          id: `chakra-toast-manager-${position5}`,
          style: getToastListStyle(position5),
          children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(AnimatePresence, { initial: false, children: toasts.map((toast) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            Component2,
            __spreadValues({
              motionVariants
            }, toast),
            toast.id
          )) })
        },
        position5
      );
    });
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Portal, __spreadProps(__spreadValues({}, portalProps), { children: toastList }));
  };

  // ../ecopan_bot/node_modules/@chakra-ui/toast/dist/chunk-7FYWZXXG.mjs
  var import_react46 = __toESM(require_react(), 1);
  function useToast(options) {
    const { theme: theme2 } = useChakra();
    const defaultOptions = useToastOptionContext();
    return (0, import_react46.useMemo)(
      () => createToastFn(theme2.direction, __spreadValues(__spreadValues({}, defaultOptions), options)),
      [options, theme2.direction, defaultOptions]
    );
  }

  // ../ecopan_bot/node_modules/@chakra-ui/react/dist/chunk-DGNA6VRZ.mjs
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  var createChakraProvider = (providerTheme) => {
    return function ChakraProvider22(_a7) {
      var _b5 = _a7, {
        children,
        theme: theme2 = providerTheme,
        toastOptions
      } = _b5, restProps = __objRest(_b5, [
        "children",
        "theme",
        "toastOptions"
      ]);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(ChakraProvider, __spreadProps(__spreadValues({ theme: theme2 }, restProps), { children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ToastOptionProvider, { value: toastOptions == null ? void 0 : toastOptions.defaultOptions, children }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(ToastProvider, __spreadValues({}, toastOptions))
      ] }));
    };
  };
  var ChakraProvider2 = createChakraProvider(theme);
  var ChakraBaseProvider = createChakraProvider(baseTheme);

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs
  var import_react47 = __toESM(require_react(), 1);
  function assignRef(ref, value) {
    if (ref == null)
      return;
    if (typeof ref === "function") {
      ref(value);
      return;
    }
    try {
      ref.current = value;
    } catch (error2) {
      throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);
    }
  }
  function mergeRefs(...refs) {
    return (node2) => {
      refs.forEach((ref) => {
        assignRef(ref, node2);
      });
    };
  }
  function useMergeRefs(...refs) {
    return (0, import_react47.useMemo)(() => mergeRefs(...refs), refs);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/avatar/dist/chunk-QVBG3QXJ.mjs
  var [AvatarStylesProvider, useAvatarStyles] = createContext({
    name: `AvatarStylesContext`,
    hookName: `useAvatarStyles`,
    providerName: "<Avatar/>"
  });

  // ../ecopan_bot/node_modules/@chakra-ui/avatar/dist/chunk-XLTSJSZV.mjs
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  function initials(name) {
    const [firstName, lastName] = name.split(" ");
    return firstName && lastName ? `${firstName.charAt(0)}${lastName.charAt(0)}` : firstName.charAt(0);
  }
  function AvatarName(props) {
    const _a7 = props, { name, getInitials } = _a7, rest = __objRest(_a7, ["name", "getInitials"]);
    const styles2 = useAvatarStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(chakra.div, __spreadProps(__spreadValues({ role: "img", "aria-label": name }, rest), { __css: styles2.label, children: name ? getInitials == null ? void 0 : getInitials(name) : null }));
  }
  AvatarName.displayName = "AvatarName";

  // ../ecopan_bot/node_modules/@chakra-ui/avatar/dist/chunk-ZXZNYCCD.mjs
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  var GenericAvatarIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(
    chakra.svg,
    __spreadProps(__spreadValues({
      viewBox: "0 0 128 128",
      color: "#fff",
      width: "100%",
      height: "100%",
      className: "chakra-avatar__svg"
    }, props), {
      children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          "path",
          {
            fill: "currentColor",
            d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
          }
        )
      ]
    })
  );

  // ../ecopan_bot/node_modules/@chakra-ui/image/dist/chunk-QBIO4VEB.mjs
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var NativeImage = forwardRef(function NativeImage2(props, ref) {
    const _a7 = props, { htmlWidth, htmlHeight, alt } = _a7, rest = __objRest(_a7, ["htmlWidth", "htmlHeight", "alt"]);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("img", __spreadValues({ width: htmlWidth, height: htmlHeight, ref, alt }, rest));
  });
  NativeImage.displayName = "NativeImage";

  // ../ecopan_bot/node_modules/@chakra-ui/image/dist/chunk-HR33I6FK.mjs
  var import_react48 = __toESM(require_react(), 1);
  function useImage(props) {
    const {
      loading,
      src,
      srcSet,
      onLoad,
      onError,
      crossOrigin,
      sizes: sizes24,
      ignoreFallback
    } = props;
    const [status, setStatus] = (0, import_react48.useState)("pending");
    (0, import_react48.useEffect)(() => {
      setStatus(src ? "loading" : "pending");
    }, [src]);
    const imageRef = (0, import_react48.useRef)();
    const load = (0, import_react48.useCallback)(() => {
      if (!src)
        return;
      flush();
      const img = new Image();
      img.src = src;
      if (crossOrigin)
        img.crossOrigin = crossOrigin;
      if (srcSet)
        img.srcset = srcSet;
      if (sizes24)
        img.sizes = sizes24;
      if (loading)
        img.loading = loading;
      img.onload = (event) => {
        flush();
        setStatus("loaded");
        onLoad == null ? void 0 : onLoad(event);
      };
      img.onerror = (error2) => {
        flush();
        setStatus("failed");
        onError == null ? void 0 : onError(error2);
      };
      imageRef.current = img;
    }, [src, crossOrigin, srcSet, sizes24, onLoad, onError, loading]);
    const flush = () => {
      if (imageRef.current) {
        imageRef.current.onload = null;
        imageRef.current.onerror = null;
        imageRef.current = null;
      }
    };
    useSafeLayoutEffect(() => {
      if (ignoreFallback)
        return void 0;
      if (status === "loading") {
        load();
      }
      return () => {
        flush();
      };
    }, [status, load, ignoreFallback]);
    return ignoreFallback ? "loaded" : status;
  }
  var shouldShowFallbackImage = (status, fallbackStrategy) => status !== "loaded" && fallbackStrategy === "beforeLoadOrError" || status === "failed" && fallbackStrategy === "onError";

  // ../ecopan_bot/node_modules/@chakra-ui/image/dist/chunk-E77276RR.mjs
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  function omit3(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit) {
      if (key in clone) {
        delete clone[key];
      }
    }
    return clone;
  }
  var Image2 = forwardRef(function Image22(props, ref) {
    const _a7 = props, {
      fallbackSrc,
      fallback,
      src,
      srcSet,
      align,
      fit,
      loading,
      ignoreFallback,
      crossOrigin,
      fallbackStrategy = "beforeLoadOrError",
      referrerPolicy
    } = _a7, rest = __objRest(_a7, [
      "fallbackSrc",
      "fallback",
      "src",
      "srcSet",
      "align",
      "fit",
      "loading",
      "ignoreFallback",
      "crossOrigin",
      "fallbackStrategy",
      "referrerPolicy"
    ]);
    const providedFallback = fallbackSrc !== void 0 || fallback !== void 0;
    const shouldIgnoreFallbackImage = loading != null || ignoreFallback || !providedFallback;
    const status = useImage(__spreadProps(__spreadValues({}, props), {
      ignoreFallback: shouldIgnoreFallbackImage
    }));
    const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy);
    const shared = __spreadValues({
      ref,
      objectFit: fit,
      objectPosition: align
    }, shouldIgnoreFallbackImage ? rest : omit3(rest, ["onError", "onLoad"]));
    if (showFallbackImage) {
      if (fallback)
        return fallback;
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
        chakra.img,
        __spreadValues({
          as: NativeImage,
          className: "chakra-image__placeholder",
          src: fallbackSrc
        }, shared)
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
      chakra.img,
      __spreadValues({
        as: NativeImage,
        src,
        srcSet,
        crossOrigin,
        loading,
        referrerPolicy,
        className: "chakra-image"
      }, shared)
    );
  });
  Image2.displayName = "Image";

  // ../ecopan_bot/node_modules/@chakra-ui/avatar/dist/chunk-TLFCZAEL.mjs
  var import_react49 = __toESM(require_react(), 1);
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  function AvatarImage(props) {
    const {
      src,
      srcSet,
      onError,
      onLoad,
      getInitials,
      name,
      borderRadius,
      loading,
      iconLabel,
      icon = /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(GenericAvatarIcon, {}),
      ignoreFallback,
      referrerPolicy,
      crossOrigin
    } = props;
    const status = useImage({ src, onError, ignoreFallback });
    const hasLoaded = status === "loaded";
    const showFallback = !src || !hasLoaded;
    if (showFallback) {
      return name ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        AvatarName,
        {
          className: "chakra-avatar__initials",
          getInitials,
          name
        }
      ) : (0, import_react49.cloneElement)(icon, {
        role: "img",
        "aria-label": iconLabel
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
      chakra.img,
      {
        src,
        srcSet,
        alt: name,
        onLoad,
        referrerPolicy,
        crossOrigin: crossOrigin != null ? crossOrigin : void 0,
        className: "chakra-avatar__img",
        loading,
        __css: {
          width: "100%",
          height: "100%",
          objectFit: "cover",
          borderRadius
        }
      }
    );
  }
  AvatarImage.displayName = "AvatarImage";

  // ../ecopan_bot/node_modules/@chakra-ui/avatar/dist/chunk-YYQ66DB3.mjs
  var import_react50 = __toESM(require_react(), 1);
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var baseStyle42 = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    textTransform: "uppercase",
    fontWeight: "medium",
    position: "relative",
    flexShrink: 0
  };
  var Avatar = forwardRef((props, ref) => {
    const styles2 = useMultiStyleConfig("Avatar", props);
    const [isLoaded, setIsLoaded] = (0, import_react50.useState)(false);
    const _a7 = omitThemingProps(props), {
      src,
      srcSet,
      name,
      showBorder,
      borderRadius = "full",
      onError,
      onLoad: onLoadProp,
      getInitials = initials,
      icon = /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(GenericAvatarIcon, {}),
      iconLabel = " avatar",
      loading,
      children,
      borderColor,
      ignoreFallback,
      crossOrigin
    } = _a7, rest = __objRest(_a7, [
      "src",
      "srcSet",
      "name",
      "showBorder",
      "borderRadius",
      "onError",
      "onLoad",
      "getInitials",
      "icon",
      "iconLabel",
      "loading",
      "children",
      "borderColor",
      "ignoreFallback",
      "crossOrigin"
    ]);
    const avatarStyles = __spreadValues(__spreadValues({
      borderRadius,
      borderWidth: showBorder ? "2px" : void 0
    }, baseStyle42), styles2.container);
    if (borderColor) {
      avatarStyles.borderColor = borderColor;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      chakra.span,
      __spreadProps(__spreadValues({
        ref
      }, rest), {
        className: cx("chakra-avatar", props.className),
        "data-loaded": dataAttr(isLoaded),
        __css: avatarStyles,
        children: /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(AvatarStylesProvider, { value: styles2, children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
            AvatarImage,
            {
              src,
              srcSet,
              loading,
              onLoad: callAllHandlers(onLoadProp, () => {
                setIsLoaded(true);
              }),
              onError,
              getInitials,
              name,
              borderRadius,
              icon,
              iconLabel,
              ignoreFallback,
              crossOrigin
            }
          ),
          children
        ] })
      })
    );
  });
  Avatar.displayName = "Avatar";

  // ../ecopan_bot/node_modules/@chakra-ui/react-children-utils/dist/index.mjs
  var import_react51 = __toESM(require_react(), 1);
  function getValidChildren(children) {
    return import_react51.Children.toArray(children).filter(
      (child) => (0, import_react51.isValidElement)(child)
    );
  }

  // ../ecopan_bot/node_modules/@chakra-ui/button/dist/chunk-DGWZA2DU.mjs
  var [ButtonGroupProvider, useButtonGroup] = createContext({
    strict: false,
    name: "ButtonGroupContext"
  });

  // ../ecopan_bot/node_modules/@chakra-ui/button/dist/chunk-FRFD4OXU.mjs
  var import_react52 = __toESM(require_react(), 1);
  function useButtonType(value) {
    const [isButton, setIsButton] = (0, import_react52.useState)(!value);
    const refCallback = (0, import_react52.useCallback)((node2) => {
      if (!node2)
        return;
      setIsButton(node2.tagName === "BUTTON");
    }, []);
    const type = isButton ? "button" : void 0;
    return { ref: refCallback, type };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/button/dist/chunk-HCASMTTF.mjs
  var import_react53 = __toESM(require_react(), 1);
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  function ButtonIcon(props) {
    const _a7 = props, { children, className } = _a7, rest = __objRest(_a7, ["children", "className"]);
    const _children = (0, import_react53.isValidElement)(children) ? (0, import_react53.cloneElement)(children, {
      "aria-hidden": true,
      focusable: false
    }) : children;
    const _className = cx("chakra-button__icon", className);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
      chakra.span,
      __spreadProps(__spreadValues({
        display: "inline-flex",
        alignSelf: "center",
        flexShrink: 0
      }, rest), {
        className: _className,
        children: _children
      })
    );
  }
  ButtonIcon.displayName = "ButtonIcon";

  // ../ecopan_bot/node_modules/@chakra-ui/button/dist/chunk-HNNHG6RU.mjs
  var import_react54 = __toESM(require_react(), 1);
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  function ButtonSpinner(props) {
    const _a7 = props, {
      label,
      placement,
      spacing: spacing2 = "0.5rem",
      children = /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(Spinner, { color: "currentColor", width: "1em", height: "1em" }),
      className,
      __css
    } = _a7, rest = __objRest(_a7, [
      "label",
      "placement",
      "spacing",
      "children",
      "className",
      "__css"
    ]);
    const _className = cx("chakra-button__spinner", className);
    const marginProp = placement === "start" ? "marginEnd" : "marginStart";
    const spinnerStyles = (0, import_react54.useMemo)(
      () => __spreadValues({
        display: "flex",
        alignItems: "center",
        position: label ? "relative" : "absolute",
        [marginProp]: label ? spacing2 : 0,
        fontSize: "1em",
        lineHeight: "normal"
      }, __css),
      [__css, label, marginProp, spacing2]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(chakra.div, __spreadProps(__spreadValues({ className: _className }, rest), { __css: spinnerStyles, children }));
  }
  ButtonSpinner.displayName = "ButtonSpinner";

  // ../ecopan_bot/node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs
  var import_react55 = __toESM(require_react(), 1);
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  var Button = forwardRef((props, ref) => {
    const group = useButtonGroup();
    const styles2 = useStyleConfig("Button", __spreadValues(__spreadValues({}, group), props));
    const _a7 = omitThemingProps(props), {
      isDisabled = group == null ? void 0 : group.isDisabled,
      isLoading,
      isActive,
      children,
      leftIcon,
      rightIcon,
      loadingText,
      iconSpacing: iconSpacing2 = "0.5rem",
      type,
      spinner,
      spinnerPlacement = "start",
      className,
      as
    } = _a7, rest = __objRest(_a7, [
      "isDisabled",
      "isLoading",
      "isActive",
      "children",
      "leftIcon",
      "rightIcon",
      "loadingText",
      "iconSpacing",
      "type",
      "spinner",
      "spinnerPlacement",
      "className",
      "as"
    ]);
    const buttonStyles = (0, import_react55.useMemo)(() => {
      const _focus = __spreadProps(__spreadValues({}, styles2 == null ? void 0 : styles2["_focus"]), { zIndex: 1 });
      return __spreadValues(__spreadValues({
        display: "inline-flex",
        appearance: "none",
        alignItems: "center",
        justifyContent: "center",
        userSelect: "none",
        position: "relative",
        whiteSpace: "nowrap",
        verticalAlign: "middle",
        outline: "none"
      }, styles2), !!group && { _focus });
    }, [styles2, group]);
    const { ref: _ref, type: defaultType } = useButtonType(as);
    const contentProps = { rightIcon, leftIcon, iconSpacing: iconSpacing2, children };
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
      chakra.button,
      __spreadProps(__spreadValues({
        ref: useMergeRefs(ref, _ref),
        as,
        type: type != null ? type : defaultType,
        "data-active": dataAttr(isActive),
        "data-loading": dataAttr(isLoading),
        __css: buttonStyles,
        className: cx("chakra-button", className)
      }, rest), {
        disabled: isDisabled || isLoading,
        children: [
          isLoading && spinnerPlacement === "start" && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            ButtonSpinner,
            {
              className: "chakra-button__spinner--start",
              label: loadingText,
              placement: "start",
              spacing: iconSpacing2,
              children: spinner
            }
          ),
          isLoading ? loadingText || /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(chakra.span, { opacity: 0, children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonContent, __spreadValues({}, contentProps)) }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonContent, __spreadValues({}, contentProps)),
          isLoading && spinnerPlacement === "end" && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
            ButtonSpinner,
            {
              className: "chakra-button__spinner--end",
              label: loadingText,
              placement: "end",
              spacing: iconSpacing2,
              children: spinner
            }
          )
        ]
      })
    );
  });
  Button.displayName = "Button";
  function ButtonContent(props) {
    const { leftIcon, rightIcon, children, iconSpacing: iconSpacing2 } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
      leftIcon && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonIcon, { marginEnd: iconSpacing2, children: leftIcon }),
      children,
      rightIcon && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ButtonIcon, { marginStart: iconSpacing2, children: rightIcon })
    ] });
  }

  // ../ecopan_bot/node_modules/@chakra-ui/button/dist/chunk-3HSDMH4Y.mjs
  var import_react56 = __toESM(require_react(), 1);
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  var IconButton = forwardRef(
    (props, ref) => {
      const _a7 = props, { icon, children, isRound, "aria-label": ariaLabel } = _a7, rest = __objRest(_a7, ["icon", "children", "isRound", "aria-label"]);
      const element4 = icon || children;
      const _children = (0, import_react56.isValidElement)(element4) ? (0, import_react56.cloneElement)(element4, {
        "aria-hidden": true,
        focusable: false
      }) : null;
      return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
        Button,
        __spreadProps(__spreadValues({
          padding: "0",
          borderRadius: isRound ? "full" : void 0,
          ref,
          "aria-label": ariaLabel
        }, rest), {
          children: _children
        })
      );
    }
  );
  IconButton.displayName = "IconButton";

  // ../ecopan_bot/node_modules/@chakra-ui/card/dist/chunk-4DHADF5X.mjs
  var [CardStylesProvider, useCardStyles] = createStylesContext("Card");

  // ../ecopan_bot/node_modules/@chakra-ui/card/dist/chunk-KKEJMMX3.mjs
  var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
  var CardBody = forwardRef(function CardBody2(props, ref) {
    const _a7 = props, { className } = _a7, rest = __objRest(_a7, ["className"]);
    const styles2 = useCardStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
      chakra.div,
      __spreadValues({
        ref,
        className: cx("chakra-card__body", className),
        __css: styles2.body
      }, rest)
    );
  });

  // ../ecopan_bot/node_modules/@chakra-ui/card/dist/chunk-S432VF2S.mjs
  var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
  var Card = forwardRef(function Card2(props, ref) {
    const _a7 = omitThemingProps(props), {
      className,
      children,
      direction: direction2 = "column",
      justify,
      align
    } = _a7, rest = __objRest(_a7, [
      "className",
      "children",
      "direction",
      "justify",
      "align"
    ]);
    const styles2 = useMultiStyleConfig("Card", props);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
      chakra.div,
      __spreadProps(__spreadValues({
        ref,
        className: cx("chakra-card", className),
        __css: __spreadValues({
          display: "flex",
          flexDirection: direction2,
          justifyContent: justify,
          alignItems: align,
          position: "relative",
          minWidth: 0,
          wordWrap: "break-word"
        }, styles2.container)
      }, rest), {
        children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(CardStylesProvider, { value: styles2, children })
      })
    );
  });

  // ../ecopan_bot/node_modules/@chakra-ui/form-control/dist/chunk-6ZNYZUDD.mjs
  var import_react57 = __toESM(require_react(), 1);
  var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
  var [FormControlStylesProvider, useFormControlStyles] = createContext({
    name: `FormControlStylesContext`,
    errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in "<FormControl />" `
  });
  var [FormControlProvider, useFormControlContext] = createContext({
    strict: false,
    name: "FormControlContext"
  });
  function useFormControlProvider(props) {
    const _a7 = props, {
      id: idProp,
      isRequired,
      isInvalid,
      isDisabled,
      isReadOnly
    } = _a7, htmlProps = __objRest(_a7, [
      "id",
      "isRequired",
      "isInvalid",
      "isDisabled",
      "isReadOnly"
    ]);
    const uuid = (0, import_react57.useId)();
    const id4 = idProp || `field-${uuid}`;
    const labelId = `${id4}-label`;
    const feedbackId = `${id4}-feedback`;
    const helpTextId = `${id4}-helptext`;
    const [hasFeedbackText, setHasFeedbackText] = (0, import_react57.useState)(false);
    const [hasHelpText, setHasHelpText] = (0, import_react57.useState)(false);
    const [isFocused, setFocus] = (0, import_react57.useState)(false);
    const getHelpTextProps = (0, import_react57.useCallback)(
      (props2 = {}, forwardedRef = null) => __spreadProps(__spreadValues({
        id: helpTextId
      }, props2), {
        ref: mergeRefs(forwardedRef, (node2) => {
          if (!node2)
            return;
          setHasHelpText(true);
        })
      }),
      [helpTextId]
    );
    const getLabelProps = (0, import_react57.useCallback)(
      (props2 = {}, forwardedRef = null) => __spreadProps(__spreadValues({}, props2), {
        ref: forwardedRef,
        "data-focus": dataAttr(isFocused),
        "data-disabled": dataAttr(isDisabled),
        "data-invalid": dataAttr(isInvalid),
        "data-readonly": dataAttr(isReadOnly),
        id: props2.id !== void 0 ? props2.id : labelId,
        htmlFor: props2.htmlFor !== void 0 ? props2.htmlFor : id4
      }),
      [id4, isDisabled, isFocused, isInvalid, isReadOnly, labelId]
    );
    const getErrorMessageProps = (0, import_react57.useCallback)(
      (props2 = {}, forwardedRef = null) => __spreadProps(__spreadValues({
        id: feedbackId
      }, props2), {
        ref: mergeRefs(forwardedRef, (node2) => {
          if (!node2)
            return;
          setHasFeedbackText(true);
        }),
        "aria-live": "polite"
      }),
      [feedbackId]
    );
    const getRootProps = (0, import_react57.useCallback)(
      (props2 = {}, forwardedRef = null) => __spreadProps(__spreadValues(__spreadValues({}, props2), htmlProps), {
        ref: forwardedRef,
        role: "group"
      }),
      [htmlProps]
    );
    const getRequiredIndicatorProps = (0, import_react57.useCallback)(
      (props2 = {}, forwardedRef = null) => __spreadProps(__spreadValues({}, props2), {
        ref: forwardedRef,
        role: "presentation",
        "aria-hidden": true,
        children: props2.children || "*"
      }),
      []
    );
    return {
      isRequired: !!isRequired,
      isInvalid: !!isInvalid,
      isReadOnly: !!isReadOnly,
      isDisabled: !!isDisabled,
      isFocused: !!isFocused,
      onFocus: () => setFocus(true),
      onBlur: () => setFocus(false),
      hasFeedbackText,
      setHasFeedbackText,
      hasHelpText,
      setHasHelpText,
      id: id4,
      labelId,
      feedbackId,
      helpTextId,
      htmlProps,
      getHelpTextProps,
      getErrorMessageProps,
      getRootProps,
      getLabelProps,
      getRequiredIndicatorProps
    };
  }
  var FormControl = forwardRef(
    function FormControl2(props, ref) {
      const styles2 = useMultiStyleConfig("Form", props);
      const ownProps = omitThemingProps(props);
      const _a7 = useFormControlProvider(ownProps), {
        getRootProps,
        htmlProps: _
      } = _a7, context = __objRest(_a7, [
        "getRootProps",
        "htmlProps"
      ]);
      const className = cx("chakra-form-control", props.className);
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(FormControlProvider, { value: context, children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(FormControlStylesProvider, { value: styles2, children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
        chakra.div,
        __spreadProps(__spreadValues({}, getRootProps({}, ref)), {
          className,
          __css: styles2["container"]
        })
      ) }) });
    }
  );
  FormControl.displayName = "FormControl";
  var FormHelperText = forwardRef(
    function FormHelperText2(props, ref) {
      const field = useFormControlContext();
      const styles2 = useFormControlStyles();
      const className = cx("chakra-form__helper-text", props.className);
      return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
        chakra.div,
        __spreadProps(__spreadValues({}, field == null ? void 0 : field.getHelpTextProps(props, ref)), {
          __css: styles2.helperText,
          className
        })
      );
    }
  );
  FormHelperText.displayName = "FormHelperText";

  // ../ecopan_bot/node_modules/@chakra-ui/form-control/dist/chunk-IJBC3YLI.mjs
  function useFormControl(props) {
    const _a7 = useFormControlProps(props), { isDisabled, isInvalid, isReadOnly, isRequired } = _a7, rest = __objRest(_a7, ["isDisabled", "isInvalid", "isReadOnly", "isRequired"]);
    return __spreadProps(__spreadValues({}, rest), {
      disabled: isDisabled,
      readOnly: isReadOnly,
      required: isRequired,
      "aria-invalid": ariaAttr(isInvalid),
      "aria-required": ariaAttr(isRequired),
      "aria-readonly": ariaAttr(isReadOnly)
    });
  }
  function useFormControlProps(props) {
    var _a7, _b5, _c3;
    const field = useFormControlContext();
    const _a8 = props, {
      id: id4,
      disabled,
      readOnly,
      required,
      isRequired,
      isInvalid,
      isReadOnly,
      isDisabled,
      onFocus,
      onBlur
    } = _a8, rest = __objRest(_a8, [
      "id",
      "disabled",
      "readOnly",
      "required",
      "isRequired",
      "isInvalid",
      "isReadOnly",
      "isDisabled",
      "onFocus",
      "onBlur"
    ]);
    const labelIds = props["aria-describedby"] ? [props["aria-describedby"]] : [];
    if ((field == null ? void 0 : field.hasFeedbackText) && (field == null ? void 0 : field.isInvalid)) {
      labelIds.push(field.feedbackId);
    }
    if (field == null ? void 0 : field.hasHelpText) {
      labelIds.push(field.helpTextId);
    }
    return __spreadProps(__spreadValues({}, rest), {
      "aria-describedby": labelIds.join(" ") || void 0,
      id: id4 != null ? id4 : field == null ? void 0 : field.id,
      isDisabled: (_a7 = disabled != null ? disabled : isDisabled) != null ? _a7 : field == null ? void 0 : field.isDisabled,
      isReadOnly: (_b5 = readOnly != null ? readOnly : isReadOnly) != null ? _b5 : field == null ? void 0 : field.isReadOnly,
      isRequired: (_c3 = required != null ? required : isRequired) != null ? _c3 : field == null ? void 0 : field.isRequired,
      isInvalid: isInvalid != null ? isInvalid : field == null ? void 0 : field.isInvalid,
      onFocus: callAllHandlers(field == null ? void 0 : field.onFocus, onFocus),
      onBlur: callAllHandlers(field == null ? void 0 : field.onBlur, onBlur)
    });
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
      return typeof obj2;
    } : function(obj2) {
      return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    }, _typeof(obj);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-Z47J5YMH.mjs
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
  var [ListStylesProvider, useListStyles] = createContext({
    name: `ListStylesContext`,
    errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in "<List />" `
  });
  var List = forwardRef(function List2(props, ref) {
    const styles2 = useMultiStyleConfig("List", props);
    const _a7 = omitThemingProps(props), {
      children,
      styleType = "none",
      stylePosition,
      spacing: spacing2
    } = _a7, rest = __objRest(_a7, [
      "children",
      "styleType",
      "stylePosition",
      "spacing"
    ]);
    const validChildren = getValidChildren(children);
    const selector2 = "& > *:not(style) ~ *:not(style)";
    const spacingStyle = spacing2 ? { [selector2]: { mt: spacing2 } } : {};
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ListStylesProvider, { value: styles2, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      chakra.ul,
      __spreadProps(__spreadValues({
        ref,
        listStyleType: styleType,
        listStylePosition: stylePosition,
        role: "list",
        __css: __spreadValues(__spreadValues({}, styles2.container), spacingStyle)
      }, rest), {
        children: validChildren
      })
    ) });
  });
  List.displayName = "List";
  var OrderedList = forwardRef((props, ref) => {
    const _a7 = props, { as } = _a7, rest = __objRest(_a7, ["as"]);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(List, __spreadValues({ ref, as: "ol", styleType: "decimal", marginStart: "1em" }, rest));
  });
  OrderedList.displayName = "OrderedList";
  var UnorderedList = forwardRef(function UnorderedList2(props, ref) {
    const _a7 = props, { as } = _a7, rest = __objRest(_a7, ["as"]);
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(List, __spreadValues({ ref, as: "ul", styleType: "initial", marginStart: "1em" }, rest));
  });
  UnorderedList.displayName = "UnorderedList";
  var ListItem = forwardRef(function ListItem2(props, ref) {
    const styles2 = useListStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(chakra.li, __spreadProps(__spreadValues({ ref }, props), { __css: styles2.item }));
  });
  ListItem.displayName = "ListItem";
  var ListIcon = forwardRef(function ListIcon2(props, ref) {
    const styles2 = useListStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Icon, __spreadProps(__spreadValues({ ref, role: "presentation" }, props), { __css: styles2.icon }));
  });
  ListIcon.displayName = "ListIcon";

  // ../ecopan_bot/node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs
  var breakpoints2 = Object.freeze([
    "base",
    "sm",
    "md",
    "lg",
    "xl",
    "2xl"
  ]);
  function mapResponsive(prop, mapper) {
    if (Array.isArray(prop)) {
      return prop.map((item) => item === null ? null : mapper(item));
    }
    if (isObject(prop)) {
      return Object.keys(prop).reduce((result, key) => {
        result[key] = mapper(prop[key]);
        return result;
      }, {});
    }
    if (prop != null) {
      return mapper(prop);
    }
    return null;
  }
  function arrayToObjectNotation(values, bps = breakpoints2) {
    const result = {};
    values.forEach((value, index2) => {
      const key = bps[index2];
      if (value == null)
        return;
      result[key] = value;
    });
    return result;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-P74GIWPW.mjs
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var Text = forwardRef(function Text2(props, ref) {
    const styles2 = useStyleConfig("Text", props);
    const _a7 = omitThemingProps(props), { className, align, decoration, casing } = _a7, rest = __objRest(_a7, ["className", "align", "decoration", "casing"]);
    const aliasedProps = compact({
      textAlign: props.align,
      textDecoration: props.decoration,
      textTransform: props.casing
    });
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
      chakra.p,
      __spreadProps(__spreadValues(__spreadValues({
        ref,
        className: cx("chakra-text", props.className)
      }, aliasedProps), rest), {
        __css: styles2
      })
    );
  });
  Text.displayName = "Text";

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-AMDSPU3E.mjs
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var StackItem = (props) => /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
    chakra.div,
    __spreadProps(__spreadValues({
      className: "chakra-stack__item"
    }, props), {
      __css: __spreadValues({
        display: "inline-block",
        flex: "0 0 auto",
        minWidth: 0
      }, props["__css"])
    })
  );
  StackItem.displayName = "StackItem";

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-V4DIVZKN.mjs
  var selector = "& > *:not(style) ~ *:not(style)";
  function getStackStyles(options) {
    const { spacing: spacing2, direction: direction2 } = options;
    const directionStyles = {
      column: {
        marginTop: spacing2,
        marginEnd: 0,
        marginBottom: 0,
        marginStart: 0
      },
      row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing2 },
      "column-reverse": {
        marginTop: 0,
        marginEnd: 0,
        marginBottom: spacing2,
        marginStart: 0
      },
      "row-reverse": {
        marginTop: 0,
        marginEnd: spacing2,
        marginBottom: 0,
        marginStart: 0
      }
    };
    return {
      flexDirection: direction2,
      [selector]: mapResponsive(
        direction2,
        (value) => directionStyles[value]
      )
    };
  }
  function getDividerStyles(options) {
    const { spacing: spacing2, direction: direction2 } = options;
    const dividerStyles = {
      column: {
        my: spacing2,
        mx: 0,
        borderLeftWidth: 0,
        borderBottomWidth: "1px"
      },
      "column-reverse": {
        my: spacing2,
        mx: 0,
        borderLeftWidth: 0,
        borderBottomWidth: "1px"
      },
      row: {
        mx: spacing2,
        my: 0,
        borderLeftWidth: "1px",
        borderBottomWidth: 0
      },
      "row-reverse": {
        mx: spacing2,
        my: 0,
        borderLeftWidth: "1px",
        borderBottomWidth: 0
      }
    };
    return {
      "&": mapResponsive(
        direction2,
        (value) => dividerStyles[value]
      )
    };
  }

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-O5CRURSQ.mjs
  var import_react58 = __toESM(require_react(), 1);
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var Stack = forwardRef((props, ref) => {
    const _a7 = props, {
      isInline,
      direction: directionProp,
      align,
      justify,
      spacing: spacing2 = "0.5rem",
      wrap: wrap4,
      children,
      divider,
      className,
      shouldWrapChildren
    } = _a7, rest = __objRest(_a7, [
      "isInline",
      "direction",
      "align",
      "justify",
      "spacing",
      "wrap",
      "children",
      "divider",
      "className",
      "shouldWrapChildren"
    ]);
    const direction2 = isInline ? "row" : directionProp != null ? directionProp : "column";
    const styles2 = (0, import_react58.useMemo)(
      () => getStackStyles({ direction: direction2, spacing: spacing2 }),
      [direction2, spacing2]
    );
    const dividerStyle = (0, import_react58.useMemo)(
      () => getDividerStyles({ spacing: spacing2, direction: direction2 }),
      [spacing2, direction2]
    );
    const hasDivider = !!divider;
    const shouldUseChildren = !shouldWrapChildren && !hasDivider;
    const clones = (0, import_react58.useMemo)(() => {
      const validChildren = getValidChildren(children);
      return shouldUseChildren ? validChildren : validChildren.map((child, index2) => {
        const key = typeof child.key !== "undefined" ? child.key : index2;
        const isLast = index2 + 1 === validChildren.length;
        const wrappedChild = /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(StackItem, { children: child }, key);
        const _child = shouldWrapChildren ? wrappedChild : child;
        if (!hasDivider)
          return _child;
        const clonedDivider = (0, import_react58.cloneElement)(
          divider,
          {
            __css: dividerStyle
          }
        );
        const _divider = isLast ? null : clonedDivider;
        return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(import_react58.Fragment, { children: [
          _child,
          _divider
        ] }, key);
      });
    }, [
      divider,
      dividerStyle,
      hasDivider,
      shouldUseChildren,
      shouldWrapChildren,
      children
    ]);
    const _className = cx("chakra-stack", className);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      chakra.div,
      __spreadProps(__spreadValues({
        ref,
        display: "flex",
        alignItems: align,
        justifyContent: justify,
        flexDirection: styles2.flexDirection,
        flexWrap: wrap4,
        className: _className,
        __css: hasDivider ? {} : { [selector]: styles2[selector] }
      }, rest), {
        children: clones
      })
    );
  });
  Stack.displayName = "Stack";

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-MUMUYFOI.mjs
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
  var VStack = forwardRef((props, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(Stack, __spreadProps(__spreadValues({ align: "center" }, props), { direction: "column", ref })));
  VStack.displayName = "VStack";

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
  var Heading = forwardRef(function Heading2(props, ref) {
    const styles2 = useStyleConfig("Heading", props);
    const _a7 = omitThemingProps(props), { className } = _a7, rest = __objRest(_a7, ["className"]);
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
      chakra.h2,
      __spreadProps(__spreadValues({
        ref,
        className: cx("chakra-heading", props.className)
      }, rest), {
        __css: styles2
      })
    );
  });
  Heading.displayName = "Heading";

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-6CSUKJP7.mjs
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
  var Box = chakra("div");
  Box.displayName = "Box";
  var Square = forwardRef(function Square2(props, ref) {
    const _a7 = props, { size: size2, centerContent = true } = _a7, rest = __objRest(_a7, ["size", "centerContent"]);
    const styles2 = centerContent ? { display: "flex", alignItems: "center", justifyContent: "center" } : {};
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
      Box,
      __spreadValues({
        ref,
        boxSize: size2,
        __css: __spreadProps(__spreadValues({}, styles2), {
          flexShrink: 0,
          flexGrow: 0
        })
      }, rest)
    );
  });
  Square.displayName = "Square";
  var Circle = forwardRef(function Circle2(props, ref) {
    const _a7 = props, { size: size2 } = _a7, rest = __objRest(_a7, ["size"]);
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Square, __spreadValues({ size: size2, ref, borderRadius: "9999px" }, rest));
  });
  Circle.displayName = "Circle";

  // ../ecopan_bot/node_modules/@chakra-ui/layout/dist/chunk-MPFPK3CX.mjs
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var Flex = forwardRef(function Flex2(props, ref) {
    const _a7 = props, { direction: direction2, align, justify, wrap: wrap4, basis, grow, shrink } = _a7, rest = __objRest(_a7, ["direction", "align", "justify", "wrap", "basis", "grow", "shrink"]);
    const styles2 = {
      display: "flex",
      flexDirection: direction2,
      alignItems: align,
      justifyContent: justify,
      flexWrap: wrap4,
      flexBasis: basis,
      flexGrow: grow,
      flexShrink: shrink
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(chakra.div, __spreadValues({ ref, __css: styles2 }, rest));
  });
  Flex.displayName = "Flex";

  // ../ecopan_bot/node_modules/@chakra-ui/media-query/dist/chunk-MG6WC47T.mjs
  var import_react59 = __toESM(require_react(), 1);
  function useMediaQuery(query, options = {}) {
    const { ssr = true, fallback } = options;
    const { getWindow } = useEnvironment();
    const queries = Array.isArray(query) ? query : [query];
    let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];
    fallbackValues = fallbackValues.filter((v) => v != null);
    const [value, setValue] = (0, import_react59.useState)(() => {
      return queries.map((query2, index2) => ({
        media: query2,
        matches: ssr ? !!fallbackValues[index2] : getWindow().matchMedia(query2).matches
      }));
    });
    (0, import_react59.useEffect)(() => {
      const win = getWindow();
      setValue(
        queries.map((query2) => ({
          media: query2,
          matches: win.matchMedia(query2).matches
        }))
      );
      const mql = queries.map((query2) => win.matchMedia(query2));
      const handler = (evt) => {
        setValue((prev) => {
          return prev.slice().map((item) => {
            if (item.media === evt.media)
              return __spreadProps(__spreadValues({}, item), { matches: evt.matches });
            return item;
          });
        });
      };
      mql.forEach((mql2) => {
        if (typeof mql2.addListener === "function") {
          mql2.addListener(handler);
        } else {
          mql2.addEventListener("change", handler);
        }
      });
      return () => {
        mql.forEach((mql2) => {
          if (typeof mql2.removeListener === "function") {
            mql2.removeListener(handler);
          } else {
            mql2.removeEventListener("change", handler);
          }
        });
      };
    }, [getWindow]);
    return value.map((item) => item.matches);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/media-query/dist/chunk-G4WB2JLN.mjs
  function getClosestValue(values, breakpoint, breakpoints3 = breakpoints2) {
    let index2 = Object.keys(values).indexOf(breakpoint);
    if (index2 !== -1) {
      return values[breakpoint];
    }
    let stopIndex = breakpoints3.indexOf(breakpoint);
    while (stopIndex >= 0) {
      const key = breakpoints3[stopIndex];
      if (values.hasOwnProperty(key)) {
        index2 = stopIndex;
        break;
      }
      stopIndex -= 1;
    }
    if (index2 !== -1) {
      const key = breakpoints3[index2];
      return values[key];
    }
    return void 0;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/media-query/dist/chunk-CI3LDA6F.mjs
  function useBreakpoint(arg) {
    var _a7, _b5;
    const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
    const theme2 = useTheme();
    const breakpoints3 = theme2.__breakpoints.details.map(
      ({ minMaxQuery, breakpoint }) => ({
        breakpoint,
        query: minMaxQuery.replace("@media screen and ", "")
      })
    );
    const fallback = breakpoints3.map((bp) => bp.breakpoint === opts.fallback);
    const values = useMediaQuery(
      breakpoints3.map((bp) => bp.query),
      { fallback, ssr: opts.ssr }
    );
    const index2 = values.findIndex((value) => value == true);
    return (_b5 = (_a7 = breakpoints3[index2]) == null ? void 0 : _a7.breakpoint) != null ? _b5 : opts.fallback;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/media-query/dist/chunk-KSQA4OTT.mjs
  function useBreakpointValue(values, arg) {
    var _a7;
    const opts = isObject(arg) ? arg : { fallback: arg != null ? arg : "base" };
    const breakpoint = useBreakpoint(opts);
    const theme2 = useTheme();
    if (!breakpoint)
      return;
    const breakpoints3 = Array.from(((_a7 = theme2.__breakpoints) == null ? void 0 : _a7.keys) || []);
    const obj = Array.isArray(values) ? Object.fromEntries(
      Object.entries(arrayToObjectNotation(values, breakpoints3)).map(
        ([key, value]) => [key, value]
      )
    ) : values;
    return getClosestValue(obj, breakpoint, breakpoints3);
  }

  // ../ecopan_bot/node_modules/@chakra-ui/skeleton/dist/chunk-5L3NXCNX.mjs
  var import_react60 = __toESM(require_react(), 1);
  function useIsFirstRender() {
    const isFirstRender = (0, import_react60.useRef)(true);
    (0, import_react60.useEffect)(() => {
      isFirstRender.current = false;
    }, []);
    return isFirstRender.current;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/react-use-previous/dist/index.mjs
  var import_react61 = __toESM(require_react(), 1);
  function usePrevious(value) {
    const ref = (0, import_react61.useRef)();
    (0, import_react61.useEffect)(() => {
      ref.current = value;
    }, [value]);
    return ref.current;
  }

  // ../ecopan_bot/node_modules/@chakra-ui/skeleton/dist/chunk-3GRGLNAR.mjs
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
  var StyledSkeleton = chakra("div", {
    baseStyle: {
      boxShadow: "none",
      backgroundClip: "padding-box",
      cursor: "default",
      color: "transparent",
      pointerEvents: "none",
      userSelect: "none",
      "&::before, &::after, *": {
        visibility: "hidden"
      }
    }
  });
  var $startColor2 = cssVar("skeleton-start-color");
  var $endColor2 = cssVar("skeleton-end-color");
  var fade = (0, import_react15.keyframes)({
    from: { opacity: 0 },
    to: { opacity: 1 }
  });
  var bgFade = (0, import_react15.keyframes)({
    from: {
      borderColor: $startColor2.reference,
      background: $startColor2.reference
    },
    to: {
      borderColor: $endColor2.reference,
      background: $endColor2.reference
    }
  });
  var Skeleton = forwardRef((props, ref) => {
    const skeletonProps = __spreadProps(__spreadValues({}, props), {
      fadeDuration: typeof props.fadeDuration === "number" ? props.fadeDuration : 0.4,
      speed: typeof props.speed === "number" ? props.speed : 0.8
    });
    const styles2 = useStyleConfig("Skeleton", skeletonProps);
    const isFirstRender = useIsFirstRender();
    const _a7 = omitThemingProps(skeletonProps), {
      startColor = "",
      endColor = "",
      isLoaded,
      fadeDuration,
      speed,
      className,
      fitContent
    } = _a7, rest = __objRest(_a7, [
      "startColor",
      "endColor",
      "isLoaded",
      "fadeDuration",
      "speed",
      "className",
      "fitContent"
    ]);
    const [startColorVar, endColorVar] = useToken("colors", [
      startColor,
      endColor
    ]);
    const wasPreviouslyLoaded = usePrevious(isLoaded);
    const _className = cx("chakra-skeleton", className);
    const cssVarStyles = __spreadValues(__spreadValues({}, startColorVar && { [$startColor2.variable]: startColorVar }), endColorVar && { [$endColor2.variable]: endColorVar });
    if (isLoaded) {
      const animation = isFirstRender || wasPreviouslyLoaded ? "none" : `${fade} ${fadeDuration}s`;
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
        chakra.div,
        __spreadValues({
          ref,
          className: _className,
          __css: { animation }
        }, rest)
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(
      StyledSkeleton,
      __spreadProps(__spreadValues({
        ref,
        className: _className
      }, rest), {
        __css: __spreadProps(__spreadValues(__spreadValues({
          width: fitContent ? "fit-content" : void 0
        }, styles2), cssVarStyles), {
          _dark: __spreadValues(__spreadValues({}, styles2["_dark"]), cssVarStyles),
          animation: `${speed}s linear infinite alternate ${bgFade}`
        })
      })
    );
  });
  Skeleton.displayName = "Skeleton";

  // ../ecopan_bot/node_modules/@chakra-ui/skeleton/dist/chunk-QTKSMHLN.mjs
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  function range(count) {
    return Array(count).fill(1).map((_, index2) => index2 + 1);
  }
  var defaultNoOfLines = 3;
  var SkeletonText = (props) => {
    const _a7 = props, {
      noOfLines = defaultNoOfLines,
      spacing: spacing2 = "0.5rem",
      skeletonHeight = "0.5rem",
      className,
      startColor,
      endColor,
      isLoaded,
      fadeDuration,
      speed,
      variant,
      size: size2,
      colorScheme,
      children
    } = _a7, rest = __objRest(_a7, [
      "noOfLines",
      "spacing",
      "skeletonHeight",
      "className",
      "startColor",
      "endColor",
      "isLoaded",
      "fadeDuration",
      "speed",
      "variant",
      "size",
      "colorScheme",
      "children"
    ]);
    const noOfLinesValue = useBreakpointValue(
      typeof noOfLines === "number" ? [noOfLines] : noOfLines
    ) || defaultNoOfLines;
    const numbers = range(noOfLinesValue);
    const getWidth = (index2) => {
      if (noOfLinesValue > 1) {
        return index2 === numbers.length ? "80%" : "100%";
      }
      return "100%";
    };
    const _className = cx("chakra-skeleton__group", className);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(chakra.div, __spreadProps(__spreadValues({ className: _className }, rest), { children: numbers.map((number3, index2) => {
      if (isLoaded && index2 > 0) {
        return null;
      }
      const sizeProps = isLoaded ? null : {
        mb: number3 === numbers.length ? "0" : spacing2,
        width: getWidth(number3),
        height: skeletonHeight
      };
      return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
        Skeleton,
        __spreadProps(__spreadValues({
          startColor,
          endColor,
          isLoaded,
          fadeDuration,
          speed,
          variant,
          size: size2,
          colorScheme
        }, sizeProps), {
          children: index2 === 0 ? children : void 0
        }),
        numbers.length.toString() + number3
      );
    }) }));
  };
  SkeletonText.displayName = "SkeletonText";

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-B3MS3L3D.mjs
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  var [TableStylesProvider, useTableStyles] = createContext({
    name: `TableStylesContext`,
    errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
  });
  var Table = forwardRef((props, ref) => {
    const styles2 = useMultiStyleConfig("Table", props);
    const _a7 = omitThemingProps(props), { className, layout: layout3 } = _a7, tableProps = __objRest(_a7, ["className", "layout"]);
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(TableStylesProvider, { value: styles2, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
      chakra.table,
      __spreadValues({
        ref,
        __css: __spreadValues({ tableLayout: layout3 }, styles2.table),
        className: cx("chakra-table", className)
      }, tableProps)
    ) });
  });
  Table.displayName = "Table";

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-DJP6PLAX.mjs
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  var Thead = forwardRef((props, ref) => {
    const styles2 = useTableStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(chakra.thead, __spreadProps(__spreadValues({}, props), { ref, __css: styles2.thead }));
  });

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-L7UVV2ML.mjs
  var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
  var Tr = forwardRef((props, ref) => {
    const styles2 = useTableStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(chakra.tr, __spreadProps(__spreadValues({}, props), { ref, __css: styles2.tr }));
  });

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-7FCBKWFD.mjs
  var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
  var TableContainer = forwardRef(
    (props, ref) => {
      var _a7;
      const _a8 = props, { overflow, overflowX, className } = _a8, rest = __objRest(_a8, ["overflow", "overflowX", "className"]);
      return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        chakra.div,
        __spreadProps(__spreadValues({
          ref,
          className: cx("chakra-table__container", className)
        }, rest), {
          __css: {
            display: "block",
            whiteSpace: "nowrap",
            WebkitOverflowScrolling: "touch",
            overflowX: (_a7 = overflow != null ? overflow : overflowX) != null ? _a7 : "auto",
            overflowY: "hidden",
            maxWidth: "100%"
          }
        })
      );
    }
  );

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-D3HTYHQX.mjs
  var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
  var Tbody = forwardRef((props, ref) => {
    const styles2 = useTableStyles();
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(chakra.tbody, __spreadProps(__spreadValues({}, props), { ref, __css: styles2.tbody }));
  });

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-BLRPLYZO.mjs
  var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
  var Td = forwardRef(
    (_a7, ref) => {
      var _b5 = _a7, { isNumeric } = _b5, rest = __objRest(_b5, ["isNumeric"]);
      const styles2 = useTableStyles();
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
        chakra.td,
        __spreadProps(__spreadValues({}, rest), {
          ref,
          __css: styles2.td,
          "data-is-numeric": isNumeric
        })
      );
    }
  );

  // ../ecopan_bot/node_modules/@chakra-ui/table/dist/chunk-Z3IFIKNA.mjs
  var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
  var Th = forwardRef(
    (_a7, ref) => {
      var _b5 = _a7, { isNumeric } = _b5, rest = __objRest(_b5, ["isNumeric"]);
      const styles2 = useTableStyles();
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
        chakra.th,
        __spreadProps(__spreadValues({}, rest), {
          ref,
          __css: styles2.th,
          "data-is-numeric": isNumeric
        })
      );
    }
  );

  // ../ecopan_bot/node_modules/@chakra-ui/textarea/dist/chunk-OEQDSMWZ.mjs
  var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
  function omit4(object, keysToOmit = []) {
    const clone = Object.assign({}, object);
    for (const key of keysToOmit) {
      if (key in clone) {
        delete clone[key];
      }
    }
    return clone;
  }
  var omitted = ["h", "minH", "height", "minHeight"];
  var Textarea = forwardRef((props, ref) => {
    const styles2 = useStyleConfig("Textarea", props);
    const _a7 = omitThemingProps(props), { className, rows } = _a7, rest = __objRest(_a7, ["className", "rows"]);
    const textareaProps = useFormControl(rest);
    const textareaStyles = rows ? omit4(styles2, omitted) : styles2;
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
      chakra.textarea,
      __spreadProps(__spreadValues({
        ref,
        rows
      }, textareaProps), {
        className: cx("chakra-textarea", className),
        __css: textareaStyles
      })
    );
  });
  Textarea.displayName = "Textarea";

  // ../ecopan_bot/node_modules/nanoid/index.browser.js
  var nanoid = (size2 = 21) => crypto.getRandomValues(new Uint8Array(size2)).reduce((id4, byte) => {
    byte &= 63;
    if (byte < 36) {
      id4 += byte.toString(36);
    } else if (byte < 62) {
      id4 += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id4 += "-";
    } else {
      id4 += "_";
    }
    return id4;
  }, "");

  // ../ecopan_bot/node_modules/lucide-react/dist/esm/createLucideIcon.js
  var import_react62 = __toESM(require_react());

  // ../ecopan_bot/node_modules/lucide-react/dist/esm/defaultAttributes.js
  var defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
  };

  // ../ecopan_bot/node_modules/lucide-react/dist/esm/createLucideIcon.js
  var toKebabCase = (string3) => string3.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
  var createLucideIcon = (iconName, iconNode) => {
    const Component2 = (0, import_react62.forwardRef)(
      (_a7, ref) => {
        var _b5 = _a7, { color: color4 = "currentColor", size: size2 = 24, strokeWidth = 2, children } = _b5, rest = __objRest(_b5, ["color", "size", "strokeWidth", "children"]);
        return (0, import_react62.createElement)(
          "svg",
          __spreadValues(__spreadProps(__spreadValues({
            ref
          }, defaultAttributes), {
            width: size2,
            height: size2,
            stroke: color4,
            strokeWidth,
            className: `lucide lucide-${toKebabCase(iconName)}`
          }), rest),
          [
            ...iconNode.map(([tag, attrs]) => (0, import_react62.createElement)(tag, attrs)),
            ...(Array.isArray(children) ? children : [children]) || []
          ]
        );
      }
    );
    Component2.displayName = `${iconName}`;
    return Component2;
  };

  // ../ecopan_bot/node_modules/lucide-react/dist/esm/icons/clipboard.js
  var Clipboard = createLucideIcon("Clipboard", [
    [
      "rect",
      {
        x: "8",
        y: "2",
        width: "8",
        height: "4",
        rx: "1",
        ry: "1",
        key: "wz2j3u"
      }
    ],
    [
      "path",
      {
        d: "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2",
        key: "116196"
      }
    ]
  ]);

  // ../ecopan_bot/node_modules/lucide-react/dist/esm/icons/send.js
  var Send = createLucideIcon("Send", [
    ["line", { x1: "22", y1: "2", x2: "11", y2: "13", key: "10auo0" }],
    ["polygon", { points: "22 2 15 22 11 13 2 9 22 2", key: "12uapv" }]
  ]);

  // ../ecopan_bot/ecopan_bot/public/js/PublicChatView.jsx
  var import_react72 = __toESM(require_react());

  // ../ecopan_bot/ecopan_bot/public/js/components/message/Message.jsx
  var React14 = __toESM(require_react());

  // ../ecopan_bot/ecopan_bot/public/js/components/message/MessageBubble.jsx
  var React6 = __toESM(require_react());
  var MessageBubble = ({ children, fromAI }) => {
    return /* @__PURE__ */ React6.createElement(Flex, {
      direction: "column",
      p: "4",
      alignSelf: fromAI ? "start" : "end",
      justify: "center",
      backgroundColor: fromAI ? "blackAlpha.800" : "linkedin.500",
      rounded: "xl",
      width: "fit-content",
      maxW: { base: "100%", sm: "55%" },
      roundedTopLeft: fromAI ? "0" : "xl",
      roundedTopRight: fromAI ? "xl" : "0"
    }, children);
  };
  var MessageBubble_default = MessageBubble;

  // ../ecopan_bot/ecopan_bot/public/js/components/message/MessageRenderer.jsx
  var React12 = __toESM(require_react());

  // ../ecopan_bot/node_modules/hast-util-raw/lib/index.js
  var import_parser = __toESM(require_parser(), 1);

  // ../ecopan_bot/node_modules/unist-util-position/lib/index.js
  var pointStart = point("start");
  var pointEnd = point("end");
  function position2(node2) {
    return { start: pointStart(node2), end: pointEnd(node2) };
  }
  function point(type) {
    return point5;
    function point5(node2) {
      const point6 = node2 && node2.position && node2.position[type] || {};
      return {
        line: point6.line || null,
        column: point6.column || null,
        offset: point6.offset > -1 ? point6.offset : null
      };
    }
  }

  // ../ecopan_bot/node_modules/unist-util-is/lib/index.js
  var convert = function(test2) {
    if (test2 === void 0 || test2 === null) {
      return ok;
    }
    if (typeof test2 === "string") {
      return typeFactory(test2);
    }
    if (typeof test2 === "object") {
      return Array.isArray(test2) ? anyFactory(test2) : propsFactory(test2);
    }
    if (typeof test2 === "function") {
      return castFactory(test2);
    }
    throw new Error("Expected function, string, or object as test");
  };
  function anyFactory(tests) {
    const checks2 = [];
    let index2 = -1;
    while (++index2 < tests.length) {
      checks2[index2] = convert(tests[index2]);
    }
    return castFactory(any);
    function any(...parameters) {
      let index3 = -1;
      while (++index3 < checks2.length) {
        if (checks2[index3].call(this, ...parameters))
          return true;
      }
      return false;
    }
  }
  function propsFactory(check) {
    return castFactory(all5);
    function all5(node2) {
      let key;
      for (key in check) {
        if (node2[key] !== check[key])
          return false;
      }
      return true;
    }
  }
  function typeFactory(check) {
    return castFactory(type);
    function type(node2) {
      return node2 && node2.type === check;
    }
  }
  function castFactory(check) {
    return assertion;
    function assertion(node2, ...parameters) {
      return Boolean(
        node2 && typeof node2 === "object" && "type" in node2 && Boolean(check.call(this, node2, ...parameters))
      );
    }
  }
  function ok() {
    return true;
  }

  // ../ecopan_bot/node_modules/unist-util-visit-parents/lib/color.browser.js
  function color3(d) {
    return d;
  }

  // ../ecopan_bot/node_modules/unist-util-visit-parents/lib/index.js
  var CONTINUE = true;
  var EXIT = false;
  var SKIP = "skip";
  var visitParents = function(tree, test2, visitor, reverse) {
    if (typeof test2 === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test2;
      test2 = null;
    }
    const is2 = convert(test2);
    const step = reverse ? -1 : 1;
    factory2(tree, void 0, [])();
    function factory2(node2, index2, parents) {
      const value = node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value.type === "string") {
        const name = typeof value.tagName === "string" ? value.tagName : typeof value.name === "string" ? value.name : void 0;
        Object.defineProperty(visit2, "name", {
          value: "node (" + color3(node2.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit2;
      function visit2() {
        let result = [];
        let subresult;
        let offset;
        let grandparents;
        if (!test2 || is2(node2, index2, parents[parents.length - 1] || null)) {
          result = toResult(visitor(node2, parents));
          if (result[0] === EXIT) {
            return result;
          }
        }
        if (node2.children && result[0] !== SKIP) {
          offset = (reverse ? node2.children.length : -1) + step;
          grandparents = parents.concat(node2);
          while (offset > -1 && offset < node2.children.length) {
            subresult = factory2(node2.children[offset], offset, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
          }
        }
        return result;
      }
    }
  };
  function toResult(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "number") {
      return [CONTINUE, value];
    }
    return [value];
  }

  // ../ecopan_bot/node_modules/unist-util-visit/lib/index.js
  var visit = function(tree, test2, visitor, reverse) {
    if (typeof test2 === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test2;
      test2 = null;
    }
    visitParents(tree, test2, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      return visitor(
        node2,
        parent ? parent.children.indexOf(node2) : null,
        parent
      );
    }
  };

  // ../ecopan_bot/node_modules/property-information/lib/util/schema.js
  var Schema = class {
    constructor(property, normal, space3) {
      this.property = property;
      this.normal = normal;
      if (space3) {
        this.space = space3;
      }
    }
  };
  Schema.prototype.property = {};
  Schema.prototype.normal = {};
  Schema.prototype.space = null;

  // ../ecopan_bot/node_modules/property-information/lib/util/merge.js
  function merge2(definitions2, space3) {
    const property = {};
    const normal = {};
    let index2 = -1;
    while (++index2 < definitions2.length) {
      Object.assign(property, definitions2[index2].property);
      Object.assign(normal, definitions2[index2].normal);
    }
    return new Schema(property, normal, space3);
  }

  // ../ecopan_bot/node_modules/property-information/lib/normalize.js
  function normalize3(value) {
    return value.toLowerCase();
  }

  // ../ecopan_bot/node_modules/property-information/lib/util/info.js
  var Info = class {
    constructor(property, attribute) {
      this.property = property;
      this.attribute = attribute;
    }
  };
  Info.prototype.space = null;
  Info.prototype.boolean = false;
  Info.prototype.booleanish = false;
  Info.prototype.overloadedBoolean = false;
  Info.prototype.number = false;
  Info.prototype.commaSeparated = false;
  Info.prototype.spaceSeparated = false;
  Info.prototype.commaOrSpaceSeparated = false;
  Info.prototype.mustUseProperty = false;
  Info.prototype.defined = false;

  // ../ecopan_bot/node_modules/property-information/lib/util/types.js
  var types_exports = {};
  __export(types_exports, {
    boolean: () => boolean,
    booleanish: () => booleanish,
    commaOrSpaceSeparated: () => commaOrSpaceSeparated,
    commaSeparated: () => commaSeparated,
    number: () => number2,
    overloadedBoolean: () => overloadedBoolean,
    spaceSeparated: () => spaceSeparated
  });
  var powers = 0;
  var boolean = increment();
  var booleanish = increment();
  var overloadedBoolean = increment();
  var number2 = increment();
  var spaceSeparated = increment();
  var commaSeparated = increment();
  var commaOrSpaceSeparated = increment();
  function increment() {
    return 2 ** ++powers;
  }

  // ../ecopan_bot/node_modules/property-information/lib/util/defined-info.js
  var checks = Object.keys(types_exports);
  var DefinedInfo = class extends Info {
    constructor(property, attribute, mask, space3) {
      let index2 = -1;
      super(property, attribute);
      mark(this, "space", space3);
      if (typeof mask === "number") {
        while (++index2 < checks.length) {
          const check = checks[index2];
          mark(this, checks[index2], (mask & types_exports[check]) === types_exports[check]);
        }
      }
    }
  };
  DefinedInfo.prototype.defined = true;
  function mark(values, key, value) {
    if (value) {
      values[key] = value;
    }
  }

  // ../ecopan_bot/node_modules/property-information/lib/util/create.js
  var own = {}.hasOwnProperty;
  function create(definition2) {
    const property = {};
    const normal = {};
    let prop;
    for (prop in definition2.properties) {
      if (own.call(definition2.properties, prop)) {
        const value = definition2.properties[prop];
        const info = new DefinedInfo(
          prop,
          definition2.transform(definition2.attributes || {}, prop),
          value,
          definition2.space
        );
        if (definition2.mustUseProperty && definition2.mustUseProperty.includes(prop)) {
          info.mustUseProperty = true;
        }
        property[prop] = info;
        normal[normalize3(prop)] = prop;
        normal[normalize3(info.attribute)] = prop;
      }
    }
    return new Schema(property, normal, definition2.space);
  }

  // ../ecopan_bot/node_modules/property-information/lib/xlink.js
  var xlink = create({
    space: "xlink",
    transform(_, prop) {
      return "xlink:" + prop.slice(5).toLowerCase();
    },
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });

  // ../ecopan_bot/node_modules/property-information/lib/xml.js
  var xml = create({
    space: "xml",
    transform(_, prop) {
      return "xml:" + prop.slice(3).toLowerCase();
    },
    properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
  });

  // ../ecopan_bot/node_modules/property-information/lib/util/case-sensitive-transform.js
  function caseSensitiveTransform(attributes2, attribute) {
    return attribute in attributes2 ? attributes2[attribute] : attribute;
  }

  // ../ecopan_bot/node_modules/property-information/lib/util/case-insensitive-transform.js
  function caseInsensitiveTransform(attributes2, property) {
    return caseSensitiveTransform(attributes2, property.toLowerCase());
  }

  // ../ecopan_bot/node_modules/property-information/lib/xmlns.js
  var xmlns = create({
    space: "xmlns",
    attributes: { xmlnsxlink: "xmlns:xlink" },
    transform: caseInsensitiveTransform,
    properties: { xmlns: null, xmlnsXLink: null }
  });

  // ../ecopan_bot/node_modules/property-information/lib/aria.js
  var aria = create({
    transform(_, prop) {
      return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
    },
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: booleanish,
      ariaAutoComplete: null,
      ariaBusy: booleanish,
      ariaChecked: booleanish,
      ariaColCount: number2,
      ariaColIndex: number2,
      ariaColSpan: number2,
      ariaControls: spaceSeparated,
      ariaCurrent: null,
      ariaDescribedBy: spaceSeparated,
      ariaDetails: null,
      ariaDisabled: booleanish,
      ariaDropEffect: spaceSeparated,
      ariaErrorMessage: null,
      ariaExpanded: booleanish,
      ariaFlowTo: spaceSeparated,
      ariaGrabbed: booleanish,
      ariaHasPopup: null,
      ariaHidden: booleanish,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: spaceSeparated,
      ariaLevel: number2,
      ariaLive: null,
      ariaModal: booleanish,
      ariaMultiLine: booleanish,
      ariaMultiSelectable: booleanish,
      ariaOrientation: null,
      ariaOwns: spaceSeparated,
      ariaPlaceholder: null,
      ariaPosInSet: number2,
      ariaPressed: booleanish,
      ariaReadOnly: booleanish,
      ariaRelevant: null,
      ariaRequired: booleanish,
      ariaRoleDescription: spaceSeparated,
      ariaRowCount: number2,
      ariaRowIndex: number2,
      ariaRowSpan: number2,
      ariaSelected: booleanish,
      ariaSetSize: number2,
      ariaSort: null,
      ariaValueMax: number2,
      ariaValueMin: number2,
      ariaValueNow: number2,
      ariaValueText: null,
      role: null
    }
  });

  // ../ecopan_bot/node_modules/property-information/lib/html.js
  var html = create({
    space: "html",
    attributes: {
      acceptcharset: "accept-charset",
      classname: "class",
      htmlfor: "for",
      httpequiv: "http-equiv"
    },
    transform: caseInsensitiveTransform,
    mustUseProperty: ["checked", "multiple", "muted", "selected"],
    properties: {
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      capture: boolean,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number2,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number2 | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number2,
      hidden: boolean,
      high: number2,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: null,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number2,
      manifest: null,
      max: null,
      maxLength: number2,
      media: null,
      method: null,
      min: null,
      minLength: number2,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforeMatch: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextLost: null,
      onContextMenu: null,
      onContextRestored: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onScrollEnd: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number2,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number2,
      rowSpan: number2,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shape: null,
      size: number2,
      sizes: null,
      slot: null,
      span: number2,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: null,
      start: number2,
      step: null,
      style: null,
      tabIndex: number2,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number2,
      wrap: null,
      align: null,
      aLink: null,
      archive: spaceSeparated,
      axis: null,
      background: null,
      bgColor: null,
      border: number2,
      borderColor: null,
      bottomMargin: number2,
      cellPadding: null,
      cellSpacing: null,
      char: null,
      charOff: null,
      classId: null,
      clear: null,
      code: null,
      codeBase: null,
      codeType: null,
      color: null,
      compact: boolean,
      declare: boolean,
      event: null,
      face: null,
      frame: null,
      frameBorder: null,
      hSpace: number2,
      leftMargin: number2,
      link: null,
      longDesc: null,
      lowSrc: null,
      marginHeight: number2,
      marginWidth: number2,
      noResize: boolean,
      noHref: boolean,
      noShade: boolean,
      noWrap: boolean,
      object: null,
      profile: null,
      prompt: null,
      rev: null,
      rightMargin: number2,
      rules: null,
      scheme: null,
      scrolling: booleanish,
      standby: null,
      summary: null,
      text: null,
      topMargin: number2,
      valueType: null,
      version: null,
      vAlign: null,
      vLink: null,
      vSpace: number2,
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number2,
      security: null,
      unselectable: null
    }
  });

  // ../ecopan_bot/node_modules/property-information/lib/svg.js
  var svg = create({
    space: "svg",
    attributes: {
      accentHeight: "accent-height",
      alignmentBaseline: "alignment-baseline",
      arabicForm: "arabic-form",
      baselineShift: "baseline-shift",
      capHeight: "cap-height",
      className: "class",
      clipPath: "clip-path",
      clipRule: "clip-rule",
      colorInterpolation: "color-interpolation",
      colorInterpolationFilters: "color-interpolation-filters",
      colorProfile: "color-profile",
      colorRendering: "color-rendering",
      crossOrigin: "crossorigin",
      dataType: "datatype",
      dominantBaseline: "dominant-baseline",
      enableBackground: "enable-background",
      fillOpacity: "fill-opacity",
      fillRule: "fill-rule",
      floodColor: "flood-color",
      floodOpacity: "flood-opacity",
      fontFamily: "font-family",
      fontSize: "font-size",
      fontSizeAdjust: "font-size-adjust",
      fontStretch: "font-stretch",
      fontStyle: "font-style",
      fontVariant: "font-variant",
      fontWeight: "font-weight",
      glyphName: "glyph-name",
      glyphOrientationHorizontal: "glyph-orientation-horizontal",
      glyphOrientationVertical: "glyph-orientation-vertical",
      hrefLang: "hreflang",
      horizAdvX: "horiz-adv-x",
      horizOriginX: "horiz-origin-x",
      horizOriginY: "horiz-origin-y",
      imageRendering: "image-rendering",
      letterSpacing: "letter-spacing",
      lightingColor: "lighting-color",
      markerEnd: "marker-end",
      markerMid: "marker-mid",
      markerStart: "marker-start",
      navDown: "nav-down",
      navDownLeft: "nav-down-left",
      navDownRight: "nav-down-right",
      navLeft: "nav-left",
      navNext: "nav-next",
      navPrev: "nav-prev",
      navRight: "nav-right",
      navUp: "nav-up",
      navUpLeft: "nav-up-left",
      navUpRight: "nav-up-right",
      onAbort: "onabort",
      onActivate: "onactivate",
      onAfterPrint: "onafterprint",
      onBeforePrint: "onbeforeprint",
      onBegin: "onbegin",
      onCancel: "oncancel",
      onCanPlay: "oncanplay",
      onCanPlayThrough: "oncanplaythrough",
      onChange: "onchange",
      onClick: "onclick",
      onClose: "onclose",
      onCopy: "oncopy",
      onCueChange: "oncuechange",
      onCut: "oncut",
      onDblClick: "ondblclick",
      onDrag: "ondrag",
      onDragEnd: "ondragend",
      onDragEnter: "ondragenter",
      onDragExit: "ondragexit",
      onDragLeave: "ondragleave",
      onDragOver: "ondragover",
      onDragStart: "ondragstart",
      onDrop: "ondrop",
      onDurationChange: "ondurationchange",
      onEmptied: "onemptied",
      onEnd: "onend",
      onEnded: "onended",
      onError: "onerror",
      onFocus: "onfocus",
      onFocusIn: "onfocusin",
      onFocusOut: "onfocusout",
      onHashChange: "onhashchange",
      onInput: "oninput",
      onInvalid: "oninvalid",
      onKeyDown: "onkeydown",
      onKeyPress: "onkeypress",
      onKeyUp: "onkeyup",
      onLoad: "onload",
      onLoadedData: "onloadeddata",
      onLoadedMetadata: "onloadedmetadata",
      onLoadStart: "onloadstart",
      onMessage: "onmessage",
      onMouseDown: "onmousedown",
      onMouseEnter: "onmouseenter",
      onMouseLeave: "onmouseleave",
      onMouseMove: "onmousemove",
      onMouseOut: "onmouseout",
      onMouseOver: "onmouseover",
      onMouseUp: "onmouseup",
      onMouseWheel: "onmousewheel",
      onOffline: "onoffline",
      onOnline: "ononline",
      onPageHide: "onpagehide",
      onPageShow: "onpageshow",
      onPaste: "onpaste",
      onPause: "onpause",
      onPlay: "onplay",
      onPlaying: "onplaying",
      onPopState: "onpopstate",
      onProgress: "onprogress",
      onRateChange: "onratechange",
      onRepeat: "onrepeat",
      onReset: "onreset",
      onResize: "onresize",
      onScroll: "onscroll",
      onSeeked: "onseeked",
      onSeeking: "onseeking",
      onSelect: "onselect",
      onShow: "onshow",
      onStalled: "onstalled",
      onStorage: "onstorage",
      onSubmit: "onsubmit",
      onSuspend: "onsuspend",
      onTimeUpdate: "ontimeupdate",
      onToggle: "ontoggle",
      onUnload: "onunload",
      onVolumeChange: "onvolumechange",
      onWaiting: "onwaiting",
      onZoom: "onzoom",
      overlinePosition: "overline-position",
      overlineThickness: "overline-thickness",
      paintOrder: "paint-order",
      panose1: "panose-1",
      pointerEvents: "pointer-events",
      referrerPolicy: "referrerpolicy",
      renderingIntent: "rendering-intent",
      shapeRendering: "shape-rendering",
      stopColor: "stop-color",
      stopOpacity: "stop-opacity",
      strikethroughPosition: "strikethrough-position",
      strikethroughThickness: "strikethrough-thickness",
      strokeDashArray: "stroke-dasharray",
      strokeDashOffset: "stroke-dashoffset",
      strokeLineCap: "stroke-linecap",
      strokeLineJoin: "stroke-linejoin",
      strokeMiterLimit: "stroke-miterlimit",
      strokeOpacity: "stroke-opacity",
      strokeWidth: "stroke-width",
      tabIndex: "tabindex",
      textAnchor: "text-anchor",
      textDecoration: "text-decoration",
      textRendering: "text-rendering",
      typeOf: "typeof",
      underlinePosition: "underline-position",
      underlineThickness: "underline-thickness",
      unicodeBidi: "unicode-bidi",
      unicodeRange: "unicode-range",
      unitsPerEm: "units-per-em",
      vAlphabetic: "v-alphabetic",
      vHanging: "v-hanging",
      vIdeographic: "v-ideographic",
      vMathematical: "v-mathematical",
      vectorEffect: "vector-effect",
      vertAdvY: "vert-adv-y",
      vertOriginX: "vert-origin-x",
      vertOriginY: "vert-origin-y",
      wordSpacing: "word-spacing",
      writingMode: "writing-mode",
      xHeight: "x-height",
      playbackOrder: "playbackorder",
      timelineBegin: "timelinebegin"
    },
    transform: caseSensitiveTransform,
    properties: {
      about: commaOrSpaceSeparated,
      accentHeight: number2,
      accumulate: null,
      additive: null,
      alignmentBaseline: null,
      alphabetic: number2,
      amplitude: number2,
      arabicForm: null,
      ascent: number2,
      attributeName: null,
      attributeType: null,
      azimuth: number2,
      bandwidth: null,
      baselineShift: null,
      baseFrequency: null,
      baseProfile: null,
      bbox: null,
      begin: null,
      bias: number2,
      by: null,
      calcMode: null,
      capHeight: number2,
      className: spaceSeparated,
      clip: null,
      clipPath: null,
      clipPathUnits: null,
      clipRule: null,
      color: null,
      colorInterpolation: null,
      colorInterpolationFilters: null,
      colorProfile: null,
      colorRendering: null,
      content: null,
      contentScriptType: null,
      contentStyleType: null,
      crossOrigin: null,
      cursor: null,
      cx: null,
      cy: null,
      d: null,
      dataType: null,
      defaultAction: null,
      descent: number2,
      diffuseConstant: number2,
      direction: null,
      display: null,
      dur: null,
      divisor: number2,
      dominantBaseline: null,
      download: boolean,
      dx: null,
      dy: null,
      edgeMode: null,
      editable: null,
      elevation: number2,
      enableBackground: null,
      end: null,
      event: null,
      exponent: number2,
      externalResourcesRequired: null,
      fill: null,
      fillOpacity: number2,
      fillRule: null,
      filter: null,
      filterRes: null,
      filterUnits: null,
      floodColor: null,
      floodOpacity: null,
      focusable: null,
      focusHighlight: null,
      fontFamily: null,
      fontSize: null,
      fontSizeAdjust: null,
      fontStretch: null,
      fontStyle: null,
      fontVariant: null,
      fontWeight: null,
      format: null,
      fr: null,
      from: null,
      fx: null,
      fy: null,
      g1: commaSeparated,
      g2: commaSeparated,
      glyphName: commaSeparated,
      glyphOrientationHorizontal: null,
      glyphOrientationVertical: null,
      glyphRef: null,
      gradientTransform: null,
      gradientUnits: null,
      handler: null,
      hanging: number2,
      hatchContentUnits: null,
      hatchUnits: null,
      height: null,
      href: null,
      hrefLang: null,
      horizAdvX: number2,
      horizOriginX: number2,
      horizOriginY: number2,
      id: null,
      ideographic: number2,
      imageRendering: null,
      initialVisibility: null,
      in: null,
      in2: null,
      intercept: number2,
      k: number2,
      k1: number2,
      k2: number2,
      k3: number2,
      k4: number2,
      kernelMatrix: commaOrSpaceSeparated,
      kernelUnitLength: null,
      keyPoints: null,
      keySplines: null,
      keyTimes: null,
      kerning: null,
      lang: null,
      lengthAdjust: null,
      letterSpacing: null,
      lightingColor: null,
      limitingConeAngle: number2,
      local: null,
      markerEnd: null,
      markerMid: null,
      markerStart: null,
      markerHeight: null,
      markerUnits: null,
      markerWidth: null,
      mask: null,
      maskContentUnits: null,
      maskUnits: null,
      mathematical: null,
      max: null,
      media: null,
      mediaCharacterEncoding: null,
      mediaContentEncodings: null,
      mediaSize: number2,
      mediaTime: null,
      method: null,
      min: null,
      mode: null,
      name: null,
      navDown: null,
      navDownLeft: null,
      navDownRight: null,
      navLeft: null,
      navNext: null,
      navPrev: null,
      navRight: null,
      navUp: null,
      navUpLeft: null,
      navUpRight: null,
      numOctaves: null,
      observer: null,
      offset: null,
      onAbort: null,
      onActivate: null,
      onAfterPrint: null,
      onBeforePrint: null,
      onBegin: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnd: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFocusIn: null,
      onFocusOut: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadStart: null,
      onMessage: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onMouseWheel: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRepeat: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onShow: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onZoom: null,
      opacity: null,
      operator: null,
      order: null,
      orient: null,
      orientation: null,
      origin: null,
      overflow: null,
      overlay: null,
      overlinePosition: number2,
      overlineThickness: number2,
      paintOrder: null,
      panose1: null,
      path: null,
      pathLength: number2,
      patternContentUnits: null,
      patternTransform: null,
      patternUnits: null,
      phase: null,
      ping: spaceSeparated,
      pitch: null,
      playbackOrder: null,
      pointerEvents: null,
      points: null,
      pointsAtX: number2,
      pointsAtY: number2,
      pointsAtZ: number2,
      preserveAlpha: null,
      preserveAspectRatio: null,
      primitiveUnits: null,
      propagate: null,
      property: commaOrSpaceSeparated,
      r: null,
      radius: null,
      referrerPolicy: null,
      refX: null,
      refY: null,
      rel: commaOrSpaceSeparated,
      rev: commaOrSpaceSeparated,
      renderingIntent: null,
      repeatCount: null,
      repeatDur: null,
      requiredExtensions: commaOrSpaceSeparated,
      requiredFeatures: commaOrSpaceSeparated,
      requiredFonts: commaOrSpaceSeparated,
      requiredFormats: commaOrSpaceSeparated,
      resource: null,
      restart: null,
      result: null,
      rotate: null,
      rx: null,
      ry: null,
      scale: null,
      seed: null,
      shapeRendering: null,
      side: null,
      slope: null,
      snapshotTime: null,
      specularConstant: number2,
      specularExponent: number2,
      spreadMethod: null,
      spacing: null,
      startOffset: null,
      stdDeviation: null,
      stemh: null,
      stemv: null,
      stitchTiles: null,
      stopColor: null,
      stopOpacity: null,
      strikethroughPosition: number2,
      strikethroughThickness: number2,
      string: null,
      stroke: null,
      strokeDashArray: commaOrSpaceSeparated,
      strokeDashOffset: null,
      strokeLineCap: null,
      strokeLineJoin: null,
      strokeMiterLimit: number2,
      strokeOpacity: number2,
      strokeWidth: null,
      style: null,
      surfaceScale: number2,
      syncBehavior: null,
      syncBehaviorDefault: null,
      syncMaster: null,
      syncTolerance: null,
      syncToleranceDefault: null,
      systemLanguage: commaOrSpaceSeparated,
      tabIndex: number2,
      tableValues: null,
      target: null,
      targetX: number2,
      targetY: number2,
      textAnchor: null,
      textDecoration: null,
      textRendering: null,
      textLength: null,
      timelineBegin: null,
      title: null,
      transformBehavior: null,
      type: null,
      typeOf: commaOrSpaceSeparated,
      to: null,
      transform: null,
      u1: null,
      u2: null,
      underlinePosition: number2,
      underlineThickness: number2,
      unicode: null,
      unicodeBidi: null,
      unicodeRange: null,
      unitsPerEm: number2,
      values: null,
      vAlphabetic: number2,
      vMathematical: number2,
      vectorEffect: null,
      vHanging: number2,
      vIdeographic: number2,
      version: null,
      vertAdvY: number2,
      vertOriginX: number2,
      vertOriginY: number2,
      viewBox: null,
      viewTarget: null,
      visibility: null,
      width: null,
      widths: null,
      wordSpacing: null,
      writingMode: null,
      x: null,
      x1: null,
      x2: null,
      xChannelSelector: null,
      xHeight: number2,
      y: null,
      y1: null,
      y2: null,
      yChannelSelector: null,
      z: null,
      zoomAndPan: null
    }
  });

  // ../ecopan_bot/node_modules/property-information/lib/find.js
  var valid = /^data[-\w.:]+$/i;
  var dash = /-[a-z]/g;
  var cap = /[A-Z]/g;
  function find(schema, value) {
    const normal = normalize3(value);
    let prop = value;
    let Type = Info;
    if (normal in schema.normal) {
      return schema.property[schema.normal[normal]];
    }
    if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
      if (value.charAt(4) === "-") {
        const rest = value.slice(5).replace(dash, camelcase);
        prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
      } else {
        const rest = value.slice(4);
        if (!dash.test(rest)) {
          let dashes = rest.replace(cap, kebab);
          if (dashes.charAt(0) !== "-") {
            dashes = "-" + dashes;
          }
          value = "data" + dashes;
        }
      }
      Type = DefinedInfo;
    }
    return new Type(prop, value);
  }
  function kebab($0) {
    return "-" + $0.toLowerCase();
  }
  function camelcase($0) {
    return $0.charAt(1).toUpperCase();
  }

  // ../ecopan_bot/node_modules/property-information/lib/hast-to-react.js
  var hastToReact = {
    classId: "classID",
    dataType: "datatype",
    itemId: "itemID",
    strokeDashArray: "strokeDasharray",
    strokeDashOffset: "strokeDashoffset",
    strokeLineCap: "strokeLinecap",
    strokeLineJoin: "strokeLinejoin",
    strokeMiterLimit: "strokeMiterlimit",
    typeOf: "typeof",
    xLinkActuate: "xlinkActuate",
    xLinkArcRole: "xlinkArcrole",
    xLinkHref: "xlinkHref",
    xLinkRole: "xlinkRole",
    xLinkShow: "xlinkShow",
    xLinkTitle: "xlinkTitle",
    xLinkType: "xlinkType",
    xmlnsXLink: "xmlnsXlink"
  };

  // ../ecopan_bot/node_modules/property-information/index.js
  var html2 = merge2([xml, xlink, xmlns, aria, html], "html");
  var svg2 = merge2([xml, xlink, xmlns, aria, svg], "svg");

  // ../ecopan_bot/node_modules/hast-util-from-parse5/node_modules/hast-util-parse-selector/lib/index.js
  var search = /[#.]/g;
  function parseSelector(selector2, defaultTagName) {
    const value = selector2 || "";
    const props = {};
    let start = 0;
    let previous3;
    let tagName;
    while (start < value.length) {
      search.lastIndex = start;
      const match = search.exec(value);
      const subvalue = value.slice(start, match ? match.index : value.length);
      if (subvalue) {
        if (!previous3) {
          tagName = subvalue;
        } else if (previous3 === "#") {
          props.id = subvalue;
        } else if (Array.isArray(props.className)) {
          props.className.push(subvalue);
        } else {
          props.className = [subvalue];
        }
        start += subvalue.length;
      }
      if (match) {
        previous3 = match[0];
        start++;
      }
    }
    return {
      type: "element",
      tagName: tagName || defaultTagName || "div",
      properties: props,
      children: []
    };
  }

  // ../ecopan_bot/node_modules/space-separated-tokens/index.js
  function parse2(value) {
    const input = String(value || "").trim();
    return input ? input.split(/[ \t\n\r\f]+/g) : [];
  }
  function stringify(values) {
    return values.join(" ").trim();
  }

  // ../ecopan_bot/node_modules/comma-separated-tokens/index.js
  function parse3(value) {
    const tokens2 = [];
    const input = String(value || "");
    let index2 = input.indexOf(",");
    let start = 0;
    let end = false;
    while (!end) {
      if (index2 === -1) {
        index2 = input.length;
        end = true;
      }
      const token = input.slice(start, index2).trim();
      if (token || !end) {
        tokens2.push(token);
      }
      start = index2 + 1;
      index2 = input.indexOf(",", start);
    }
    return tokens2;
  }
  function stringify2(values, options) {
    const settings = options || {};
    const input = values[values.length - 1] === "" ? [...values, ""] : values;
    return input.join(
      (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
    ).trim();
  }

  // ../ecopan_bot/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/core.js
  var buttonTypes = /* @__PURE__ */ new Set(["menu", "submit", "reset", "button"]);
  var own2 = {}.hasOwnProperty;
  function core(schema, defaultTagName, caseSensitive) {
    const adjust = caseSensitive && createAdjustMap(caseSensitive);
    const h2 = function(selector2, properties, ...children) {
      let index2 = -1;
      let node2;
      if (selector2 === void 0 || selector2 === null) {
        node2 = { type: "root", children: [] };
        children.unshift(properties);
      } else {
        node2 = parseSelector(selector2, defaultTagName);
        node2.tagName = node2.tagName.toLowerCase();
        if (adjust && own2.call(adjust, node2.tagName)) {
          node2.tagName = adjust[node2.tagName];
        }
        if (isProperties(properties, node2.tagName)) {
          let key;
          for (key in properties) {
            if (own2.call(properties, key)) {
              addProperty(schema, node2.properties, key, properties[key]);
            }
          }
        } else {
          children.unshift(properties);
        }
      }
      while (++index2 < children.length) {
        addChild(node2.children, children[index2]);
      }
      if (node2.type === "element" && node2.tagName === "template") {
        node2.content = { type: "root", children: node2.children };
        node2.children = [];
      }
      return node2;
    };
    return h2;
  }
  function isProperties(value, name) {
    if (value === null || value === void 0 || typeof value !== "object" || Array.isArray(value)) {
      return false;
    }
    if (name === "input" || !value.type || typeof value.type !== "string") {
      return true;
    }
    if ("children" in value && Array.isArray(value.children)) {
      return false;
    }
    if (name === "button") {
      return buttonTypes.has(value.type.toLowerCase());
    }
    return !("value" in value);
  }
  function addProperty(schema, properties, key, value) {
    const info = find(schema, key);
    let index2 = -1;
    let result;
    if (value === void 0 || value === null)
      return;
    if (typeof value === "number") {
      if (Number.isNaN(value))
        return;
      result = value;
    } else if (typeof value === "boolean") {
      result = value;
    } else if (typeof value === "string") {
      if (info.spaceSeparated) {
        result = parse2(value);
      } else if (info.commaSeparated) {
        result = parse3(value);
      } else if (info.commaOrSpaceSeparated) {
        result = parse2(parse3(value).join(" "));
      } else {
        result = parsePrimitive(info, info.property, value);
      }
    } else if (Array.isArray(value)) {
      result = value.concat();
    } else {
      result = info.property === "style" ? style(value) : String(value);
    }
    if (Array.isArray(result)) {
      const finalResult = [];
      while (++index2 < result.length) {
        finalResult[index2] = parsePrimitive(info, info.property, result[index2]);
      }
      result = finalResult;
    }
    if (info.property === "className" && Array.isArray(properties.className)) {
      result = properties.className.concat(result);
    }
    properties[info.property] = result;
  }
  function addChild(nodes, value) {
    let index2 = -1;
    if (value === void 0 || value === null) {
    } else if (typeof value === "string" || typeof value === "number") {
      nodes.push({ type: "text", value: String(value) });
    } else if (Array.isArray(value)) {
      while (++index2 < value.length) {
        addChild(nodes, value[index2]);
      }
    } else if (typeof value === "object" && "type" in value) {
      if (value.type === "root") {
        addChild(nodes, value.children);
      } else {
        nodes.push(value);
      }
    } else {
      throw new Error("Expected node, nodes, or string, got `" + value + "`");
    }
  }
  function parsePrimitive(info, name, value) {
    if (typeof value === "string") {
      if (info.number && value && !Number.isNaN(Number(value))) {
        return Number(value);
      }
      if ((info.boolean || info.overloadedBoolean) && (value === "" || normalize3(value) === normalize3(name))) {
        return true;
      }
    }
    return value;
  }
  function style(value) {
    const result = [];
    let key;
    for (key in value) {
      if (own2.call(value, key)) {
        result.push([key, value[key]].join(": "));
      }
    }
    return result.join("; ");
  }
  function createAdjustMap(values) {
    const result = {};
    let index2 = -1;
    while (++index2 < values.length) {
      result[values[index2].toLowerCase()] = values[index2];
    }
    return result;
  }

  // ../ecopan_bot/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/html.js
  var h = core(html2, "div");

  // ../ecopan_bot/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js
  var svgCaseSensitiveTagNames = [
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "clipPath",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "foreignObject",
    "glyphRef",
    "linearGradient",
    "radialGradient",
    "solidColor",
    "textArea",
    "textPath"
  ];

  // ../ecopan_bot/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/svg.js
  var s = core(svg2, "g", svgCaseSensitiveTagNames);

  // ../ecopan_bot/node_modules/vfile-location/lib/index.js
  function location(file) {
    const value = String(file);
    const indices = [];
    const search3 = /\r?\n|\r/g;
    while (search3.test(value)) {
      indices.push(search3.lastIndex);
    }
    indices.push(value.length + 1);
    return { toPoint, toOffset };
    function toPoint(offset) {
      let index2 = -1;
      if (typeof offset === "number" && offset > -1 && offset < indices[indices.length - 1]) {
        while (++index2 < indices.length) {
          if (indices[index2] > offset) {
            return {
              line: index2 + 1,
              column: offset - (index2 > 0 ? indices[index2 - 1] : 0) + 1,
              offset
            };
          }
        }
      }
      return { line: void 0, column: void 0, offset: void 0 };
    }
    function toOffset(point5) {
      const line = point5 && point5.line;
      const column = point5 && point5.column;
      if (typeof line === "number" && typeof column === "number" && !Number.isNaN(line) && !Number.isNaN(column) && line - 1 in indices) {
        const offset = (indices[line - 2] || 0) + column - 1 || 0;
        if (offset > -1 && offset < indices[indices.length - 1]) {
          return offset;
        }
      }
      return -1;
    }
  }

  // ../ecopan_bot/node_modules/web-namespaces/index.js
  var webNamespaces = {
    html: "http://www.w3.org/1999/xhtml",
    mathml: "http://www.w3.org/1998/Math/MathML",
    svg: "http://www.w3.org/2000/svg",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };

  // ../ecopan_bot/node_modules/hast-util-from-parse5/lib/index.js
  var own3 = {}.hasOwnProperty;
  var proto = Object.prototype;
  function fromParse5(tree, options) {
    const options_ = options || {};
    let settings;
    let file;
    if (isFile(options_)) {
      file = options_;
      settings = {};
    } else {
      file = options_.file || void 0;
      settings = options_;
    }
    return one(
      {
        schema: settings.space === "svg" ? svg2 : html2,
        file,
        verbose: settings.verbose,
        location: false
      },
      tree
    );
  }
  function one(state2, node2) {
    let result;
    switch (node2.nodeName) {
      case "#comment": {
        const reference = node2;
        result = { type: "comment", value: reference.data };
        patch(state2, reference, result);
        return result;
      }
      case "#document":
      case "#document-fragment": {
        const reference = node2;
        const quirksMode = "mode" in reference ? reference.mode === "quirks" || reference.mode === "limited-quirks" : false;
        result = {
          type: "root",
          children: all(state2, node2.childNodes),
          data: { quirksMode }
        };
        if (state2.file && state2.location) {
          const doc = String(state2.file);
          const loc = location(doc);
          const start = loc.toPoint(0);
          const end = loc.toPoint(doc.length);
          result.position = { start, end };
        }
        return result;
      }
      case "#documentType": {
        const reference = node2;
        result = { type: "doctype" };
        patch(state2, reference, result);
        return result;
      }
      case "#text": {
        const reference = node2;
        result = { type: "text", value: reference.value };
        patch(state2, reference, result);
        return result;
      }
      default: {
        const reference = node2;
        result = element(state2, reference);
        return result;
      }
    }
  }
  function all(state2, nodes) {
    let index2 = -1;
    const result = [];
    while (++index2 < nodes.length) {
      result[index2] = one(state2, nodes[index2]);
    }
    return result;
  }
  function element(state2, node2) {
    const schema = state2.schema;
    state2.schema = node2.namespaceURI === webNamespaces.svg ? svg2 : html2;
    let index2 = -1;
    const props = {};
    while (++index2 < node2.attrs.length) {
      const attribute = node2.attrs[index2];
      const name = (attribute.prefix ? attribute.prefix + ":" : "") + attribute.name;
      if (!own3.call(proto, name)) {
        props[name] = attribute.value;
      }
    }
    const fn = state2.schema.space === "svg" ? s : h;
    const result = fn(node2.tagName, props, all(state2, node2.childNodes));
    patch(state2, node2, result);
    if (result.tagName === "template") {
      const reference = node2;
      const pos = reference.sourceCodeLocation;
      const startTag2 = pos && pos.startTag && position3(pos.startTag);
      const endTag2 = pos && pos.endTag && position3(pos.endTag);
      const content3 = one(state2, reference.content);
      if (startTag2 && endTag2 && state2.file) {
        content3.position = { start: startTag2.end, end: endTag2.start };
      }
      result.content = content3;
    }
    state2.schema = schema;
    return result;
  }
  function patch(state2, from, to) {
    if ("sourceCodeLocation" in from && from.sourceCodeLocation && state2.file) {
      const position5 = createLocation(state2, to, from.sourceCodeLocation);
      if (position5) {
        state2.location = true;
        to.position = position5;
      }
    }
  }
  function createLocation(state2, node2, location2) {
    const result = position3(location2);
    if (node2.type === "element") {
      const tail = node2.children[node2.children.length - 1];
      if (result && !location2.endTag && tail && tail.position && tail.position.end) {
        result.end = Object.assign({}, tail.position.end);
      }
      if (state2.verbose) {
        const props = {};
        let key;
        if (location2.attrs) {
          for (key in location2.attrs) {
            if (own3.call(location2.attrs, key)) {
              props[find(state2.schema, key).property] = position3(
                location2.attrs[key]
              );
            }
          }
        }
        node2.data = {
          position: {
            opening: position3(location2.startTag),
            closing: location2.endTag ? position3(location2.endTag) : null,
            properties: props
          }
        };
      }
    }
    return result;
  }
  function position3(loc) {
    const start = point2({
      line: loc.startLine,
      column: loc.startCol,
      offset: loc.startOffset
    });
    const end = point2({
      line: loc.endLine,
      column: loc.endCol,
      offset: loc.endOffset
    });
    return start || end ? { start, end } : void 0;
  }
  function point2(point5) {
    return point5.line && point5.column ? point5 : void 0;
  }
  function isFile(value) {
    return "messages" in value;
  }

  // ../ecopan_bot/node_modules/zwitch/index.js
  var own4 = {}.hasOwnProperty;
  function zwitch(key, options) {
    const settings = options || {};
    function one5(value, ...parameters) {
      let fn = one5.invalid;
      const handlers2 = one5.handlers;
      if (value && own4.call(value, key)) {
        const id4 = String(value[key]);
        fn = own4.call(handlers2, id4) ? handlers2[id4] : one5.unknown;
      }
      if (fn) {
        return fn.call(this, value, ...parameters);
      }
    }
    one5.handlers = settings.handlers || {};
    one5.invalid = settings.invalid;
    one5.unknown = settings.unknown;
    return one5;
  }

  // ../ecopan_bot/node_modules/hast-util-to-parse5/lib/index.js
  var own5 = {}.hasOwnProperty;
  var one2 = zwitch("type", { handlers: { root, element: element2, text, comment, doctype } });
  function toParse5(tree, options) {
    const space3 = options && typeof options === "object" ? options.space : options;
    return one2(tree, space3 === "svg" ? svg2 : html2);
  }
  function root(node2, schema) {
    const result = {
      nodeName: "#document",
      mode: (node2.data || {}).quirksMode ? "quirks" : "no-quirks",
      childNodes: []
    };
    result.childNodes = all2(node2.children, result, schema);
    patch2(node2, result);
    return result;
  }
  function fragment(node2, schema) {
    const result = { nodeName: "#document-fragment", childNodes: [] };
    result.childNodes = all2(node2.children, result, schema);
    patch2(node2, result);
    return result;
  }
  function doctype(node2) {
    const result = {
      nodeName: "#documentType",
      name: "html",
      publicId: "",
      systemId: "",
      parentNode: void 0
    };
    patch2(node2, result);
    return result;
  }
  function text(node2) {
    const result = {
      nodeName: "#text",
      value: node2.value,
      parentNode: void 0
    };
    patch2(node2, result);
    return result;
  }
  function comment(node2) {
    const result = {
      nodeName: "#comment",
      data: node2.value,
      parentNode: void 0
    };
    patch2(node2, result);
    return result;
  }
  function element2(node2, schema) {
    const parentSchema = schema;
    let currentSchema = parentSchema;
    if (node2.type === "element" && node2.tagName.toLowerCase() === "svg" && parentSchema.space === "html") {
      currentSchema = svg2;
    }
    const attrs = [];
    let prop;
    if (node2.properties) {
      for (prop in node2.properties) {
        if (prop !== "children" && own5.call(node2.properties, prop)) {
          const result2 = createProperty(
            currentSchema,
            prop,
            node2.properties[prop]
          );
          if (result2) {
            attrs.push(result2);
          }
        }
      }
    }
    const result = {
      nodeName: node2.tagName,
      tagName: node2.tagName,
      attrs,
      namespaceURI: webNamespaces[currentSchema.space],
      childNodes: [],
      parentNode: void 0
    };
    result.childNodes = all2(node2.children, result, currentSchema);
    patch2(node2, result);
    if (node2.tagName === "template" && node2.content) {
      result.content = fragment(node2.content, currentSchema);
    }
    return result;
  }
  function createProperty(schema, prop, value) {
    const info = find(schema, prop);
    if (value === void 0 || value === null || value === false || typeof value === "number" && Number.isNaN(value) || !value && info.boolean) {
      return;
    }
    if (Array.isArray(value)) {
      value = info.commaSeparated ? stringify2(value) : stringify(value);
    }
    const attribute = {
      name: info.attribute,
      value: value === true ? "" : String(value)
    };
    if (info.space && info.space !== "html" && info.space !== "svg") {
      const index2 = attribute.name.indexOf(":");
      if (index2 < 0) {
        attribute.prefix = "";
      } else {
        attribute.name = attribute.name.slice(index2 + 1);
        attribute.prefix = info.attribute.slice(0, index2);
      }
      attribute.namespace = webNamespaces[info.space];
    }
    return attribute;
  }
  function all2(children, parentNode, schema) {
    let index2 = -1;
    const results2 = [];
    if (children) {
      while (++index2 < children.length) {
        const child = one2(children[index2], schema);
        child.parentNode = parentNode;
        results2.push(child);
      }
    }
    return results2;
  }
  function patch2(from, to) {
    const position5 = from.position;
    if (position5 && position5.start && position5.end) {
      to.sourceCodeLocation = {
        startLine: position5.start.line,
        startCol: position5.start.column,
        startOffset: position5.start.offset,
        endLine: position5.end.line,
        endCol: position5.end.column,
        endOffset: position5.end.offset
      };
    }
  }

  // ../ecopan_bot/node_modules/html-void-elements/index.js
  var htmlVoidElements = [
    "area",
    "base",
    "basefont",
    "bgsound",
    "br",
    "col",
    "command",
    "embed",
    "frame",
    "hr",
    "image",
    "img",
    "input",
    "isindex",
    "keygen",
    "link",
    "menuitem",
    "meta",
    "nextid",
    "param",
    "source",
    "track",
    "wbr"
  ];

  // ../ecopan_bot/node_modules/hast-util-raw/lib/index.js
  var inTemplateMode = "IN_TEMPLATE_MODE";
  var dataState = "DATA_STATE";
  var characterToken = "CHARACTER_TOKEN";
  var startTagToken = "START_TAG_TOKEN";
  var endTagToken = "END_TAG_TOKEN";
  var commentToken = "COMMENT_TOKEN";
  var doctypeToken = "DOCTYPE_TOKEN";
  var parseOptions = { sourceCodeLocationInfo: true, scriptingEnabled: false };
  var raw = function(tree, file, options) {
    let index2 = -1;
    const parser = new import_parser.default(parseOptions);
    const one5 = zwitch("type", {
      handlers: { root: root3, element: element4, text: text6, comment: comment2, doctype: doctype2, raw: handleRaw },
      unknown
    });
    let stitches;
    let tokenizer;
    let preprocessor;
    let posTracker;
    let locationTracker;
    if (isOptions(file)) {
      options = file;
      file = void 0;
    }
    if (options && options.passThrough) {
      while (++index2 < options.passThrough.length) {
        one5.handlers[options.passThrough[index2]] = stitch;
      }
    }
    const result = fromParse5(
      documentMode(tree) ? document4() : fragment2(),
      file
    );
    if (stitches) {
      visit(result, "comment", (node2, index3, parent) => {
        const stitch2 = node2;
        if (stitch2.value.stitch && parent !== null && index3 !== null) {
          parent.children[index3] = stitch2.value.stitch;
          return index3;
        }
      });
    }
    if (tree.type !== "root" && result.type === "root" && result.children.length === 1) {
      return result.children[0];
    }
    return result;
    function fragment2() {
      const context = {
        nodeName: "template",
        tagName: "template",
        attrs: [],
        namespaceURI: webNamespaces.html,
        childNodes: []
      };
      const mock = {
        nodeName: "documentmock",
        tagName: "documentmock",
        attrs: [],
        namespaceURI: webNamespaces.html,
        childNodes: []
      };
      const doc = { nodeName: "#document-fragment", childNodes: [] };
      parser._bootstrap(mock, context);
      parser._pushTmplInsertionMode(inTemplateMode);
      parser._initTokenizerForFragmentParsing();
      parser._insertFakeRootElement();
      parser._resetInsertionMode();
      parser._findFormInFragmentContext();
      tokenizer = parser.tokenizer;
      if (!tokenizer)
        throw new Error("Expected `tokenizer`");
      preprocessor = tokenizer.preprocessor;
      locationTracker = tokenizer.__mixins[0];
      posTracker = locationTracker.posTracker;
      one5(tree);
      resetTokenizer();
      parser._adoptNodes(mock.childNodes[0], doc);
      return doc;
    }
    function document4() {
      const doc = parser.treeAdapter.createDocument();
      parser._bootstrap(doc, void 0);
      tokenizer = parser.tokenizer;
      if (!tokenizer)
        throw new Error("Expected `tokenizer`");
      preprocessor = tokenizer.preprocessor;
      locationTracker = tokenizer.__mixins[0];
      posTracker = locationTracker.posTracker;
      one5(tree);
      resetTokenizer();
      return doc;
    }
    function all5(nodes) {
      let index3 = -1;
      if (nodes) {
        while (++index3 < nodes.length) {
          one5(nodes[index3]);
        }
      }
    }
    function root3(node2) {
      all5(node2.children);
    }
    function element4(node2) {
      resetTokenizer();
      parser._processInputToken(startTag(node2));
      all5(node2.children);
      if (!htmlVoidElements.includes(node2.tagName)) {
        resetTokenizer();
        parser._processInputToken(endTag(node2));
      }
    }
    function text6(node2) {
      resetTokenizer();
      parser._processInputToken({
        type: characterToken,
        chars: node2.value,
        location: createParse5Location(node2)
      });
    }
    function doctype2(node2) {
      resetTokenizer();
      parser._processInputToken({
        type: doctypeToken,
        name: "html",
        forceQuirks: false,
        publicId: "",
        systemId: "",
        location: createParse5Location(node2)
      });
    }
    function comment2(node2) {
      resetTokenizer();
      parser._processInputToken({
        type: commentToken,
        data: node2.value,
        location: createParse5Location(node2)
      });
    }
    function handleRaw(node2) {
      const start = pointStart(node2);
      const line = start.line || 1;
      const column = start.column || 1;
      const offset = start.offset || 0;
      if (!preprocessor)
        throw new Error("Expected `preprocessor`");
      if (!tokenizer)
        throw new Error("Expected `tokenizer`");
      if (!posTracker)
        throw new Error("Expected `posTracker`");
      if (!locationTracker)
        throw new Error("Expected `locationTracker`");
      preprocessor.html = void 0;
      preprocessor.pos = -1;
      preprocessor.lastGapPos = -1;
      preprocessor.lastCharPos = -1;
      preprocessor.gapStack = [];
      preprocessor.skipNextNewLine = false;
      preprocessor.lastChunkWritten = false;
      preprocessor.endOfChunkHit = false;
      posTracker.isEol = false;
      posTracker.lineStartPos = -column + 1;
      posTracker.droppedBufferSize = offset;
      posTracker.offset = 0;
      posTracker.col = 1;
      posTracker.line = line;
      locationTracker.currentAttrLocation = void 0;
      locationTracker.ctLoc = createParse5Location(node2);
      tokenizer.write(node2.value);
      parser._runParsingLoop(null);
      if (tokenizer.state === "NAMED_CHARACTER_REFERENCE_STATE" || tokenizer.state === "NUMERIC_CHARACTER_REFERENCE_END_STATE") {
        preprocessor.lastChunkWritten = true;
        tokenizer[tokenizer.state](tokenizer._consume());
      }
    }
    function stitch(node2) {
      stitches = true;
      let clone;
      if ("children" in node2) {
        clone = __spreadProps(__spreadValues({}, node2), {
          children: raw(
            { type: "root", children: node2.children },
            file,
            options
          ).children
        });
      } else {
        clone = __spreadValues({}, node2);
      }
      comment2({ type: "comment", value: { stitch: clone } });
    }
    function resetTokenizer() {
      if (!tokenizer)
        throw new Error("Expected `tokenizer`");
      if (!posTracker)
        throw new Error("Expected `posTracker`");
      const token = tokenizer.currentCharacterToken;
      if (token) {
        token.location.endLine = posTracker.line;
        token.location.endCol = posTracker.col + 1;
        token.location.endOffset = posTracker.offset + 1;
        parser._processInputToken(token);
      }
      tokenizer.tokenQueue = [];
      tokenizer.state = dataState;
      tokenizer.returnState = "";
      tokenizer.charRefCode = -1;
      tokenizer.tempBuff = [];
      tokenizer.lastStartTagName = "";
      tokenizer.consumedAfterSnapshot = -1;
      tokenizer.active = false;
      tokenizer.currentCharacterToken = void 0;
      tokenizer.currentToken = void 0;
      tokenizer.currentAttr = void 0;
    }
  };
  function startTag(node2) {
    const location2 = Object.assign(createParse5Location(node2));
    location2.startTag = Object.assign({}, location2);
    return {
      type: startTagToken,
      tagName: node2.tagName,
      selfClosing: false,
      attrs: attributes(node2),
      location: location2
    };
  }
  function attributes(node2) {
    return toParse5({
      tagName: node2.tagName,
      type: "element",
      properties: node2.properties,
      children: []
    }).attrs;
  }
  function endTag(node2) {
    const location2 = Object.assign(createParse5Location(node2));
    location2.startTag = Object.assign({}, location2);
    return {
      type: endTagToken,
      tagName: node2.tagName,
      attrs: [],
      location: location2
    };
  }
  function unknown(node2) {
    throw new Error("Cannot compile `" + node2.type + "` node");
  }
  function documentMode(node2) {
    const head = node2.type === "root" ? node2.children[0] : node2;
    return Boolean(
      head && (head.type === "doctype" || head.type === "element" && head.tagName === "html")
    );
  }
  function createParse5Location(node2) {
    const start = pointStart(node2);
    const end = pointEnd(node2);
    return {
      startLine: start.line,
      startCol: start.column,
      startOffset: start.offset,
      endLine: end.line,
      endCol: end.column,
      endOffset: end.offset
    };
  }
  function isOptions(value) {
    return Boolean(value && !("message" in value && "messages" in value));
  }

  // ../ecopan_bot/node_modules/rehype-raw/index.js
  function rehypeRaw(options = {}) {
    return (tree, file) => {
      const result = raw(tree, file, options);
      return result;
    };
  }

  // ../ecopan_bot/node_modules/micromark-util-chunked/index.js
  function splice(list4, start, remove, items) {
    const end = list4.length;
    let chunkStart = 0;
    let parameters;
    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;
    if (items.length < 1e4) {
      parameters = Array.from(items);
      parameters.unshift(start, remove);
      [].splice.apply(list4, parameters);
    } else {
      if (remove)
        [].splice.apply(list4, [start, remove]);
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 1e4);
        parameters.unshift(start, 0);
        [].splice.apply(list4, parameters);
        chunkStart += 1e4;
        start += 1e4;
      }
    }
  }
  function push(list4, items) {
    if (list4.length > 0) {
      splice(list4, list4.length, 0, items);
      return list4;
    }
    return items;
  }

  // ../ecopan_bot/node_modules/micromark-util-combine-extensions/index.js
  var hasOwnProperty = {}.hasOwnProperty;
  function combineExtensions(extensions) {
    const all5 = {};
    let index2 = -1;
    while (++index2 < extensions.length) {
      syntaxExtension(all5, extensions[index2]);
    }
    return all5;
  }
  function syntaxExtension(all5, extension2) {
    let hook;
    for (hook in extension2) {
      const maybe = hasOwnProperty.call(all5, hook) ? all5[hook] : void 0;
      const left = maybe || (all5[hook] = {});
      const right = extension2[hook];
      let code3;
      for (code3 in right) {
        if (!hasOwnProperty.call(left, code3))
          left[code3] = [];
        const value = right[code3];
        constructs(
          left[code3],
          Array.isArray(value) ? value : value ? [value] : []
        );
      }
    }
  }
  function constructs(existing, list4) {
    let index2 = -1;
    const before = [];
    while (++index2 < list4.length) {
      ;
      (list4[index2].add === "after" ? existing : before).push(list4[index2]);
    }
    splice(existing, 0, 0, before);
  }

  // ../ecopan_bot/node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
  var unicodePunctuationRegex = /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

  // ../ecopan_bot/node_modules/micromark-util-character/index.js
  var asciiAlpha = regexCheck(/[A-Za-z]/);
  var asciiDigit = regexCheck(/\d/);
  var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  function asciiControl(code3) {
    return code3 !== null && (code3 < 32 || code3 === 127);
  }
  function markdownLineEndingOrSpace(code3) {
    return code3 !== null && (code3 < 0 || code3 === 32);
  }
  function markdownLineEnding(code3) {
    return code3 !== null && code3 < -2;
  }
  function markdownSpace(code3) {
    return code3 === -2 || code3 === -1 || code3 === 32;
  }
  var unicodeWhitespace = regexCheck(/\s/);
  var unicodePunctuation = regexCheck(unicodePunctuationRegex);
  function regexCheck(regex) {
    return check;
    function check(code3) {
      return code3 !== null && regex.test(String.fromCharCode(code3));
    }
  }

  // ../ecopan_bot/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js
  var www = {
    tokenize: tokenizeWww,
    partial: true
  };
  var domain = {
    tokenize: tokenizeDomain,
    partial: true
  };
  var path = {
    tokenize: tokenizePath,
    partial: true
  };
  var punctuation = {
    tokenize: tokenizePunctuation,
    partial: true
  };
  var namedCharacterReference = {
    tokenize: tokenizeNamedCharacterReference,
    partial: true
  };
  var wwwAutolink = {
    tokenize: tokenizeWwwAutolink,
    previous: previousWww
  };
  var httpAutolink = {
    tokenize: tokenizeHttpAutolink,
    previous: previousHttp
  };
  var emailAutolink = {
    tokenize: tokenizeEmailAutolink,
    previous: previousEmail
  };
  var text2 = {};
  var gfmAutolinkLiteral = {
    text: text2
  };
  var code = 48;
  while (code < 123) {
    text2[code] = emailAutolink;
    code++;
    if (code === 58)
      code = 65;
    else if (code === 91)
      code = 97;
  }
  text2[43] = emailAutolink;
  text2[45] = emailAutolink;
  text2[46] = emailAutolink;
  text2[95] = emailAutolink;
  text2[72] = [emailAutolink, httpAutolink];
  text2[104] = [emailAutolink, httpAutolink];
  text2[87] = [emailAutolink, wwwAutolink];
  text2[119] = [emailAutolink, wwwAutolink];
  function tokenizeEmailAutolink(effects, ok2, nok) {
    const self2 = this;
    let hasDot;
    let hasDigitInLastSegment;
    return start;
    function start(code3) {
      if (!gfmAtext(code3) || !previousEmail(self2.previous) || previousUnbalanced(self2.events)) {
        return nok(code3);
      }
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkEmail");
      return atext(code3);
    }
    function atext(code3) {
      if (gfmAtext(code3)) {
        effects.consume(code3);
        return atext;
      }
      if (code3 === 64) {
        effects.consume(code3);
        return label;
      }
      return nok(code3);
    }
    function label(code3) {
      if (code3 === 46) {
        return effects.check(punctuation, done, dotContinuation)(code3);
      }
      if (code3 === 45 || code3 === 95) {
        return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code3);
      }
      if (asciiAlphanumeric(code3)) {
        if (!hasDigitInLastSegment && asciiDigit(code3)) {
          hasDigitInLastSegment = true;
        }
        effects.consume(code3);
        return label;
      }
      return done(code3);
    }
    function dotContinuation(code3) {
      effects.consume(code3);
      hasDot = true;
      hasDigitInLastSegment = void 0;
      return label;
    }
    function dashOrUnderscoreContinuation(code3) {
      effects.consume(code3);
      return afterDashOrUnderscore;
    }
    function afterDashOrUnderscore(code3) {
      if (code3 === 46) {
        return effects.check(punctuation, nok, dotContinuation)(code3);
      }
      return label(code3);
    }
    function done(code3) {
      if (hasDot && !hasDigitInLastSegment) {
        effects.exit("literalAutolinkEmail");
        effects.exit("literalAutolink");
        return ok2(code3);
      }
      return nok(code3);
    }
  }
  function tokenizeWwwAutolink(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (code3 !== 87 && code3 !== 119 || !previousWww(self2.previous) || previousUnbalanced(self2.events)) {
        return nok(code3);
      }
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkWww");
      return effects.check(
        www,
        effects.attempt(domain, effects.attempt(path, done), nok),
        nok
      )(code3);
    }
    function done(code3) {
      effects.exit("literalAutolinkWww");
      effects.exit("literalAutolink");
      return ok2(code3);
    }
  }
  function tokenizeHttpAutolink(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (code3 !== 72 && code3 !== 104 || !previousHttp(self2.previous) || previousUnbalanced(self2.events)) {
        return nok(code3);
      }
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      effects.consume(code3);
      return t1;
    }
    function t1(code3) {
      if (code3 === 84 || code3 === 116) {
        effects.consume(code3);
        return t2;
      }
      return nok(code3);
    }
    function t2(code3) {
      if (code3 === 84 || code3 === 116) {
        effects.consume(code3);
        return p;
      }
      return nok(code3);
    }
    function p(code3) {
      if (code3 === 80 || code3 === 112) {
        effects.consume(code3);
        return s2;
      }
      return nok(code3);
    }
    function s2(code3) {
      if (code3 === 83 || code3 === 115) {
        effects.consume(code3);
        return colon;
      }
      return colon(code3);
    }
    function colon(code3) {
      if (code3 === 58) {
        effects.consume(code3);
        return slash1;
      }
      return nok(code3);
    }
    function slash1(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        return slash2;
      }
      return nok(code3);
    }
    function slash2(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      return code3 === null || asciiControl(code3) || unicodeWhitespace(code3) || unicodePunctuation(code3) ? nok(code3) : effects.attempt(domain, effects.attempt(path, done), nok)(code3);
    }
    function done(code3) {
      effects.exit("literalAutolinkHttp");
      effects.exit("literalAutolink");
      return ok2(code3);
    }
  }
  function tokenizeWww(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.consume(code3);
      return w2;
    }
    function w2(code3) {
      if (code3 === 87 || code3 === 119) {
        effects.consume(code3);
        return w3;
      }
      return nok(code3);
    }
    function w3(code3) {
      if (code3 === 87 || code3 === 119) {
        effects.consume(code3);
        return dot;
      }
      return nok(code3);
    }
    function dot(code3) {
      if (code3 === 46) {
        effects.consume(code3);
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      return code3 === null || markdownLineEnding(code3) ? nok(code3) : ok2(code3);
    }
  }
  function tokenizeDomain(effects, ok2, nok) {
    let hasUnderscoreInLastSegment;
    let hasUnderscoreInLastLastSegment;
    return domain2;
    function domain2(code3) {
      if (code3 === 38) {
        return effects.check(
          namedCharacterReference,
          done,
          punctuationContinuation
        )(code3);
      }
      if (code3 === 46 || code3 === 95) {
        return effects.check(punctuation, done, punctuationContinuation)(code3);
      }
      if (code3 === null || asciiControl(code3) || unicodeWhitespace(code3) || code3 !== 45 && unicodePunctuation(code3)) {
        return done(code3);
      }
      effects.consume(code3);
      return domain2;
    }
    function punctuationContinuation(code3) {
      if (code3 === 46) {
        hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment;
        hasUnderscoreInLastSegment = void 0;
        effects.consume(code3);
        return domain2;
      }
      if (code3 === 95)
        hasUnderscoreInLastSegment = true;
      effects.consume(code3);
      return domain2;
    }
    function done(code3) {
      if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {
        return ok2(code3);
      }
      return nok(code3);
    }
  }
  function tokenizePath(effects, ok2) {
    let balance = 0;
    return inPath;
    function inPath(code3) {
      if (code3 === 38) {
        return effects.check(
          namedCharacterReference,
          ok2,
          continuedPunctuation
        )(code3);
      }
      if (code3 === 40) {
        balance++;
      }
      if (code3 === 41) {
        return effects.check(
          punctuation,
          parenAtPathEnd,
          continuedPunctuation
        )(code3);
      }
      if (pathEnd(code3)) {
        return ok2(code3);
      }
      if (trailingPunctuation(code3)) {
        return effects.check(punctuation, ok2, continuedPunctuation)(code3);
      }
      effects.consume(code3);
      return inPath;
    }
    function continuedPunctuation(code3) {
      effects.consume(code3);
      return inPath;
    }
    function parenAtPathEnd(code3) {
      balance--;
      return balance < 0 ? ok2(code3) : continuedPunctuation(code3);
    }
  }
  function tokenizeNamedCharacterReference(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.consume(code3);
      return inside;
    }
    function inside(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return inside;
      }
      if (code3 === 59) {
        effects.consume(code3);
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      return pathEnd(code3) ? ok2(code3) : nok(code3);
    }
  }
  function tokenizePunctuation(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.consume(code3);
      return after;
    }
    function after(code3) {
      if (trailingPunctuation(code3)) {
        effects.consume(code3);
        return after;
      }
      return pathEnd(code3) ? ok2(code3) : nok(code3);
    }
  }
  function trailingPunctuation(code3) {
    return code3 === 33 || code3 === 34 || code3 === 39 || code3 === 41 || code3 === 42 || code3 === 44 || code3 === 46 || code3 === 58 || code3 === 59 || code3 === 60 || code3 === 63 || code3 === 95 || code3 === 126;
  }
  function pathEnd(code3) {
    return code3 === null || code3 === 60 || markdownLineEndingOrSpace(code3);
  }
  function gfmAtext(code3) {
    return code3 === 43 || code3 === 45 || code3 === 46 || code3 === 95 || asciiAlphanumeric(code3);
  }
  function previousWww(code3) {
    return code3 === null || code3 === 40 || code3 === 42 || code3 === 95 || code3 === 126 || markdownLineEndingOrSpace(code3);
  }
  function previousHttp(code3) {
    return code3 === null || !asciiAlpha(code3);
  }
  function previousEmail(code3) {
    return code3 !== 47 && previousHttp(code3);
  }
  function previousUnbalanced(events) {
    let index2 = events.length;
    let result = false;
    while (index2--) {
      const token = events[index2][1];
      if ((token.type === "labelLink" || token.type === "labelImage") && !token._balanced) {
        result = true;
        break;
      }
      if (token._gfmAutolinkLiteralWalkedInto) {
        result = false;
        break;
      }
    }
    if (events.length > 0 && !result) {
      events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
    }
    return result;
  }

  // ../ecopan_bot/node_modules/micromark-util-sanitize-uri/index.js
  function normalizeUri(value) {
    const result = [];
    let index2 = -1;
    let start = 0;
    let skip = 0;
    while (++index2 < value.length) {
      const code3 = value.charCodeAt(index2);
      let replace2 = "";
      if (code3 === 37 && asciiAlphanumeric(value.charCodeAt(index2 + 1)) && asciiAlphanumeric(value.charCodeAt(index2 + 2))) {
        skip = 2;
      } else if (code3 < 128) {
        if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code3))) {
          replace2 = String.fromCharCode(code3);
        }
      } else if (code3 > 55295 && code3 < 57344) {
        const next = value.charCodeAt(index2 + 1);
        if (code3 < 56320 && next > 56319 && next < 57344) {
          replace2 = String.fromCharCode(code3, next);
          skip = 1;
        } else {
          replace2 = "\uFFFD";
        }
      } else {
        replace2 = String.fromCharCode(code3);
      }
      if (replace2) {
        result.push(value.slice(start, index2), encodeURIComponent(replace2));
        start = index2 + skip + 1;
        replace2 = "";
      }
      if (skip) {
        index2 += skip;
        skip = 0;
      }
    }
    return result.join("") + value.slice(start);
  }

  // ../ecopan_bot/node_modules/micromark-util-classify-character/index.js
  function classifyCharacter(code3) {
    if (code3 === null || markdownLineEndingOrSpace(code3) || unicodeWhitespace(code3)) {
      return 1;
    }
    if (unicodePunctuation(code3)) {
      return 2;
    }
  }

  // ../ecopan_bot/node_modules/micromark-util-resolve-all/index.js
  function resolveAll(constructs2, events, context) {
    const called = [];
    let index2 = -1;
    while (++index2 < constructs2.length) {
      const resolve = constructs2[index2].resolveAll;
      if (resolve && !called.includes(resolve)) {
        events = resolve(events, context);
        called.push(resolve);
      }
    }
    return events;
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/attention.js
  var attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
  };
  function resolveAllAttention(events, context) {
    let index2 = -1;
    let open;
    let group;
    let text6;
    let openingSequence;
    let closingSequence;
    let use;
    let nextEvents;
    let offset;
    while (++index2 < events.length) {
      if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
        open = index2;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
            if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
              continue;
            }
            use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
            const start = Object.assign({}, events[open][1].end);
            const end = Object.assign({}, events[index2][1].start);
            movePoint(start, -use);
            movePoint(end, use);
            openingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start,
              end: Object.assign({}, events[open][1].end)
            };
            closingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: Object.assign({}, events[index2][1].start),
              end
            };
            text6 = {
              type: use > 1 ? "strongText" : "emphasisText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index2][1].start)
            };
            group = {
              type: use > 1 ? "strong" : "emphasis",
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end)
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index2][1].start = Object.assign({}, closingSequence.end);
            nextEvents = [];
            if (events[open][1].end.offset - events[open][1].start.offset) {
              nextEvents = push(nextEvents, [
                ["enter", events[open][1], context],
                ["exit", events[open][1], context]
              ]);
            }
            nextEvents = push(nextEvents, [
              ["enter", group, context],
              ["enter", openingSequence, context],
              ["exit", openingSequence, context],
              ["enter", text6, context]
            ]);
            nextEvents = push(
              nextEvents,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index2),
                context
              )
            );
            nextEvents = push(nextEvents, [
              ["exit", text6, context],
              ["enter", closingSequence, context],
              ["exit", closingSequence, context],
              ["exit", group, context]
            ]);
            if (events[index2][1].end.offset - events[index2][1].start.offset) {
              offset = 2;
              nextEvents = push(nextEvents, [
                ["enter", events[index2][1], context],
                ["exit", events[index2][1], context]
              ]);
            } else {
              offset = 0;
            }
            splice(events, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - offset - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "attentionSequence") {
        events[index2][1].type = "data";
      }
    }
    return events;
  }
  function tokenizeAttention(effects, ok2) {
    const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
    const previous3 = this.previous;
    const before = classifyCharacter(previous3);
    let marker;
    return start;
    function start(code3) {
      effects.enter("attentionSequence");
      marker = code3;
      return sequence(code3);
    }
    function sequence(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        return sequence;
      }
      const token = effects.exit("attentionSequence");
      const after = classifyCharacter(code3);
      const open = !after || after === 2 && before || attentionMarkers2.includes(code3);
      const close = !before || before === 2 && after || attentionMarkers2.includes(previous3);
      token._open = Boolean(marker === 42 ? open : open && (before || !close));
      token._close = Boolean(marker === 42 ? close : close && (after || !open));
      return ok2(code3);
    }
  }
  function movePoint(point5, offset) {
    point5.column += offset;
    point5.offset += offset;
    point5._bufferIndex += offset;
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/autolink.js
  var autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink
  };
  function tokenizeAutolink(effects, ok2, nok) {
    let size2 = 1;
    return start;
    function start(code3) {
      effects.enter("autolink");
      effects.enter("autolinkMarker");
      effects.consume(code3);
      effects.exit("autolinkMarker");
      effects.enter("autolinkProtocol");
      return open;
    }
    function open(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return schemeOrEmailAtext;
      }
      return asciiAtext(code3) ? emailAtext(code3) : nok(code3);
    }
    function schemeOrEmailAtext(code3) {
      return code3 === 43 || code3 === 45 || code3 === 46 || asciiAlphanumeric(code3) ? schemeInsideOrEmailAtext(code3) : emailAtext(code3);
    }
    function schemeInsideOrEmailAtext(code3) {
      if (code3 === 58) {
        effects.consume(code3);
        return urlInside;
      }
      if ((code3 === 43 || code3 === 45 || code3 === 46 || asciiAlphanumeric(code3)) && size2++ < 32) {
        effects.consume(code3);
        return schemeInsideOrEmailAtext;
      }
      return emailAtext(code3);
    }
    function urlInside(code3) {
      if (code3 === 62) {
        effects.exit("autolinkProtocol");
        return end(code3);
      }
      if (code3 === null || code3 === 32 || code3 === 60 || asciiControl(code3)) {
        return nok(code3);
      }
      effects.consume(code3);
      return urlInside;
    }
    function emailAtext(code3) {
      if (code3 === 64) {
        effects.consume(code3);
        size2 = 0;
        return emailAtSignOrDot;
      }
      if (asciiAtext(code3)) {
        effects.consume(code3);
        return emailAtext;
      }
      return nok(code3);
    }
    function emailAtSignOrDot(code3) {
      return asciiAlphanumeric(code3) ? emailLabel(code3) : nok(code3);
    }
    function emailLabel(code3) {
      if (code3 === 46) {
        effects.consume(code3);
        size2 = 0;
        return emailAtSignOrDot;
      }
      if (code3 === 62) {
        effects.exit("autolinkProtocol").type = "autolinkEmail";
        return end(code3);
      }
      return emailValue(code3);
    }
    function emailValue(code3) {
      if ((code3 === 45 || asciiAlphanumeric(code3)) && size2++ < 63) {
        effects.consume(code3);
        return code3 === 45 ? emailValue : emailLabel;
      }
      return nok(code3);
    }
    function end(code3) {
      effects.enter("autolinkMarker");
      effects.consume(code3);
      effects.exit("autolinkMarker");
      effects.exit("autolink");
      return ok2;
    }
  }

  // ../ecopan_bot/node_modules/micromark-factory-space/index.js
  function factorySpace(effects, ok2, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size2 = 0;
    return start;
    function start(code3) {
      if (markdownSpace(code3)) {
        effects.enter(type);
        return prefix(code3);
      }
      return ok2(code3);
    }
    function prefix(code3) {
      if (markdownSpace(code3) && size2++ < limit) {
        effects.consume(code3);
        return prefix;
      }
      effects.exit(type);
      return ok2(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/blank-line.js
  var blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
  };
  function tokenizeBlankLine(effects, ok2, nok) {
    return factorySpace(effects, afterWhitespace, "linePrefix");
    function afterWhitespace(code3) {
      return code3 === null || markdownLineEnding(code3) ? ok2(code3) : nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/block-quote.js
  var blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation
    },
    exit
  };
  function tokenizeBlockQuoteStart(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (code3 === 62) {
        const state2 = self2.containerState;
        if (!state2.open) {
          effects.enter("blockQuote", {
            _container: true
          });
          state2.open = true;
        }
        effects.enter("blockQuotePrefix");
        effects.enter("blockQuoteMarker");
        effects.consume(code3);
        effects.exit("blockQuoteMarker");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      if (markdownSpace(code3)) {
        effects.enter("blockQuotePrefixWhitespace");
        effects.consume(code3);
        effects.exit("blockQuotePrefixWhitespace");
        effects.exit("blockQuotePrefix");
        return ok2;
      }
      effects.exit("blockQuotePrefix");
      return ok2(code3);
    }
  }
  function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
    return factorySpace(
      effects,
      effects.attempt(blockQuote, ok2, nok),
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
  }
  function exit(effects) {
    effects.exit("blockQuote");
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/character-escape.js
  var characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape
  };
  function tokenizeCharacterEscape(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.enter("characterEscape");
      effects.enter("escapeMarker");
      effects.consume(code3);
      effects.exit("escapeMarker");
      return open;
    }
    function open(code3) {
      if (asciiPunctuation(code3)) {
        effects.enter("characterEscapeValue");
        effects.consume(code3);
        effects.exit("characterEscapeValue");
        effects.exit("characterEscape");
        return ok2;
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/decode-named-character-reference/index.dom.js
  var element3 = document.createElement("i");
  function decodeNamedCharacterReference(value) {
    const characterReference2 = "&" + value + ";";
    element3.innerHTML = characterReference2;
    const char = element3.textContent;
    if (char.charCodeAt(char.length - 1) === 59 && value !== "semi") {
      return false;
    }
    return char === characterReference2 ? false : char;
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/character-reference.js
  var characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference
  };
  function tokenizeCharacterReference(effects, ok2, nok) {
    const self2 = this;
    let size2 = 0;
    let max;
    let test2;
    return start;
    function start(code3) {
      effects.enter("characterReference");
      effects.enter("characterReferenceMarker");
      effects.consume(code3);
      effects.exit("characterReferenceMarker");
      return open;
    }
    function open(code3) {
      if (code3 === 35) {
        effects.enter("characterReferenceMarkerNumeric");
        effects.consume(code3);
        effects.exit("characterReferenceMarkerNumeric");
        return numeric;
      }
      effects.enter("characterReferenceValue");
      max = 31;
      test2 = asciiAlphanumeric;
      return value(code3);
    }
    function numeric(code3) {
      if (code3 === 88 || code3 === 120) {
        effects.enter("characterReferenceMarkerHexadecimal");
        effects.consume(code3);
        effects.exit("characterReferenceMarkerHexadecimal");
        effects.enter("characterReferenceValue");
        max = 6;
        test2 = asciiHexDigit;
        return value;
      }
      effects.enter("characterReferenceValue");
      max = 7;
      test2 = asciiDigit;
      return value(code3);
    }
    function value(code3) {
      let token;
      if (code3 === 59 && size2) {
        token = effects.exit("characterReferenceValue");
        if (test2 === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token))) {
          return nok(code3);
        }
        effects.enter("characterReferenceMarker");
        effects.consume(code3);
        effects.exit("characterReferenceMarker");
        effects.exit("characterReference");
        return ok2;
      }
      if (test2(code3) && size2++ < max) {
        effects.consume(code3);
        return value;
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/code-fenced.js
  var codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true
  };
  function tokenizeCodeFenced(effects, ok2, nok) {
    const self2 = this;
    const closingFenceConstruct = {
      tokenize: tokenizeClosingFence,
      partial: true
    };
    const nonLazyLine = {
      tokenize: tokenizeNonLazyLine,
      partial: true
    };
    const tail = this.events[this.events.length - 1];
    const initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let sizeOpen = 0;
    let marker;
    return start;
    function start(code3) {
      effects.enter("codeFenced");
      effects.enter("codeFencedFence");
      effects.enter("codeFencedFenceSequence");
      marker = code3;
      return sequenceOpen(code3);
    }
    function sequenceOpen(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        sizeOpen++;
        return sequenceOpen;
      }
      effects.exit("codeFencedFenceSequence");
      return sizeOpen < 3 ? nok(code3) : factorySpace(effects, infoOpen, "whitespace")(code3);
    }
    function infoOpen(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return openAfter(code3);
      }
      effects.enter("codeFencedFenceInfo");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return info(code3);
    }
    function info(code3) {
      if (code3 === null || markdownLineEndingOrSpace(code3)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return factorySpace(effects, infoAfter, "whitespace")(code3);
      }
      if (code3 === 96 && code3 === marker)
        return nok(code3);
      effects.consume(code3);
      return info;
    }
    function infoAfter(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return openAfter(code3);
      }
      effects.enter("codeFencedFenceMeta");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return meta(code3);
    }
    function meta(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceMeta");
        return openAfter(code3);
      }
      if (code3 === 96 && code3 === marker)
        return nok(code3);
      effects.consume(code3);
      return meta;
    }
    function openAfter(code3) {
      effects.exit("codeFencedFence");
      return self2.interrupt ? ok2(code3) : contentStart(code3);
    }
    function contentStart(code3) {
      if (code3 === null) {
        return after(code3);
      }
      if (markdownLineEnding(code3)) {
        return effects.attempt(
          nonLazyLine,
          effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix ? factorySpace(
              effects,
              contentStart,
              "linePrefix",
              initialPrefix + 1
            ) : contentStart
          ),
          after
        )(code3);
      }
      effects.enter("codeFlowValue");
      return contentContinue(code3);
    }
    function contentContinue(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("codeFlowValue");
        return contentStart(code3);
      }
      effects.consume(code3);
      return contentContinue;
    }
    function after(code3) {
      effects.exit("codeFenced");
      return ok2(code3);
    }
    function tokenizeNonLazyLine(effects2, ok3, nok2) {
      const self3 = this;
      return start2;
      function start2(code3) {
        effects2.enter("lineEnding");
        effects2.consume(code3);
        effects2.exit("lineEnding");
        return lineStart;
      }
      function lineStart(code3) {
        return self3.parser.lazy[self3.now().line] ? nok2(code3) : ok3(code3);
      }
    }
    function tokenizeClosingFence(effects2, ok3, nok2) {
      let size2 = 0;
      return factorySpace(
        effects2,
        closingSequenceStart,
        "linePrefix",
        this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      );
      function closingSequenceStart(code3) {
        effects2.enter("codeFencedFence");
        effects2.enter("codeFencedFenceSequence");
        return closingSequence(code3);
      }
      function closingSequence(code3) {
        if (code3 === marker) {
          effects2.consume(code3);
          size2++;
          return closingSequence;
        }
        if (size2 < sizeOpen)
          return nok2(code3);
        effects2.exit("codeFencedFenceSequence");
        return factorySpace(effects2, closingSequenceEnd, "whitespace")(code3);
      }
      function closingSequenceEnd(code3) {
        if (code3 === null || markdownLineEnding(code3)) {
          effects2.exit("codeFencedFence");
          return ok3(code3);
        }
        return nok2(code3);
      }
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/code-indented.js
  var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented
  };
  var indentedContent = {
    tokenize: tokenizeIndentedContent,
    partial: true
  };
  function tokenizeCodeIndented(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      effects.enter("codeIndented");
      return factorySpace(effects, afterStartPrefix, "linePrefix", 4 + 1)(code3);
    }
    function afterStartPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? afterPrefix(code3) : nok(code3);
    }
    function afterPrefix(code3) {
      if (code3 === null) {
        return after(code3);
      }
      if (markdownLineEnding(code3)) {
        return effects.attempt(indentedContent, afterPrefix, after)(code3);
      }
      effects.enter("codeFlowValue");
      return content3(code3);
    }
    function content3(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("codeFlowValue");
        return afterPrefix(code3);
      }
      effects.consume(code3);
      return content3;
    }
    function after(code3) {
      effects.exit("codeIndented");
      return ok2(code3);
    }
  }
  function tokenizeIndentedContent(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      if (self2.parser.lazy[self2.now().line]) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return start;
      }
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code3);
    }
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok2(code3) : markdownLineEnding(code3) ? start(code3) : nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/code-text.js
  var codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous
  };
  function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    let index2;
    let enter;
    if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
      index2 = headEnterIndex;
      while (++index2 < tailExitIndex) {
        if (events[index2][1].type === "codeTextData") {
          events[headEnterIndex][1].type = "codeTextPadding";
          events[tailExitIndex][1].type = "codeTextPadding";
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break;
        }
      }
    }
    index2 = headEnterIndex - 1;
    tailExitIndex++;
    while (++index2 <= tailExitIndex) {
      if (enter === void 0) {
        if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
          enter = index2;
        }
      } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
        events[enter][1].type = "codeTextData";
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          tailExitIndex -= index2 - enter - 2;
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return events;
  }
  function previous(code3) {
    return code3 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
  }
  function tokenizeCodeText(effects, ok2, nok) {
    const self2 = this;
    let sizeOpen = 0;
    let size2;
    let token;
    return start;
    function start(code3) {
      effects.enter("codeText");
      effects.enter("codeTextSequence");
      return openingSequence(code3);
    }
    function openingSequence(code3) {
      if (code3 === 96) {
        effects.consume(code3);
        sizeOpen++;
        return openingSequence;
      }
      effects.exit("codeTextSequence");
      return gap(code3);
    }
    function gap(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 96) {
        token = effects.enter("codeTextSequence");
        size2 = 0;
        return closingSequence(code3);
      }
      if (code3 === 32) {
        effects.enter("space");
        effects.consume(code3);
        effects.exit("space");
        return gap;
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return gap;
      }
      effects.enter("codeTextData");
      return data(code3);
    }
    function data(code3) {
      if (code3 === null || code3 === 32 || code3 === 96 || markdownLineEnding(code3)) {
        effects.exit("codeTextData");
        return gap(code3);
      }
      effects.consume(code3);
      return data;
    }
    function closingSequence(code3) {
      if (code3 === 96) {
        effects.consume(code3);
        size2++;
        return closingSequence;
      }
      if (size2 === sizeOpen) {
        effects.exit("codeTextSequence");
        effects.exit("codeText");
        return ok2(code3);
      }
      token.type = "codeTextData";
      return data(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-util-subtokenize/index.js
  function subtokenize(events) {
    const jumps = {};
    let index2 = -1;
    let event;
    let lineIndex;
    let otherIndex;
    let otherEvent;
    let parameters;
    let subevents;
    let more;
    while (++index2 < events.length) {
      while (index2 in jumps) {
        index2 = jumps[index2];
      }
      event = events[index2];
      if (index2 && event[1].type === "chunkFlow" && events[index2 - 1][1].type === "listItemPrefix") {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
          otherIndex += 2;
        }
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === "content") {
              break;
            }
            if (subevents[otherIndex][1].type === "chunkText") {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      }
      if (event[0] === "enter") {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events, index2));
          index2 = jumps[index2];
          more = true;
        }
      } else if (event[1]._container) {
        otherIndex = index2;
        lineIndex = void 0;
        while (otherIndex--) {
          otherEvent = events[otherIndex];
          if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
            if (otherEvent[0] === "enter") {
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
              }
              otherEvent[1].type = "lineEnding";
              lineIndex = otherIndex;
            }
          } else {
            break;
          }
        }
        if (lineIndex) {
          event[1].end = Object.assign({}, events[lineIndex][1].start);
          parameters = events.slice(lineIndex, index2);
          parameters.unshift(event);
          splice(events, lineIndex, index2 - lineIndex + 1, parameters);
        }
      }
    }
    return !more;
  }
  function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    const startPositions = [];
    const tokenizer = token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    const jumps = [];
    const gaps = {};
    let stream;
    let previous3;
    let index2 = -1;
    let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [start];
    while (current) {
      while (events[++startPosition][1] !== current) {
      }
      startPositions.push(startPosition);
      if (!current._tokenizer) {
        stream = context.sliceStream(current);
        if (!current.next) {
          stream.push(null);
        }
        if (previous3) {
          tokenizer.defineSkip(current.start);
        }
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = true;
        }
        tokenizer.write(stream);
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = void 0;
        }
      }
      previous3 = current;
      current = current.next;
    }
    current = token;
    while (++index2 < childEvents.length) {
      if (childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line) {
        start = index2 + 1;
        breaks.push(start);
        current._tokenizer = void 0;
        current.previous = void 0;
        current = current.next;
      }
    }
    tokenizer.events = [];
    if (current) {
      current._tokenizer = void 0;
      current.previous = void 0;
    } else {
      breaks.pop();
    }
    index2 = breaks.length;
    while (index2--) {
      const slice = childEvents.slice(breaks[index2], breaks[index2 + 1]);
      const start2 = startPositions.pop();
      jumps.unshift([start2, start2 + slice.length - 1]);
      splice(events, start2, 2, slice);
    }
    index2 = -1;
    while (++index2 < jumps.length) {
      gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
      adjust += jumps[index2][1] - jumps[index2][0] - 1;
    }
    return gaps;
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/content.js
  var content = {
    tokenize: tokenizeContent,
    resolve: resolveContent
  };
  var continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
  };
  function resolveContent(events) {
    subtokenize(events);
    return events;
  }
  function tokenizeContent(effects, ok2) {
    let previous3;
    return start;
    function start(code3) {
      effects.enter("content");
      previous3 = effects.enter("chunkContent", {
        contentType: "content"
      });
      return data(code3);
    }
    function data(code3) {
      if (code3 === null) {
        return contentEnd(code3);
      }
      if (markdownLineEnding(code3)) {
        return effects.check(
          continuationConstruct,
          contentContinue,
          contentEnd
        )(code3);
      }
      effects.consume(code3);
      return data;
    }
    function contentEnd(code3) {
      effects.exit("chunkContent");
      effects.exit("content");
      return ok2(code3);
    }
    function contentContinue(code3) {
      effects.consume(code3);
      effects.exit("chunkContent");
      previous3.next = effects.enter("chunkContent", {
        contentType: "content",
        previous: previous3
      });
      previous3 = previous3.next;
      return data;
    }
  }
  function tokenizeContinuation(effects, ok2, nok) {
    const self2 = this;
    return startLookahead;
    function startLookahead(code3) {
      effects.exit("chunkContent");
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(effects, prefixed, "linePrefix");
    }
    function prefixed(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return nok(code3);
      }
      const tail = self2.events[self2.events.length - 1];
      if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
        return ok2(code3);
      }
      return effects.interrupt(self2.parser.constructs.flow, nok, ok2)(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-factory-destination/index.js
  function factoryDestination(effects, ok2, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    function start(code3) {
      if (code3 === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code3);
        effects.exit(literalMarkerType);
        return destinationEnclosedBefore;
      }
      if (code3 === null || code3 === 41 || asciiControl(code3)) {
        return nok(code3);
      }
      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return destinationRaw(code3);
    }
    function destinationEnclosedBefore(code3) {
      if (code3 === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code3);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok2;
      }
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return destinationEnclosed(code3);
    }
    function destinationEnclosed(code3) {
      if (code3 === 62) {
        effects.exit("chunkString");
        effects.exit(stringType);
        return destinationEnclosedBefore(code3);
      }
      if (code3 === null || code3 === 60 || markdownLineEnding(code3)) {
        return nok(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? destinationEnclosedEscape : destinationEnclosed;
    }
    function destinationEnclosedEscape(code3) {
      if (code3 === 60 || code3 === 62 || code3 === 92) {
        effects.consume(code3);
        return destinationEnclosed;
      }
      return destinationEnclosed(code3);
    }
    function destinationRaw(code3) {
      if (code3 === 40) {
        if (++balance > limit)
          return nok(code3);
        effects.consume(code3);
        return destinationRaw;
      }
      if (code3 === 41) {
        if (!balance--) {
          effects.exit("chunkString");
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok2(code3);
        }
        effects.consume(code3);
        return destinationRaw;
      }
      if (code3 === null || markdownLineEndingOrSpace(code3)) {
        if (balance)
          return nok(code3);
        effects.exit("chunkString");
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok2(code3);
      }
      if (asciiControl(code3))
        return nok(code3);
      effects.consume(code3);
      return code3 === 92 ? destinationRawEscape : destinationRaw;
    }
    function destinationRawEscape(code3) {
      if (code3 === 40 || code3 === 41 || code3 === 92) {
        effects.consume(code3);
        return destinationRaw;
      }
      return destinationRaw(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-factory-label/index.js
  function factoryLabel(effects, ok2, nok, type, markerType, stringType) {
    const self2 = this;
    let size2 = 0;
    let data;
    return start;
    function start(code3) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code3);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak;
    }
    function atBreak(code3) {
      if (code3 === null || code3 === 91 || code3 === 93 && !data || code3 === 94 && !size2 && "_hiddenFootnoteSupport" in self2.parser.constructs || size2 > 999) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code3);
        effects.exit(markerType);
        effects.exit(type);
        return ok2;
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return atBreak;
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return label(code3);
    }
    function label(code3) {
      if (code3 === null || code3 === 91 || code3 === 93 || markdownLineEnding(code3) || size2++ > 999) {
        effects.exit("chunkString");
        return atBreak(code3);
      }
      effects.consume(code3);
      data = data || !markdownSpace(code3);
      return code3 === 92 ? labelEscape : label;
    }
    function labelEscape(code3) {
      if (code3 === 91 || code3 === 92 || code3 === 93) {
        effects.consume(code3);
        size2++;
        return label;
      }
      return label(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-factory-title/index.js
  function factoryTitle(effects, ok2, nok, type, markerType, stringType) {
    let marker;
    return start;
    function start(code3) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code3);
      effects.exit(markerType);
      marker = code3 === 40 ? 41 : code3;
      return atFirstTitleBreak;
    }
    function atFirstTitleBreak(code3) {
      if (code3 === marker) {
        effects.enter(markerType);
        effects.consume(code3);
        effects.exit(markerType);
        effects.exit(type);
        return ok2;
      }
      effects.enter(stringType);
      return atTitleBreak(code3);
    }
    function atTitleBreak(code3) {
      if (code3 === marker) {
        effects.exit(stringType);
        return atFirstTitleBreak(marker);
      }
      if (code3 === null) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        return factorySpace(effects, atTitleBreak, "linePrefix");
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return title(code3);
    }
    function title(code3) {
      if (code3 === marker || code3 === null || markdownLineEnding(code3)) {
        effects.exit("chunkString");
        return atTitleBreak(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? titleEscape : title;
    }
    function titleEscape(code3) {
      if (code3 === marker || code3 === 92) {
        effects.consume(code3);
        return title;
      }
      return title(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-factory-whitespace/index.js
  function factoryWhitespace(effects, ok2) {
    let seen;
    return start;
    function start(code3) {
      if (markdownLineEnding(code3)) {
        effects.enter("lineEnding");
        effects.consume(code3);
        effects.exit("lineEnding");
        seen = true;
        return start;
      }
      if (markdownSpace(code3)) {
        return factorySpace(
          effects,
          start,
          seen ? "linePrefix" : "lineSuffix"
        )(code3);
      }
      return ok2(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-util-normalize-identifier/index.js
  function normalizeIdentifier(value) {
    return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/definition.js
  var definition = {
    name: "definition",
    tokenize: tokenizeDefinition
  };
  var titleConstruct = {
    tokenize: tokenizeTitle,
    partial: true
  };
  function tokenizeDefinition(effects, ok2, nok) {
    const self2 = this;
    let identifier;
    return start;
    function start(code3) {
      effects.enter("definition");
      return factoryLabel.call(
        self2,
        effects,
        labelAfter,
        nok,
        "definitionLabel",
        "definitionLabelMarker",
        "definitionLabelString"
      )(code3);
    }
    function labelAfter(code3) {
      identifier = normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      );
      if (code3 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code3);
        effects.exit("definitionMarker");
        return factoryWhitespace(
          effects,
          factoryDestination(
            effects,
            effects.attempt(
              titleConstruct,
              factorySpace(effects, after, "whitespace"),
              factorySpace(effects, after, "whitespace")
            ),
            nok,
            "definitionDestination",
            "definitionDestinationLiteral",
            "definitionDestinationLiteralMarker",
            "definitionDestinationRaw",
            "definitionDestinationString"
          )
        );
      }
      return nok(code3);
    }
    function after(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("definition");
        if (!self2.parser.defined.includes(identifier)) {
          self2.parser.defined.push(identifier);
        }
        return ok2(code3);
      }
      return nok(code3);
    }
  }
  function tokenizeTitle(effects, ok2, nok) {
    return start;
    function start(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, before)(code3) : nok(code3);
    }
    function before(code3) {
      if (code3 === 34 || code3 === 39 || code3 === 40) {
        return factoryTitle(
          effects,
          factorySpace(effects, after, "whitespace"),
          nok,
          "definitionTitle",
          "definitionTitleMarker",
          "definitionTitleString"
        )(code3);
      }
      return nok(code3);
    }
    function after(code3) {
      return code3 === null || markdownLineEnding(code3) ? ok2(code3) : nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/hard-break-escape.js
  var hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape
  };
  function tokenizeHardBreakEscape(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.enter("hardBreakEscape");
      effects.enter("escapeMarker");
      effects.consume(code3);
      return open;
    }
    function open(code3) {
      if (markdownLineEnding(code3)) {
        effects.exit("escapeMarker");
        effects.exit("hardBreakEscape");
        return ok2(code3);
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/heading-atx.js
  var headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
  };
  function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    let content3;
    let text6;
    if (events[contentStart][1].type === "whitespace") {
      contentStart += 2;
    }
    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
      contentEnd -= 2;
    }
    if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }
    if (contentEnd > contentStart) {
      content3 = {
        type: "atxHeadingText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end
      };
      text6 = {
        type: "chunkText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        contentType: "text"
      };
      splice(events, contentStart, contentEnd - contentStart + 1, [
        ["enter", content3, context],
        ["enter", text6, context],
        ["exit", text6, context],
        ["exit", content3, context]
      ]);
    }
    return events;
  }
  function tokenizeHeadingAtx(effects, ok2, nok) {
    const self2 = this;
    let size2 = 0;
    return start;
    function start(code3) {
      effects.enter("atxHeading");
      effects.enter("atxHeadingSequence");
      return fenceOpenInside(code3);
    }
    function fenceOpenInside(code3) {
      if (code3 === 35 && size2++ < 6) {
        effects.consume(code3);
        return fenceOpenInside;
      }
      if (code3 === null || markdownLineEndingOrSpace(code3)) {
        effects.exit("atxHeadingSequence");
        return self2.interrupt ? ok2(code3) : headingBreak(code3);
      }
      return nok(code3);
    }
    function headingBreak(code3) {
      if (code3 === 35) {
        effects.enter("atxHeadingSequence");
        return sequence(code3);
      }
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("atxHeading");
        return ok2(code3);
      }
      if (markdownSpace(code3)) {
        return factorySpace(effects, headingBreak, "whitespace")(code3);
      }
      effects.enter("atxHeadingText");
      return data(code3);
    }
    function sequence(code3) {
      if (code3 === 35) {
        effects.consume(code3);
        return sequence;
      }
      effects.exit("atxHeadingSequence");
      return headingBreak(code3);
    }
    function data(code3) {
      if (code3 === null || code3 === 35 || markdownLineEndingOrSpace(code3)) {
        effects.exit("atxHeadingText");
        return headingBreak(code3);
      }
      effects.consume(code3);
      return data;
    }
  }

  // ../ecopan_bot/node_modules/micromark-util-html-tag-name/index.js
  var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
  ];
  var htmlRawNames = ["pre", "script", "style", "textarea"];

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/html-flow.js
  var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
  };
  var nextBlankConstruct = {
    tokenize: tokenizeNextBlank,
    partial: true
  };
  function resolveToHtmlFlow(events) {
    let index2 = events.length;
    while (index2--) {
      if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
        break;
      }
    }
    if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
      events[index2][1].start = events[index2 - 2][1].start;
      events[index2 + 1][1].start = events[index2 - 2][1].start;
      events.splice(index2 - 2, 2);
    }
    return events;
  }
  function tokenizeHtmlFlow(effects, ok2, nok) {
    const self2 = this;
    let kind;
    let startTag2;
    let buffer2;
    let index2;
    let marker;
    return start;
    function start(code3) {
      effects.enter("htmlFlow");
      effects.enter("htmlFlowData");
      effects.consume(code3);
      return open;
    }
    function open(code3) {
      if (code3 === 33) {
        effects.consume(code3);
        return declarationStart;
      }
      if (code3 === 47) {
        effects.consume(code3);
        return tagCloseStart;
      }
      if (code3 === 63) {
        effects.consume(code3);
        kind = 3;
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        buffer2 = String.fromCharCode(code3);
        startTag2 = true;
        return tagName;
      }
      return nok(code3);
    }
    function declarationStart(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        kind = 2;
        return commentOpenInside;
      }
      if (code3 === 91) {
        effects.consume(code3);
        kind = 5;
        buffer2 = "CDATA[";
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        kind = 4;
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      return nok(code3);
    }
    function commentOpenInside(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      return nok(code3);
    }
    function cdataOpenInside(code3) {
      if (code3 === buffer2.charCodeAt(index2++)) {
        effects.consume(code3);
        return index2 === buffer2.length ? self2.interrupt ? ok2 : continuation : cdataOpenInside;
      }
      return nok(code3);
    }
    function tagCloseStart(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        buffer2 = String.fromCharCode(code3);
        return tagName;
      }
      return nok(code3);
    }
    function tagName(code3) {
      if (code3 === null || code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)) {
        if (code3 !== 47 && startTag2 && htmlRawNames.includes(buffer2.toLowerCase())) {
          kind = 1;
          return self2.interrupt ? ok2(code3) : continuation(code3);
        }
        if (htmlBlockNames.includes(buffer2.toLowerCase())) {
          kind = 6;
          if (code3 === 47) {
            effects.consume(code3);
            return basicSelfClosing;
          }
          return self2.interrupt ? ok2(code3) : continuation(code3);
        }
        kind = 7;
        return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code3) : startTag2 ? completeAttributeNameBefore(code3) : completeClosingTagAfter(code3);
      }
      if (code3 === 45 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        buffer2 += String.fromCharCode(code3);
        return tagName;
      }
      return nok(code3);
    }
    function basicSelfClosing(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        return self2.interrupt ? ok2 : continuation;
      }
      return nok(code3);
    }
    function completeClosingTagAfter(code3) {
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeClosingTagAfter;
      }
      return completeEnd(code3);
    }
    function completeAttributeNameBefore(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        return completeEnd;
      }
      if (code3 === 58 || code3 === 95 || asciiAlpha(code3)) {
        effects.consume(code3);
        return completeAttributeName;
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAttributeNameBefore;
      }
      return completeEnd(code3);
    }
    function completeAttributeName(code3) {
      if (code3 === 45 || code3 === 46 || code3 === 58 || code3 === 95 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return completeAttributeName;
      }
      return completeAttributeNameAfter(code3);
    }
    function completeAttributeNameAfter(code3) {
      if (code3 === 61) {
        effects.consume(code3);
        return completeAttributeValueBefore;
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAttributeNameAfter;
      }
      return completeAttributeNameBefore(code3);
    }
    function completeAttributeValueBefore(code3) {
      if (code3 === null || code3 === 60 || code3 === 61 || code3 === 62 || code3 === 96) {
        return nok(code3);
      }
      if (code3 === 34 || code3 === 39) {
        effects.consume(code3);
        marker = code3;
        return completeAttributeValueQuoted;
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAttributeValueBefore;
      }
      marker = null;
      return completeAttributeValueUnquoted(code3);
    }
    function completeAttributeValueQuoted(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return nok(code3);
      }
      if (code3 === marker) {
        effects.consume(code3);
        return completeAttributeValueQuotedAfter;
      }
      effects.consume(code3);
      return completeAttributeValueQuoted;
    }
    function completeAttributeValueUnquoted(code3) {
      if (code3 === null || code3 === 34 || code3 === 39 || code3 === 60 || code3 === 61 || code3 === 62 || code3 === 96 || markdownLineEndingOrSpace(code3)) {
        return completeAttributeNameAfter(code3);
      }
      effects.consume(code3);
      return completeAttributeValueUnquoted;
    }
    function completeAttributeValueQuotedAfter(code3) {
      if (code3 === 47 || code3 === 62 || markdownSpace(code3)) {
        return completeAttributeNameBefore(code3);
      }
      return nok(code3);
    }
    function completeEnd(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        return completeAfter;
      }
      return nok(code3);
    }
    function completeAfter(code3) {
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return completeAfter;
      }
      return code3 === null || markdownLineEnding(code3) ? continuation(code3) : nok(code3);
    }
    function continuation(code3) {
      if (code3 === 45 && kind === 2) {
        effects.consume(code3);
        return continuationCommentInside;
      }
      if (code3 === 60 && kind === 1) {
        effects.consume(code3);
        return continuationRawTagOpen;
      }
      if (code3 === 62 && kind === 4) {
        effects.consume(code3);
        return continuationClose;
      }
      if (code3 === 63 && kind === 3) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      if (code3 === 93 && kind === 5) {
        effects.consume(code3);
        return continuationCharacterDataInside;
      }
      if (markdownLineEnding(code3) && (kind === 6 || kind === 7)) {
        return effects.check(
          nextBlankConstruct,
          continuationClose,
          continuationAtLineEnding
        )(code3);
      }
      if (code3 === null || markdownLineEnding(code3)) {
        return continuationAtLineEnding(code3);
      }
      effects.consume(code3);
      return continuation;
    }
    function continuationAtLineEnding(code3) {
      effects.exit("htmlFlowData");
      return htmlContinueStart(code3);
    }
    function htmlContinueStart(code3) {
      if (code3 === null) {
        return done(code3);
      }
      if (markdownLineEnding(code3)) {
        return effects.attempt(
          {
            tokenize: htmlLineEnd,
            partial: true
          },
          htmlContinueStart,
          done
        )(code3);
      }
      effects.enter("htmlFlowData");
      return continuation(code3);
    }
    function htmlLineEnd(effects2, ok3, nok2) {
      return start2;
      function start2(code3) {
        effects2.enter("lineEnding");
        effects2.consume(code3);
        effects2.exit("lineEnding");
        return lineStart;
      }
      function lineStart(code3) {
        return self2.parser.lazy[self2.now().line] ? nok2(code3) : ok3(code3);
      }
    }
    function continuationCommentInside(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      return continuation(code3);
    }
    function continuationRawTagOpen(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        buffer2 = "";
        return continuationRawEndTag;
      }
      return continuation(code3);
    }
    function continuationRawEndTag(code3) {
      if (code3 === 62 && htmlRawNames.includes(buffer2.toLowerCase())) {
        effects.consume(code3);
        return continuationClose;
      }
      if (asciiAlpha(code3) && buffer2.length < 8) {
        effects.consume(code3);
        buffer2 += String.fromCharCode(code3);
        return continuationRawEndTag;
      }
      return continuation(code3);
    }
    function continuationCharacterDataInside(code3) {
      if (code3 === 93) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      return continuation(code3);
    }
    function continuationDeclarationInside(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        return continuationClose;
      }
      if (code3 === 45 && kind === 2) {
        effects.consume(code3);
        return continuationDeclarationInside;
      }
      return continuation(code3);
    }
    function continuationClose(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("htmlFlowData");
        return done(code3);
      }
      effects.consume(code3);
      return continuationClose;
    }
    function done(code3) {
      effects.exit("htmlFlow");
      return ok2(code3);
    }
  }
  function tokenizeNextBlank(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.exit("htmlFlowData");
      effects.enter("lineEndingBlank");
      effects.consume(code3);
      effects.exit("lineEndingBlank");
      return effects.attempt(blankLine, ok2, nok);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/html-text.js
  var htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText
  };
  function tokenizeHtmlText(effects, ok2, nok) {
    const self2 = this;
    let marker;
    let buffer2;
    let index2;
    let returnState;
    return start;
    function start(code3) {
      effects.enter("htmlText");
      effects.enter("htmlTextData");
      effects.consume(code3);
      return open;
    }
    function open(code3) {
      if (code3 === 33) {
        effects.consume(code3);
        return declarationOpen;
      }
      if (code3 === 47) {
        effects.consume(code3);
        return tagCloseStart;
      }
      if (code3 === 63) {
        effects.consume(code3);
        return instruction;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return tagOpen;
      }
      return nok(code3);
    }
    function declarationOpen(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return commentOpen;
      }
      if (code3 === 91) {
        effects.consume(code3);
        buffer2 = "CDATA[";
        index2 = 0;
        return cdataOpen;
      }
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return declaration;
      }
      return nok(code3);
    }
    function commentOpen(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return commentStart;
      }
      return nok(code3);
    }
    function commentStart(code3) {
      if (code3 === null || code3 === 62) {
        return nok(code3);
      }
      if (code3 === 45) {
        effects.consume(code3);
        return commentStartDash;
      }
      return comment2(code3);
    }
    function commentStartDash(code3) {
      if (code3 === null || code3 === 62) {
        return nok(code3);
      }
      return comment2(code3);
    }
    function comment2(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 45) {
        effects.consume(code3);
        return commentClose;
      }
      if (markdownLineEnding(code3)) {
        returnState = comment2;
        return atLineEnding(code3);
      }
      effects.consume(code3);
      return comment2;
    }
    function commentClose(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return end;
      }
      return comment2(code3);
    }
    function cdataOpen(code3) {
      if (code3 === buffer2.charCodeAt(index2++)) {
        effects.consume(code3);
        return index2 === buffer2.length ? cdata : cdataOpen;
      }
      return nok(code3);
    }
    function cdata(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.consume(code3);
        return cdataClose;
      }
      if (markdownLineEnding(code3)) {
        returnState = cdata;
        return atLineEnding(code3);
      }
      effects.consume(code3);
      return cdata;
    }
    function cdataClose(code3) {
      if (code3 === 93) {
        effects.consume(code3);
        return cdataEnd;
      }
      return cdata(code3);
    }
    function cdataEnd(code3) {
      if (code3 === 62) {
        return end(code3);
      }
      if (code3 === 93) {
        effects.consume(code3);
        return cdataEnd;
      }
      return cdata(code3);
    }
    function declaration(code3) {
      if (code3 === null || code3 === 62) {
        return end(code3);
      }
      if (markdownLineEnding(code3)) {
        returnState = declaration;
        return atLineEnding(code3);
      }
      effects.consume(code3);
      return declaration;
    }
    function instruction(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      if (code3 === 63) {
        effects.consume(code3);
        return instructionClose;
      }
      if (markdownLineEnding(code3)) {
        returnState = instruction;
        return atLineEnding(code3);
      }
      effects.consume(code3);
      return instruction;
    }
    function instructionClose(code3) {
      return code3 === 62 ? end(code3) : instruction(code3);
    }
    function tagCloseStart(code3) {
      if (asciiAlpha(code3)) {
        effects.consume(code3);
        return tagClose;
      }
      return nok(code3);
    }
    function tagClose(code3) {
      if (code3 === 45 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return tagClose;
      }
      return tagCloseBetween(code3);
    }
    function tagCloseBetween(code3) {
      if (markdownLineEnding(code3)) {
        returnState = tagCloseBetween;
        return atLineEnding(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagCloseBetween;
      }
      return end(code3);
    }
    function tagOpen(code3) {
      if (code3 === 45 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return tagOpen;
      }
      if (code3 === 47 || code3 === 62 || markdownLineEndingOrSpace(code3)) {
        return tagOpenBetween(code3);
      }
      return nok(code3);
    }
    function tagOpenBetween(code3) {
      if (code3 === 47) {
        effects.consume(code3);
        return end;
      }
      if (code3 === 58 || code3 === 95 || asciiAlpha(code3)) {
        effects.consume(code3);
        return tagOpenAttributeName;
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenBetween;
        return atLineEnding(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagOpenBetween;
      }
      return end(code3);
    }
    function tagOpenAttributeName(code3) {
      if (code3 === 45 || code3 === 46 || code3 === 58 || code3 === 95 || asciiAlphanumeric(code3)) {
        effects.consume(code3);
        return tagOpenAttributeName;
      }
      return tagOpenAttributeNameAfter(code3);
    }
    function tagOpenAttributeNameAfter(code3) {
      if (code3 === 61) {
        effects.consume(code3);
        return tagOpenAttributeValueBefore;
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenAttributeNameAfter;
        return atLineEnding(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagOpenAttributeNameAfter;
      }
      return tagOpenBetween(code3);
    }
    function tagOpenAttributeValueBefore(code3) {
      if (code3 === null || code3 === 60 || code3 === 61 || code3 === 62 || code3 === 96) {
        return nok(code3);
      }
      if (code3 === 34 || code3 === 39) {
        effects.consume(code3);
        marker = code3;
        return tagOpenAttributeValueQuoted;
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenAttributeValueBefore;
        return atLineEnding(code3);
      }
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return tagOpenAttributeValueBefore;
      }
      effects.consume(code3);
      marker = void 0;
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuoted(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        return tagOpenAttributeValueQuotedAfter;
      }
      if (code3 === null) {
        return nok(code3);
      }
      if (markdownLineEnding(code3)) {
        returnState = tagOpenAttributeValueQuoted;
        return atLineEnding(code3);
      }
      effects.consume(code3);
      return tagOpenAttributeValueQuoted;
    }
    function tagOpenAttributeValueQuotedAfter(code3) {
      if (code3 === 62 || code3 === 47 || markdownLineEndingOrSpace(code3)) {
        return tagOpenBetween(code3);
      }
      return nok(code3);
    }
    function tagOpenAttributeValueUnquoted(code3) {
      if (code3 === null || code3 === 34 || code3 === 39 || code3 === 60 || code3 === 61 || code3 === 96) {
        return nok(code3);
      }
      if (code3 === 62 || markdownLineEndingOrSpace(code3)) {
        return tagOpenBetween(code3);
      }
      effects.consume(code3);
      return tagOpenAttributeValueUnquoted;
    }
    function atLineEnding(code3) {
      effects.exit("htmlTextData");
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(
        effects,
        afterPrefix,
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      );
    }
    function afterPrefix(code3) {
      effects.enter("htmlTextData");
      return returnState(code3);
    }
    function end(code3) {
      if (code3 === 62) {
        effects.consume(code3);
        effects.exit("htmlTextData");
        effects.exit("htmlText");
        return ok2;
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/label-end.js
  var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
  };
  var resourceConstruct = {
    tokenize: tokenizeResource
  };
  var fullReferenceConstruct = {
    tokenize: tokenizeFullReference
  };
  var collapsedReferenceConstruct = {
    tokenize: tokenizeCollapsedReference
  };
  function resolveAllLabelEnd(events) {
    let index2 = -1;
    let token;
    while (++index2 < events.length) {
      token = events[index2][1];
      if (token.type === "labelImage" || token.type === "labelLink" || token.type === "labelEnd") {
        events.splice(index2 + 1, token.type === "labelImage" ? 4 : 2);
        token.type = "data";
        index2++;
      }
    }
    return events;
  }
  function resolveToLabelEnd(events, context) {
    let index2 = events.length;
    let offset = 0;
    let token;
    let open;
    let close;
    let media;
    while (index2--) {
      token = events[index2][1];
      if (open) {
        if (token.type === "link" || token.type === "labelLink" && token._inactive) {
          break;
        }
        if (events[index2][0] === "enter" && token.type === "labelLink") {
          token._inactive = true;
        }
      } else if (close) {
        if (events[index2][0] === "enter" && (token.type === "labelImage" || token.type === "labelLink") && !token._balanced) {
          open = index2;
          if (token.type !== "labelLink") {
            offset = 2;
            break;
          }
        }
      } else if (token.type === "labelEnd") {
        close = index2;
      }
    }
    const group = {
      type: events[open][1].type === "labelLink" ? "link" : "image",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label = {
      type: "label",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close][1].end)
    };
    const text6 = {
      type: "labelText",
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close - 2][1].start)
    };
    media = [
      ["enter", group, context],
      ["enter", label, context]
    ];
    media = push(media, events.slice(open + 1, open + offset + 3));
    media = push(media, [["enter", text6, context]]);
    media = push(
      media,
      resolveAll(
        context.parser.constructs.insideSpan.null,
        events.slice(open + offset + 4, close - 3),
        context
      )
    );
    media = push(media, [
      ["exit", text6, context],
      events[close - 2],
      events[close - 1],
      ["exit", label, context]
    ]);
    media = push(media, events.slice(close + 1));
    media = push(media, [["exit", group, context]]);
    splice(events, open, events.length, media);
    return events;
  }
  function tokenizeLabelEnd(effects, ok2, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    let labelStart;
    let defined;
    while (index2--) {
      if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
        labelStart = self2.events[index2][1];
        break;
      }
    }
    return start;
    function start(code3) {
      if (!labelStart) {
        return nok(code3);
      }
      if (labelStart._inactive)
        return balanced(code3);
      defined = self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize({
            start: labelStart.end,
            end: self2.now()
          })
        )
      );
      effects.enter("labelEnd");
      effects.enter("labelMarker");
      effects.consume(code3);
      effects.exit("labelMarker");
      effects.exit("labelEnd");
      return afterLabelEnd;
    }
    function afterLabelEnd(code3) {
      if (code3 === 40) {
        return effects.attempt(
          resourceConstruct,
          ok2,
          defined ? ok2 : balanced
        )(code3);
      }
      if (code3 === 91) {
        return effects.attempt(
          fullReferenceConstruct,
          ok2,
          defined ? effects.attempt(collapsedReferenceConstruct, ok2, balanced) : balanced
        )(code3);
      }
      return defined ? ok2(code3) : balanced(code3);
    }
    function balanced(code3) {
      labelStart._balanced = true;
      return nok(code3);
    }
  }
  function tokenizeResource(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.enter("resource");
      effects.enter("resourceMarker");
      effects.consume(code3);
      effects.exit("resourceMarker");
      return factoryWhitespace(effects, open);
    }
    function open(code3) {
      if (code3 === 41) {
        return end(code3);
      }
      return factoryDestination(
        effects,
        destinationAfter,
        nok,
        "resourceDestination",
        "resourceDestinationLiteral",
        "resourceDestinationLiteralMarker",
        "resourceDestinationRaw",
        "resourceDestinationString",
        32
      )(code3);
    }
    function destinationAfter(code3) {
      return markdownLineEndingOrSpace(code3) ? factoryWhitespace(effects, between2)(code3) : end(code3);
    }
    function between2(code3) {
      if (code3 === 34 || code3 === 39 || code3 === 40) {
        return factoryTitle(
          effects,
          factoryWhitespace(effects, end),
          nok,
          "resourceTitle",
          "resourceTitleMarker",
          "resourceTitleString"
        )(code3);
      }
      return end(code3);
    }
    function end(code3) {
      if (code3 === 41) {
        effects.enter("resourceMarker");
        effects.consume(code3);
        effects.exit("resourceMarker");
        effects.exit("resource");
        return ok2;
      }
      return nok(code3);
    }
  }
  function tokenizeFullReference(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      return factoryLabel.call(
        self2,
        effects,
        afterLabel,
        nok,
        "reference",
        "referenceMarker",
        "referenceString"
      )(code3);
    }
    function afterLabel(code3) {
      return self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
        )
      ) ? ok2(code3) : nok(code3);
    }
  }
  function tokenizeCollapsedReference(effects, ok2, nok) {
    return start;
    function start(code3) {
      effects.enter("reference");
      effects.enter("referenceMarker");
      effects.consume(code3);
      effects.exit("referenceMarker");
      return open;
    }
    function open(code3) {
      if (code3 === 93) {
        effects.enter("referenceMarker");
        effects.consume(code3);
        effects.exit("referenceMarker");
        effects.exit("reference");
        return ok2;
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/label-start-image.js
  var labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartImage(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      effects.enter("labelImage");
      effects.enter("labelImageMarker");
      effects.consume(code3);
      effects.exit("labelImageMarker");
      return open;
    }
    function open(code3) {
      if (code3 === 91) {
        effects.enter("labelMarker");
        effects.consume(code3);
        effects.exit("labelMarker");
        effects.exit("labelImage");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      return code3 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code3) : ok2(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/label-start-link.js
  var labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartLink(effects, ok2, nok) {
    const self2 = this;
    return start;
    function start(code3) {
      effects.enter("labelLink");
      effects.enter("labelMarker");
      effects.consume(code3);
      effects.exit("labelMarker");
      effects.exit("labelLink");
      return after;
    }
    function after(code3) {
      return code3 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code3) : ok2(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/line-ending.js
  var lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding
  };
  function tokenizeLineEnding(effects, ok2) {
    return start;
    function start(code3) {
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(effects, ok2, "linePrefix");
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/thematic-break.js
  var thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak
  };
  function tokenizeThematicBreak(effects, ok2, nok) {
    let size2 = 0;
    let marker;
    return start;
    function start(code3) {
      effects.enter("thematicBreak");
      marker = code3;
      return atBreak(code3);
    }
    function atBreak(code3) {
      if (code3 === marker) {
        effects.enter("thematicBreakSequence");
        return sequence(code3);
      }
      if (markdownSpace(code3)) {
        return factorySpace(effects, atBreak, "whitespace")(code3);
      }
      if (size2 < 3 || code3 !== null && !markdownLineEnding(code3)) {
        return nok(code3);
      }
      effects.exit("thematicBreak");
      return ok2(code3);
    }
    function sequence(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        size2++;
        return sequence;
      }
      effects.exit("thematicBreakSequence");
      return atBreak(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/list.js
  var list2 = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
  };
  var listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
  };
  var indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
  };
  function tokenizeListStart(effects, ok2, nok) {
    const self2 = this;
    const tail = self2.events[self2.events.length - 1];
    let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let size2 = 0;
    return start;
    function start(code3) {
      const kind = self2.containerState.type || (code3 === 42 || code3 === 43 || code3 === 45 ? "listUnordered" : "listOrdered");
      if (kind === "listUnordered" ? !self2.containerState.marker || code3 === self2.containerState.marker : asciiDigit(code3)) {
        if (!self2.containerState.type) {
          self2.containerState.type = kind;
          effects.enter(kind, {
            _container: true
          });
        }
        if (kind === "listUnordered") {
          effects.enter("listItemPrefix");
          return code3 === 42 || code3 === 45 ? effects.check(thematicBreak, nok, atMarker)(code3) : atMarker(code3);
        }
        if (!self2.interrupt || code3 === 49) {
          effects.enter("listItemPrefix");
          effects.enter("listItemValue");
          return inside(code3);
        }
      }
      return nok(code3);
    }
    function inside(code3) {
      if (asciiDigit(code3) && ++size2 < 10) {
        effects.consume(code3);
        return inside;
      }
      if ((!self2.interrupt || size2 < 2) && (self2.containerState.marker ? code3 === self2.containerState.marker : code3 === 41 || code3 === 46)) {
        effects.exit("listItemValue");
        return atMarker(code3);
      }
      return nok(code3);
    }
    function atMarker(code3) {
      effects.enter("listItemMarker");
      effects.consume(code3);
      effects.exit("listItemMarker");
      self2.containerState.marker = self2.containerState.marker || code3;
      return effects.check(
        blankLine,
        self2.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix
        )
      );
    }
    function onBlank(code3) {
      self2.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code3);
    }
    function otherPrefix(code3) {
      if (markdownSpace(code3)) {
        effects.enter("listItemPrefixWhitespace");
        effects.consume(code3);
        effects.exit("listItemPrefixWhitespace");
        return endOfPrefix;
      }
      return nok(code3);
    }
    function endOfPrefix(code3) {
      self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
      return ok2(code3);
    }
  }
  function tokenizeListContinuation(effects, ok2, nok) {
    const self2 = this;
    self2.containerState._closeFlow = void 0;
    return effects.check(blankLine, onBlank, notBlank);
    function onBlank(code3) {
      self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
      return factorySpace(
        effects,
        ok2,
        "listItemIndent",
        self2.containerState.size + 1
      )(code3);
    }
    function notBlank(code3) {
      if (self2.containerState.furtherBlankLines || !markdownSpace(code3)) {
        self2.containerState.furtherBlankLines = void 0;
        self2.containerState.initialBlankLine = void 0;
        return notInCurrentItem(code3);
      }
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return effects.attempt(indentConstruct, ok2, notInCurrentItem)(code3);
    }
    function notInCurrentItem(code3) {
      self2.containerState._closeFlow = true;
      self2.interrupt = void 0;
      return factorySpace(
        effects,
        effects.attempt(list2, ok2, nok),
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code3);
    }
  }
  function tokenizeIndent(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemIndent",
      self2.containerState.size + 1
    );
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok2(code3) : nok(code3);
    }
  }
  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemPrefixWhitespace",
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1
    );
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return !markdownSpace(code3) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok2(code3) : nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-core-commonmark/lib/setext-underline.js
  var setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
  };
  function resolveToSetextUnderline(events, context) {
    let index2 = events.length;
    let content3;
    let text6;
    let definition2;
    while (index2--) {
      if (events[index2][0] === "enter") {
        if (events[index2][1].type === "content") {
          content3 = index2;
          break;
        }
        if (events[index2][1].type === "paragraph") {
          text6 = index2;
        }
      } else {
        if (events[index2][1].type === "content") {
          events.splice(index2, 1);
        }
        if (!definition2 && events[index2][1].type === "definition") {
          definition2 = index2;
        }
      }
    }
    const heading2 = {
      type: "setextHeading",
      start: Object.assign({}, events[text6][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    events[text6][1].type = "setextHeadingText";
    if (definition2) {
      events.splice(text6, 0, ["enter", heading2, context]);
      events.splice(definition2 + 1, 0, ["exit", events[content3][1], context]);
      events[content3][1].end = Object.assign({}, events[definition2][1].end);
    } else {
      events[content3][1] = heading2;
    }
    events.push(["exit", heading2, context]);
    return events;
  }
  function tokenizeSetextUnderline(effects, ok2, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    let marker;
    let paragraph2;
    while (index2--) {
      if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
        paragraph2 = self2.events[index2][1].type === "paragraph";
        break;
      }
    }
    return start;
    function start(code3) {
      if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph2)) {
        effects.enter("setextHeadingLine");
        effects.enter("setextHeadingLineSequence");
        marker = code3;
        return closingSequence(code3);
      }
      return nok(code3);
    }
    function closingSequence(code3) {
      if (code3 === marker) {
        effects.consume(code3);
        return closingSequence;
      }
      effects.exit("setextHeadingLineSequence");
      return factorySpace(effects, closingSequenceEnd, "lineSuffix")(code3);
    }
    function closingSequenceEnd(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        effects.exit("setextHeadingLine");
        return ok2(code3);
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-extension-gfm-footnote/lib/syntax.js
  var indent = {
    tokenize: tokenizeIndent2,
    partial: true
  };
  function gfmFootnote() {
    return {
      document: {
        [91]: {
          tokenize: tokenizeDefinitionStart,
          continuation: {
            tokenize: tokenizeDefinitionContinuation
          },
          exit: gfmFootnoteDefinitionEnd
        }
      },
      text: {
        [91]: {
          tokenize: tokenizeGfmFootnoteCall
        },
        [93]: {
          add: "after",
          tokenize: tokenizePotentialGfmFootnoteCall,
          resolveTo: resolveToPotentialGfmFootnoteCall
        }
      }
    };
  }
  function tokenizePotentialGfmFootnoteCall(effects, ok2, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
    let labelStart;
    while (index2--) {
      const token = self2.events[index2][1];
      if (token.type === "labelImage") {
        labelStart = token;
        break;
      }
      if (token.type === "gfmFootnoteCall" || token.type === "labelLink" || token.type === "label" || token.type === "image" || token.type === "link") {
        break;
      }
    }
    return start;
    function start(code3) {
      if (!labelStart || !labelStart._balanced) {
        return nok(code3);
      }
      const id4 = normalizeIdentifier(
        self2.sliceSerialize({
          start: labelStart.end,
          end: self2.now()
        })
      );
      if (id4.codePointAt(0) !== 94 || !defined.includes(id4.slice(1))) {
        return nok(code3);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallLabelMarker");
      return ok2(code3);
    }
  }
  function resolveToPotentialGfmFootnoteCall(events, context) {
    let index2 = events.length;
    let labelStart;
    while (index2--) {
      if (events[index2][1].type === "labelImage" && events[index2][0] === "enter") {
        labelStart = events[index2][1];
        break;
      }
    }
    events[index2 + 1][1].type = "data";
    events[index2 + 3][1].type = "gfmFootnoteCallLabelMarker";
    const call = {
      type: "gfmFootnoteCall",
      start: Object.assign({}, events[index2 + 3][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const marker = {
      type: "gfmFootnoteCallMarker",
      start: Object.assign({}, events[index2 + 3][1].end),
      end: Object.assign({}, events[index2 + 3][1].end)
    };
    marker.end.column++;
    marker.end.offset++;
    marker.end._bufferIndex++;
    const string3 = {
      type: "gfmFootnoteCallString",
      start: Object.assign({}, marker.end),
      end: Object.assign({}, events[events.length - 1][1].start)
    };
    const chunk = {
      type: "chunkString",
      contentType: "string",
      start: Object.assign({}, string3.start),
      end: Object.assign({}, string3.end)
    };
    const replacement = [
      events[index2 + 1],
      events[index2 + 2],
      ["enter", call, context],
      events[index2 + 3],
      events[index2 + 4],
      ["enter", marker, context],
      ["exit", marker, context],
      ["enter", string3, context],
      ["enter", chunk, context],
      ["exit", chunk, context],
      ["exit", string3, context],
      events[events.length - 2],
      events[events.length - 1],
      ["exit", call, context]
    ];
    events.splice(index2, events.length - index2 + 1, ...replacement);
    return events;
  }
  function tokenizeGfmFootnoteCall(effects, ok2, nok) {
    const self2 = this;
    const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
    let size2 = 0;
    let data;
    return start;
    function start(code3) {
      effects.enter("gfmFootnoteCall");
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallLabelMarker");
      return callStart;
    }
    function callStart(code3) {
      if (code3 !== 94)
        return nok(code3);
      effects.enter("gfmFootnoteCallMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteCallMarker");
      effects.enter("gfmFootnoteCallString");
      effects.enter("chunkString").contentType = "string";
      return callData;
    }
    function callData(code3) {
      if (size2 > 999 || code3 === 93 && !data || code3 === null || code3 === 91 || markdownLineEndingOrSpace(code3)) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.exit("chunkString");
        const token = effects.exit("gfmFootnoteCallString");
        if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token)))) {
          return nok(code3);
        }
        effects.enter("gfmFootnoteCallLabelMarker");
        effects.consume(code3);
        effects.exit("gfmFootnoteCallLabelMarker");
        effects.exit("gfmFootnoteCall");
        return ok2;
      }
      if (!markdownLineEndingOrSpace(code3)) {
        data = true;
      }
      size2++;
      effects.consume(code3);
      return code3 === 92 ? callEscape : callData;
    }
    function callEscape(code3) {
      if (code3 === 91 || code3 === 92 || code3 === 93) {
        effects.consume(code3);
        size2++;
        return callData;
      }
      return callData(code3);
    }
  }
  function tokenizeDefinitionStart(effects, ok2, nok) {
    const self2 = this;
    const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
    let identifier;
    let size2 = 0;
    let data;
    return start;
    function start(code3) {
      effects.enter("gfmFootnoteDefinition")._container = true;
      effects.enter("gfmFootnoteDefinitionLabel");
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code3);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      return labelAtMarker;
    }
    function labelAtMarker(code3) {
      if (code3 === 94) {
        effects.enter("gfmFootnoteDefinitionMarker");
        effects.consume(code3);
        effects.exit("gfmFootnoteDefinitionMarker");
        effects.enter("gfmFootnoteDefinitionLabelString");
        effects.enter("chunkString").contentType = "string";
        return labelInside;
      }
      return nok(code3);
    }
    function labelInside(code3) {
      if (size2 > 999 || code3 === 93 && !data || code3 === null || code3 === 91 || markdownLineEndingOrSpace(code3)) {
        return nok(code3);
      }
      if (code3 === 93) {
        effects.exit("chunkString");
        const token = effects.exit("gfmFootnoteDefinitionLabelString");
        identifier = normalizeIdentifier(self2.sliceSerialize(token));
        effects.enter("gfmFootnoteDefinitionLabelMarker");
        effects.consume(code3);
        effects.exit("gfmFootnoteDefinitionLabelMarker");
        effects.exit("gfmFootnoteDefinitionLabel");
        return labelAfter;
      }
      if (!markdownLineEndingOrSpace(code3)) {
        data = true;
      }
      size2++;
      effects.consume(code3);
      return code3 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code3) {
      if (code3 === 91 || code3 === 92 || code3 === 93) {
        effects.consume(code3);
        size2++;
        return labelInside;
      }
      return labelInside(code3);
    }
    function labelAfter(code3) {
      if (code3 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code3);
        effects.exit("definitionMarker");
        if (!defined.includes(identifier)) {
          defined.push(identifier);
        }
        return factorySpace(
          effects,
          whitespaceAfter,
          "gfmFootnoteDefinitionWhitespace"
        );
      }
      return nok(code3);
    }
    function whitespaceAfter(code3) {
      return ok2(code3);
    }
  }
  function tokenizeDefinitionContinuation(effects, ok2, nok) {
    return effects.check(blankLine, ok2, effects.attempt(indent, ok2, nok));
  }
  function gfmFootnoteDefinitionEnd(effects) {
    effects.exit("gfmFootnoteDefinition");
  }
  function tokenizeIndent2(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "gfmFootnoteDefinitionIndent",
      4 + 1
    );
    function afterPrefix(code3) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok2(code3) : nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js
  function gfmStrikethrough(options) {
    const options_ = options || {};
    let single = options_.singleTilde;
    const tokenizer = {
      tokenize: tokenizeStrikethrough,
      resolveAll: resolveAllStrikethrough
    };
    if (single === null || single === void 0) {
      single = true;
    }
    return {
      text: {
        [126]: tokenizer
      },
      insideSpan: {
        null: [tokenizer]
      },
      attentionMarkers: {
        null: [126]
      }
    };
    function resolveAllStrikethrough(events, context) {
      let index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][0] === "enter" && events[index2][1].type === "strikethroughSequenceTemporary" && events[index2][1]._close) {
          let open = index2;
          while (open--) {
            if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && events[index2][1].end.offset - events[index2][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
              events[index2][1].type = "strikethroughSequence";
              events[open][1].type = "strikethroughSequence";
              const strikethrough2 = {
                type: "strikethrough",
                start: Object.assign({}, events[open][1].start),
                end: Object.assign({}, events[index2][1].end)
              };
              const text6 = {
                type: "strikethroughText",
                start: Object.assign({}, events[open][1].end),
                end: Object.assign({}, events[index2][1].start)
              };
              const nextEvents = [
                ["enter", strikethrough2, context],
                ["enter", events[open][1], context],
                ["exit", events[open][1], context],
                ["enter", text6, context]
              ];
              const insideSpan2 = context.parser.constructs.insideSpan.null;
              if (insideSpan2) {
                splice(
                  nextEvents,
                  nextEvents.length,
                  0,
                  resolveAll(insideSpan2, events.slice(open + 1, index2), context)
                );
              }
              splice(nextEvents, nextEvents.length, 0, [
                ["exit", text6, context],
                ["enter", events[index2][1], context],
                ["exit", events[index2][1], context],
                ["exit", strikethrough2, context]
              ]);
              splice(events, open - 1, index2 - open + 3, nextEvents);
              index2 = open + nextEvents.length - 2;
              break;
            }
          }
        }
      }
      index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][1].type === "strikethroughSequenceTemporary") {
          events[index2][1].type = "data";
        }
      }
      return events;
    }
    function tokenizeStrikethrough(effects, ok2, nok) {
      const previous3 = this.previous;
      const events = this.events;
      let size2 = 0;
      return start;
      function start(code3) {
        if (previous3 === 126 && events[events.length - 1][1].type !== "characterEscape") {
          return nok(code3);
        }
        effects.enter("strikethroughSequenceTemporary");
        return more(code3);
      }
      function more(code3) {
        const before = classifyCharacter(previous3);
        if (code3 === 126) {
          if (size2 > 1)
            return nok(code3);
          effects.consume(code3);
          size2++;
          return more;
        }
        if (size2 < 2 && !single)
          return nok(code3);
        const token = effects.exit("strikethroughSequenceTemporary");
        const after = classifyCharacter(code3);
        token._open = !after || after === 2 && Boolean(before);
        token._close = !before || before === 2 && Boolean(after);
        return ok2(code3);
      }
    }
  }

  // ../ecopan_bot/node_modules/micromark-extension-gfm-table/lib/syntax.js
  var gfmTable = {
    flow: {
      null: {
        tokenize: tokenizeTable,
        resolve: resolveTable
      }
    }
  };
  var nextPrefixedOrBlank = {
    tokenize: tokenizeNextPrefixedOrBlank,
    partial: true
  };
  function resolveTable(events, context) {
    let index2 = -1;
    let inHead;
    let inDelimiterRow;
    let inRow;
    let contentStart;
    let contentEnd;
    let cellStart;
    let seenCellInRow;
    while (++index2 < events.length) {
      const token = events[index2][1];
      if (inRow) {
        if (token.type === "temporaryTableCellContent") {
          contentStart = contentStart || index2;
          contentEnd = index2;
        }
        if ((token.type === "tableCellDivider" || token.type === "tableRow") && contentEnd) {
          const content3 = {
            type: "tableContent",
            start: events[contentStart][1].start,
            end: events[contentEnd][1].end
          };
          const text6 = {
            type: "chunkText",
            start: content3.start,
            end: content3.end,
            contentType: "text"
          };
          events.splice(
            contentStart,
            contentEnd - contentStart + 1,
            ["enter", content3, context],
            ["enter", text6, context],
            ["exit", text6, context],
            ["exit", content3, context]
          );
          index2 -= contentEnd - contentStart - 3;
          contentStart = void 0;
          contentEnd = void 0;
        }
      }
      if (events[index2][0] === "exit" && cellStart !== void 0 && cellStart + (seenCellInRow ? 0 : 1) < index2 && (token.type === "tableCellDivider" || token.type === "tableRow" && (cellStart + 3 < index2 || events[cellStart][1].type !== "whitespace"))) {
        const cell = {
          type: inDelimiterRow ? "tableDelimiter" : inHead ? "tableHeader" : "tableData",
          start: events[cellStart][1].start,
          end: events[index2][1].end
        };
        events.splice(index2 + (token.type === "tableCellDivider" ? 1 : 0), 0, [
          "exit",
          cell,
          context
        ]);
        events.splice(cellStart, 0, ["enter", cell, context]);
        index2 += 2;
        cellStart = index2 + 1;
        seenCellInRow = true;
      }
      if (token.type === "tableRow") {
        inRow = events[index2][0] === "enter";
        if (inRow) {
          cellStart = index2 + 1;
          seenCellInRow = false;
        }
      }
      if (token.type === "tableDelimiterRow") {
        inDelimiterRow = events[index2][0] === "enter";
        if (inDelimiterRow) {
          cellStart = index2 + 1;
          seenCellInRow = false;
        }
      }
      if (token.type === "tableHead") {
        inHead = events[index2][0] === "enter";
      }
    }
    return events;
  }
  function tokenizeTable(effects, ok2, nok) {
    const self2 = this;
    const align = [];
    let tableHeaderCount = 0;
    let seenDelimiter;
    let hasDash;
    return start;
    function start(code3) {
      effects.enter("table")._align = align;
      effects.enter("tableHead");
      effects.enter("tableRow");
      if (code3 === 124) {
        return cellDividerHead(code3);
      }
      tableHeaderCount++;
      effects.enter("temporaryTableCellContent");
      return inCellContentHead(code3);
    }
    function cellDividerHead(code3) {
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      seenDelimiter = true;
      return cellBreakHead;
    }
    function cellBreakHead(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return atRowEndHead(code3);
      }
      if (markdownSpace(code3)) {
        effects.enter("whitespace");
        effects.consume(code3);
        return inWhitespaceHead;
      }
      if (seenDelimiter) {
        seenDelimiter = void 0;
        tableHeaderCount++;
      }
      if (code3 === 124) {
        return cellDividerHead(code3);
      }
      effects.enter("temporaryTableCellContent");
      return inCellContentHead(code3);
    }
    function inWhitespaceHead(code3) {
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return inWhitespaceHead;
      }
      effects.exit("whitespace");
      return cellBreakHead(code3);
    }
    function inCellContentHead(code3) {
      if (code3 === null || code3 === 124 || markdownLineEndingOrSpace(code3)) {
        effects.exit("temporaryTableCellContent");
        return cellBreakHead(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? inCellContentEscapeHead : inCellContentHead;
    }
    function inCellContentEscapeHead(code3) {
      if (code3 === 92 || code3 === 124) {
        effects.consume(code3);
        return inCellContentHead;
      }
      return inCellContentHead(code3);
    }
    function atRowEndHead(code3) {
      if (code3 === null) {
        return nok(code3);
      }
      effects.exit("tableRow");
      effects.exit("tableHead");
      const originalInterrupt = self2.interrupt;
      self2.interrupt = true;
      return effects.attempt(
        {
          tokenize: tokenizeRowEnd,
          partial: true
        },
        function(code4) {
          self2.interrupt = originalInterrupt;
          effects.enter("tableDelimiterRow");
          return atDelimiterRowBreak(code4);
        },
        function(code4) {
          self2.interrupt = originalInterrupt;
          return nok(code4);
        }
      )(code3);
    }
    function atDelimiterRowBreak(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return rowEndDelimiter(code3);
      }
      if (markdownSpace(code3)) {
        effects.enter("whitespace");
        effects.consume(code3);
        return inWhitespaceDelimiter;
      }
      if (code3 === 45) {
        effects.enter("tableDelimiterFiller");
        effects.consume(code3);
        hasDash = true;
        align.push("none");
        return inFillerDelimiter;
      }
      if (code3 === 58) {
        effects.enter("tableDelimiterAlignment");
        effects.consume(code3);
        effects.exit("tableDelimiterAlignment");
        align.push("left");
        return afterLeftAlignment;
      }
      if (code3 === 124) {
        effects.enter("tableCellDivider");
        effects.consume(code3);
        effects.exit("tableCellDivider");
        return atDelimiterRowBreak;
      }
      return nok(code3);
    }
    function inWhitespaceDelimiter(code3) {
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return inWhitespaceDelimiter;
      }
      effects.exit("whitespace");
      return atDelimiterRowBreak(code3);
    }
    function inFillerDelimiter(code3) {
      if (code3 === 45) {
        effects.consume(code3);
        return inFillerDelimiter;
      }
      effects.exit("tableDelimiterFiller");
      if (code3 === 58) {
        effects.enter("tableDelimiterAlignment");
        effects.consume(code3);
        effects.exit("tableDelimiterAlignment");
        align[align.length - 1] = align[align.length - 1] === "left" ? "center" : "right";
        return afterRightAlignment;
      }
      return atDelimiterRowBreak(code3);
    }
    function afterLeftAlignment(code3) {
      if (code3 === 45) {
        effects.enter("tableDelimiterFiller");
        effects.consume(code3);
        hasDash = true;
        return inFillerDelimiter;
      }
      return nok(code3);
    }
    function afterRightAlignment(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return rowEndDelimiter(code3);
      }
      if (markdownSpace(code3)) {
        effects.enter("whitespace");
        effects.consume(code3);
        return inWhitespaceDelimiter;
      }
      if (code3 === 124) {
        effects.enter("tableCellDivider");
        effects.consume(code3);
        effects.exit("tableCellDivider");
        return atDelimiterRowBreak;
      }
      return nok(code3);
    }
    function rowEndDelimiter(code3) {
      effects.exit("tableDelimiterRow");
      if (!hasDash || tableHeaderCount !== align.length) {
        return nok(code3);
      }
      if (code3 === null) {
        return tableClose(code3);
      }
      return effects.check(
        nextPrefixedOrBlank,
        tableClose,
        effects.attempt(
          {
            tokenize: tokenizeRowEnd,
            partial: true
          },
          factorySpace(effects, bodyStart, "linePrefix", 4),
          tableClose
        )
      )(code3);
    }
    function tableClose(code3) {
      effects.exit("table");
      return ok2(code3);
    }
    function bodyStart(code3) {
      effects.enter("tableBody");
      return rowStartBody(code3);
    }
    function rowStartBody(code3) {
      effects.enter("tableRow");
      if (code3 === 124) {
        return cellDividerBody(code3);
      }
      effects.enter("temporaryTableCellContent");
      return inCellContentBody(code3);
    }
    function cellDividerBody(code3) {
      effects.enter("tableCellDivider");
      effects.consume(code3);
      effects.exit("tableCellDivider");
      return cellBreakBody;
    }
    function cellBreakBody(code3) {
      if (code3 === null || markdownLineEnding(code3)) {
        return atRowEndBody(code3);
      }
      if (markdownSpace(code3)) {
        effects.enter("whitespace");
        effects.consume(code3);
        return inWhitespaceBody;
      }
      if (code3 === 124) {
        return cellDividerBody(code3);
      }
      effects.enter("temporaryTableCellContent");
      return inCellContentBody(code3);
    }
    function inWhitespaceBody(code3) {
      if (markdownSpace(code3)) {
        effects.consume(code3);
        return inWhitespaceBody;
      }
      effects.exit("whitespace");
      return cellBreakBody(code3);
    }
    function inCellContentBody(code3) {
      if (code3 === null || code3 === 124 || markdownLineEndingOrSpace(code3)) {
        effects.exit("temporaryTableCellContent");
        return cellBreakBody(code3);
      }
      effects.consume(code3);
      return code3 === 92 ? inCellContentEscapeBody : inCellContentBody;
    }
    function inCellContentEscapeBody(code3) {
      if (code3 === 92 || code3 === 124) {
        effects.consume(code3);
        return inCellContentBody;
      }
      return inCellContentBody(code3);
    }
    function atRowEndBody(code3) {
      effects.exit("tableRow");
      if (code3 === null) {
        return tableBodyClose(code3);
      }
      return effects.check(
        nextPrefixedOrBlank,
        tableBodyClose,
        effects.attempt(
          {
            tokenize: tokenizeRowEnd,
            partial: true
          },
          factorySpace(effects, rowStartBody, "linePrefix", 4),
          tableBodyClose
        )
      )(code3);
    }
    function tableBodyClose(code3) {
      effects.exit("tableBody");
      return tableClose(code3);
    }
    function tokenizeRowEnd(effects2, ok3, nok2) {
      return start2;
      function start2(code3) {
        effects2.enter("lineEnding");
        effects2.consume(code3);
        effects2.exit("lineEnding");
        return factorySpace(effects2, prefixed, "linePrefix");
      }
      function prefixed(code3) {
        if (self2.parser.lazy[self2.now().line] || code3 === null || markdownLineEnding(code3)) {
          return nok2(code3);
        }
        const tail = self2.events[self2.events.length - 1];
        if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
          return nok2(code3);
        }
        self2._gfmTableDynamicInterruptHack = true;
        return effects2.check(
          self2.parser.constructs.flow,
          function(code4) {
            self2._gfmTableDynamicInterruptHack = false;
            return nok2(code4);
          },
          function(code4) {
            self2._gfmTableDynamicInterruptHack = false;
            return ok3(code4);
          }
        )(code3);
      }
    }
  }
  function tokenizeNextPrefixedOrBlank(effects, ok2, nok) {
    let size2 = 0;
    return start;
    function start(code3) {
      effects.enter("check");
      effects.consume(code3);
      return whitespace2;
    }
    function whitespace2(code3) {
      if (code3 === -1 || code3 === 32) {
        effects.consume(code3);
        size2++;
        return size2 === 4 ? ok2 : whitespace2;
      }
      if (code3 === null || markdownLineEndingOrSpace(code3)) {
        return ok2(code3);
      }
      return nok(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js
  var tasklistCheck = {
    tokenize: tokenizeTasklistCheck
  };
  var gfmTaskListItem = {
    text: {
      [91]: tasklistCheck
    }
  };
  function tokenizeTasklistCheck(effects, ok2, nok) {
    const self2 = this;
    return open;
    function open(code3) {
      if (self2.previous !== null || !self2._gfmTasklistFirstContentOfListItem) {
        return nok(code3);
      }
      effects.enter("taskListCheck");
      effects.enter("taskListCheckMarker");
      effects.consume(code3);
      effects.exit("taskListCheckMarker");
      return inside;
    }
    function inside(code3) {
      if (markdownLineEndingOrSpace(code3)) {
        effects.enter("taskListCheckValueUnchecked");
        effects.consume(code3);
        effects.exit("taskListCheckValueUnchecked");
        return close;
      }
      if (code3 === 88 || code3 === 120) {
        effects.enter("taskListCheckValueChecked");
        effects.consume(code3);
        effects.exit("taskListCheckValueChecked");
        return close;
      }
      return nok(code3);
    }
    function close(code3) {
      if (code3 === 93) {
        effects.enter("taskListCheckMarker");
        effects.consume(code3);
        effects.exit("taskListCheckMarker");
        effects.exit("taskListCheck");
        return after;
      }
      return nok(code3);
    }
    function after(code3) {
      if (markdownLineEnding(code3)) {
        return ok2(code3);
      }
      if (markdownSpace(code3)) {
        return effects.check(
          {
            tokenize: spaceThenNonSpace
          },
          ok2,
          nok
        )(code3);
      }
      return nok(code3);
    }
  }
  function spaceThenNonSpace(effects, ok2, nok) {
    return factorySpace(effects, after, "whitespace");
    function after(code3) {
      return code3 === null ? nok(code3) : ok2(code3);
    }
  }

  // ../ecopan_bot/node_modules/micromark-extension-gfm/index.js
  function gfm(options) {
    return combineExtensions([
      gfmAutolinkLiteral,
      gfmFootnote(),
      gfmStrikethrough(options),
      gfmTable,
      gfmTaskListItem
    ]);
  }

  // ../ecopan_bot/node_modules/ccount/index.js
  function ccount(value, character) {
    const source = String(value);
    if (typeof character !== "string") {
      throw new TypeError("Expected character");
    }
    let count = 0;
    let index2 = source.indexOf(character);
    while (index2 !== -1) {
      count++;
      index2 = source.indexOf(character, index2 + character.length);
    }
    return count;
  }

  // ../ecopan_bot/node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
  function escapeStringRegexp(string3) {
    if (typeof string3 !== "string") {
      throw new TypeError("Expected a string");
    }
    return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  }

  // ../ecopan_bot/node_modules/mdast-util-find-and-replace/lib/index.js
  var own6 = {}.hasOwnProperty;
  var findAndReplace = function(tree, find2, replace2, options) {
    let settings;
    let schema;
    if (typeof find2 === "string" || find2 instanceof RegExp) {
      schema = [[find2, replace2]];
      settings = options;
    } else {
      schema = find2;
      settings = replace2;
    }
    if (!settings) {
      settings = {};
    }
    const ignored = convert(settings.ignore || []);
    const pairs = toPairs(schema);
    let pairIndex = -1;
    while (++pairIndex < pairs.length) {
      visitParents(tree, "text", visitor);
    }
    return tree;
    function visitor(node2, parents) {
      let index2 = -1;
      let grandparent;
      while (++index2 < parents.length) {
        const parent = parents[index2];
        if (ignored(
          parent,
          grandparent ? grandparent.children.indexOf(parent) : void 0,
          grandparent
        )) {
          return;
        }
        grandparent = parent;
      }
      if (grandparent) {
        return handler(node2, parents);
      }
    }
    function handler(node2, parents) {
      const parent = parents[parents.length - 1];
      const find3 = pairs[pairIndex][0];
      const replace3 = pairs[pairIndex][1];
      let start = 0;
      const index2 = parent.children.indexOf(node2);
      let change = false;
      let nodes = [];
      find3.lastIndex = 0;
      let match = find3.exec(node2.value);
      while (match) {
        const position5 = match.index;
        const matchObject = {
          index: match.index,
          input: match.input,
          stack: [...parents, node2]
        };
        let value = replace3(...match, matchObject);
        if (typeof value === "string") {
          value = value.length > 0 ? { type: "text", value } : void 0;
        }
        if (value !== false) {
          if (start !== position5) {
            nodes.push({
              type: "text",
              value: node2.value.slice(start, position5)
            });
          }
          if (Array.isArray(value)) {
            nodes.push(...value);
          } else if (value) {
            nodes.push(value);
          }
          start = position5 + match[0].length;
          change = true;
        }
        if (!find3.global) {
          break;
        }
        match = find3.exec(node2.value);
      }
      if (change) {
        if (start < node2.value.length) {
          nodes.push({ type: "text", value: node2.value.slice(start) });
        }
        parent.children.splice(index2, 1, ...nodes);
      } else {
        nodes = [node2];
      }
      return index2 + nodes.length;
    }
  };
  function toPairs(schema) {
    const result = [];
    if (typeof schema !== "object") {
      throw new TypeError("Expected array or object as schema");
    }
    if (Array.isArray(schema)) {
      let index2 = -1;
      while (++index2 < schema.length) {
        result.push([
          toExpression2(schema[index2][0]),
          toFunction(schema[index2][1])
        ]);
      }
    } else {
      let key;
      for (key in schema) {
        if (own6.call(schema, key)) {
          result.push([toExpression2(key), toFunction(schema[key])]);
        }
      }
    }
    return result;
  }
  function toExpression2(find2) {
    return typeof find2 === "string" ? new RegExp(escapeStringRegexp(find2), "g") : find2;
  }
  function toFunction(replace2) {
    return typeof replace2 === "function" ? replace2 : () => replace2;
  }

  // ../ecopan_bot/node_modules/mdast-util-gfm-autolink-literal/lib/index.js
  var inConstruct = "phrasing";
  var notInConstruct = ["autolink", "link", "image", "label"];
  var gfmAutolinkLiteralFromMarkdown = {
    transforms: [transformGfmAutolinkLiterals],
    enter: {
      literalAutolink: enterLiteralAutolink,
      literalAutolinkEmail: enterLiteralAutolinkValue,
      literalAutolinkHttp: enterLiteralAutolinkValue,
      literalAutolinkWww: enterLiteralAutolinkValue
    },
    exit: {
      literalAutolink: exitLiteralAutolink,
      literalAutolinkEmail: exitLiteralAutolinkEmail,
      literalAutolinkHttp: exitLiteralAutolinkHttp,
      literalAutolinkWww: exitLiteralAutolinkWww
    }
  };
  var gfmAutolinkLiteralToMarkdown = {
    unsafe: [
      {
        character: "@",
        before: "[+\\-.\\w]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      {
        character: ".",
        before: "[Ww]",
        after: "[\\-.\\w]",
        inConstruct,
        notInConstruct
      },
      { character: ":", before: "[ps]", after: "\\/", inConstruct, notInConstruct }
    ]
  };
  function enterLiteralAutolink(token) {
    this.enter({ type: "link", title: null, url: "", children: [] }, token);
  }
  function enterLiteralAutolinkValue(token) {
    this.config.enter.autolinkProtocol.call(this, token);
  }
  function exitLiteralAutolinkHttp(token) {
    this.config.exit.autolinkProtocol.call(this, token);
  }
  function exitLiteralAutolinkWww(token) {
    this.config.exit.data.call(this, token);
    const node2 = this.stack[this.stack.length - 1];
    node2.url = "http://" + this.sliceSerialize(token);
  }
  function exitLiteralAutolinkEmail(token) {
    this.config.exit.autolinkEmail.call(this, token);
  }
  function exitLiteralAutolink(token) {
    this.exit(token);
  }
  function transformGfmAutolinkLiterals(tree) {
    findAndReplace(
      tree,
      [
        [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
        [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
      ],
      { ignore: ["link", "linkReference"] }
    );
  }
  function findUrl(_, protocol, domain2, path3, match) {
    let prefix = "";
    if (!previous2(match)) {
      return false;
    }
    if (/^w/i.test(protocol)) {
      domain2 = protocol + domain2;
      protocol = "";
      prefix = "http://";
    }
    if (!isCorrectDomain(domain2)) {
      return false;
    }
    const parts = splitUrl(domain2 + path3);
    if (!parts[0])
      return false;
    const result = {
      type: "link",
      title: null,
      url: prefix + protocol + parts[0],
      children: [{ type: "text", value: protocol + parts[0] }]
    };
    if (parts[1]) {
      return [result, { type: "text", value: parts[1] }];
    }
    return result;
  }
  function findEmail(_, atext, label, match) {
    if (!previous2(match, true) || /[-\d_]$/.test(label)) {
      return false;
    }
    return {
      type: "link",
      title: null,
      url: "mailto:" + atext + "@" + label,
      children: [{ type: "text", value: atext + "@" + label }]
    };
  }
  function isCorrectDomain(domain2) {
    const parts = domain2.split(".");
    if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
      return false;
    }
    return true;
  }
  function splitUrl(url) {
    const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
    if (!trailExec) {
      return [url, void 0];
    }
    url = url.slice(0, trailExec.index);
    let trail = trailExec[0];
    let closingParenIndex = trail.indexOf(")");
    const openingParens = ccount(url, "(");
    let closingParens = ccount(url, ")");
    while (closingParenIndex !== -1 && openingParens > closingParens) {
      url += trail.slice(0, closingParenIndex + 1);
      trail = trail.slice(closingParenIndex + 1);
      closingParenIndex = trail.indexOf(")");
      closingParens++;
    }
    return [url, trail];
  }
  function previous2(match, email) {
    const code3 = match.input.charCodeAt(match.index - 1);
    return (match.index === 0 || unicodeWhitespace(code3) || unicodePunctuation(code3)) && (!email || code3 !== 47);
  }

  // ../ecopan_bot/node_modules/micromark-util-decode-numeric-character-reference/index.js
  function decodeNumericCharacterReference(value, base2) {
    const code3 = Number.parseInt(value, base2);
    if (code3 < 9 || code3 === 11 || code3 > 13 && code3 < 32 || code3 > 126 && code3 < 160 || code3 > 55295 && code3 < 57344 || code3 > 64975 && code3 < 65008 || (code3 & 65535) === 65535 || (code3 & 65535) === 65534 || code3 > 1114111) {
      return "\uFFFD";
    }
    return String.fromCharCode(code3);
  }

  // ../ecopan_bot/node_modules/micromark-util-decode-string/index.js
  var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
  }
  function decode($0, $1, $2) {
    if ($1) {
      return $1;
    }
    const head = $2.charCodeAt(0);
    if (head === 35) {
      const head2 = $2.charCodeAt(1);
      const hex2 = head2 === 120 || head2 === 88;
      return decodeNumericCharacterReference($2.slice(hex2 ? 2 : 1), hex2 ? 16 : 10);
    }
    return decodeNamedCharacterReference($2) || $0;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/association.js
  function association(node2) {
    if (node2.label || !node2.identifier) {
      return node2.label || "";
    }
    return decodeString(node2.identifier);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/container-flow.js
  function containerFlow(parent, state2, info) {
    const indexStack = state2.indexStack;
    const children = parent.children || [];
    const tracker = state2.createTracker(info);
    const results2 = [];
    let index2 = -1;
    indexStack.push(-1);
    while (++index2 < children.length) {
      const child = children[index2];
      indexStack[indexStack.length - 1] = index2;
      results2.push(
        tracker.move(
          state2.handle(child, parent, state2, __spreadValues({
            before: "\n",
            after: "\n"
          }, tracker.current()))
        )
      );
      if (child.type !== "list") {
        state2.bulletLastUsed = void 0;
      }
      if (index2 < children.length - 1) {
        results2.push(
          tracker.move(between(child, children[index2 + 1], parent, state2))
        );
      }
    }
    indexStack.pop();
    return results2.join("");
  }
  function between(left, right, parent, state2) {
    let index2 = state2.join.length;
    while (index2--) {
      const result = state2.join[index2](left, right, parent, state2);
      if (result === true || result === 1) {
        break;
      }
      if (typeof result === "number") {
        return "\n".repeat(1 + result);
      }
      if (result === false) {
        return "\n\n<!---->\n\n";
      }
    }
    return "\n\n";
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
  var eol = /\r?\n|\r/g;
  function indentLines(value, map2) {
    const result = [];
    let start = 0;
    let line = 0;
    let match;
    while (match = eol.exec(value)) {
      one5(value.slice(start, match.index));
      result.push(match[0]);
      start = match.index + match[0].length;
      line++;
    }
    one5(value.slice(start));
    return result.join("");
    function one5(value2) {
      result.push(map2(value2, line, !value2));
    }
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
  function patternCompile(pattern) {
    if (!pattern._compiled) {
      const before = (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern.before ? "(?:" + pattern.before + ")" : "");
      pattern._compiled = new RegExp(
        (before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") + pattern.character + (pattern.after ? "(?:" + pattern.after + ")" : ""),
        "g"
      );
    }
    return pattern._compiled;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
  function patternInScope(stack, pattern) {
    return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
  }
  function listInScope(stack, list4, none) {
    if (typeof list4 === "string") {
      list4 = [list4];
    }
    if (!list4 || list4.length === 0) {
      return none;
    }
    let index2 = -1;
    while (++index2 < list4.length) {
      if (stack.includes(list4[index2])) {
        return true;
      }
    }
    return false;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/safe.js
  function safe(state2, input, config2) {
    const value = (config2.before || "") + (input || "") + (config2.after || "");
    const positions = [];
    const result = [];
    const infos = {};
    let index2 = -1;
    while (++index2 < state2.unsafe.length) {
      const pattern = state2.unsafe[index2];
      if (!patternInScope(state2.stack, pattern)) {
        continue;
      }
      const expression = patternCompile(pattern);
      let match;
      while (match = expression.exec(value)) {
        const before = "before" in pattern || Boolean(pattern.atBreak);
        const after = "after" in pattern;
        const position5 = match.index + (before ? match[1].length : 0);
        if (positions.includes(position5)) {
          if (infos[position5].before && !before) {
            infos[position5].before = false;
          }
          if (infos[position5].after && !after) {
            infos[position5].after = false;
          }
        } else {
          positions.push(position5);
          infos[position5] = { before, after };
        }
      }
    }
    positions.sort(numerical);
    let start = config2.before ? config2.before.length : 0;
    const end = value.length - (config2.after ? config2.after.length : 0);
    index2 = -1;
    while (++index2 < positions.length) {
      const position5 = positions[index2];
      if (position5 < start || position5 >= end) {
        continue;
      }
      if (position5 + 1 < end && positions[index2 + 1] === position5 + 1 && infos[position5].after && !infos[position5 + 1].before && !infos[position5 + 1].after || positions[index2 - 1] === position5 - 1 && infos[position5].before && !infos[position5 - 1].before && !infos[position5 - 1].after) {
        continue;
      }
      if (start !== position5) {
        result.push(escapeBackslashes(value.slice(start, position5), "\\"));
      }
      start = position5;
      if (/[!-/:-@[-`{-~]/.test(value.charAt(position5)) && (!config2.encode || !config2.encode.includes(value.charAt(position5)))) {
        result.push("\\");
      } else {
        result.push(
          "&#x" + value.charCodeAt(position5).toString(16).toUpperCase() + ";"
        );
        start++;
      }
    }
    result.push(escapeBackslashes(value.slice(start, end), config2.after));
    return result.join("");
  }
  function numerical(a, b) {
    return a - b;
  }
  function escapeBackslashes(value, after) {
    const expression = /\\(?=[!-/:-@[-`{-~])/g;
    const positions = [];
    const results2 = [];
    const whole = value + after;
    let index2 = -1;
    let start = 0;
    let match;
    while (match = expression.exec(whole)) {
      positions.push(match.index);
    }
    while (++index2 < positions.length) {
      if (start !== positions[index2]) {
        results2.push(value.slice(start, positions[index2]));
      }
      results2.push("\\");
      start = positions[index2];
    }
    results2.push(value.slice(start));
    return results2.join("");
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/track.js
  function track(config2) {
    const options = config2 || {};
    const now = options.now || {};
    let lineShift = options.lineShift || 0;
    let line = now.line || 1;
    let column = now.column || 1;
    return { move, current, shift };
    function current() {
      return { now: { line, column }, lineShift };
    }
    function shift(value) {
      lineShift += value;
    }
    function move(input) {
      const value = input || "";
      const chunks = value.split(/\r?\n|\r/g);
      const tail = chunks[chunks.length - 1];
      line += chunks.length - 1;
      column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
      return value;
    }
  }

  // ../ecopan_bot/node_modules/mdast-util-gfm-footnote/lib/index.js
  footnoteReference.peek = footnoteReferencePeek;
  function gfmFootnoteFromMarkdown() {
    return {
      enter: {
        gfmFootnoteDefinition: enterFootnoteDefinition,
        gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
        gfmFootnoteCall: enterFootnoteCall,
        gfmFootnoteCallString: enterFootnoteCallString
      },
      exit: {
        gfmFootnoteDefinition: exitFootnoteDefinition,
        gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
        gfmFootnoteCall: exitFootnoteCall,
        gfmFootnoteCallString: exitFootnoteCallString
      }
    };
  }
  function gfmFootnoteToMarkdown() {
    return {
      unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
      handlers: { footnoteDefinition, footnoteReference }
    };
  }
  function enterFootnoteDefinition(token) {
    this.enter(
      { type: "footnoteDefinition", identifier: "", label: "", children: [] },
      token
    );
  }
  function enterFootnoteDefinitionLabelString() {
    this.buffer();
  }
  function exitFootnoteDefinitionLabelString(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function exitFootnoteDefinition(token) {
    this.exit(token);
  }
  function enterFootnoteCall(token) {
    this.enter({ type: "footnoteReference", identifier: "", label: "" }, token);
  }
  function enterFootnoteCallString() {
    this.buffer();
  }
  function exitFootnoteCallString(token) {
    const label = this.resume();
    const node2 = this.stack[this.stack.length - 1];
    node2.label = label;
    node2.identifier = normalizeIdentifier(
      this.sliceSerialize(token)
    ).toLowerCase();
  }
  function exitFootnoteCall(token) {
    this.exit(token);
  }
  function footnoteReference(node2, _, context, safeOptions) {
    const tracker = track(safeOptions);
    let value = tracker.move("[^");
    const exit3 = context.enter("footnoteReference");
    const subexit = context.enter("reference");
    value += tracker.move(
      safe(context, association(node2), __spreadProps(__spreadValues({}, tracker.current()), {
        before: value,
        after: "]"
      }))
    );
    subexit();
    exit3();
    value += tracker.move("]");
    return value;
  }
  function footnoteReferencePeek() {
    return "[";
  }
  function footnoteDefinition(node2, _, context, safeOptions) {
    const tracker = track(safeOptions);
    let value = tracker.move("[^");
    const exit3 = context.enter("footnoteDefinition");
    const subexit = context.enter("label");
    value += tracker.move(
      safe(context, association(node2), __spreadProps(__spreadValues({}, tracker.current()), {
        before: value,
        after: "]"
      }))
    );
    subexit();
    value += tracker.move(
      "]:" + (node2.children && node2.children.length > 0 ? " " : "")
    );
    tracker.shift(4);
    value += tracker.move(
      indentLines(containerFlow(node2, context, tracker.current()), map)
    );
    exit3();
    return value;
  }
  function map(line, index2, blank) {
    if (index2 === 0) {
      return line;
    }
    return (blank ? "" : "    ") + line;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
  function containerPhrasing(parent, state2, info) {
    const indexStack = state2.indexStack;
    const children = parent.children || [];
    const results2 = [];
    let index2 = -1;
    let before = info.before;
    indexStack.push(-1);
    let tracker = state2.createTracker(info);
    while (++index2 < children.length) {
      const child = children[index2];
      let after;
      indexStack[indexStack.length - 1] = index2;
      if (index2 + 1 < children.length) {
        let handle = state2.handle.handlers[children[index2 + 1].type];
        if (handle && handle.peek)
          handle = handle.peek;
        after = handle ? handle(children[index2 + 1], parent, state2, __spreadValues({
          before: "",
          after: ""
        }, tracker.current())).charAt(0) : "";
      } else {
        after = info.after;
      }
      if (results2.length > 0 && (before === "\r" || before === "\n") && child.type === "html") {
        results2[results2.length - 1] = results2[results2.length - 1].replace(
          /(\r?\n|\r)$/,
          " "
        );
        before = " ";
        tracker = state2.createTracker(info);
        tracker.move(results2.join(""));
      }
      results2.push(
        tracker.move(
          state2.handle(child, parent, state2, __spreadProps(__spreadValues({}, tracker.current()), {
            before,
            after
          }))
        )
      );
      before = results2[results2.length - 1].slice(-1);
    }
    indexStack.pop();
    return results2.join("");
  }

  // ../ecopan_bot/node_modules/mdast-util-gfm-strikethrough/lib/index.js
  var constructsWithoutStrikethrough = [
    "autolink",
    "destinationLiteral",
    "destinationRaw",
    "reference",
    "titleQuote",
    "titleApostrophe"
  ];
  handleDelete.peek = peekDelete;
  var gfmStrikethroughFromMarkdown = {
    canContainEols: ["delete"],
    enter: { strikethrough: enterStrikethrough },
    exit: { strikethrough: exitStrikethrough }
  };
  var gfmStrikethroughToMarkdown = {
    unsafe: [
      {
        character: "~",
        inConstruct: "phrasing",
        notInConstruct: constructsWithoutStrikethrough
      }
    ],
    handlers: { delete: handleDelete }
  };
  function enterStrikethrough(token) {
    this.enter({ type: "delete", children: [] }, token);
  }
  function exitStrikethrough(token) {
    this.exit(token);
  }
  function handleDelete(node2, _, context, safeOptions) {
    const tracker = track(safeOptions);
    const exit3 = context.enter("strikethrough");
    let value = tracker.move("~~");
    value += containerPhrasing(node2, context, __spreadProps(__spreadValues({}, tracker.current()), {
      before: value,
      after: "~"
    }));
    value += tracker.move("~~");
    exit3();
    return value;
  }
  function peekDelete() {
    return "~";
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
  inlineCode.peek = inlineCodePeek;
  function inlineCode(node2, _, state2) {
    let value = node2.value || "";
    let sequence = "`";
    let index2 = -1;
    while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
      sequence += "`";
    }
    if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
      value = " " + value + " ";
    }
    while (++index2 < state2.unsafe.length) {
      const pattern = state2.unsafe[index2];
      const expression = patternCompile(pattern);
      let match;
      if (!pattern.atBreak)
        continue;
      while (match = expression.exec(value)) {
        let position5 = match.index;
        if (value.charCodeAt(position5) === 10 && value.charCodeAt(position5 - 1) === 13) {
          position5--;
        }
        value = value.slice(0, position5) + " " + value.slice(match.index + 1);
      }
    }
    return sequence + value + sequence;
  }
  function inlineCodePeek() {
    return "`";
  }

  // ../ecopan_bot/node_modules/markdown-table/index.js
  function markdownTable(table2, options = {}) {
    const align = (options.align || []).concat();
    const stringLength = options.stringLength || defaultStringLength;
    const alignments = [];
    const cellMatrix = [];
    const sizeMatrix = [];
    const longestCellByColumn = [];
    let mostCellsPerRow = 0;
    let rowIndex = -1;
    while (++rowIndex < table2.length) {
      const row2 = [];
      const sizes25 = [];
      let columnIndex2 = -1;
      if (table2[rowIndex].length > mostCellsPerRow) {
        mostCellsPerRow = table2[rowIndex].length;
      }
      while (++columnIndex2 < table2[rowIndex].length) {
        const cell = serialize(table2[rowIndex][columnIndex2]);
        if (options.alignDelimiters !== false) {
          const size2 = stringLength(cell);
          sizes25[columnIndex2] = size2;
          if (longestCellByColumn[columnIndex2] === void 0 || size2 > longestCellByColumn[columnIndex2]) {
            longestCellByColumn[columnIndex2] = size2;
          }
        }
        row2.push(cell);
      }
      cellMatrix[rowIndex] = row2;
      sizeMatrix[rowIndex] = sizes25;
    }
    let columnIndex = -1;
    if (typeof align === "object" && "length" in align) {
      while (++columnIndex < mostCellsPerRow) {
        alignments[columnIndex] = toAlignment(align[columnIndex]);
      }
    } else {
      const code3 = toAlignment(align);
      while (++columnIndex < mostCellsPerRow) {
        alignments[columnIndex] = code3;
      }
    }
    columnIndex = -1;
    const row = [];
    const sizes24 = [];
    while (++columnIndex < mostCellsPerRow) {
      const code3 = alignments[columnIndex];
      let before = "";
      let after = "";
      if (code3 === 99) {
        before = ":";
        after = ":";
      } else if (code3 === 108) {
        before = ":";
      } else if (code3 === 114) {
        after = ":";
      }
      let size2 = options.alignDelimiters === false ? 1 : Math.max(
        1,
        longestCellByColumn[columnIndex] - before.length - after.length
      );
      const cell = before + "-".repeat(size2) + after;
      if (options.alignDelimiters !== false) {
        size2 = before.length + size2 + after.length;
        if (size2 > longestCellByColumn[columnIndex]) {
          longestCellByColumn[columnIndex] = size2;
        }
        sizes24[columnIndex] = size2;
      }
      row[columnIndex] = cell;
    }
    cellMatrix.splice(1, 0, row);
    sizeMatrix.splice(1, 0, sizes24);
    rowIndex = -1;
    const lines = [];
    while (++rowIndex < cellMatrix.length) {
      const row2 = cellMatrix[rowIndex];
      const sizes25 = sizeMatrix[rowIndex];
      columnIndex = -1;
      const line = [];
      while (++columnIndex < mostCellsPerRow) {
        const cell = row2[columnIndex] || "";
        let before = "";
        let after = "";
        if (options.alignDelimiters !== false) {
          const size2 = longestCellByColumn[columnIndex] - (sizes25[columnIndex] || 0);
          const code3 = alignments[columnIndex];
          if (code3 === 114) {
            before = " ".repeat(size2);
          } else if (code3 === 99) {
            if (size2 % 2) {
              before = " ".repeat(size2 / 2 + 0.5);
              after = " ".repeat(size2 / 2 - 0.5);
            } else {
              before = " ".repeat(size2 / 2);
              after = before;
            }
          } else {
            after = " ".repeat(size2);
          }
        }
        if (options.delimiterStart !== false && !columnIndex) {
          line.push("|");
        }
        if (options.padding !== false && !(options.alignDelimiters === false && cell === "") && (options.delimiterStart !== false || columnIndex)) {
          line.push(" ");
        }
        if (options.alignDelimiters !== false) {
          line.push(before);
        }
        line.push(cell);
        if (options.alignDelimiters !== false) {
          line.push(after);
        }
        if (options.padding !== false) {
          line.push(" ");
        }
        if (options.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
          line.push("|");
        }
      }
      lines.push(
        options.delimiterEnd === false ? line.join("").replace(/ +$/, "") : line.join("")
      );
    }
    return lines.join("\n");
  }
  function serialize(value) {
    return value === null || value === void 0 ? "" : String(value);
  }
  function defaultStringLength(value) {
    return value.length;
  }
  function toAlignment(value) {
    const code3 = typeof value === "string" ? value.codePointAt(0) : 0;
    return code3 === 67 || code3 === 99 ? 99 : code3 === 76 || code3 === 108 ? 108 : code3 === 82 || code3 === 114 ? 114 : 0;
  }

  // ../ecopan_bot/node_modules/mdast-util-gfm-table/lib/index.js
  var gfmTableFromMarkdown = {
    enter: {
      table: enterTable,
      tableData: enterCell,
      tableHeader: enterCell,
      tableRow: enterRow
    },
    exit: {
      codeText: exitCodeText,
      table: exitTable,
      tableData: exit2,
      tableHeader: exit2,
      tableRow: exit2
    }
  };
  function enterTable(token) {
    const align = token._align;
    this.enter(
      {
        type: "table",
        align: align.map((d) => d === "none" ? null : d),
        children: []
      },
      token
    );
    this.setData("inTable", true);
  }
  function exitTable(token) {
    this.exit(token);
    this.setData("inTable");
  }
  function enterRow(token) {
    this.enter({ type: "tableRow", children: [] }, token);
  }
  function exit2(token) {
    this.exit(token);
  }
  function enterCell(token) {
    this.enter({ type: "tableCell", children: [] }, token);
  }
  function exitCodeText(token) {
    let value = this.resume();
    if (this.getData("inTable")) {
      value = value.replace(/\\([\\|])/g, replace);
    }
    const node2 = this.stack[this.stack.length - 1];
    node2.value = value;
    this.exit(token);
  }
  function replace($0, $1) {
    return $1 === "|" ? $1 : $0;
  }
  function gfmTableToMarkdown(options) {
    const settings = options || {};
    const padding = settings.tableCellPadding;
    const alignDelimiters = settings.tablePipeAlign;
    const stringLength = settings.stringLength;
    const around = padding ? " " : "|";
    return {
      unsafe: [
        { character: "\r", inConstruct: "tableCell" },
        { character: "\n", inConstruct: "tableCell" },
        { atBreak: true, character: "|", after: "[	 :-]" },
        { character: "|", inConstruct: "tableCell" },
        { atBreak: true, character: ":", after: "-" },
        { atBreak: true, character: "-", after: "[:|-]" }
      ],
      handlers: {
        table: handleTable,
        tableRow: handleTableRow,
        tableCell: handleTableCell,
        inlineCode: inlineCodeWithTable
      }
    };
    function handleTable(node2, _, context, safeOptions) {
      return serializeData(
        handleTableAsData(node2, context, safeOptions),
        node2.align
      );
    }
    function handleTableRow(node2, _, context, safeOptions) {
      const row = handleTableRowAsData(node2, context, safeOptions);
      const value = serializeData([row]);
      return value.slice(0, value.indexOf("\n"));
    }
    function handleTableCell(node2, _, context, safeOptions) {
      const exit3 = context.enter("tableCell");
      const subexit = context.enter("phrasing");
      const value = containerPhrasing(node2, context, __spreadProps(__spreadValues({}, safeOptions), {
        before: around,
        after: around
      }));
      subexit();
      exit3();
      return value;
    }
    function serializeData(matrix, align) {
      return markdownTable(matrix, {
        align,
        alignDelimiters,
        padding,
        stringLength
      });
    }
    function handleTableAsData(node2, context, safeOptions) {
      const children = node2.children;
      let index2 = -1;
      const result = [];
      const subexit = context.enter("table");
      while (++index2 < children.length) {
        result[index2] = handleTableRowAsData(
          children[index2],
          context,
          safeOptions
        );
      }
      subexit();
      return result;
    }
    function handleTableRowAsData(node2, context, safeOptions) {
      const children = node2.children;
      let index2 = -1;
      const result = [];
      const subexit = context.enter("tableRow");
      while (++index2 < children.length) {
        result[index2] = handleTableCell(
          children[index2],
          node2,
          context,
          safeOptions
        );
      }
      subexit();
      return result;
    }
    function inlineCodeWithTable(node2, parent, context) {
      let value = inlineCode(node2, parent, context);
      if (context.stack.includes("tableCell")) {
        value = value.replace(/\|/g, "\\$&");
      }
      return value;
    }
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
  function checkBullet(state2) {
    const marker = state2.options.bullet || "*";
    if (marker !== "*" && marker !== "+" && marker !== "-") {
      throw new Error(
        "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
      );
    }
    return marker;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
  function checkListItemIndent(state2) {
    const style2 = state2.options.listItemIndent || "tab";
    if (style2 === 1 || style2 === "1") {
      return "one";
    }
    if (style2 !== "tab" && style2 !== "one" && style2 !== "mixed") {
      throw new Error(
        "Cannot serialize items with `" + style2 + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
      );
    }
    return style2;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-markdown/lib/handle/list-item.js
  function listItem(node2, parent, state2, info) {
    const listItemIndent = checkListItemIndent(state2);
    let bullet = state2.bulletCurrent || checkBullet(state2);
    if (parent && parent.type === "list" && parent.ordered) {
      bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state2.options.incrementListMarker === false ? 0 : parent.children.indexOf(node2)) + bullet;
    }
    let size2 = bullet.length + 1;
    if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node2.spread)) {
      size2 = Math.ceil(size2 / 4) * 4;
    }
    const tracker = state2.createTracker(info);
    tracker.move(bullet + " ".repeat(size2 - bullet.length));
    tracker.shift(size2);
    const exit3 = state2.enter("listItem");
    const value = state2.indentLines(
      state2.containerFlow(node2, tracker.current()),
      map2
    );
    exit3();
    return value;
    function map2(line, index2, blank) {
      if (index2) {
        return (blank ? "" : " ".repeat(size2)) + line;
      }
      return (blank ? bullet : bullet + " ".repeat(size2 - bullet.length)) + line;
    }
  }

  // ../ecopan_bot/node_modules/mdast-util-gfm-task-list-item/lib/index.js
  var gfmTaskListItemFromMarkdown = {
    exit: {
      taskListCheckValueChecked: exitCheck,
      taskListCheckValueUnchecked: exitCheck,
      paragraph: exitParagraphWithTaskListItem
    }
  };
  var gfmTaskListItemToMarkdown = {
    unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
    handlers: { listItem: listItemWithTaskListItem }
  };
  function exitCheck(token) {
    const node2 = this.stack[this.stack.length - 2];
    node2.checked = token.type === "taskListCheckValueChecked";
  }
  function exitParagraphWithTaskListItem(token) {
    const parent = this.stack[this.stack.length - 2];
    if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
      const node2 = this.stack[this.stack.length - 1];
      const head = node2.children[0];
      if (head && head.type === "text") {
        const siblings = parent.children;
        let index2 = -1;
        let firstParaghraph;
        while (++index2 < siblings.length) {
          const sibling = siblings[index2];
          if (sibling.type === "paragraph") {
            firstParaghraph = sibling;
            break;
          }
        }
        if (firstParaghraph === node2) {
          head.value = head.value.slice(1);
          if (head.value.length === 0) {
            node2.children.shift();
          } else if (node2.position && head.position && typeof head.position.start.offset === "number") {
            head.position.start.column++;
            head.position.start.offset++;
            node2.position.start = Object.assign({}, head.position.start);
          }
        }
      }
    }
    this.exit(token);
  }
  function listItemWithTaskListItem(node2, parent, context, safeOptions) {
    const head = node2.children[0];
    const checkable = typeof node2.checked === "boolean" && head && head.type === "paragraph";
    const checkbox = "[" + (node2.checked ? "x" : " ") + "] ";
    const tracker = track(safeOptions);
    if (checkable) {
      tracker.move(checkbox);
    }
    let value = listItem(node2, parent, context, __spreadValues(__spreadValues({}, safeOptions), tracker.current()));
    if (checkable) {
      value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
    }
    return value;
    function check($0) {
      return $0 + checkbox;
    }
  }

  // ../ecopan_bot/node_modules/mdast-util-gfm/lib/index.js
  function gfmFromMarkdown() {
    return [
      gfmAutolinkLiteralFromMarkdown,
      gfmFootnoteFromMarkdown(),
      gfmStrikethroughFromMarkdown,
      gfmTableFromMarkdown,
      gfmTaskListItemFromMarkdown
    ];
  }
  function gfmToMarkdown(options) {
    return {
      extensions: [
        gfmAutolinkLiteralToMarkdown,
        gfmFootnoteToMarkdown(),
        gfmStrikethroughToMarkdown,
        gfmTableToMarkdown(options),
        gfmTaskListItemToMarkdown
      ]
    };
  }

  // ../ecopan_bot/node_modules/remark-gfm/index.js
  function remarkGfm(options = {}) {
    const data = this.data();
    add3("micromarkExtensions", gfm(options));
    add3("fromMarkdownExtensions", gfmFromMarkdown());
    add3("toMarkdownExtensions", gfmToMarkdown(options));
    function add3(field, value) {
      const list4 = data[field] ? data[field] : data[field] = [];
      list4.push(value);
    }
  }

  // ../ecopan_bot/node_modules/react-markdown/lib/uri-transformer.js
  var protocols = ["http", "https", "mailto", "tel"];
  function uriTransformer(uri) {
    const url = (uri || "").trim();
    const first = url.charAt(0);
    if (first === "#" || first === "/") {
      return url;
    }
    const colon = url.indexOf(":");
    if (colon === -1) {
      return url;
    }
    let index2 = -1;
    while (++index2 < protocols.length) {
      const protocol = protocols[index2];
      if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
        return url;
      }
    }
    index2 = url.indexOf("?");
    if (index2 !== -1 && colon > index2) {
      return url;
    }
    index2 = url.indexOf("#");
    if (index2 !== -1 && colon > index2) {
      return url;
    }
    return "javascript:void(0)";
  }

  // ../ecopan_bot/node_modules/react-markdown/lib/react-markdown.js
  var import_react65 = __toESM(require_react(), 1);

  // ../ecopan_bot/node_modules/vfile/lib/index.js
  var import_is_buffer = __toESM(require_is_buffer(), 1);

  // ../ecopan_bot/node_modules/unist-util-stringify-position/lib/index.js
  function stringifyPosition(value) {
    if (!value || typeof value !== "object") {
      return "";
    }
    if ("position" in value || "type" in value) {
      return position4(value.position);
    }
    if ("start" in value || "end" in value) {
      return position4(value);
    }
    if ("line" in value || "column" in value) {
      return point3(value);
    }
    return "";
  }
  function point3(point5) {
    return index(point5 && point5.line) + ":" + index(point5 && point5.column);
  }
  function position4(pos) {
    return point3(pos && pos.start) + "-" + point3(pos && pos.end);
  }
  function index(value) {
    return value && typeof value === "number" ? value : 1;
  }

  // ../ecopan_bot/node_modules/vfile-message/lib/index.js
  var VFileMessage = class extends Error {
    constructor(reason, place, origin) {
      const parts = [null, null];
      let position5 = {
        start: { line: null, column: null },
        end: { line: null, column: null }
      };
      super();
      if (typeof place === "string") {
        origin = place;
        place = void 0;
      }
      if (typeof origin === "string") {
        const index2 = origin.indexOf(":");
        if (index2 === -1) {
          parts[1] = origin;
        } else {
          parts[0] = origin.slice(0, index2);
          parts[1] = origin.slice(index2 + 1);
        }
      }
      if (place) {
        if ("type" in place || "position" in place) {
          if (place.position) {
            position5 = place.position;
          }
        } else if ("start" in place || "end" in place) {
          position5 = place;
        } else if ("line" in place || "column" in place) {
          position5.start = place;
        }
      }
      this.name = stringifyPosition(place) || "1:1";
      this.message = typeof reason === "object" ? reason.message : reason;
      this.stack = "";
      if (typeof reason === "object" && reason.stack) {
        this.stack = reason.stack;
      }
      this.reason = this.message;
      this.fatal;
      this.line = position5.start.line;
      this.column = position5.start.column;
      this.position = position5;
      this.source = parts[0];
      this.ruleId = parts[1];
      this.file;
      this.actual;
      this.expected;
      this.url;
      this.note;
    }
  };
  VFileMessage.prototype.file = "";
  VFileMessage.prototype.name = "";
  VFileMessage.prototype.reason = "";
  VFileMessage.prototype.message = "";
  VFileMessage.prototype.stack = "";
  VFileMessage.prototype.fatal = null;
  VFileMessage.prototype.column = null;
  VFileMessage.prototype.line = null;
  VFileMessage.prototype.source = null;
  VFileMessage.prototype.ruleId = null;
  VFileMessage.prototype.position = null;

  // ../ecopan_bot/node_modules/vfile/lib/minpath.browser.js
  var path2 = { basename, dirname, extname, join, sep: "/" };
  function basename(path3, ext) {
    if (ext !== void 0 && typeof ext !== "string") {
      throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path3);
    let start = 0;
    let end = -1;
    let index2 = path3.length;
    let seenNonSlash;
    if (ext === void 0 || ext.length === 0 || ext.length > path3.length) {
      while (index2--) {
        if (path3.charCodeAt(index2) === 47) {
          if (seenNonSlash) {
            start = index2 + 1;
            break;
          }
        } else if (end < 0) {
          seenNonSlash = true;
          end = index2 + 1;
        }
      }
      return end < 0 ? "" : path3.slice(start, end);
    }
    if (ext === path3) {
      return "";
    }
    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;
    while (index2--) {
      if (path3.charCodeAt(index2) === 47) {
        if (seenNonSlash) {
          start = index2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd < 0) {
          seenNonSlash = true;
          firstNonSlashEnd = index2 + 1;
        }
        if (extIndex > -1) {
          if (path3.charCodeAt(index2) === ext.charCodeAt(extIndex--)) {
            if (extIndex < 0) {
              end = index2;
            }
          } else {
            extIndex = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end) {
      end = firstNonSlashEnd;
    } else if (end < 0) {
      end = path3.length;
    }
    return path3.slice(start, end);
  }
  function dirname(path3) {
    assertPath(path3);
    if (path3.length === 0) {
      return ".";
    }
    let end = -1;
    let index2 = path3.length;
    let unmatchedSlash;
    while (--index2) {
      if (path3.charCodeAt(index2) === 47) {
        if (unmatchedSlash) {
          end = index2;
          break;
        }
      } else if (!unmatchedSlash) {
        unmatchedSlash = true;
      }
    }
    return end < 0 ? path3.charCodeAt(0) === 47 ? "/" : "." : end === 1 && path3.charCodeAt(0) === 47 ? "//" : path3.slice(0, end);
  }
  function extname(path3) {
    assertPath(path3);
    let index2 = path3.length;
    let end = -1;
    let startPart = 0;
    let startDot = -1;
    let preDotState = 0;
    let unmatchedSlash;
    while (index2--) {
      const code3 = path3.charCodeAt(index2);
      if (code3 === 47) {
        if (unmatchedSlash) {
          startPart = index2 + 1;
          break;
        }
        continue;
      }
      if (end < 0) {
        unmatchedSlash = true;
        end = index2 + 1;
      }
      if (code3 === 46) {
        if (startDot < 0) {
          startDot = index2;
        } else if (preDotState !== 1) {
          preDotState = 1;
        }
      } else if (startDot > -1) {
        preDotState = -1;
      }
    }
    if (startDot < 0 || end < 0 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
      return "";
    }
    return path3.slice(startDot, end);
  }
  function join(...segments) {
    let index2 = -1;
    let joined;
    while (++index2 < segments.length) {
      assertPath(segments[index2]);
      if (segments[index2]) {
        joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
      }
    }
    return joined === void 0 ? "." : normalize4(joined);
  }
  function normalize4(path3) {
    assertPath(path3);
    const absolute = path3.charCodeAt(0) === 47;
    let value = normalizeString(path3, !absolute);
    if (value.length === 0 && !absolute) {
      value = ".";
    }
    if (value.length > 0 && path3.charCodeAt(path3.length - 1) === 47) {
      value += "/";
    }
    return absolute ? "/" + value : value;
  }
  function normalizeString(path3, allowAboveRoot) {
    let result = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index2 = -1;
    let code3;
    let lastSlashIndex;
    while (++index2 <= path3.length) {
      if (index2 < path3.length) {
        code3 = path3.charCodeAt(index2);
      } else if (code3 === 47) {
        break;
      } else {
        code3 = 47;
      }
      if (code3 === 47) {
        if (lastSlash === index2 - 1 || dots === 1) {
        } else if (lastSlash !== index2 - 1 && dots === 2) {
          if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
            if (result.length > 2) {
              lastSlashIndex = result.lastIndexOf("/");
              if (lastSlashIndex !== result.length - 1) {
                if (lastSlashIndex < 0) {
                  result = "";
                  lastSegmentLength = 0;
                } else {
                  result = result.slice(0, lastSlashIndex);
                  lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                }
                lastSlash = index2;
                dots = 0;
                continue;
              }
            } else if (result.length > 0) {
              result = "";
              lastSegmentLength = 0;
              lastSlash = index2;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            result = result.length > 0 ? result + "/.." : "..";
            lastSegmentLength = 2;
          }
        } else {
          if (result.length > 0) {
            result += "/" + path3.slice(lastSlash + 1, index2);
          } else {
            result = path3.slice(lastSlash + 1, index2);
          }
          lastSegmentLength = index2 - lastSlash - 1;
        }
        lastSlash = index2;
        dots = 0;
      } else if (code3 === 46 && dots > -1) {
        dots++;
      } else {
        dots = -1;
      }
    }
    return result;
  }
  function assertPath(path3) {
    if (typeof path3 !== "string") {
      throw new TypeError(
        "Path must be a string. Received " + JSON.stringify(path3)
      );
    }
  }

  // ../ecopan_bot/node_modules/vfile/lib/minproc.browser.js
  var proc = { cwd };
  function cwd() {
    return "/";
  }

  // ../ecopan_bot/node_modules/vfile/lib/minurl.shared.js
  function isUrl(fileUrlOrPath) {
    return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && fileUrlOrPath.href && fileUrlOrPath.origin;
  }

  // ../ecopan_bot/node_modules/vfile/lib/minurl.browser.js
  function urlToPath(path3) {
    if (typeof path3 === "string") {
      path3 = new URL(path3);
    } else if (!isUrl(path3)) {
      const error2 = new TypeError(
        'The "path" argument must be of type string or an instance of URL. Received `' + path3 + "`"
      );
      error2.code = "ERR_INVALID_ARG_TYPE";
      throw error2;
    }
    if (path3.protocol !== "file:") {
      const error2 = new TypeError("The URL must be of scheme file");
      error2.code = "ERR_INVALID_URL_SCHEME";
      throw error2;
    }
    return getPathFromURLPosix(path3);
  }
  function getPathFromURLPosix(url) {
    if (url.hostname !== "") {
      const error2 = new TypeError(
        'File URL host must be "localhost" or empty on darwin'
      );
      error2.code = "ERR_INVALID_FILE_URL_HOST";
      throw error2;
    }
    const pathname = url.pathname;
    let index2 = -1;
    while (++index2 < pathname.length) {
      if (pathname.charCodeAt(index2) === 37 && pathname.charCodeAt(index2 + 1) === 50) {
        const third = pathname.charCodeAt(index2 + 2);
        if (third === 70 || third === 102) {
          const error2 = new TypeError(
            "File URL path must not include encoded / characters"
          );
          error2.code = "ERR_INVALID_FILE_URL_PATH";
          throw error2;
        }
      }
    }
    return decodeURIComponent(pathname);
  }

  // ../ecopan_bot/node_modules/vfile/lib/index.js
  var order = ["history", "path", "basename", "stem", "extname", "dirname"];
  var VFile = class {
    constructor(value) {
      let options;
      if (!value) {
        options = {};
      } else if (typeof value === "string" || buffer(value)) {
        options = { value };
      } else if (isUrl(value)) {
        options = { path: value };
      } else {
        options = value;
      }
      this.data = {};
      this.messages = [];
      this.history = [];
      this.cwd = proc.cwd();
      this.value;
      this.stored;
      this.result;
      this.map;
      let index2 = -1;
      while (++index2 < order.length) {
        const prop2 = order[index2];
        if (prop2 in options && options[prop2] !== void 0 && options[prop2] !== null) {
          this[prop2] = prop2 === "history" ? [...options[prop2]] : options[prop2];
        }
      }
      let prop;
      for (prop in options) {
        if (!order.includes(prop)) {
          this[prop] = options[prop];
        }
      }
    }
    get path() {
      return this.history[this.history.length - 1];
    }
    set path(path3) {
      if (isUrl(path3)) {
        path3 = urlToPath(path3);
      }
      assertNonEmpty(path3, "path");
      if (this.path !== path3) {
        this.history.push(path3);
      }
    }
    get dirname() {
      return typeof this.path === "string" ? path2.dirname(this.path) : void 0;
    }
    set dirname(dirname2) {
      assertPath2(this.basename, "dirname");
      this.path = path2.join(dirname2 || "", this.basename);
    }
    get basename() {
      return typeof this.path === "string" ? path2.basename(this.path) : void 0;
    }
    set basename(basename2) {
      assertNonEmpty(basename2, "basename");
      assertPart(basename2, "basename");
      this.path = path2.join(this.dirname || "", basename2);
    }
    get extname() {
      return typeof this.path === "string" ? path2.extname(this.path) : void 0;
    }
    set extname(extname2) {
      assertPart(extname2, "extname");
      assertPath2(this.dirname, "extname");
      if (extname2) {
        if (extname2.charCodeAt(0) !== 46) {
          throw new Error("`extname` must start with `.`");
        }
        if (extname2.includes(".", 1)) {
          throw new Error("`extname` cannot contain multiple dots");
        }
      }
      this.path = path2.join(this.dirname, this.stem + (extname2 || ""));
    }
    get stem() {
      return typeof this.path === "string" ? path2.basename(this.path, this.extname) : void 0;
    }
    set stem(stem) {
      assertNonEmpty(stem, "stem");
      assertPart(stem, "stem");
      this.path = path2.join(this.dirname || "", stem + (this.extname || ""));
    }
    toString(encoding) {
      return (this.value || "").toString(encoding || void 0);
    }
    message(reason, place, origin) {
      const message = new VFileMessage(reason, place, origin);
      if (this.path) {
        message.name = this.path + ":" + message.name;
        message.file = this.path;
      }
      message.fatal = false;
      this.messages.push(message);
      return message;
    }
    info(reason, place, origin) {
      const message = this.message(reason, place, origin);
      message.fatal = null;
      return message;
    }
    fail(reason, place, origin) {
      const message = this.message(reason, place, origin);
      message.fatal = true;
      throw message;
    }
  };
  function assertPart(part, name) {
    if (part && part.includes(path2.sep)) {
      throw new Error(
        "`" + name + "` cannot be a path: did not expect `" + path2.sep + "`"
      );
    }
  }
  function assertNonEmpty(part, name) {
    if (!part) {
      throw new Error("`" + name + "` cannot be empty");
    }
  }
  function assertPath2(path3, name) {
    if (!path3) {
      throw new Error("Setting `" + name + "` requires `path` to be set too");
    }
  }
  function buffer(value) {
    return (0, import_is_buffer.default)(value);
  }

  // ../ecopan_bot/node_modules/bail/index.js
  function bail(error2) {
    if (error2) {
      throw error2;
    }
  }

  // ../ecopan_bot/node_modules/unified/lib/index.js
  var import_is_buffer2 = __toESM(require_is_buffer(), 1);
  var import_extend = __toESM(require_extend(), 1);

  // ../ecopan_bot/node_modules/is-plain-obj/index.js
  function isPlainObject(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  }

  // ../ecopan_bot/node_modules/trough/index.js
  function trough() {
    const fns = [];
    const pipeline = { run, use };
    return pipeline;
    function run(...values) {
      let middlewareIndex = -1;
      const callback = values.pop();
      if (typeof callback !== "function") {
        throw new TypeError("Expected function as last argument, not " + callback);
      }
      next(null, ...values);
      function next(error2, ...output) {
        const fn = fns[++middlewareIndex];
        let index2 = -1;
        if (error2) {
          callback(error2);
          return;
        }
        while (++index2 < values.length) {
          if (output[index2] === null || output[index2] === void 0) {
            output[index2] = values[index2];
          }
        }
        values = output;
        if (fn) {
          wrap2(fn, next)(...output);
        } else {
          callback(null, ...output);
        }
      }
    }
    function use(middelware) {
      if (typeof middelware !== "function") {
        throw new TypeError(
          "Expected `middelware` to be a function, not " + middelware
        );
      }
      fns.push(middelware);
      return pipeline;
    }
  }
  function wrap2(middleware, callback) {
    let called;
    return wrapped;
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware.length > parameters.length;
      let result;
      if (fnExpectsCallback) {
        parameters.push(done);
      }
      try {
        result = middleware.apply(this, parameters);
      } catch (error2) {
        const exception = error2;
        if (fnExpectsCallback && called) {
          throw exception;
        }
        return done(exception);
      }
      if (!fnExpectsCallback) {
        if (result instanceof Promise) {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }
    function done(error2, ...output) {
      if (!called) {
        called = true;
        callback(error2, ...output);
      }
    }
    function then(value) {
      done(null, value);
    }
  }

  // ../ecopan_bot/node_modules/unified/lib/index.js
  var unified = base().freeze();
  var own7 = {}.hasOwnProperty;
  function base() {
    const transformers = trough();
    const attachers = [];
    let namespace = {};
    let frozen;
    let freezeIndex = -1;
    processor.data = data;
    processor.Parser = void 0;
    processor.Compiler = void 0;
    processor.freeze = freeze;
    processor.attachers = attachers;
    processor.use = use;
    processor.parse = parse5;
    processor.stringify = stringify3;
    processor.run = run;
    processor.runSync = runSync;
    processor.process = process2;
    processor.processSync = processSync;
    return processor;
    function processor() {
      const destination = base();
      let index2 = -1;
      while (++index2 < attachers.length) {
        destination.use(...attachers[index2]);
      }
      destination.data((0, import_extend.default)(true, {}, namespace));
      return destination;
    }
    function data(key, value) {
      if (typeof key === "string") {
        if (arguments.length === 2) {
          assertUnfrozen("data", frozen);
          namespace[key] = value;
          return processor;
        }
        return own7.call(namespace, key) && namespace[key] || null;
      }
      if (key) {
        assertUnfrozen("data", frozen);
        namespace = key;
        return processor;
      }
      return namespace;
    }
    function freeze() {
      if (frozen) {
        return processor;
      }
      while (++freezeIndex < attachers.length) {
        const [attacher, ...options] = attachers[freezeIndex];
        if (options[0] === false) {
          continue;
        }
        if (options[0] === true) {
          options[0] = void 0;
        }
        const transformer = attacher.call(processor, ...options);
        if (typeof transformer === "function") {
          transformers.use(transformer);
        }
      }
      frozen = true;
      freezeIndex = Number.POSITIVE_INFINITY;
      return processor;
    }
    function use(value, ...options) {
      let settings;
      assertUnfrozen("use", frozen);
      if (value === null || value === void 0) {
      } else if (typeof value === "function") {
        addPlugin(value, ...options);
      } else if (typeof value === "object") {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value + "`");
      }
      if (settings) {
        namespace.settings = Object.assign(namespace.settings || {}, settings);
      }
      return processor;
      function add3(value2) {
        if (typeof value2 === "function") {
          addPlugin(value2);
        } else if (typeof value2 === "object") {
          if (Array.isArray(value2)) {
            const [plugin, ...options2] = value2;
            addPlugin(plugin, ...options2);
          } else {
            addPreset(value2);
          }
        } else {
          throw new TypeError("Expected usable value, not `" + value2 + "`");
        }
      }
      function addPreset(result) {
        addList(result.plugins);
        if (result.settings) {
          settings = Object.assign(settings || {}, result.settings);
        }
      }
      function addList(plugins) {
        let index2 = -1;
        if (plugins === null || plugins === void 0) {
        } else if (Array.isArray(plugins)) {
          while (++index2 < plugins.length) {
            const thing = plugins[index2];
            add3(thing);
          }
        } else {
          throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
        }
      }
      function addPlugin(plugin, value2) {
        let index2 = -1;
        let entry;
        while (++index2 < attachers.length) {
          if (attachers[index2][0] === plugin) {
            entry = attachers[index2];
            break;
          }
        }
        if (entry) {
          if (isPlainObject(entry[1]) && isPlainObject(value2)) {
            value2 = (0, import_extend.default)(true, entry[1], value2);
          }
          entry[1] = value2;
        } else {
          attachers.push([...arguments]);
        }
      }
    }
    function parse5(doc) {
      processor.freeze();
      const file = vfile(doc);
      const Parser2 = processor.Parser;
      assertParser("parse", Parser2);
      if (newable(Parser2, "parse")) {
        return new Parser2(String(file), file).parse();
      }
      return Parser2(String(file), file);
    }
    function stringify3(node2, doc) {
      processor.freeze();
      const file = vfile(doc);
      const Compiler = processor.Compiler;
      assertCompiler("stringify", Compiler);
      assertNode(node2);
      if (newable(Compiler, "compile")) {
        return new Compiler(node2, file).compile();
      }
      return Compiler(node2, file);
    }
    function run(node2, doc, callback) {
      assertNode(node2);
      processor.freeze();
      if (!callback && typeof doc === "function") {
        callback = doc;
        doc = void 0;
      }
      if (!callback) {
        return new Promise(executor);
      }
      executor(null, callback);
      function executor(resolve, reject) {
        transformers.run(node2, vfile(doc), done);
        function done(error2, tree, file) {
          tree = tree || node2;
          if (error2) {
            reject(error2);
          } else if (resolve) {
            resolve(tree);
          } else {
            callback(null, tree, file);
          }
        }
      }
    }
    function runSync(node2, file) {
      let result;
      let complete;
      processor.run(node2, file, done);
      assertDone("runSync", "run", complete);
      return result;
      function done(error2, tree) {
        bail(error2);
        result = tree;
        complete = true;
      }
    }
    function process2(doc, callback) {
      processor.freeze();
      assertParser("process", processor.Parser);
      assertCompiler("process", processor.Compiler);
      if (!callback) {
        return new Promise(executor);
      }
      executor(null, callback);
      function executor(resolve, reject) {
        const file = vfile(doc);
        processor.run(processor.parse(file), file, (error2, tree, file2) => {
          if (error2 || !tree || !file2) {
            done(error2);
          } else {
            const result = processor.stringify(tree, file2);
            if (result === void 0 || result === null) {
            } else if (looksLikeAVFileValue(result)) {
              file2.value = result;
            } else {
              file2.result = result;
            }
            done(error2, file2);
          }
        });
        function done(error2, file2) {
          if (error2 || !file2) {
            reject(error2);
          } else if (resolve) {
            resolve(file2);
          } else {
            callback(null, file2);
          }
        }
      }
    }
    function processSync(doc) {
      let complete;
      processor.freeze();
      assertParser("processSync", processor.Parser);
      assertCompiler("processSync", processor.Compiler);
      const file = vfile(doc);
      processor.process(file, done);
      assertDone("processSync", "process", complete);
      return file;
      function done(error2) {
        complete = true;
        bail(error2);
      }
    }
  }
  function newable(value, name) {
    return typeof value === "function" && value.prototype && (keys2(value.prototype) || name in value.prototype);
  }
  function keys2(value) {
    let key;
    for (key in value) {
      if (own7.call(value, key)) {
        return true;
      }
    }
    return false;
  }
  function assertParser(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `Parser`");
    }
  }
  function assertCompiler(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `Compiler`");
    }
  }
  function assertUnfrozen(name, frozen) {
    if (frozen) {
      throw new Error(
        "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
      );
    }
  }
  function assertNode(node2) {
    if (!isPlainObject(node2) || typeof node2.type !== "string") {
      throw new TypeError("Expected node, got `" + node2 + "`");
    }
  }
  function assertDone(name, asyncName, complete) {
    if (!complete) {
      throw new Error(
        "`" + name + "` finished async. Use `" + asyncName + "` instead"
      );
    }
  }
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
  }
  function looksLikeAVFile(value) {
    return Boolean(
      value && typeof value === "object" && "message" in value && "messages" in value
    );
  }
  function looksLikeAVFileValue(value) {
    return typeof value === "string" || (0, import_is_buffer2.default)(value);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-string/lib/index.js
  var emptyOptions = {};
  function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one3(value, includeImageAlt, includeHtml);
  }
  function one3(value, includeImageAlt, includeHtml) {
    if (node(value)) {
      if ("value" in value) {
        return value.type === "html" && !includeHtml ? "" : value.value;
      }
      if (includeImageAlt && "alt" in value && value.alt) {
        return value.alt;
      }
      if ("children" in value) {
        return all3(value.children, includeImageAlt, includeHtml);
      }
    }
    if (Array.isArray(value)) {
      return all3(value, includeImageAlt, includeHtml);
    }
    return "";
  }
  function all3(values, includeImageAlt, includeHtml) {
    const result = [];
    let index2 = -1;
    while (++index2 < values.length) {
      result[index2] = one3(values[index2], includeImageAlt, includeHtml);
    }
    return result.join("");
  }
  function node(value) {
    return Boolean(value && typeof value === "object");
  }

  // ../ecopan_bot/node_modules/micromark/lib/initialize/content.js
  var content2 = {
    tokenize: initializeContent
  };
  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    );
    let previous3;
    return contentStart;
    function afterContentStartConstruct(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      return factorySpace(effects, contentStart, "linePrefix");
    }
    function paragraphInitial(code3) {
      effects.enter("paragraph");
      return lineStart(code3);
    }
    function lineStart(code3) {
      const token = effects.enter("chunkText", {
        contentType: "text",
        previous: previous3
      });
      if (previous3) {
        previous3.next = token;
      }
      previous3 = token;
      return data(code3);
    }
    function data(code3) {
      if (code3 === null) {
        effects.exit("chunkText");
        effects.exit("paragraph");
        effects.consume(code3);
        return;
      }
      if (markdownLineEnding(code3)) {
        effects.consume(code3);
        effects.exit("chunkText");
        return lineStart;
      }
      effects.consume(code3);
      return data;
    }
  }

  // ../ecopan_bot/node_modules/micromark/lib/initialize/document.js
  var document2 = {
    tokenize: initializeDocument
  };
  var containerConstruct = {
    tokenize: tokenizeContainer
  };
  function initializeDocument(effects) {
    const self2 = this;
    const stack = [];
    let continued = 0;
    let childFlow;
    let childToken;
    let lineStartOffset;
    return start;
    function start(code3) {
      if (continued < stack.length) {
        const item = stack[continued];
        self2.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code3);
      }
      return checkNewContainers(code3);
    }
    function documentContinue(code3) {
      continued++;
      if (self2.containerState._closeFlow) {
        self2.containerState._closeFlow = void 0;
        if (childFlow) {
          closeFlow();
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let point5;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            point5 = self2.events[indexBeforeFlow][1].end;
            break;
          }
        }
        exitContainers(continued);
        let index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point5);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
        return checkNewContainers(code3);
      }
      return start(code3);
    }
    function checkNewContainers(code3) {
      if (continued === stack.length) {
        if (!childFlow) {
          return documentContinued(code3);
        }
        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code3);
        }
        self2.interrupt = Boolean(
          childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
        );
      }
      self2.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code3);
    }
    function thereIsANewContainer(code3) {
      if (childFlow)
        closeFlow();
      exitContainers(continued);
      return documentContinued(code3);
    }
    function thereIsNoNewContainer(code3) {
      self2.parser.lazy[self2.now().line] = continued !== stack.length;
      lineStartOffset = self2.now().offset;
      return flowStart(code3);
    }
    function documentContinued(code3) {
      self2.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart
      )(code3);
    }
    function containerContinue(code3) {
      continued++;
      stack.push([self2.currentConstruct, self2.containerState]);
      return documentContinued(code3);
    }
    function flowStart(code3) {
      if (code3 === null) {
        if (childFlow)
          closeFlow();
        exitContainers(0);
        effects.consume(code3);
        return;
      }
      childFlow = childFlow || self2.parser.flow(self2.now());
      effects.enter("chunkFlow", {
        contentType: "flow",
        previous: childToken,
        _tokenizer: childFlow
      });
      return flowContinue(code3);
    }
    function flowContinue(code3) {
      if (code3 === null) {
        writeToChild(effects.exit("chunkFlow"), true);
        exitContainers(0);
        effects.consume(code3);
        return;
      }
      if (markdownLineEnding(code3)) {
        effects.consume(code3);
        writeToChild(effects.exit("chunkFlow"));
        continued = 0;
        self2.interrupt = void 0;
        return start;
      }
      effects.consume(code3);
      return flowContinue;
    }
    function writeToChild(token, eof) {
      const stream = self2.sliceStream(token);
      if (eof)
        stream.push(null);
      token.previous = childToken;
      if (childToken)
        childToken.next = token;
      childToken = token;
      childFlow.defineSkip(token.start);
      childFlow.write(stream);
      if (self2.parser.lazy[token.start.line]) {
        let index2 = childFlow.events.length;
        while (index2--) {
          if (childFlow.events[index2][1].start.offset < lineStartOffset && (!childFlow.events[index2][1].end || childFlow.events[index2][1].end.offset > lineStartOffset)) {
            return;
          }
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let seen;
        let point5;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            if (seen) {
              point5 = self2.events[indexBeforeFlow][1].end;
              break;
            }
            seen = true;
          }
        }
        exitContainers(continued);
        index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point5);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
      }
    }
    function exitContainers(size2) {
      let index2 = stack.length;
      while (index2-- > size2) {
        const entry = stack[index2];
        self2.containerState = entry[1];
        entry[0].exit.call(self2, effects);
      }
      stack.length = size2;
    }
    function closeFlow() {
      childFlow.write([null]);
      childToken = void 0;
      childFlow = void 0;
      self2.containerState._closeFlow = void 0;
    }
  }
  function tokenizeContainer(effects, ok2, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok2, nok),
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
  }

  // ../ecopan_bot/node_modules/micromark/lib/initialize/flow.js
  var flow = {
    tokenize: initializeFlow
  };
  function initializeFlow(effects) {
    const self2 = this;
    const initial = effects.attempt(
      blankLine,
      atBlankEnding,
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content, afterConstruct)
          ),
          "linePrefix"
        )
      )
    );
    return initial;
    function atBlankEnding(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      effects.enter("lineEndingBlank");
      effects.consume(code3);
      effects.exit("lineEndingBlank");
      self2.currentConstruct = void 0;
      return initial;
    }
    function afterConstruct(code3) {
      if (code3 === null) {
        effects.consume(code3);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code3);
      effects.exit("lineEnding");
      self2.currentConstruct = void 0;
      return initial;
    }
  }

  // ../ecopan_bot/node_modules/micromark/lib/initialize/text.js
  var resolver = {
    resolveAll: createResolver2()
  };
  var string = initializeFactory("string");
  var text3 = initializeFactory("text");
  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver2(
        field === "text" ? resolveAllLineSuffixes : void 0
      )
    };
    function initializeText(effects) {
      const self2 = this;
      const constructs2 = this.parser.constructs[field];
      const text6 = effects.attempt(constructs2, start, notText);
      return start;
      function start(code3) {
        return atBreak(code3) ? text6(code3) : notText(code3);
      }
      function notText(code3) {
        if (code3 === null) {
          effects.consume(code3);
          return;
        }
        effects.enter("data");
        effects.consume(code3);
        return data;
      }
      function data(code3) {
        if (atBreak(code3)) {
          effects.exit("data");
          return text6(code3);
        }
        effects.consume(code3);
        return data;
      }
      function atBreak(code3) {
        if (code3 === null) {
          return true;
        }
        const list4 = constructs2[code3];
        let index2 = -1;
        if (list4) {
          while (++index2 < list4.length) {
            const item = list4[index2];
            if (!item.previous || item.previous.call(self2, self2.previous)) {
              return true;
            }
          }
        }
        return false;
      }
    }
  }
  function createResolver2(extraResolver) {
    return resolveAllText;
    function resolveAllText(events, context) {
      let index2 = -1;
      let enter;
      while (++index2 <= events.length) {
        if (enter === void 0) {
          if (events[index2] && events[index2][1].type === "data") {
            enter = index2;
            index2++;
          }
        } else if (!events[index2] || events[index2][1].type !== "data") {
          if (index2 !== enter + 2) {
            events[enter][1].end = events[index2 - 1][1].end;
            events.splice(enter + 2, index2 - enter - 2);
            index2 = enter + 2;
          }
          enter = void 0;
        }
      }
      return extraResolver ? extraResolver(events, context) : events;
    }
  }
  function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0;
    while (++eventIndex <= events.length) {
      if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
        const data = events[eventIndex - 1][1];
        const chunks = context.sliceStream(data);
        let index2 = chunks.length;
        let bufferIndex = -1;
        let size2 = 0;
        let tabs;
        while (index2--) {
          const chunk = chunks[index2];
          if (typeof chunk === "string") {
            bufferIndex = chunk.length;
            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size2++;
              bufferIndex--;
            }
            if (bufferIndex)
              break;
            bufferIndex = -1;
          } else if (chunk === -2) {
            tabs = true;
            size2++;
          } else if (chunk === -1) {
          } else {
            index2++;
            break;
          }
        }
        if (size2) {
          const token = {
            type: eventIndex === events.length || tabs || size2 < 2 ? "lineSuffix" : "hardBreakTrailing",
            start: {
              line: data.end.line,
              column: data.end.column - size2,
              offset: data.end.offset - size2,
              _index: data.start._index + index2,
              _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex
            },
            end: Object.assign({}, data.end)
          };
          data.end = Object.assign({}, token.start);
          if (data.start.offset === data.end.offset) {
            Object.assign(data, token);
          } else {
            events.splice(
              eventIndex,
              0,
              ["enter", token, context],
              ["exit", token, context]
            );
            eventIndex += 2;
          }
        }
        eventIndex++;
      }
    }
    return events;
  }

  // ../ecopan_bot/node_modules/micromark/lib/create-tokenizer.js
  function createTokenizer(parser, initialize, from) {
    let point5 = Object.assign(
      from ? Object.assign({}, from) : {
        line: 1,
        column: 1,
        offset: 0
      },
      {
        _index: 0,
        _bufferIndex: -1
      }
    );
    const columnStart = {};
    const resolveAllConstructs = [];
    let chunks = [];
    let stack = [];
    let consumed = true;
    const effects = {
      consume,
      enter,
      exit: exit3,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true
      })
    };
    const context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write
    };
    let state2 = initialize.tokenize.call(context, effects);
    let expectedCode;
    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }
    return context;
    function write(slice) {
      chunks = push(chunks, slice);
      main();
      if (chunks[chunks.length - 1] !== null) {
        return [];
      }
      addResult(initialize, 0);
      context.events = resolveAll(resolveAllConstructs, context.events, context);
      return context.events;
    }
    function sliceSerialize(token, expandTabs) {
      return serializeChunks(sliceStream(token), expandTabs);
    }
    function sliceStream(token) {
      return sliceChunks(chunks, token);
    }
    function now() {
      return Object.assign({}, point5);
    }
    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    }
    function main() {
      let chunkIndex;
      while (point5._index < chunks.length) {
        const chunk = chunks[point5._index];
        if (typeof chunk === "string") {
          chunkIndex = point5._index;
          if (point5._bufferIndex < 0) {
            point5._bufferIndex = 0;
          }
          while (point5._index === chunkIndex && point5._bufferIndex < chunk.length) {
            go(chunk.charCodeAt(point5._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    function go(code3) {
      consumed = void 0;
      expectedCode = code3;
      state2 = state2(code3);
    }
    function consume(code3) {
      if (markdownLineEnding(code3)) {
        point5.line++;
        point5.column = 1;
        point5.offset += code3 === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code3 !== -1) {
        point5.column++;
        point5.offset++;
      }
      if (point5._bufferIndex < 0) {
        point5._index++;
      } else {
        point5._bufferIndex++;
        if (point5._bufferIndex === chunks[point5._index].length) {
          point5._bufferIndex = -1;
          point5._index++;
        }
      }
      context.previous = code3;
      consumed = true;
    }
    function enter(type, fields) {
      const token = fields || {};
      token.type = type;
      token.start = now();
      context.events.push(["enter", token, context]);
      stack.push(token);
      return token;
    }
    function exit3(type) {
      const token = stack.pop();
      token.end = now();
      context.events.push(["exit", token, context]);
      return token;
    }
    function onsuccessfulconstruct(construct, info) {
      addResult(construct, info.from);
    }
    function onsuccessfulcheck(_, info) {
      info.restore();
    }
    function constructFactory(onreturn, fields) {
      return hook;
      function hook(constructs2, returnState, bogusState) {
        let listOfConstructs;
        let constructIndex;
        let currentConstruct;
        let info;
        return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? handleListOfConstructs([constructs2]) : handleMapOfConstructs(constructs2);
        function handleMapOfConstructs(map2) {
          return start;
          function start(code3) {
            const def = code3 !== null && map2[code3];
            const all5 = code3 !== null && map2.null;
            const list4 = [
              ...Array.isArray(def) ? def : def ? [def] : [],
              ...Array.isArray(all5) ? all5 : all5 ? [all5] : []
            ];
            return handleListOfConstructs(list4)(code3);
          }
        }
        function handleListOfConstructs(list4) {
          listOfConstructs = list4;
          constructIndex = 0;
          if (list4.length === 0) {
            return bogusState;
          }
          return handleConstruct(list4[constructIndex]);
        }
        function handleConstruct(construct) {
          return start;
          function start(code3) {
            info = store();
            currentConstruct = construct;
            if (!construct.partial) {
              context.currentConstruct = construct;
            }
            if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
              return nok(code3);
            }
            return construct.tokenize.call(
              fields ? Object.assign(Object.create(context), fields) : context,
              effects,
              ok2,
              nok
            )(code3);
          }
        }
        function ok2(code3) {
          consumed = true;
          onreturn(currentConstruct, info);
          return returnState;
        }
        function nok(code3) {
          consumed = true;
          info.restore();
          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex]);
          }
          return bogusState;
        }
      }
    }
    function addResult(construct, from2) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }
      if (construct.resolve) {
        splice(
          context.events,
          from2,
          context.events.length - from2,
          construct.resolve(context.events.slice(from2), context)
        );
      }
      if (construct.resolveTo) {
        context.events = construct.resolveTo(context.events, context);
      }
    }
    function store() {
      const startPoint = now();
      const startPrevious = context.previous;
      const startCurrentConstruct = context.currentConstruct;
      const startEventsIndex = context.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex
      };
      function restore() {
        point5 = startPoint;
        context.previous = startPrevious;
        context.currentConstruct = startCurrentConstruct;
        context.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
    }
    function accountForPotentialSkip() {
      if (point5.line in columnStart && point5.column < 2) {
        point5.column = columnStart[point5.line];
        point5.offset += columnStart[point5.line] - 1;
      }
    }
  }
  function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    let view;
    if (startIndex === endIndex) {
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);
      if (startBufferIndex > -1) {
        view[0] = view[0].slice(startBufferIndex);
      }
      if (endBufferIndex > 0) {
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }
    return view;
  }
  function serializeChunks(chunks, expandTabs) {
    let index2 = -1;
    const result = [];
    let atTab;
    while (++index2 < chunks.length) {
      const chunk = chunks[index2];
      let value;
      if (typeof chunk === "string") {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = "\r";
            break;
          }
          case -4: {
            value = "\n";
            break;
          }
          case -3: {
            value = "\r\n";
            break;
          }
          case -2: {
            value = expandTabs ? " " : "	";
            break;
          }
          case -1: {
            if (!expandTabs && atTab)
              continue;
            value = " ";
            break;
          }
          default: {
            value = String.fromCharCode(chunk);
          }
        }
      atTab = chunk === -2;
      result.push(value);
    }
    return result.join("");
  }

  // ../ecopan_bot/node_modules/micromark/lib/constructs.js
  var constructs_exports = {};
  __export(constructs_exports, {
    attentionMarkers: () => attentionMarkers,
    contentInitial: () => contentInitial,
    disable: () => disable,
    document: () => document3,
    flow: () => flow2,
    flowInitial: () => flowInitial,
    insideSpan: () => insideSpan,
    string: () => string2,
    text: () => text4
  });
  var document3 = {
    [42]: list2,
    [43]: list2,
    [45]: list2,
    [48]: list2,
    [49]: list2,
    [50]: list2,
    [51]: list2,
    [52]: list2,
    [53]: list2,
    [54]: list2,
    [55]: list2,
    [56]: list2,
    [57]: list2,
    [62]: blockQuote
  };
  var contentInitial = {
    [91]: definition
  };
  var flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
  };
  var flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [setextUnderline, thematicBreak],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced
  };
  var string2 = {
    [38]: characterReference,
    [92]: characterEscape
  };
  var text4 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
  };
  var insideSpan = {
    null: [attention, resolver]
  };
  var attentionMarkers = {
    null: [42, 95]
  };
  var disable = {
    null: []
  };

  // ../ecopan_bot/node_modules/micromark/lib/parse.js
  function parse4(options = {}) {
    const constructs2 = combineExtensions(
      [constructs_exports].concat(options.extensions || [])
    );
    const parser = {
      defined: [],
      lazy: {},
      constructs: constructs2,
      content: create2(content2),
      document: create2(document2),
      flow: create2(flow),
      string: create2(string),
      text: create2(text3)
    };
    return parser;
    function create2(initial) {
      return creator;
      function creator(from) {
        return createTokenizer(parser, initial, from);
      }
    }
  }

  // ../ecopan_bot/node_modules/micromark/lib/preprocess.js
  var search2 = /[\0\t\n\r]/g;
  function preprocess() {
    let column = 1;
    let buffer2 = "";
    let start = true;
    let atCarriageReturn;
    return preprocessor;
    function preprocessor(value, encoding, end) {
      const chunks = [];
      let match;
      let next;
      let startPosition;
      let endPosition;
      let code3;
      value = buffer2 + value.toString(encoding);
      startPosition = 0;
      buffer2 = "";
      if (start) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }
        start = void 0;
      }
      while (startPosition < value.length) {
        search2.lastIndex = startPosition;
        match = search2.exec(value);
        endPosition = match && match.index !== void 0 ? match.index : value.length;
        code3 = value.charCodeAt(endPosition);
        if (!match) {
          buffer2 = value.slice(startPosition);
          break;
        }
        if (code3 === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = void 0;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = void 0;
          }
          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column += endPosition - startPosition;
          }
          switch (code3) {
            case 0: {
              chunks.push(65533);
              column++;
              break;
            }
            case 9: {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);
              while (column++ < next)
                chunks.push(-1);
              break;
            }
            case 10: {
              chunks.push(-4);
              column = 1;
              break;
            }
            default: {
              atCarriageReturn = true;
              column = 1;
            }
          }
        }
        startPosition = endPosition + 1;
      }
      if (end) {
        if (atCarriageReturn)
          chunks.push(-5);
        if (buffer2)
          chunks.push(buffer2);
        chunks.push(null);
      }
      return chunks;
    }
  }

  // ../ecopan_bot/node_modules/micromark/lib/postprocess.js
  function postprocess(events) {
    while (!subtokenize(events)) {
    }
    return events;
  }

  // ../ecopan_bot/node_modules/mdast-util-from-markdown/lib/index.js
  var own8 = {}.hasOwnProperty;
  var fromMarkdown = function(value, encoding, options) {
    if (typeof encoding !== "string") {
      options = encoding;
      encoding = void 0;
    }
    return compiler(options)(
      postprocess(
        parse4(options).document().write(preprocess()(value, encoding, true))
      )
    );
  };
  function compiler(options) {
    const config2 = {
      transforms: [],
      canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
      enter: {
        autolink: opener(link2),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading2),
        blockQuote: opener(blockQuote2),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer2,
        codeFencedFenceMeta: buffer2,
        codeIndented: opener(codeFlow, buffer2),
        codeText: opener(codeText2, buffer2),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition2),
        definitionDestinationString: buffer2,
        definitionLabelString: buffer2,
        definitionTitleString: buffer2,
        emphasis: opener(emphasis2),
        hardBreakEscape: opener(hardBreak2),
        hardBreakTrailing: opener(hardBreak2),
        htmlFlow: opener(html4, buffer2),
        htmlFlowData: onenterdata,
        htmlText: opener(html4, buffer2),
        htmlTextData: onenterdata,
        image: opener(image2),
        label: buffer2,
        link: opener(link2),
        listItem: opener(listItem3),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list4, onenterlistordered),
        listUnordered: opener(list4),
        paragraph: opener(paragraph2),
        reference: onenterreference,
        referenceString: buffer2,
        resourceDestinationString: buffer2,
        resourceTitleString: buffer2,
        setextHeading: opener(heading2),
        strong: opener(strong2),
        thematicBreak: opener(thematicBreak3)
      },
      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer()
      }
    };
    configure(config2, (options || {}).mdastExtensions || []);
    const data = {};
    return compile;
    function compile(events) {
      let tree = {
        type: "root",
        children: []
      };
      const context = {
        stack: [tree],
        tokenStack: [],
        config: config2,
        enter,
        exit: exit3,
        buffer: buffer2,
        resume,
        setData,
        getData
      };
      const listStack = [];
      let index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
          if (events[index2][0] === "enter") {
            listStack.push(index2);
          } else {
            const tail = listStack.pop();
            index2 = prepareList(events, tail, index2);
          }
        }
      }
      index2 = -1;
      while (++index2 < events.length) {
        const handler = config2[events[index2][0]];
        if (own8.call(handler, events[index2][1].type)) {
          handler[events[index2][1].type].call(
            Object.assign(
              {
                sliceSerialize: events[index2][2].sliceSerialize
              },
              context
            ),
            events[index2][1]
          );
        }
      }
      if (context.tokenStack.length > 0) {
        const tail = context.tokenStack[context.tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context, void 0, tail[0]);
      }
      tree.position = {
        start: point4(
          events.length > 0 ? events[0][1].start : {
            line: 1,
            column: 1,
            offset: 0
          }
        ),
        end: point4(
          events.length > 0 ? events[events.length - 2][1].end : {
            line: 1,
            column: 1,
            offset: 0
          }
        )
      };
      index2 = -1;
      while (++index2 < config2.transforms.length) {
        tree = config2.transforms[index2](tree) || tree;
      }
      return tree;
    }
    function prepareList(events, start, length) {
      let index2 = start - 1;
      let containerBalance = -1;
      let listSpread = false;
      let listItem4;
      let lineIndex;
      let firstBlankLineIndex;
      let atMarker;
      while (++index2 <= length) {
        const event = events[index2];
        if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
        } else if (event[1].type === "lineEndingBlank") {
          if (event[0] === "enter") {
            if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index2;
            }
            atMarker = void 0;
          }
        } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace") {
        } else {
          atMarker = void 0;
        }
        if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
          if (listItem4) {
            let tailIndex = index2;
            lineIndex = void 0;
            while (tailIndex--) {
              const tailEvent = events[tailIndex];
              if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                if (tailEvent[0] === "exit")
                  continue;
                if (lineIndex) {
                  events[lineIndex][1].type = "lineEndingBlank";
                  listSpread = true;
                }
                tailEvent[1].type = "lineEnding";
                lineIndex = tailIndex;
              } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
              } else {
                break;
              }
            }
            if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
              listItem4._spread = true;
            }
            listItem4.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end
            );
            events.splice(lineIndex || index2, 0, ["exit", listItem4, event[2]]);
            index2++;
            length++;
          }
          if (event[1].type === "listItemPrefix") {
            listItem4 = {
              type: "listItem",
              _spread: false,
              start: Object.assign({}, event[1].start)
            };
            events.splice(index2, 0, ["enter", listItem4, event[2]]);
            index2++;
            length++;
            firstBlankLineIndex = void 0;
            atMarker = true;
          }
        }
      }
      events[start][1]._spread = listSpread;
      return length;
    }
    function setData(key, value) {
      data[key] = value;
    }
    function getData(key) {
      return data[key];
    }
    function opener(create2, and) {
      return open;
      function open(token) {
        enter.call(this, create2(token), token);
        if (and)
          and.call(this, token);
      }
    }
    function buffer2() {
      this.stack.push({
        type: "fragment",
        children: []
      });
    }
    function enter(node2, token, errorHandler) {
      const parent = this.stack[this.stack.length - 1];
      parent.children.push(node2);
      this.stack.push(node2);
      this.tokenStack.push([token, errorHandler]);
      node2.position = {
        start: point4(token.start)
      };
      return node2;
    }
    function closer(and) {
      return close;
      function close(token) {
        if (and)
          and.call(this, token);
        exit3.call(this, token);
      }
    }
    function exit3(token, onExitError) {
      const node2 = this.stack.pop();
      const open = this.tokenStack.pop();
      if (!open) {
        throw new Error(
          "Cannot close `" + token.type + "` (" + stringifyPosition({
            start: token.start,
            end: token.end
          }) + "): it\u2019s not open"
        );
      } else if (open[0].type !== token.type) {
        if (onExitError) {
          onExitError.call(this, token, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token, open[0]);
        }
      }
      node2.position.end = point4(token.end);
      return node2;
    }
    function resume() {
      return toString(this.stack.pop());
    }
    function onenterlistordered() {
      setData("expectingFirstListItemValue", true);
    }
    function onenterlistitemvalue(token) {
      if (getData("expectingFirstListItemValue")) {
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
        setData("expectingFirstListItemValue");
      }
    }
    function onexitcodefencedfenceinfo() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.lang = data2;
    }
    function onexitcodefencedfencemeta() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.meta = data2;
    }
    function onexitcodefencedfence() {
      if (getData("flowCodeInside"))
        return;
      this.buffer();
      setData("flowCodeInside", true);
    }
    function onexitcodefenced() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
      setData("flowCodeInside");
    }
    function onexitcodeindented() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2.replace(/(\r?\n|\r)$/g, "");
    }
    function onexitdefinitionlabelstring(token) {
      const label = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.label = label;
      node2.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
    }
    function onexitdefinitiontitlestring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.title = data2;
    }
    function onexitdefinitiondestinationstring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.url = data2;
    }
    function onexitatxheadingsequence(token) {
      const node2 = this.stack[this.stack.length - 1];
      if (!node2.depth) {
        const depth = this.sliceSerialize(token).length;
        node2.depth = depth;
      }
    }
    function onexitsetextheadingtext() {
      setData("setextHeadingSlurpLineEnding", true);
    }
    function onexitsetextheadinglinesequence(token) {
      const node2 = this.stack[this.stack.length - 1];
      node2.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
    }
    function onexitsetextheading() {
      setData("setextHeadingSlurpLineEnding");
    }
    function onenterdata(token) {
      const node2 = this.stack[this.stack.length - 1];
      let tail = node2.children[node2.children.length - 1];
      if (!tail || tail.type !== "text") {
        tail = text6();
        tail.position = {
          start: point4(token.start)
        };
        node2.children.push(tail);
      }
      this.stack.push(tail);
    }
    function onexitdata(token) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token);
      tail.position.end = point4(token.end);
    }
    function onexitlineending(token) {
      const context = this.stack[this.stack.length - 1];
      if (getData("atHardBreak")) {
        const tail = context.children[context.children.length - 1];
        tail.position.end = point4(token.end);
        setData("atHardBreak");
        return;
      }
      if (!getData("setextHeadingSlurpLineEnding") && config2.canContainEols.includes(context.type)) {
        onenterdata.call(this, token);
        onexitdata.call(this, token);
      }
    }
    function onexithardbreak() {
      setData("atHardBreak", true);
    }
    function onexithtmlflow() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    function onexithtmltext() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    function onexitcodetext() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    function onexitlink() {
      const node2 = this.stack[this.stack.length - 1];
      if (getData("inReference")) {
        const referenceType = getData("referenceType") || "shortcut";
        node2.type += "Reference";
        node2.referenceType = referenceType;
        delete node2.url;
        delete node2.title;
      } else {
        delete node2.identifier;
        delete node2.label;
      }
      setData("referenceType");
    }
    function onexitimage() {
      const node2 = this.stack[this.stack.length - 1];
      if (getData("inReference")) {
        const referenceType = getData("referenceType") || "shortcut";
        node2.type += "Reference";
        node2.referenceType = referenceType;
        delete node2.url;
        delete node2.title;
      } else {
        delete node2.identifier;
        delete node2.label;
      }
      setData("referenceType");
    }
    function onexitlabeltext(token) {
      const string3 = this.sliceSerialize(token);
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.label = decodeString(string3);
      ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
    }
    function onexitlabel() {
      const fragment2 = this.stack[this.stack.length - 1];
      const value = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      setData("inReference", true);
      if (node2.type === "link") {
        const children = fragment2.children;
        node2.children = children;
      } else {
        node2.alt = value;
      }
    }
    function onexitresourcedestinationstring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.url = data2;
    }
    function onexitresourcetitlestring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.title = data2;
    }
    function onexitresource() {
      setData("inReference");
    }
    function onenterreference() {
      setData("referenceType", "collapsed");
    }
    function onexitreferencestring(token) {
      const label = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.label = label;
      node2.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
      setData("referenceType", "full");
    }
    function onexitcharacterreferencemarker(token) {
      setData("characterReferenceType", token.type);
    }
    function onexitcharacterreferencevalue(token) {
      const data2 = this.sliceSerialize(token);
      const type = getData("characterReferenceType");
      let value;
      if (type) {
        value = decodeNumericCharacterReference(
          data2,
          type === "characterReferenceMarkerNumeric" ? 10 : 16
        );
        setData("characterReferenceType");
      } else {
        const result = decodeNamedCharacterReference(data2);
        value = result;
      }
      const tail = this.stack.pop();
      tail.value += value;
      tail.position.end = point4(token.end);
    }
    function onexitautolinkprotocol(token) {
      onexitdata.call(this, token);
      const node2 = this.stack[this.stack.length - 1];
      node2.url = this.sliceSerialize(token);
    }
    function onexitautolinkemail(token) {
      onexitdata.call(this, token);
      const node2 = this.stack[this.stack.length - 1];
      node2.url = "mailto:" + this.sliceSerialize(token);
    }
    function blockQuote2() {
      return {
        type: "blockquote",
        children: []
      };
    }
    function codeFlow() {
      return {
        type: "code",
        lang: null,
        meta: null,
        value: ""
      };
    }
    function codeText2() {
      return {
        type: "inlineCode",
        value: ""
      };
    }
    function definition2() {
      return {
        type: "definition",
        identifier: "",
        label: null,
        title: null,
        url: ""
      };
    }
    function emphasis2() {
      return {
        type: "emphasis",
        children: []
      };
    }
    function heading2() {
      return {
        type: "heading",
        depth: void 0,
        children: []
      };
    }
    function hardBreak2() {
      return {
        type: "break"
      };
    }
    function html4() {
      return {
        type: "html",
        value: ""
      };
    }
    function image2() {
      return {
        type: "image",
        title: null,
        url: "",
        alt: null
      };
    }
    function link2() {
      return {
        type: "link",
        title: null,
        url: "",
        children: []
      };
    }
    function list4(token) {
      return {
        type: "list",
        ordered: token.type === "listOrdered",
        start: null,
        spread: token._spread,
        children: []
      };
    }
    function listItem3(token) {
      return {
        type: "listItem",
        spread: token._spread,
        checked: null,
        children: []
      };
    }
    function paragraph2() {
      return {
        type: "paragraph",
        children: []
      };
    }
    function strong2() {
      return {
        type: "strong",
        children: []
      };
    }
    function text6() {
      return {
        type: "text",
        value: ""
      };
    }
    function thematicBreak3() {
      return {
        type: "thematicBreak"
      };
    }
  }
  function point4(d) {
    return {
      line: d.line,
      column: d.column,
      offset: d.offset
    };
  }
  function configure(combined, extensions) {
    let index2 = -1;
    while (++index2 < extensions.length) {
      const value = extensions[index2];
      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }
  }
  function extension(combined, extension2) {
    let key;
    for (key in extension2) {
      if (own8.call(extension2, key)) {
        if (key === "canContainEols") {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === "transforms") {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === "enter" || key === "exit") {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
        }
      }
    }
  }
  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        "Cannot close `" + left.type + "` (" + stringifyPosition({
          start: left.start,
          end: left.end
        }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is open"
      );
    } else {
      throw new Error(
        "Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is still open"
      );
    }
  }

  // ../ecopan_bot/node_modules/remark-parse/lib/index.js
  function remarkParse(options) {
    const parser = (doc) => {
      const settings = this.data("settings");
      return fromMarkdown(
        doc,
        Object.assign({}, settings, options, {
          extensions: this.data("micromarkExtensions") || [],
          mdastExtensions: this.data("fromMarkdownExtensions") || []
        })
      );
    };
    Object.assign(this, { Parser: parser });
  }

  // ../ecopan_bot/node_modules/remark-parse/index.js
  var remark_parse_default = remarkParse;

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
  function blockquote(state2, node2) {
    const result = {
      type: "element",
      tagName: "blockquote",
      properties: {},
      children: state2.wrap(state2.all(node2), true)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/break.js
  function hardBreak(state2, node2) {
    const result = { type: "element", tagName: "br", properties: {}, children: [] };
    state2.patch(node2, result);
    return [state2.applyData(node2, result), { type: "text", value: "\n" }];
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/code.js
  function code2(state2, node2) {
    const value = node2.value ? node2.value + "\n" : "";
    const lang = node2.lang ? node2.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
    const properties = {};
    if (lang) {
      properties.className = ["language-" + lang];
    }
    let result = {
      type: "element",
      tagName: "code",
      properties,
      children: [{ type: "text", value }]
    };
    if (node2.meta) {
      result.data = { meta: node2.meta };
    }
    state2.patch(node2, result);
    result = state2.applyData(node2, result);
    result = { type: "element", tagName: "pre", properties: {}, children: [result] };
    state2.patch(node2, result);
    return result;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/delete.js
  function strikethrough(state2, node2) {
    const result = {
      type: "element",
      tagName: "del",
      properties: {},
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
  function emphasis(state2, node2) {
    const result = {
      type: "element",
      tagName: "em",
      properties: {},
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
  function footnoteReference2(state2, node2) {
    const id4 = String(node2.identifier).toUpperCase();
    const safeId = normalizeUri(id4.toLowerCase());
    const index2 = state2.footnoteOrder.indexOf(id4);
    let counter2;
    if (index2 === -1) {
      state2.footnoteOrder.push(id4);
      state2.footnoteCounts[id4] = 1;
      counter2 = state2.footnoteOrder.length;
    } else {
      state2.footnoteCounts[id4]++;
      counter2 = index2 + 1;
    }
    const reuseCounter = state2.footnoteCounts[id4];
    const link2 = {
      type: "element",
      tagName: "a",
      properties: {
        href: "#" + state2.clobberPrefix + "fn-" + safeId,
        id: state2.clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
        dataFootnoteRef: true,
        ariaDescribedBy: ["footnote-label"]
      },
      children: [{ type: "text", value: String(counter2) }]
    };
    state2.patch(node2, link2);
    const sup = {
      type: "element",
      tagName: "sup",
      properties: {},
      children: [link2]
    };
    state2.patch(node2, sup);
    return state2.applyData(node2, sup);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/footnote.js
  function footnote(state2, node2) {
    const footnoteById = state2.footnoteById;
    let no = 1;
    while (no in footnoteById)
      no++;
    const identifier = String(no);
    footnoteById[identifier] = {
      type: "footnoteDefinition",
      identifier,
      children: [{ type: "paragraph", children: node2.children }],
      position: node2.position
    };
    return footnoteReference2(state2, {
      type: "footnoteReference",
      identifier,
      position: node2.position
    });
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/heading.js
  function heading(state2, node2) {
    const result = {
      type: "element",
      tagName: "h" + node2.depth,
      properties: {},
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/html.js
  function html3(state2, node2) {
    if (state2.dangerous) {
      const result = { type: "raw", value: node2.value };
      state2.patch(node2, result);
      return state2.applyData(node2, result);
    }
    return null;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/revert.js
  function revert(state2, node2) {
    const subtype = node2.referenceType;
    let suffix = "]";
    if (subtype === "collapsed") {
      suffix += "[]";
    } else if (subtype === "full") {
      suffix += "[" + (node2.label || node2.identifier) + "]";
    }
    if (node2.type === "imageReference") {
      return { type: "text", value: "![" + node2.alt + suffix };
    }
    const contents = state2.all(node2);
    const head = contents[0];
    if (head && head.type === "text") {
      head.value = "[" + head.value;
    } else {
      contents.unshift({ type: "text", value: "[" });
    }
    const tail = contents[contents.length - 1];
    if (tail && tail.type === "text") {
      tail.value += suffix;
    } else {
      contents.push({ type: "text", value: suffix });
    }
    return contents;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
  function imageReference(state2, node2) {
    const def = state2.definition(node2.identifier);
    if (!def) {
      return revert(state2, node2);
    }
    const properties = { src: normalizeUri(def.url || ""), alt: node2.alt };
    if (def.title !== null && def.title !== void 0) {
      properties.title = def.title;
    }
    const result = { type: "element", tagName: "img", properties, children: [] };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/image.js
  function image(state2, node2) {
    const properties = { src: normalizeUri(node2.url) };
    if (node2.alt !== null && node2.alt !== void 0) {
      properties.alt = node2.alt;
    }
    if (node2.title !== null && node2.title !== void 0) {
      properties.title = node2.title;
    }
    const result = { type: "element", tagName: "img", properties, children: [] };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
  function inlineCode2(state2, node2) {
    const text6 = { type: "text", value: node2.value.replace(/\r?\n|\r/g, " ") };
    state2.patch(node2, text6);
    const result = {
      type: "element",
      tagName: "code",
      properties: {},
      children: [text6]
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
  function linkReference(state2, node2) {
    const def = state2.definition(node2.identifier);
    if (!def) {
      return revert(state2, node2);
    }
    const properties = { href: normalizeUri(def.url || "") };
    if (def.title !== null && def.title !== void 0) {
      properties.title = def.title;
    }
    const result = {
      type: "element",
      tagName: "a",
      properties,
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/link.js
  function link(state2, node2) {
    const properties = { href: normalizeUri(node2.url) };
    if (node2.title !== null && node2.title !== void 0) {
      properties.title = node2.title;
    }
    const result = {
      type: "element",
      tagName: "a",
      properties,
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/list-item.js
  function listItem2(state2, node2, parent) {
    const results2 = state2.all(node2);
    const loose = parent ? listLoose(parent) : listItemLoose(node2);
    const properties = {};
    const children = [];
    if (typeof node2.checked === "boolean") {
      const head = results2[0];
      let paragraph2;
      if (head && head.type === "element" && head.tagName === "p") {
        paragraph2 = head;
      } else {
        paragraph2 = { type: "element", tagName: "p", properties: {}, children: [] };
        results2.unshift(paragraph2);
      }
      if (paragraph2.children.length > 0) {
        paragraph2.children.unshift({ type: "text", value: " " });
      }
      paragraph2.children.unshift({
        type: "element",
        tagName: "input",
        properties: { type: "checkbox", checked: node2.checked, disabled: true },
        children: []
      });
      properties.className = ["task-list-item"];
    }
    let index2 = -1;
    while (++index2 < results2.length) {
      const child = results2[index2];
      if (loose || index2 !== 0 || child.type !== "element" || child.tagName !== "p") {
        children.push({ type: "text", value: "\n" });
      }
      if (child.type === "element" && child.tagName === "p" && !loose) {
        children.push(...child.children);
      } else {
        children.push(child);
      }
    }
    const tail = results2[results2.length - 1];
    if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
      children.push({ type: "text", value: "\n" });
    }
    const result = { type: "element", tagName: "li", properties, children };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }
  function listLoose(node2) {
    let loose = false;
    if (node2.type === "list") {
      loose = node2.spread || false;
      const children = node2.children;
      let index2 = -1;
      while (!loose && ++index2 < children.length) {
        loose = listItemLoose(children[index2]);
      }
    }
    return loose;
  }
  function listItemLoose(node2) {
    const spread = node2.spread;
    return spread === void 0 || spread === null ? node2.children.length > 1 : spread;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/list.js
  function list3(state2, node2) {
    const properties = {};
    const results2 = state2.all(node2);
    let index2 = -1;
    if (typeof node2.start === "number" && node2.start !== 1) {
      properties.start = node2.start;
    }
    while (++index2 < results2.length) {
      const child = results2[index2];
      if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
        properties.className = ["contains-task-list"];
        break;
      }
    }
    const result = {
      type: "element",
      tagName: node2.ordered ? "ol" : "ul",
      properties,
      children: state2.wrap(results2, true)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
  function paragraph(state2, node2) {
    const result = {
      type: "element",
      tagName: "p",
      properties: {},
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/root.js
  function root2(state2, node2) {
    const result = { type: "root", children: state2.wrap(state2.all(node2)) };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/strong.js
  function strong(state2, node2) {
    const result = {
      type: "element",
      tagName: "strong",
      properties: {},
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/table.js
  function table(state2, node2) {
    const rows = state2.all(node2);
    const firstRow = rows.shift();
    const tableContent = [];
    if (firstRow) {
      const head = {
        type: "element",
        tagName: "thead",
        properties: {},
        children: state2.wrap([firstRow], true)
      };
      state2.patch(node2.children[0], head);
      tableContent.push(head);
    }
    if (rows.length > 0) {
      const body = {
        type: "element",
        tagName: "tbody",
        properties: {},
        children: state2.wrap(rows, true)
      };
      const start = pointStart(node2.children[1]);
      const end = pointEnd(node2.children[node2.children.length - 1]);
      if (start.line && end.line)
        body.position = { start, end };
      tableContent.push(body);
    }
    const result = {
      type: "element",
      tagName: "table",
      properties: {},
      children: state2.wrap(tableContent, true)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/table-row.js
  function tableRow(state2, node2, parent) {
    const siblings = parent ? parent.children : void 0;
    const rowIndex = siblings ? siblings.indexOf(node2) : 1;
    const tagName = rowIndex === 0 ? "th" : "td";
    const align = parent && parent.type === "table" ? parent.align : void 0;
    const length = align ? align.length : node2.children.length;
    let cellIndex = -1;
    const cells = [];
    while (++cellIndex < length) {
      const cell = node2.children[cellIndex];
      const properties = {};
      const alignValue = align ? align[cellIndex] : void 0;
      if (alignValue) {
        properties.align = alignValue;
      }
      let result2 = { type: "element", tagName, properties, children: [] };
      if (cell) {
        result2.children = state2.all(cell);
        state2.patch(cell, result2);
        result2 = state2.applyData(node2, result2);
      }
      cells.push(result2);
    }
    const result = {
      type: "element",
      tagName: "tr",
      properties: {},
      children: state2.wrap(cells, true)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
  function tableCell(state2, node2) {
    const result = {
      type: "element",
      tagName: "td",
      properties: {},
      children: state2.all(node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/trim-lines/index.js
  var tab = 9;
  var space2 = 32;
  function trimLines(value) {
    const source = String(value);
    const search3 = /\r?\n|\r/g;
    let match = search3.exec(source);
    let last = 0;
    const lines = [];
    while (match) {
      lines.push(
        trimLine(source.slice(last, match.index), last > 0, true),
        match[0]
      );
      last = match.index + match[0].length;
      match = search3.exec(source);
    }
    lines.push(trimLine(source.slice(last), last > 0, false));
    return lines.join("");
  }
  function trimLine(value, start, end) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start) {
      let code3 = value.codePointAt(startIndex);
      while (code3 === tab || code3 === space2) {
        startIndex++;
        code3 = value.codePointAt(startIndex);
      }
    }
    if (end) {
      let code3 = value.codePointAt(endIndex - 1);
      while (code3 === tab || code3 === space2) {
        endIndex--;
        code3 = value.codePointAt(endIndex - 1);
      }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/text.js
  function text5(state2, node2) {
    const result = { type: "text", value: trimLines(String(node2.value)) };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
  function thematicBreak2(state2, node2) {
    const result = {
      type: "element",
      tagName: "hr",
      properties: {},
      children: []
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/handlers/index.js
  var handlers = {
    blockquote,
    break: hardBreak,
    code: code2,
    delete: strikethrough,
    emphasis,
    footnoteReference: footnoteReference2,
    footnote,
    heading,
    html: html3,
    imageReference,
    image,
    inlineCode: inlineCode2,
    linkReference,
    link,
    listItem: listItem2,
    list: list3,
    paragraph,
    root: root2,
    strong,
    table,
    tableCell,
    tableRow,
    text: text5,
    thematicBreak: thematicBreak2,
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
  };
  function ignore() {
    return null;
  }

  // ../ecopan_bot/node_modules/unist-util-generated/lib/index.js
  function generated(node2) {
    return !node2 || !node2.position || !node2.position.start || !node2.position.start.line || !node2.position.start.column || !node2.position.end || !node2.position.end.line || !node2.position.end.column;
  }

  // ../ecopan_bot/node_modules/mdast-util-definitions/lib/index.js
  var own9 = {}.hasOwnProperty;
  function definitions(tree) {
    const cache = /* @__PURE__ */ Object.create(null);
    if (!tree || !tree.type) {
      throw new Error("mdast-util-definitions expected node");
    }
    visit(tree, "definition", (definition3) => {
      const id4 = clean(definition3.identifier);
      if (id4 && !own9.call(cache, id4)) {
        cache[id4] = definition3;
      }
    });
    return definition2;
    function definition2(identifier) {
      const id4 = clean(identifier);
      return id4 && own9.call(cache, id4) ? cache[id4] : null;
    }
  }
  function clean(value) {
    return String(value || "").toUpperCase();
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/state.js
  var own10 = {}.hasOwnProperty;
  function createState2(tree, options) {
    const settings = options || {};
    const dangerous = settings.allowDangerousHtml || false;
    const footnoteById = {};
    state2.dangerous = dangerous;
    state2.clobberPrefix = settings.clobberPrefix === void 0 || settings.clobberPrefix === null ? "user-content-" : settings.clobberPrefix;
    state2.footnoteLabel = settings.footnoteLabel || "Footnotes";
    state2.footnoteLabelTagName = settings.footnoteLabelTagName || "h2";
    state2.footnoteLabelProperties = settings.footnoteLabelProperties || {
      className: ["sr-only"]
    };
    state2.footnoteBackLabel = settings.footnoteBackLabel || "Back to content";
    state2.unknownHandler = settings.unknownHandler;
    state2.passThrough = settings.passThrough;
    state2.handlers = __spreadValues(__spreadValues({}, handlers), settings.handlers);
    state2.definition = definitions(tree);
    state2.footnoteById = footnoteById;
    state2.footnoteOrder = [];
    state2.footnoteCounts = {};
    state2.patch = patch3;
    state2.applyData = applyData;
    state2.one = oneBound;
    state2.all = allBound;
    state2.wrap = wrap3;
    state2.augment = augment;
    visit(tree, "footnoteDefinition", (definition2) => {
      const id4 = String(definition2.identifier).toUpperCase();
      if (!own10.call(footnoteById, id4)) {
        footnoteById[id4] = definition2;
      }
    });
    return state2;
    function augment(left, right) {
      if (left && "data" in left && left.data) {
        const data = left.data;
        if (data.hName) {
          if (right.type !== "element") {
            right = {
              type: "element",
              tagName: "",
              properties: {},
              children: []
            };
          }
          right.tagName = data.hName;
        }
        if (right.type === "element" && data.hProperties) {
          right.properties = __spreadValues(__spreadValues({}, right.properties), data.hProperties);
        }
        if ("children" in right && right.children && data.hChildren) {
          right.children = data.hChildren;
        }
      }
      if (left) {
        const ctx = "type" in left ? left : { position: left };
        if (!generated(ctx)) {
          right.position = { start: pointStart(ctx), end: pointEnd(ctx) };
        }
      }
      return right;
    }
    function state2(node2, tagName, props, children) {
      if (Array.isArray(props)) {
        children = props;
        props = {};
      }
      return augment(node2, {
        type: "element",
        tagName,
        properties: props || {},
        children: children || []
      });
    }
    function oneBound(node2, parent) {
      return one4(state2, node2, parent);
    }
    function allBound(parent) {
      return all4(state2, parent);
    }
  }
  function patch3(from, to) {
    if (from.position)
      to.position = position2(from);
  }
  function applyData(from, to) {
    let result = to;
    if (from && from.data) {
      const hName = from.data.hName;
      const hChildren = from.data.hChildren;
      const hProperties = from.data.hProperties;
      if (typeof hName === "string") {
        if (result.type === "element") {
          result.tagName = hName;
        } else {
          result = {
            type: "element",
            tagName: hName,
            properties: {},
            children: []
          };
        }
      }
      if (result.type === "element" && hProperties) {
        result.properties = __spreadValues(__spreadValues({}, result.properties), hProperties);
      }
      if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
        result.children = hChildren;
      }
    }
    return result;
  }
  function one4(state2, node2, parent) {
    const type = node2 && node2.type;
    if (!type) {
      throw new Error("Expected node, got `" + node2 + "`");
    }
    if (own10.call(state2.handlers, type)) {
      return state2.handlers[type](state2, node2, parent);
    }
    if (state2.passThrough && state2.passThrough.includes(type)) {
      return "children" in node2 ? __spreadProps(__spreadValues({}, node2), { children: all4(state2, node2) }) : node2;
    }
    if (state2.unknownHandler) {
      return state2.unknownHandler(state2, node2, parent);
    }
    return defaultUnknownHandler(state2, node2);
  }
  function all4(state2, parent) {
    const values = [];
    if ("children" in parent) {
      const nodes = parent.children;
      let index2 = -1;
      while (++index2 < nodes.length) {
        const result = one4(state2, nodes[index2], parent);
        if (result) {
          if (index2 && nodes[index2 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = result.value.replace(/^\s+/, "");
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = head.value.replace(/^\s+/, "");
              }
            }
          }
          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }
    return values;
  }
  function defaultUnknownHandler(state2, node2) {
    const data = node2.data || {};
    const result = "value" in node2 && !(own10.call(data, "hProperties") || own10.call(data, "hChildren")) ? { type: "text", value: node2.value } : {
      type: "element",
      tagName: "div",
      properties: {},
      children: all4(state2, node2)
    };
    state2.patch(node2, result);
    return state2.applyData(node2, result);
  }
  function wrap3(nodes, loose) {
    const result = [];
    let index2 = -1;
    if (loose) {
      result.push({ type: "text", value: "\n" });
    }
    while (++index2 < nodes.length) {
      if (index2)
        result.push({ type: "text", value: "\n" });
      result.push(nodes[index2]);
    }
    if (loose && nodes.length > 0) {
      result.push({ type: "text", value: "\n" });
    }
    return result;
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/footer.js
  function footer(state2) {
    const listItems = [];
    let index2 = -1;
    while (++index2 < state2.footnoteOrder.length) {
      const def = state2.footnoteById[state2.footnoteOrder[index2]];
      if (!def) {
        continue;
      }
      const content3 = state2.all(def);
      const id4 = String(def.identifier).toUpperCase();
      const safeId = normalizeUri(id4.toLowerCase());
      let referenceIndex = 0;
      const backReferences = [];
      while (++referenceIndex <= state2.footnoteCounts[id4]) {
        const backReference = {
          type: "element",
          tagName: "a",
          properties: {
            href: "#" + state2.clobberPrefix + "fnref-" + safeId + (referenceIndex > 1 ? "-" + referenceIndex : ""),
            dataFootnoteBackref: true,
            className: ["data-footnote-backref"],
            ariaLabel: state2.footnoteBackLabel
          },
          children: [{ type: "text", value: "\u21A9" }]
        };
        if (referenceIndex > 1) {
          backReference.children.push({
            type: "element",
            tagName: "sup",
            children: [{ type: "text", value: String(referenceIndex) }]
          });
        }
        if (backReferences.length > 0) {
          backReferences.push({ type: "text", value: " " });
        }
        backReferences.push(backReference);
      }
      const tail = content3[content3.length - 1];
      if (tail && tail.type === "element" && tail.tagName === "p") {
        const tailTail = tail.children[tail.children.length - 1];
        if (tailTail && tailTail.type === "text") {
          tailTail.value += " ";
        } else {
          tail.children.push({ type: "text", value: " " });
        }
        tail.children.push(...backReferences);
      } else {
        content3.push(...backReferences);
      }
      const listItem3 = {
        type: "element",
        tagName: "li",
        properties: { id: state2.clobberPrefix + "fn-" + safeId },
        children: state2.wrap(content3, true)
      };
      state2.patch(def, listItem3);
      listItems.push(listItem3);
    }
    if (listItems.length === 0) {
      return;
    }
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: true, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: state2.footnoteLabelTagName,
          properties: __spreadProps(__spreadValues({}, JSON.parse(JSON.stringify(state2.footnoteLabelProperties))), {
            id: "footnote-label"
          }),
          children: [{ type: "text", value: state2.footnoteLabel }]
        },
        { type: "text", value: "\n" },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: state2.wrap(listItems, true)
        },
        { type: "text", value: "\n" }
      ]
    };
  }

  // ../ecopan_bot/node_modules/mdast-util-to-hast/lib/index.js
  function toHast(tree, options) {
    const state2 = createState2(tree, options);
    const node2 = state2.one(tree, null);
    const foot = footer(state2);
    if (foot) {
      node2.children.push({ type: "text", value: "\n" }, foot);
    }
    return Array.isArray(node2) ? { type: "root", children: node2 } : node2;
  }

  // ../ecopan_bot/node_modules/remark-rehype/lib/index.js
  var remarkRehype = function(destination, options) {
    return destination && "run" in destination ? bridge(destination, options) : mutate(destination || options);
  };
  var lib_default = remarkRehype;
  function bridge(destination, options) {
    return (node2, file, next) => {
      destination.run(toHast(node2, options), file, (error2) => {
        next(error2);
      });
    };
  }
  function mutate(options) {
    return (node2) => toHast(node2, options);
  }

  // ../ecopan_bot/node_modules/react-markdown/lib/react-markdown.js
  var import_prop_types = __toESM(require_prop_types(), 1);

  // ../ecopan_bot/node_modules/react-markdown/lib/rehype-filter.js
  function rehypeFilter(options) {
    if (options.allowedElements && options.disallowedElements) {
      throw new TypeError(
        "Only one of `allowedElements` and `disallowedElements` should be defined"
      );
    }
    if (options.allowedElements || options.disallowedElements || options.allowElement) {
      return (tree) => {
        visit(tree, "element", (node2, index2, parent_) => {
          const parent = parent_;
          let remove;
          if (options.allowedElements) {
            remove = !options.allowedElements.includes(node2.tagName);
          } else if (options.disallowedElements) {
            remove = options.disallowedElements.includes(node2.tagName);
          }
          if (!remove && options.allowElement && typeof index2 === "number") {
            remove = !options.allowElement(node2, index2, parent);
          }
          if (remove && typeof index2 === "number") {
            if (options.unwrapDisallowed && node2.children) {
              parent.children.splice(index2, 1, ...node2.children);
            } else {
              parent.children.splice(index2, 1);
            }
            return index2;
          }
          return void 0;
        });
      };
    }
  }

  // ../ecopan_bot/node_modules/react-markdown/lib/ast-to-react.js
  var import_react64 = __toESM(require_react(), 1);
  var import_react_is = __toESM(require_react_is2(), 1);

  // ../ecopan_bot/node_modules/hast-util-whitespace/index.js
  function whitespace(thing) {
    const value = thing && typeof thing === "object" && thing.type === "text" ? thing.value || "" : thing;
    return typeof value === "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
  }

  // ../ecopan_bot/node_modules/style-to-object/index.mjs
  var import_index4 = __toESM(require_style_to_object(), 1);
  var style_to_object_default = import_index4.default;

  // ../ecopan_bot/node_modules/react-markdown/lib/ast-to-react.js
  var own11 = {}.hasOwnProperty;
  var tableElements = /* @__PURE__ */ new Set(["table", "thead", "tbody", "tfoot", "tr"]);
  function childrenToReact(context, node2) {
    const children = [];
    let childIndex = -1;
    let child;
    while (++childIndex < node2.children.length) {
      child = node2.children[childIndex];
      if (child.type === "element") {
        children.push(toReact(context, child, childIndex, node2));
      } else if (child.type === "text") {
        if (node2.type !== "element" || !tableElements.has(node2.tagName) || !whitespace(child)) {
          children.push(child.value);
        }
      } else if (child.type === "raw" && !context.options.skipHtml) {
        children.push(child.value);
      }
    }
    return children;
  }
  function toReact(context, node2, index2, parent) {
    const options = context.options;
    const transform2 = options.transformLinkUri === void 0 ? uriTransformer : options.transformLinkUri;
    const parentSchema = context.schema;
    const name = node2.tagName;
    const properties = {};
    let schema = parentSchema;
    let property;
    if (parentSchema.space === "html" && name === "svg") {
      schema = svg2;
      context.schema = schema;
    }
    if (node2.properties) {
      for (property in node2.properties) {
        if (own11.call(node2.properties, property)) {
          addProperty2(properties, property, node2.properties[property], context);
        }
      }
    }
    if (name === "ol" || name === "ul") {
      context.listDepth++;
    }
    const children = childrenToReact(context, node2);
    if (name === "ol" || name === "ul") {
      context.listDepth--;
    }
    context.schema = parentSchema;
    const position5 = node2.position || {
      start: { line: null, column: null, offset: null },
      end: { line: null, column: null, offset: null }
    };
    const component = options.components && own11.call(options.components, name) ? options.components[name] : name;
    const basic = typeof component === "string" || component === import_react64.default.Fragment;
    if (!import_react_is.default.isValidElementType(component)) {
      throw new TypeError(
        `Component for name \`${name}\` not defined or is not renderable`
      );
    }
    properties.key = [
      name,
      position5.start.line,
      position5.start.column,
      index2
    ].join("-");
    if (name === "a" && options.linkTarget) {
      properties.target = typeof options.linkTarget === "function" ? options.linkTarget(
        String(properties.href || ""),
        node2.children,
        typeof properties.title === "string" ? properties.title : null
      ) : options.linkTarget;
    }
    if (name === "a" && transform2) {
      properties.href = transform2(
        String(properties.href || ""),
        node2.children,
        typeof properties.title === "string" ? properties.title : null
      );
    }
    if (!basic && name === "code" && parent.type === "element" && parent.tagName !== "pre") {
      properties.inline = true;
    }
    if (!basic && (name === "h1" || name === "h2" || name === "h3" || name === "h4" || name === "h5" || name === "h6")) {
      properties.level = Number.parseInt(name.charAt(1), 10);
    }
    if (name === "img" && options.transformImageUri) {
      properties.src = options.transformImageUri(
        String(properties.src || ""),
        String(properties.alt || ""),
        typeof properties.title === "string" ? properties.title : null
      );
    }
    if (!basic && name === "li" && parent.type === "element") {
      const input = getInputElement(node2);
      properties.checked = input && input.properties ? Boolean(input.properties.checked) : null;
      properties.index = getElementsBeforeCount(parent, node2);
      properties.ordered = parent.tagName === "ol";
    }
    if (!basic && (name === "ol" || name === "ul")) {
      properties.ordered = name === "ol";
      properties.depth = context.listDepth;
    }
    if (name === "td" || name === "th") {
      if (properties.align) {
        if (!properties.style)
          properties.style = {};
        properties.style.textAlign = properties.align;
        delete properties.align;
      }
      if (!basic) {
        properties.isHeader = name === "th";
      }
    }
    if (!basic && name === "tr" && parent.type === "element") {
      properties.isHeader = Boolean(parent.tagName === "thead");
    }
    if (options.sourcePos) {
      properties["data-sourcepos"] = flattenPosition(position5);
    }
    if (!basic && options.rawSourcePos) {
      properties.sourcePosition = node2.position;
    }
    if (!basic && options.includeElementIndex) {
      properties.index = getElementsBeforeCount(parent, node2);
      properties.siblingCount = getElementsBeforeCount(parent);
    }
    if (!basic) {
      properties.node = node2;
    }
    return children.length > 0 ? import_react64.default.createElement(component, properties, children) : import_react64.default.createElement(component, properties);
  }
  function getInputElement(node2) {
    let index2 = -1;
    while (++index2 < node2.children.length) {
      const child = node2.children[index2];
      if (child.type === "element" && child.tagName === "input") {
        return child;
      }
    }
    return null;
  }
  function getElementsBeforeCount(parent, node2) {
    let index2 = -1;
    let count = 0;
    while (++index2 < parent.children.length) {
      if (parent.children[index2] === node2)
        break;
      if (parent.children[index2].type === "element")
        count++;
    }
    return count;
  }
  function addProperty2(props, prop, value, ctx) {
    const info = find(ctx.schema, prop);
    let result = value;
    if (result === null || result === void 0 || result !== result) {
      return;
    }
    if (Array.isArray(result)) {
      result = info.commaSeparated ? stringify2(result) : stringify(result);
    }
    if (info.property === "style" && typeof result === "string") {
      result = parseStyle(result);
    }
    if (info.space && info.property) {
      props[own11.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;
    } else if (info.attribute) {
      props[info.attribute] = result;
    }
  }
  function parseStyle(value) {
    const result = {};
    try {
      style_to_object_default(value, iterator);
    } catch (e) {
    }
    return result;
    function iterator(name, v) {
      const k = name.slice(0, 4) === "-ms-" ? `ms-${name.slice(4)}` : name;
      result[k.replace(/-([a-z])/g, styleReplacer)] = v;
    }
  }
  function styleReplacer(_, $1) {
    return $1.toUpperCase();
  }
  function flattenPosition(pos) {
    return [
      pos.start.line,
      ":",
      pos.start.column,
      "-",
      pos.end.line,
      ":",
      pos.end.column
    ].map(String).join("");
  }

  // ../ecopan_bot/node_modules/react-markdown/lib/react-markdown.js
  var own12 = {}.hasOwnProperty;
  var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
  var deprecated = {
    plugins: { to: "remarkPlugins", id: "change-plugins-to-remarkplugins" },
    renderers: { to: "components", id: "change-renderers-to-components" },
    astPlugins: { id: "remove-buggy-html-in-markdown-parser" },
    allowDangerousHtml: { id: "remove-buggy-html-in-markdown-parser" },
    escapeHtml: { id: "remove-buggy-html-in-markdown-parser" },
    source: { to: "children", id: "change-source-to-children" },
    allowNode: {
      to: "allowElement",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    allowedTypes: {
      to: "allowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    disallowedTypes: {
      to: "disallowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    includeNodeIndex: {
      to: "includeElementIndex",
      id: "change-includenodeindex-to-includeelementindex"
    }
  };
  function ReactMarkdown(options) {
    for (const key in deprecated) {
      if (own12.call(deprecated, key) && own12.call(options, key)) {
        const deprecation = deprecated[key];
        console.warn(
          `[react-markdown] Warning: please ${deprecation.to ? `use \`${deprecation.to}\` instead of` : "remove"} \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`
        );
        delete deprecated[key];
      }
    }
    const processor = unified().use(remark_parse_default).use(options.remarkPlugins || []).use(lib_default, __spreadProps(__spreadValues({}, options.remarkRehypeOptions), {
      allowDangerousHtml: true
    })).use(options.rehypePlugins || []).use(rehypeFilter, options);
    const file = new VFile();
    if (typeof options.children === "string") {
      file.value = options.children;
    } else if (options.children !== void 0 && options.children !== null) {
      console.warn(
        `[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`
      );
    }
    const hastNode = processor.runSync(processor.parse(file), file);
    if (hastNode.type !== "root") {
      throw new TypeError("Expected a `root` node");
    }
    let result = import_react65.default.createElement(
      import_react65.default.Fragment,
      {},
      childrenToReact({ options, schema: html2, listDepth: 0 }, hastNode)
    );
    if (options.className) {
      result = import_react65.default.createElement("div", { className: options.className }, result);
    }
    return result;
  }
  ReactMarkdown.propTypes = {
    children: import_prop_types.default.string,
    className: import_prop_types.default.string,
    allowElement: import_prop_types.default.func,
    allowedElements: import_prop_types.default.arrayOf(import_prop_types.default.string),
    disallowedElements: import_prop_types.default.arrayOf(import_prop_types.default.string),
    unwrapDisallowed: import_prop_types.default.bool,
    remarkPlugins: import_prop_types.default.arrayOf(
      import_prop_types.default.oneOfType([
        import_prop_types.default.object,
        import_prop_types.default.func,
        import_prop_types.default.arrayOf(
          import_prop_types.default.oneOfType([
            import_prop_types.default.bool,
            import_prop_types.default.string,
            import_prop_types.default.object,
            import_prop_types.default.func,
            import_prop_types.default.arrayOf(
              import_prop_types.default.any
            )
          ])
        )
      ])
    ),
    rehypePlugins: import_prop_types.default.arrayOf(
      import_prop_types.default.oneOfType([
        import_prop_types.default.object,
        import_prop_types.default.func,
        import_prop_types.default.arrayOf(
          import_prop_types.default.oneOfType([
            import_prop_types.default.bool,
            import_prop_types.default.string,
            import_prop_types.default.object,
            import_prop_types.default.func,
            import_prop_types.default.arrayOf(
              import_prop_types.default.any
            )
          ])
        )
      ])
    ),
    sourcePos: import_prop_types.default.bool,
    rawSourcePos: import_prop_types.default.bool,
    skipHtml: import_prop_types.default.bool,
    includeElementIndex: import_prop_types.default.bool,
    transformLinkUri: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.bool]),
    linkTarget: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]),
    transformImageUri: import_prop_types.default.func,
    components: import_prop_types.default.object
  };

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // ../ecopan_bot/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/highlight.js
  var import_react67 = __toESM(require_react());

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/create-element.js
  var import_react66 = __toESM(require_react());
  function ownKeys(object, enumerableOnly) {
    var keys3 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys3.push.apply(keys3, symbols);
    }
    return keys3;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  function powerSetPermutations(arr) {
    var arrLength = arr.length;
    if (arrLength === 0 || arrLength === 1)
      return arr;
    if (arrLength === 2) {
      return [arr[0], arr[1], "".concat(arr[0], ".").concat(arr[1]), "".concat(arr[1], ".").concat(arr[0])];
    }
    if (arrLength === 3) {
      return [arr[0], arr[1], arr[2], "".concat(arr[0], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[2]), "".concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[0])];
    }
    if (arrLength >= 4) {
      return [arr[0], arr[1], arr[2], arr[3], "".concat(arr[0], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[3]), "".concat(arr[3], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[1], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[0], ".").concat(arr[2], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[0], ".").concat(arr[3], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[2], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[0], ".").concat(arr[3], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[1], ".").concat(arr[2], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[1], ".").concat(arr[3], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[1], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[0], ".").concat(arr[3], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[0], ".").concat(arr[3]), "".concat(arr[2], ".").concat(arr[1], ".").concat(arr[3], ".").concat(arr[0]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[2], ".").concat(arr[3], ".").concat(arr[1], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[1], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[0], ".").concat(arr[2], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[0], ".").concat(arr[2]), "".concat(arr[3], ".").concat(arr[1], ".").concat(arr[2], ".").concat(arr[0]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[0], ".").concat(arr[1]), "".concat(arr[3], ".").concat(arr[2], ".").concat(arr[1], ".").concat(arr[0])];
    }
  }
  var classNameCombinations = {};
  function getClassNameCombinations(classNames2) {
    if (classNames2.length === 0 || classNames2.length === 1)
      return classNames2;
    var key = classNames2.join(".");
    if (!classNameCombinations[key]) {
      classNameCombinations[key] = powerSetPermutations(classNames2);
    }
    return classNameCombinations[key];
  }
  function createStyleObject(classNames2) {
    var elementStyle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var stylesheet = arguments.length > 2 ? arguments[2] : void 0;
    var nonTokenClassNames = classNames2.filter(function(className) {
      return className !== "token";
    });
    var classNamesCombinations = getClassNameCombinations(nonTokenClassNames);
    return classNamesCombinations.reduce(function(styleObject, className) {
      return _objectSpread(_objectSpread({}, styleObject), stylesheet[className]);
    }, elementStyle);
  }
  function createClassNameString(classNames2) {
    return classNames2.join(" ");
  }
  function createChildren(stylesheet, useInlineStyles) {
    var childrenCount = 0;
    return function(children) {
      childrenCount += 1;
      return children.map(function(child, i) {
        return createElement8({
          node: child,
          stylesheet,
          useInlineStyles,
          key: "code-segment-".concat(childrenCount, "-").concat(i)
        });
      });
    };
  }
  function createElement8(_ref) {
    var node2 = _ref.node, stylesheet = _ref.stylesheet, _ref$style = _ref.style, style2 = _ref$style === void 0 ? {} : _ref$style, useInlineStyles = _ref.useInlineStyles, key = _ref.key;
    var properties = node2.properties, type = node2.type, TagName = node2.tagName, value = node2.value;
    if (type === "text") {
      return value;
    } else if (TagName) {
      var childrenCreator = createChildren(stylesheet, useInlineStyles);
      var props;
      if (!useInlineStyles) {
        props = _objectSpread(_objectSpread({}, properties), {}, {
          className: createClassNameString(properties.className)
        });
      } else {
        var allStylesheetSelectors = Object.keys(stylesheet).reduce(function(classes, selector2) {
          selector2.split(".").forEach(function(className2) {
            if (!classes.includes(className2))
              classes.push(className2);
          });
          return classes;
        }, []);
        var startingClassName = properties.className && properties.className.includes("token") ? ["token"] : [];
        var className = properties.className && startingClassName.concat(properties.className.filter(function(className2) {
          return !allStylesheetSelectors.includes(className2);
        }));
        props = _objectSpread(_objectSpread({}, properties), {}, {
          className: createClassNameString(className) || void 0,
          style: createStyleObject(properties.className, Object.assign({}, properties.style, style2), stylesheet)
        });
      }
      var children = childrenCreator(node2.children);
      return /* @__PURE__ */ import_react66.default.createElement(TagName, _extends({
        key
      }, props), children);
    }
  }

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/checkForListedLanguage.js
  var checkForListedLanguage_default = function(astGenerator, language) {
    var langs = astGenerator.listLanguages();
    return langs.indexOf(language) !== -1;
  };

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/highlight.js
  var _excluded = ["language", "children", "style", "customStyle", "codeTagProps", "useInlineStyles", "showLineNumbers", "showInlineLineNumbers", "startingLineNumber", "lineNumberContainerStyle", "lineNumberStyle", "wrapLines", "wrapLongLines", "lineProps", "renderer", "PreTag", "CodeTag", "code", "astGenerator"];
  function ownKeys2(object, enumerableOnly) {
    var keys3 = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys3.push.apply(keys3, symbols);
    }
    return keys3;
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var newLineRegex = /\n/g;
  function getNewLines(str) {
    return str.match(newLineRegex);
  }
  function getAllLineNumbers(_ref) {
    var lines = _ref.lines, startingLineNumber = _ref.startingLineNumber, style2 = _ref.style;
    return lines.map(function(_, i) {
      var number3 = i + startingLineNumber;
      return /* @__PURE__ */ import_react67.default.createElement("span", {
        key: "line-".concat(i),
        className: "react-syntax-highlighter-line-number",
        style: typeof style2 === "function" ? style2(number3) : style2
      }, "".concat(number3, "\n"));
    });
  }
  function AllLineNumbers(_ref2) {
    var codeString = _ref2.codeString, codeStyle = _ref2.codeStyle, _ref2$containerStyle = _ref2.containerStyle, containerStyle = _ref2$containerStyle === void 0 ? {
      "float": "left",
      paddingRight: "10px"
    } : _ref2$containerStyle, _ref2$numberStyle = _ref2.numberStyle, numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle, startingLineNumber = _ref2.startingLineNumber;
    return /* @__PURE__ */ import_react67.default.createElement("code", {
      style: Object.assign({}, codeStyle, containerStyle)
    }, getAllLineNumbers({
      lines: codeString.replace(/\n$/, "").split("\n"),
      style: numberStyle,
      startingLineNumber
    }));
  }
  function getEmWidthOfNumber(num) {
    return "".concat(num.toString().length, ".25em");
  }
  function getInlineLineNumber(lineNumber, inlineLineNumberStyle) {
    return {
      type: "element",
      tagName: "span",
      properties: {
        key: "line-number--".concat(lineNumber),
        className: ["comment", "linenumber", "react-syntax-highlighter-line-number"],
        style: inlineLineNumberStyle
      },
      children: [{
        type: "text",
        value: lineNumber
      }]
    };
  }
  function assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {
    var defaultLineNumberStyle = {
      display: "inline-block",
      minWidth: getEmWidthOfNumber(largestLineNumber),
      paddingRight: "1em",
      textAlign: "right",
      userSelect: "none"
    };
    var customLineNumberStyle = typeof lineNumberStyle === "function" ? lineNumberStyle(lineNumber) : lineNumberStyle;
    var assembledStyle = _objectSpread2(_objectSpread2({}, defaultLineNumberStyle), customLineNumberStyle);
    return assembledStyle;
  }
  function createLineElement(_ref3) {
    var children = _ref3.children, lineNumber = _ref3.lineNumber, lineNumberStyle = _ref3.lineNumberStyle, largestLineNumber = _ref3.largestLineNumber, showInlineLineNumbers = _ref3.showInlineLineNumbers, _ref3$lineProps = _ref3.lineProps, lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps, _ref3$className = _ref3.className, className = _ref3$className === void 0 ? [] : _ref3$className, showLineNumbers = _ref3.showLineNumbers, wrapLongLines = _ref3.wrapLongLines;
    var properties = typeof lineProps === "function" ? lineProps(lineNumber) : lineProps;
    properties["className"] = className;
    if (lineNumber && showInlineLineNumbers) {
      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);
      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));
    }
    if (wrapLongLines & showLineNumbers) {
      properties.style = _objectSpread2(_objectSpread2({}, properties.style), {}, {
        display: "flex"
      });
    }
    return {
      type: "element",
      tagName: "span",
      properties,
      children
    };
  }
  function flattenCodeTree(tree) {
    var className = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var newTree = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    for (var i = 0; i < tree.length; i++) {
      var node2 = tree[i];
      if (node2.type === "text") {
        newTree.push(createLineElement({
          children: [node2],
          className: _toConsumableArray(new Set(className))
        }));
      } else if (node2.children) {
        var classNames2 = className.concat(node2.properties.className);
        flattenCodeTree(node2.children, classNames2).forEach(function(i2) {
          return newTree.push(i2);
        });
      }
    }
    return newTree;
  }
  function processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {
    var _ref4;
    var tree = flattenCodeTree(codeTree.value);
    var newTree = [];
    var lastLineBreakIndex = -1;
    var index2 = 0;
    function createWrappedLine(children2, lineNumber2) {
      var className = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      return createLineElement({
        children: children2,
        lineNumber: lineNumber2,
        lineNumberStyle,
        largestLineNumber,
        showInlineLineNumbers,
        lineProps,
        className,
        showLineNumbers,
        wrapLongLines
      });
    }
    function createUnwrappedLine(children2, lineNumber2) {
      if (showLineNumbers && lineNumber2 && showInlineLineNumbers) {
        var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber2, largestLineNumber);
        children2.unshift(getInlineLineNumber(lineNumber2, inlineLineNumberStyle));
      }
      return children2;
    }
    function createLine(children2, lineNumber2) {
      var className = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      return wrapLines || className.length > 0 ? createWrappedLine(children2, lineNumber2, className) : createUnwrappedLine(children2, lineNumber2);
    }
    var _loop = function _loop2() {
      var node2 = tree[index2];
      var value = node2.children[0].value;
      var newLines = getNewLines(value);
      if (newLines) {
        var splitValue = value.split("\n");
        splitValue.forEach(function(text6, i) {
          var lineNumber2 = showLineNumbers && newTree.length + startingLineNumber;
          var newChild = {
            type: "text",
            value: "".concat(text6, "\n")
          };
          if (i === 0) {
            var _children = tree.slice(lastLineBreakIndex + 1, index2).concat(createLineElement({
              children: [newChild],
              className: node2.properties.className
            }));
            var _line = createLine(_children, lineNumber2);
            newTree.push(_line);
          } else if (i === splitValue.length - 1) {
            var stringChild = tree[index2 + 1] && tree[index2 + 1].children && tree[index2 + 1].children[0];
            var lastLineInPreviousSpan = {
              type: "text",
              value: "".concat(text6)
            };
            if (stringChild) {
              var newElem = createLineElement({
                children: [lastLineInPreviousSpan],
                className: node2.properties.className
              });
              tree.splice(index2 + 1, 0, newElem);
            } else {
              var _children2 = [lastLineInPreviousSpan];
              var _line2 = createLine(_children2, lineNumber2, node2.properties.className);
              newTree.push(_line2);
            }
          } else {
            var _children3 = [newChild];
            var _line3 = createLine(_children3, lineNumber2, node2.properties.className);
            newTree.push(_line3);
          }
        });
        lastLineBreakIndex = index2;
      }
      index2++;
    };
    while (index2 < tree.length) {
      _loop();
    }
    if (lastLineBreakIndex !== tree.length - 1) {
      var children = tree.slice(lastLineBreakIndex + 1, tree.length);
      if (children && children.length) {
        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;
        var line = createLine(children, lineNumber);
        newTree.push(line);
      }
    }
    return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);
  }
  function defaultRenderer(_ref5) {
    var rows = _ref5.rows, stylesheet = _ref5.stylesheet, useInlineStyles = _ref5.useInlineStyles;
    return rows.map(function(node2, i) {
      return createElement8({
        node: node2,
        stylesheet,
        useInlineStyles,
        key: "code-segement".concat(i)
      });
    });
  }
  function isHighlightJs(astGenerator) {
    return astGenerator && typeof astGenerator.highlightAuto !== "undefined";
  }
  function getCodeTree(_ref6) {
    var astGenerator = _ref6.astGenerator, language = _ref6.language, code3 = _ref6.code, defaultCodeValue = _ref6.defaultCodeValue;
    if (isHighlightJs(astGenerator)) {
      var hasLanguage = checkForListedLanguage_default(astGenerator, language);
      if (language === "text") {
        return {
          value: defaultCodeValue,
          language: "text"
        };
      } else if (hasLanguage) {
        return astGenerator.highlight(language, code3);
      } else {
        return astGenerator.highlightAuto(code3);
      }
    }
    try {
      return language && language !== "text" ? {
        value: astGenerator.highlight(code3, language)
      } : {
        value: defaultCodeValue
      };
    } catch (e) {
      return {
        value: defaultCodeValue
      };
    }
  }
  function highlight_default(defaultAstGenerator, defaultStyle) {
    return function SyntaxHighlighter(_ref7) {
      var language = _ref7.language, children = _ref7.children, _ref7$style = _ref7.style, style2 = _ref7$style === void 0 ? defaultStyle : _ref7$style, _ref7$customStyle = _ref7.customStyle, customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle, _ref7$codeTagProps = _ref7.codeTagProps, codeTagProps = _ref7$codeTagProps === void 0 ? {
        className: language ? "language-".concat(language) : void 0,
        style: _objectSpread2(_objectSpread2({}, style2['code[class*="language-"]']), style2['code[class*="language-'.concat(language, '"]')])
      } : _ref7$codeTagProps, _ref7$useInlineStyles = _ref7.useInlineStyles, useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles, _ref7$showLineNumbers = _ref7.showLineNumbers, showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers, _ref7$showInlineLineN = _ref7.showInlineLineNumbers, showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN, _ref7$startingLineNum = _ref7.startingLineNumber, startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum, lineNumberContainerStyle = _ref7.lineNumberContainerStyle, _ref7$lineNumberStyle = _ref7.lineNumberStyle, lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle, wrapLines = _ref7.wrapLines, _ref7$wrapLongLines = _ref7.wrapLongLines, wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines, _ref7$lineProps = _ref7.lineProps, lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps, renderer = _ref7.renderer, _ref7$PreTag = _ref7.PreTag, PreTag = _ref7$PreTag === void 0 ? "pre" : _ref7$PreTag, _ref7$CodeTag = _ref7.CodeTag, CodeTag = _ref7$CodeTag === void 0 ? "code" : _ref7$CodeTag, _ref7$code = _ref7.code, code3 = _ref7$code === void 0 ? (Array.isArray(children) ? children[0] : children) || "" : _ref7$code, astGenerator = _ref7.astGenerator, rest = _objectWithoutProperties(_ref7, _excluded);
      astGenerator = astGenerator || defaultAstGenerator;
      var allLineNumbers = showLineNumbers ? /* @__PURE__ */ import_react67.default.createElement(AllLineNumbers, {
        containerStyle: lineNumberContainerStyle,
        codeStyle: codeTagProps.style || {},
        numberStyle: lineNumberStyle,
        startingLineNumber,
        codeString: code3
      }) : null;
      var defaultPreStyle = style2.hljs || style2['pre[class*="language-"]'] || {
        backgroundColor: "#fff"
      };
      var generatorClassName = isHighlightJs(astGenerator) ? "hljs" : "prismjs";
      var preProps = useInlineStyles ? Object.assign({}, rest, {
        style: Object.assign({}, defaultPreStyle, customStyle)
      }) : Object.assign({}, rest, {
        className: rest.className ? "".concat(generatorClassName, " ").concat(rest.className) : generatorClassName,
        style: Object.assign({}, customStyle)
      });
      if (wrapLongLines) {
        codeTagProps.style = _objectSpread2(_objectSpread2({}, codeTagProps.style), {}, {
          whiteSpace: "pre-wrap"
        });
      } else {
        codeTagProps.style = _objectSpread2(_objectSpread2({}, codeTagProps.style), {}, {
          whiteSpace: "pre"
        });
      }
      if (!astGenerator) {
        return /* @__PURE__ */ import_react67.default.createElement(PreTag, preProps, allLineNumbers, /* @__PURE__ */ import_react67.default.createElement(CodeTag, codeTagProps, code3));
      }
      if (wrapLines === void 0 && renderer || wrapLongLines)
        wrapLines = true;
      renderer = renderer || defaultRenderer;
      var defaultCodeValue = [{
        type: "text",
        value: code3
      }];
      var codeTree = getCodeTree({
        astGenerator,
        language,
        code: code3,
        defaultCodeValue
      });
      if (codeTree.language === null) {
        codeTree.value = defaultCodeValue;
      }
      var largestLineNumber = codeTree.value.length + startingLineNumber;
      var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);
      return /* @__PURE__ */ import_react67.default.createElement(PreTag, preProps, /* @__PURE__ */ import_react67.default.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({
        rows,
        stylesheet: style2,
        useInlineStyles
      })));
    };
  }

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/languages/prism/supported-languages.js
  var supported_languages_default = ["abap", "abnf", "actionscript", "ada", "agda", "al", "antlr4", "apacheconf", "apex", "apl", "applescript", "aql", "arduino", "arff", "asciidoc", "asm6502", "asmatmel", "aspnet", "autohotkey", "autoit", "avisynth", "avro-idl", "bash", "basic", "batch", "bbcode", "bicep", "birb", "bison", "bnf", "brainfuck", "brightscript", "bro", "bsl", "c", "cfscript", "chaiscript", "cil", "clike", "clojure", "cmake", "cobol", "coffeescript", "concurnas", "coq", "cpp", "crystal", "csharp", "cshtml", "csp", "css-extras", "css", "csv", "cypher", "d", "dart", "dataweave", "dax", "dhall", "diff", "django", "dns-zone-file", "docker", "dot", "ebnf", "editorconfig", "eiffel", "ejs", "elixir", "elm", "erb", "erlang", "etlua", "excel-formula", "factor", "false", "firestore-security-rules", "flow", "fortran", "fsharp", "ftl", "gap", "gcode", "gdscript", "gedcom", "gherkin", "git", "glsl", "gml", "gn", "go-module", "go", "graphql", "groovy", "haml", "handlebars", "haskell", "haxe", "hcl", "hlsl", "hoon", "hpkp", "hsts", "http", "ichigojam", "icon", "icu-message-format", "idris", "iecst", "ignore", "inform7", "ini", "io", "j", "java", "javadoc", "javadoclike", "javascript", "javastacktrace", "jexl", "jolie", "jq", "js-extras", "js-templates", "jsdoc", "json", "json5", "jsonp", "jsstacktrace", "jsx", "julia", "keepalived", "keyman", "kotlin", "kumir", "kusto", "latex", "latte", "less", "lilypond", "liquid", "lisp", "livescript", "llvm", "log", "lolcode", "lua", "magma", "makefile", "markdown", "markup-templating", "markup", "matlab", "maxscript", "mel", "mermaid", "mizar", "mongodb", "monkey", "moonscript", "n1ql", "n4js", "nand2tetris-hdl", "naniscript", "nasm", "neon", "nevod", "nginx", "nim", "nix", "nsis", "objectivec", "ocaml", "opencl", "openqasm", "oz", "parigp", "parser", "pascal", "pascaligo", "pcaxis", "peoplecode", "perl", "php-extras", "php", "phpdoc", "plsql", "powerquery", "powershell", "processing", "prolog", "promql", "properties", "protobuf", "psl", "pug", "puppet", "pure", "purebasic", "purescript", "python", "q", "qml", "qore", "qsharp", "r", "racket", "reason", "regex", "rego", "renpy", "rest", "rip", "roboconf", "robotframework", "ruby", "rust", "sas", "sass", "scala", "scheme", "scss", "shell-session", "smali", "smalltalk", "smarty", "sml", "solidity", "solution-file", "soy", "sparql", "splunk-spl", "sqf", "sql", "squirrel", "stan", "stylus", "swift", "systemd", "t4-cs", "t4-templating", "t4-vb", "tap", "tcl", "textile", "toml", "tremor", "tsx", "tt2", "turtle", "twig", "typescript", "typoscript", "unrealscript", "uorazor", "uri", "v", "vala", "vbnet", "velocity", "verilog", "vhdl", "vim", "visual-basic", "warpscript", "wasm", "web-idl", "wiki", "wolfram", "wren", "xeora", "xml-doc", "xojo", "xquery", "yaml", "yang", "zig"];

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/styles/prism/prism.js
  var prism_default = {
    'code[class*="language-"]': {
      "color": "black",
      "background": "none",
      "textShadow": "0 1px white",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "textAlign": "left",
      "whiteSpace": "pre",
      "wordSpacing": "normal",
      "wordBreak": "normal",
      "wordWrap": "normal",
      "lineHeight": "1.5",
      "MozTabSize": "4",
      "OTabSize": "4",
      "tabSize": "4",
      "WebkitHyphens": "none",
      "MozHyphens": "none",
      "msHyphens": "none",
      "hyphens": "none"
    },
    'pre[class*="language-"]': {
      "color": "black",
      "background": "#f5f2f0",
      "textShadow": "0 1px white",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "textAlign": "left",
      "whiteSpace": "pre",
      "wordSpacing": "normal",
      "wordBreak": "normal",
      "wordWrap": "normal",
      "lineHeight": "1.5",
      "MozTabSize": "4",
      "OTabSize": "4",
      "tabSize": "4",
      "WebkitHyphens": "none",
      "MozHyphens": "none",
      "msHyphens": "none",
      "hyphens": "none",
      "padding": "1em",
      "margin": ".5em 0",
      "overflow": "auto"
    },
    'pre[class*="language-"]::-moz-selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'pre[class*="language-"] ::-moz-selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'code[class*="language-"]::-moz-selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'code[class*="language-"] ::-moz-selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'pre[class*="language-"]::selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'pre[class*="language-"] ::selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'code[class*="language-"]::selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    'code[class*="language-"] ::selection': {
      "textShadow": "none",
      "background": "#b3d4fc"
    },
    ':not(pre) > code[class*="language-"]': {
      "background": "#f5f2f0",
      "padding": ".1em",
      "borderRadius": ".3em",
      "whiteSpace": "normal"
    },
    "comment": {
      "color": "slategray"
    },
    "prolog": {
      "color": "slategray"
    },
    "doctype": {
      "color": "slategray"
    },
    "cdata": {
      "color": "slategray"
    },
    "punctuation": {
      "color": "#999"
    },
    "namespace": {
      "Opacity": ".7"
    },
    "property": {
      "color": "#905"
    },
    "tag": {
      "color": "#905"
    },
    "boolean": {
      "color": "#905"
    },
    "number": {
      "color": "#905"
    },
    "constant": {
      "color": "#905"
    },
    "symbol": {
      "color": "#905"
    },
    "deleted": {
      "color": "#905"
    },
    "selector": {
      "color": "#690"
    },
    "attr-name": {
      "color": "#690"
    },
    "string": {
      "color": "#690"
    },
    "char": {
      "color": "#690"
    },
    "builtin": {
      "color": "#690"
    },
    "inserted": {
      "color": "#690"
    },
    "operator": {
      "color": "#9a6e3a",
      "background": "hsla(0, 0%, 100%, .5)"
    },
    "entity": {
      "color": "#9a6e3a",
      "background": "hsla(0, 0%, 100%, .5)",
      "cursor": "help"
    },
    "url": {
      "color": "#9a6e3a",
      "background": "hsla(0, 0%, 100%, .5)"
    },
    ".language-css .token.string": {
      "color": "#9a6e3a",
      "background": "hsla(0, 0%, 100%, .5)"
    },
    ".style .token.string": {
      "color": "#9a6e3a",
      "background": "hsla(0, 0%, 100%, .5)"
    },
    "atrule": {
      "color": "#07a"
    },
    "attr-value": {
      "color": "#07a"
    },
    "keyword": {
      "color": "#07a"
    },
    "function": {
      "color": "#DD4A68"
    },
    "class-name": {
      "color": "#DD4A68"
    },
    "regex": {
      "color": "#e90"
    },
    "important": {
      "color": "#e90",
      "fontWeight": "bold"
    },
    "variable": {
      "color": "#e90"
    },
    "bold": {
      "fontWeight": "bold"
    },
    "italic": {
      "fontStyle": "italic"
    }
  };

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/prism.js
  var import_refractor = __toESM(require_refractor());
  var highlighter = highlight_default(import_refractor.default, prism_default);
  highlighter.supportedLanguages = supported_languages_default;
  var prism_default2 = highlighter;

  // ../ecopan_bot/node_modules/react-syntax-highlighter/dist/esm/styles/prism/atom-dark.js
  var atom_dark_default = {
    'code[class*="language-"]': {
      "color": "#c5c8c6",
      "textShadow": "0 1px rgba(0, 0, 0, 0.3)",
      "fontFamily": "Inconsolata, Monaco, Consolas, 'Courier New', Courier, monospace",
      "direction": "ltr",
      "textAlign": "left",
      "whiteSpace": "pre",
      "wordSpacing": "normal",
      "wordBreak": "normal",
      "lineHeight": "1.5",
      "MozTabSize": "4",
      "OTabSize": "4",
      "tabSize": "4",
      "WebkitHyphens": "none",
      "MozHyphens": "none",
      "msHyphens": "none",
      "hyphens": "none"
    },
    'pre[class*="language-"]': {
      "color": "#c5c8c6",
      "textShadow": "0 1px rgba(0, 0, 0, 0.3)",
      "fontFamily": "Inconsolata, Monaco, Consolas, 'Courier New', Courier, monospace",
      "direction": "ltr",
      "textAlign": "left",
      "whiteSpace": "pre",
      "wordSpacing": "normal",
      "wordBreak": "normal",
      "lineHeight": "1.5",
      "MozTabSize": "4",
      "OTabSize": "4",
      "tabSize": "4",
      "WebkitHyphens": "none",
      "MozHyphens": "none",
      "msHyphens": "none",
      "hyphens": "none",
      "padding": "1em",
      "margin": ".5em 0",
      "overflow": "auto",
      "borderRadius": "0.3em",
      "background": "#1d1f21"
    },
    ':not(pre) > code[class*="language-"]': {
      "background": "#1d1f21",
      "padding": ".1em",
      "borderRadius": ".3em"
    },
    "comment": {
      "color": "#7C7C7C"
    },
    "prolog": {
      "color": "#7C7C7C"
    },
    "doctype": {
      "color": "#7C7C7C"
    },
    "cdata": {
      "color": "#7C7C7C"
    },
    "punctuation": {
      "color": "#c5c8c6"
    },
    ".namespace": {
      "Opacity": ".7"
    },
    "property": {
      "color": "#96CBFE"
    },
    "keyword": {
      "color": "#96CBFE"
    },
    "tag": {
      "color": "#96CBFE"
    },
    "class-name": {
      "color": "#FFFFB6",
      "textDecoration": "underline"
    },
    "boolean": {
      "color": "#99CC99"
    },
    "constant": {
      "color": "#99CC99"
    },
    "symbol": {
      "color": "#f92672"
    },
    "deleted": {
      "color": "#f92672"
    },
    "number": {
      "color": "#FF73FD"
    },
    "selector": {
      "color": "#A8FF60"
    },
    "attr-name": {
      "color": "#A8FF60"
    },
    "string": {
      "color": "#A8FF60"
    },
    "char": {
      "color": "#A8FF60"
    },
    "builtin": {
      "color": "#A8FF60"
    },
    "inserted": {
      "color": "#A8FF60"
    },
    "variable": {
      "color": "#C6C5FE"
    },
    "operator": {
      "color": "#EDEDED"
    },
    "entity": {
      "color": "#FFFFB6",
      "cursor": "help"
    },
    "url": {
      "color": "#96CBFE"
    },
    ".language-css .token.string": {
      "color": "#87C38A"
    },
    ".style .token.string": {
      "color": "#87C38A"
    },
    "atrule": {
      "color": "#F9EE98"
    },
    "attr-value": {
      "color": "#F9EE98"
    },
    "function": {
      "color": "#DAD085"
    },
    "regex": {
      "color": "#E9C062"
    },
    "important": {
      "color": "#fd971f",
      "fontWeight": "bold"
    },
    "bold": {
      "fontWeight": "bold"
    },
    "italic": {
      "fontStyle": "italic"
    }
  };

  // ../ecopan_bot/ecopan_bot/public/js/components/message/CopyToClipboardButton.jsx
  var React11 = __toESM(require_react());
  var CopyToClipboardButton = ({ contentToCopy }) => {
    const toast = useToast();
    const handleCopyToClipboardClick = async () => {
      await navigator.clipboard.writeText(contentToCopy);
      toast({
        title: "Copied to clipboard",
        status: "success",
        position: "bottom-right"
      });
    };
    return /* @__PURE__ */ React11.createElement(IconButton, {
      pos: "absolute",
      top: "1.5",
      right: "1.5",
      size: "xs",
      opacity: { base: "1", sm: "0" },
      _groupHover: { opacity: 1 },
      variant: "outline",
      colorScheme: "whiteAlpha",
      "aria-label": "Copy to Clipboard",
      icon: /* @__PURE__ */ React11.createElement(Clipboard, {
        size: "16"
      }),
      onClick: handleCopyToClipboardClick
    });
  };
  var CopyToClipboardButton_default = CopyToClipboardButton;

  // ../ecopan_bot/ecopan_bot/public/js/components/message/MessageRenderer.jsx
  var MessageRenderer = ({ content: content3 }) => {
    return /* @__PURE__ */ React12.createElement(ReactMarkdown, {
      children: content3,
      components: markdownRenderComponentOverrides,
      remarkPlugins: [remarkGfm],
      rehypePlugins: [rehypeRaw]
    });
  };
  var markdownRenderComponentOverrides = {
    p: (_a7) => {
      var _b5 = _a7, { node: node2 } = _b5, props = __objRest(_b5, ["node"]);
      return /* @__PURE__ */ React12.createElement(Text, __spreadValues({
        color: "white",
        mb: "0"
      }, props));
    },
    h1: (_c3) => {
      var _d3 = _c3, { node: node2 } = _d3, props = __objRest(_d3, ["node"]);
      return /* @__PURE__ */ React12.createElement(Heading, __spreadValues({
        color: "white",
        as: "h1"
      }, props));
    },
    h2: (_e3) => {
      var _f3 = _e3, { node: node2 } = _f3, props = __objRest(_f3, ["node"]);
      return /* @__PURE__ */ React12.createElement(Heading, __spreadValues({
        color: "white",
        as: "h2"
      }, props));
    },
    h3: (_g3) => {
      var _h3 = _g3, { node: node2 } = _h3, props = __objRest(_h3, ["node"]);
      return /* @__PURE__ */ React12.createElement(Heading, __spreadValues({
        color: "white",
        as: "h3"
      }, props));
    },
    h4: (_i) => {
      var _j = _i, { node: node2 } = _j, props = __objRest(_j, ["node"]);
      return /* @__PURE__ */ React12.createElement(Heading, __spreadValues({
        color: "white",
        as: "h4"
      }, props));
    },
    li: (_k) => {
      var _l = _k, { node: node2 } = _l, props = __objRest(_l, ["node"]);
      return /* @__PURE__ */ React12.createElement(ListItem, __spreadValues({
        color: "white"
      }, props));
    },
    ul: (_m) => {
      var _n = _m, { node: node2 } = _n, props = __objRest(_n, ["node"]);
      return /* @__PURE__ */ React12.createElement(UnorderedList, __spreadValues({}, props));
    },
    ol: (_o) => {
      var _p = _o, { node: node2 } = _p, props = __objRest(_p, ["node"]);
      return /* @__PURE__ */ React12.createElement(OrderedList, __spreadValues({}, props));
    },
    table: (_q) => {
      var _r = _q, { node: node2 } = _r, props = __objRest(_r, ["node"]);
      return /* @__PURE__ */ React12.createElement(TableContainer, {
        bg: "white",
        mt: "1.5",
        rounded: "sm"
      }, /* @__PURE__ */ React12.createElement(Table, __spreadValues({
        p: "1",
        size: "sm",
        variant: "simple"
      }, props)));
    },
    img: (_s) => {
      var _t = _s, { node: node2 } = _t, props = __objRest(_t, ["node"]);
      return /* @__PURE__ */ React12.createElement(Image2, __spreadValues({
        rounded: "sm",
        boxSize: "32",
        objectFit: "cover"
      }, props));
    },
    thead: (_u) => {
      var _v = _u, { node: node2 } = _v, props = __objRest(_v, ["node"]);
      return /* @__PURE__ */ React12.createElement(Thead, __spreadValues({}, props));
    },
    tbody: (_w) => {
      var _x = _w, { node: node2 } = _x, props = __objRest(_x, ["node"]);
      return /* @__PURE__ */ React12.createElement(Tbody, __spreadValues({}, props));
    },
    tr: (_y) => {
      var _z = _y, { node: node2 } = _z, props = __objRest(_z, ["node"]);
      return /* @__PURE__ */ React12.createElement(Tr, __spreadValues({}, props));
    },
    td: (_A) => {
      var _B = _A, { node: node2 } = _B, props = __objRest(_B, ["node"]);
      return /* @__PURE__ */ React12.createElement(Td, __spreadValues({}, props));
    },
    th: (_C) => {
      var _D = _C, { node: node2 } = _D, props = __objRest(_D, ["node"]);
      return /* @__PURE__ */ React12.createElement(Th, __spreadValues({}, props));
    },
    code(_E) {
      var _F = _E, { node: node2, inline, className, children } = _F, props = __objRest(_F, ["node", "inline", "className", "children"]);
      const match = /language-(\w+)/.exec(className || "");
      const codeString = String(children).replace(/\n$/, "");
      return !inline && match ? /* @__PURE__ */ React12.createElement(prism_default2, __spreadProps(__spreadValues({}, props), {
        children: codeString,
        style: atom_dark_default,
        language: match[1],
        PreTag: (props2) => /* @__PURE__ */ React12.createElement(PreWithClickToCopyButton, __spreadValues({
          codeString
        }, props2))
      })) : /* @__PURE__ */ React12.createElement("code", __spreadProps(__spreadValues({}, props), {
        className
      }), children);
    }
  };
  var PreWithClickToCopyButton = (props) => {
    const _a7 = props, { codeString } = _a7, otherProps = __objRest(_a7, ["codeString"]);
    return /* @__PURE__ */ React12.createElement("div", __spreadProps(__spreadValues({
      role: "group"
    }, otherProps), {
      style: __spreadProps(__spreadValues({}, otherProps.style), { position: "relative" })
    }), otherProps.children, /* @__PURE__ */ React12.createElement(CopyToClipboardButton_default, {
      contentToCopy: codeString
    }));
  };
  var MessageRenderer_default = MessageRenderer;

  // ../ecopan_bot/ecopan_bot/public/js/components/message/MessageLoadingSkeletonText.jsx
  var React13 = __toESM(require_react());
  var MessageLoadingSkeletonText = () => {
    return /* @__PURE__ */ React13.createElement(SkeletonText, {
      maxWidth: "100%",
      width: "20",
      noOfLines: 1,
      spacing: "4",
      skeletonHeight: "2"
    });
  };
  var MessageLoadingSkeletonText_default = MessageLoadingSkeletonText;

  // ../ecopan_bot/ecopan_bot/public/js/components/message/Message.jsx
  var Message = ({ message }) => {
    const fromAI = message.from === "ai";
    return /* @__PURE__ */ React14.createElement(MessageBubble_default, {
      key: message.content,
      fromAI
    }, !message.isLoading ? /* @__PURE__ */ React14.createElement(MessageRenderer_default, {
      content: message.content
    }) : /* @__PURE__ */ React14.createElement(MessageLoadingSkeletonText_default, null));
  };
  var Message_default = Message;

  // ../ecopan_bot/ecopan_bot/public/js/PublicChatView.jsx
  var PublicChatView = ({ sessionID }) => {
    const toast = useToast();
    const [promptMessage, setPromptMessage] = (0, import_react72.useState)("");
    const [messages, setMessages] = (0, import_react72.useState)([]);
    (0, import_react72.useEffect)(() => {
      const storedMessages = localStorage.getItem(`ecopanbot_messages_${sessionID}`);
      if (storedMessages) {
        setMessages(JSON.parse(storedMessages));
      } else {
        setMessages([{
          from: "ai",
          isLoading: false,
          content: "Ciao! Sono ecopanBot. Come posso aiutarti oggi?"
        }]);
      }
    }, [sessionID]);
    (0, import_react72.useEffect)(() => {
      if (messages.length > 0) {
        localStorage.setItem(`ecopanbot_messages_${sessionID}`, JSON.stringify(messages));
      }
    }, [messages, sessionID]);
    const handleSendMessage = () => {
      if (!promptMessage.trim().length) {
        return;
      }
      setMessages((old) => [
        ...old,
        { from: "human", content: promptMessage, isLoading: false },
        { from: "ai", content: "", isLoading: true }
      ]);
      setPromptMessage("");
      fetch("/api/method/ecopan_bot.api.get_chatbot_response", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Accept": "application/json"
        },
        body: JSON.stringify({
          prompt_message: promptMessage,
          session_id: sessionID
        })
      }).then((response) => response.json()).then((data) => {
        setMessages((old) => {
          const updated = [...old];
          updated[updated.length - 1] = {
            from: "ai",
            content: data.message,
            isLoading: false
          };
          return updated;
        });
      }).catch((e) => {
        console.error(e);
        setMessages((old) => {
          const updated = [...old];
          updated[updated.length - 1] = {
            from: "ai",
            content: "Mi dispiace, si \xE8 verificato un errore. Riprova pi\xF9 tardi.",
            isLoading: false
          };
          return updated;
        });
        toast({
          title: "Errore di comunicazione",
          description: "Non \xE8 stato possibile ottenere una risposta dal server.",
          status: "error",
          position: "bottom-right",
          duration: 5e3
        });
      });
    };
    return /* @__PURE__ */ import_react72.default.createElement(Flex, {
      direction: "column",
      height: "100%",
      width: "100%",
      maxWidth: "4xl",
      mx: "auto"
    }, /* @__PURE__ */ import_react72.default.createElement(Heading, {
      as: "h1",
      size: "lg",
      mb: 4,
      textColor: "gray.700"
    }, "ecopanBot - Assistente Virtuale"), /* @__PURE__ */ import_react72.default.createElement(Box, {
      width: "100%",
      height: "70%",
      overflowY: "scroll",
      shadow: "md",
      rounded: "md",
      backgroundColor: "white",
      mb: 4
    }, /* @__PURE__ */ import_react72.default.createElement(VStack, {
      spacing: 2,
      align: "stretch",
      p: 4
    }, messages.map((message, index2) => /* @__PURE__ */ import_react72.default.createElement(Message_default, {
      key: `${index2}-${Date.now()}`,
      message
    })))), /* @__PURE__ */ import_react72.default.createElement(Card, null, /* @__PURE__ */ import_react72.default.createElement(CardBody, null, /* @__PURE__ */ import_react72.default.createElement(Flex, {
      gap: 3,
      alignItems: "start"
    }, /* @__PURE__ */ import_react72.default.createElement(Avatar, {
      name: "Utente",
      size: "sm"
    }), /* @__PURE__ */ import_react72.default.createElement(Textarea, {
      value: promptMessage,
      onChange: (event) => setPromptMessage(event.target.value),
      onKeyDown: (event) => {
        if (event.code === "Enter" && !event.shiftKey && promptMessage) {
          event.preventDefault();
          handleSendMessage();
        }
      },
      placeholder: "Scrivi il tuo messaggio qui...",
      resize: "none"
    }), /* @__PURE__ */ import_react72.default.createElement(IconButton, {
      "aria-label": "Invia messaggio",
      icon: /* @__PURE__ */ import_react72.default.createElement(Send, {
        height: 16
      }),
      onClick: handleSendMessage,
      isDisabled: !promptMessage.trim().length
    })))));
  };
  var PublicChatView_default = PublicChatView;

  // ../ecopan_bot/ecopan_bot/public/js/PublicChatUI.jsx
  var linkedinTheme = extendTheme(
    withDefaultColorScheme({ colorScheme: "linkedin" })
  );
  var PublicChatUI = class {
    constructor({ wrapper }) {
      this.wrapper = wrapper;
      this.init();
    }
    init() {
      const sessionID = localStorage.getItem("ecopanbot_session_id") || nanoid();
      localStorage.setItem("ecopanbot_session_id", sessionID);
      const root3 = (0, import_client.createRoot)(this.wrapper);
      root3.render(
        /* @__PURE__ */ React16.createElement(ChakraProvider2, {
          theme: linkedinTheme
        }, /* @__PURE__ */ React16.createElement(PublicChatView_default, {
          sessionID
        }))
      );
    }
  };
  frappe.provide("ecopanbot.public");
  ecopanbot.public.PublicChatUI = PublicChatUI;
  var PublicChatUI_default = PublicChatUI;

  // ../ecopan_bot/ecopan_bot/public/js/ecopanbot_public.bundle.js
  var ecopanbot_public_bundle_default = PublicChatUI_default;
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/**
 * Prism: Lightweight, robust, elegant syntax highlighting
 *
 * @license MIT <https://opensource.org/licenses/MIT>
 * @author Lea Verou <https://lea.verou.me>
 * @namespace
 * @public
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=ecopanbot_public.bundle.Q6HPXNLE.js.map
